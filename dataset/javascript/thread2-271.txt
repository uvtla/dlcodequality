```javascript
<function triggerWidgetEvent>
function(type, originalEvent) {
  var ctx = this._makeHookContext(this, originalEvent),
  res = this.widget._trigger(type, originalEvent, ctx);
  
  if(res !== false && ctx.result !== undefined){
	return ctx.result;
  }
  return res;
}
</function triggerWidgetEvent>

<function meanAbsolutePercentageError>
function meanAbsolutePercentageError(actuals, estimates) {
  const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));
  const absErrorPercent = errors.map((e, i) => e / actuals[ i ]);
  return avg$2(absErrorPercent);
}
</function meanAbsolutePercentageError>

<function doesIntersect>
function doesIntersect (rect1, rect2) {
  let intersectLeftRight;
  let intersectTopBottom;
  
  const rect1Points = rectToPoints(rect1);
  <parseRectanglePoints>
  const rect2Points = rectToPoints(rect2);
  </parseRectanglePoints>
  
  <calculateIntersectionLeftRight>
  if (rect1.width >= 0) {
    if (rect2.width >= 0) {
      intersectLeftRight = !((rect1Points.bottomRight.x <= rect2Points.topLeft.x) || (rect2Points.bottomRight.x <= rect1Points.topLeft.x));
    } else {
      intersectLeftRight = !((rect1Points.bottomRight.x <= rect2Points.bottomRight.x) || (rect2Points.topLeft.x <= rect1Points.topLeft.x));
    }
  } else if (rect2.width >= 0) {
    intersectLeftRight = !((rect1Points.topLeft.x <= rect2Points.topLeft.x) || (rect2Points.bottomRight.x <= rect1Points.bottomRight.x));
  } else {
    intersectLeftRight = !((rect1Points.topLeft.x <= rect2Points.bottomRight.x) || (rect2Points.topLeft.x <= rect1Points.bottomRight.x));
  }
  </calculateIntersectionLeftRight>
  
  <calculateIntersectionTopBottom>
  if (rect1.height >= 0) {
    if (rect2.height >= 0) {
      intersectTopBottom = !((rect1Points.bottomRight.y <= rect2Points.topLeft.y) || (rect2Points.bottomRight.y <= rect1Points.topLeft.y));
    } else {
      intersectTopBottom = !((rect1Points.bottomRight.y <= rect2Points.bottomRight.y) || (rect2Points.topLeft.y <= rect1Points.topLeft.y));
    }
  } else if (rect2.height >= 0) {
    intersectTopBottom = !((rect1Points.topLeft.y <= rect2Points.topLeft.y) || (rect2Points.bottomRight.y <= rect1Points.bottomRight.y));
  } else {
    intersectTopBottom = !((rect1Points.topLeft.y <= rect2Points.bottomRight.y) || (rect2Points.top <= rect1Points.bottomRight.y));
  }
  </calculateIntersectionTopBottom>
  
  return intersectLeftRight && intersectTopBottom;
}
</function doesIntersect>

<function modifyRequestWithFilters>
function (unused, args) {
  var filters = args.filters;
  var request = args.request;
  var curFilter;
  
  <initializeDelay>
  request.delay = 0;
  </initializeDelay>
  
  <applyFilters>
  if (args.isResponse) {
    for (var i = args.nbFilters - 1; i >= 0; i--) {
	  curFilter = filters[i].obj;
	  if (curFilter) {
	    curFilter.__onResponse(request);
	  }
	}
  } else {
    for (var i = 0, l = args.nbFilters; i < l; i++) {
	  curFilter = filters[i].obj;
	  if (curFilter) {
	    curFilter.__onRequest(request);
	  }
	}
  }
  </applyFilters>
  
  <handleDelayedRequest>
  if (request.delay > 0) {
    ariaCoreTimer.addCallback({
	  fn : this._afterDelay,
	  args : args,
	  scope : this,
	  delay : request.delay
	});
  } else {
    this._afterDelay(args);
  }
  </handleDelayedRequest>
}
</function modifyRequestWithFilters>

<function buildFieldContext>
function buildFieldContext(
  fieldType: string,
  {
	typeName,
	fieldName,
	argsStr,
	ReturnTypeName,
	query
  }: {
	typeName: string,
	fieldName: string,
	argsStr: string,
	ReturnTypeName: string,
	query: string
  },
  codeType: string
): any {
  
  <prepareArgumentFields>
  let argFields = (' ' + argsStr).slice(1);
  </prepareArgumentFields>
  
  <prepareArgumentStringWithDefaults>
  const argsWithDefaultsStr = argsStr
	.replace('lastCreatedAt', 'lastCreatedAt = 0')
	.replace('limit', 'limit = 10');
  </prepareArgumentStringWithDefaults>
  
  <modifyArgumentsForPagination>
  if (fieldType === PAGINATED && argFields !== '') {
	argFields = argFields.replace('{ ', '{ baseQuery, ');
  }
  </modifyArgumentsForPagination>
  
  return {
	fieldType: fieldType || '',
	fieldName: fieldName || '',
	typeName: typeName || '',
	TypeName: ucFirst(typeName) || '',
	ReturnTypeName: ReturnTypeName || '',
	argsString: argsWithDefaultsStr || '',
	argsFields: argFields || '',
	query: query || ''
  };
}
</function buildFieldContext>

<function validateRequestObject>
function (requestObject, jsonData, cb) {
  try {
	<normalizeRequestObject>
    ariaCoreJsonValidator.normalize({
	  json : requestObject,
	  beanName : "aria.modules.RequestBeans.RequestObject"
	}, true);
	</normalizeRequestObject>
  } catch (ex) {
	<logInvalidRequestObject>
    this.$logError(this.INVALID_REQUEST_OBJECT, null, requestObject);
    return this.DISCARD_STATUS;
	</logInvalidRequestObject>
  }
  
  <setDefaultActionQueuing>
  if (!requestObject.actionQueuing) {
    requestObject.actionQueuing = this.defaultActionQueuing;
  }
  </setDefaultActionQueuing>
  
  <setDefaultSession>
  if (!requestObject.session) {
    requestObject.session = this.session;
  }
  </setDefaultSession>
  
  <setDefaultRequestHandler>
  if (!requestObject.requestHandler) {
	requestObject.requestHandler = this._requestHandler;
  }
  </setDefaultRequestHandler>
  
  return requestObject.actionQueuing.pushRequest(requestObject, jsonData, cb);
}
</function validateRequestObject>

<function defineTriePath>
function(path, handler) {
  <getNodeFromTrie>
  var node = trie.define(path)[0];
  </getNodeFromTrie>

  <validateHandler>
  if (typeof handler !== 'function') {
	throw new Error('invalid handler');
  }
  </validateHandler>

  node.handler = handler;
}
</function defineTriePath>

<function getStateGroup>
function getStateGroup(stateSummary){
  
  
  
  
  
  let result = -2 
  <classifyStateSummary>
  if(cloudFormationCodes.stackStatusCodes.includes(stateSummary)){
	result = 0
	if(cloudFormationCodes.terminalState_NotDeployed.includes(stateSummary)){
	  result = -1
	}else if(cloudFormationCodes.terminalState_Complete.includes(stateSummary)){
	  result = 1
	}else if(cloudFormationCodes.terminalState_Failed.includes(stateSummary)){
	  result = 2
	}
  }
  </classifyStateSummary>
  return result
}
</function getStateGroup>

<function WebClientConnection>
function WebClientConnection(options) {
  <constructProxyUrl>
  var url = window.location.host.split(':')[0];
  if (options && options.proxyUrl) {
	url = options.proxyUrl;
  }
  </constructProxyUrl>

  <createProxySocket>
  this.createProxySocket('http://' + url + ':8888');
  </createProxySocket>
  
  <initializeEventEmitter>
  EventEmitter.call(this);
  </initializeEventEmitter>
}
</function WebClientConnection>

<function setLeafletIconOptions>
function (imagePath) {
  <setIconOptions>
  this._setOptions('icon', _detectIconOptions, imagePath);
  </setIconOptions>
  <setShadowOptions>
  this._setOptions('shadow', _detectIconOptions, imagePath);
  </setShadowOptions>
  <setPopupOptions>
  this._setOptions('popup', _detectDivOverlayOptions);
  </setPopupOptions>
  <setTooltipOptions>
  this._setOptions('tooltip', _detectDivOverlayOptions);
  </setTooltipOptions>
  <initializeLeafletLayer>
  this._needsInit = false;
  </initializeLeafletLayer>
}
</function setLeafletIconOptions>
```