[["ElementConnectionData", "\nfunction ElementConnectionData(elementConnectionDataDict){\n  if(!(this instanceof ElementConnectionData))\n    return new ElementConnectionData(elementConnectionDataDict)\n\n  \n  <checkInputs>\n  checkType('MediaElement', 'elementConnectionDataDict.source', elementConnectionDataDict.source, {required: true});\n  checkType('MediaElement', 'elementConnectionDataDict.sink', elementConnectionDataDict.sink, {required: true});\n  checkType('MediaType', 'elementConnectionDataDict.type', elementConnectionDataDict.type, {required: true});\n  checkType('String', 'elementConnectionDataDict.sourceDescription', elementConnectionDataDict.sourceDescription, {required: true});\n  checkType('String', 'elementConnectionDataDict.sinkDescription', elementConnectionDataDict.sinkDescription, {required: true});\n  </checkInputs>\n\n  \n  ElementConnectionData.super_.call(this, elementConnectionDataDict)\n\n  \n  Object.defineProperties(this, {\n    source: {\n      writable: true,\n      enumerable: true,\n      value: elementConnectionDataDict.source\n    },\n    sink: {\n      writable: true,\n      enumerable: true,\n      value: elementConnectionDataDict.sink\n    },\n    type: {\n      writable: true,\n      enumerable: true,\n      value: elementConnectionDataDict.type\n    },\n    sourceDescription: {\n      writable: true,\n      enumerable: true,\n      value: elementConnectionDataDict.sourceDescription\n    },\n    sinkDescription: {\n      writable: true,\n      enumerable: true,\n      value: elementConnectionDataDict.sinkDescription\n    }\n  })\n}\n"], ["Suite", "\nfunction Suite(type, opts) {\n  Benchmark.Suite.call(this);\n\n  opts = opts || {};\n  this._type = type;\n  <parseType>\n  this._compatibleType = avro.parse(type.getSchema(), {\n    typeHook: typeHook,\n    wrapUnions: opts.wrapUnions\n  });\n  </parseType>\n  this._value = opts.value ? type.fromString(opts.value) : type.random();\n\n  <handleOptions>\n  Object.keys(opts).forEach(function (name) {\n    if (!name.indexOf('_')) {\n      return;\n    }\n    var fn = this['__' + name];\n    if (typeof fn == 'function') {\n      this.add(name, fn.call(this, opts[name])); \n    }\n  }, this);\n  </handleOptions>\n}\n"], ["Concept", "\nfunction Concept(concept) {\n  if (!(concept.prefLabel && concept.id && concept.type === 'Concept')) {\n    throw new Error('Invalid concept: \"' + concept.id + '\"');\n  }\n  this.id = concept.id;\n  this.prefLabel = concept.prefLabel;\n  this.altLabel = concept.altLabel;\n  this.hiddenLabel = concept.hiddenLabel;\n  this.definition = concept.definition;\n  this._topConceptOf = concept.topConceptOf;\n  this._partOfScheme = false;\n  this._originalConcept = concept;\n  this._broaderConcepts = [];\n  this._narrowerConcepts = [];\n  this._relatedConcepts = [];\n}\n"], ["processType", "\nfunction processType (item, entities, types) {\n  var type = _.find(types, { name: item })\n\n  var additionalTypes = []\n  \n  <defineAdditionalTypes>\n  var addPossibleTypes = typeName => {\n    var union = _.find(types, { name: typeName })\n    var possibleTypes = _.map(union.possibleTypes, 'name')\n\n    \n    additionalTypes = _.union(additionalTypes, possibleTypes, [typeName])\n  }\n  </defineAdditionalTypes>\n\n  <processFields>\n  var fields = _.map(type.fields, field => {\n    var obj = analyzeField.call(this, field)\n\n    if (\n      (obj.isUnionType && !this.theme.unions.hide) ||\n      (obj.isInterfaceType && !this.theme.interfaces.hide)\n    ) {\n      addPossibleTypes(obj.type)\n    }\n\n    \n    if (!this.theme.field.noargs) {\n      if (field.args && field.args.length) {\n        obj.args = _.map(field.args, analyzeField.bind(this))\n      }\n    }\n\n    return obj\n  })\n  </processFields>\n\n  <defineEntity>\n  entities[type.name] = {\n    name: type.name,\n    fields: fields,\n    isObjectType: true,\n    isInterfaceType: type.kind === 'INTERFACE',\n    isUnionType: type.kind === 'UNION',\n    possibleTypes: _.map(type.possibleTypes, 'name')\n  }\n  </defineEntity>\n\n  <computeLinkedItems>\n  var linkeditems = _.chain(fields)\n    .filter('isObjectType')\n    .map('type')\n    .union(additionalTypes)\n    .uniq()\n    .value()\n  </computeLinkedItems>\n\n  return linkeditems\n}\n"], ["process", "\nfunction process(advertiserData) {\n  var data = advertiserData.manufacturerSpecificData.data;\n  var cursor = 0;\n\n  \n  while(cursor < data.length) {\n    var appleType = data.substr(cursor,2);\n\n    <processAppleType>\n    switch(appleType) {\n      case '01':\n        return; \n      case '02':\n        cursor = ibeacon.process(advertiserData, cursor);\n        break;\n      case '05':\n        cursor = airdrop.process(advertiserData, cursor);\n        break;\n      case '07':\n        cursor = airpods.process(advertiserData, cursor);\n        break;\n      case '08':\n        cursor = service.process(advertiserData, cursor); \n        break;\n      case '09':\n        cursor = airplay.process(advertiserData, cursor); \n        break;\n      case '0a':\n        cursor = airplay.process(advertiserData, cursor);\n        break;\n      case '0b':\n        cursor = service.process(advertiserData, cursor); \n        break;\n      case '0c':\n        cursor = handoff.process(advertiserData, cursor);\n        break;\n      case '10':\n        cursor = nearby.process(advertiserData, cursor);\n        break;\n      default:\n        return; \n    }\n    </processAppleType>\n  }\n}\n"], ["handleClose", "\nfunction handleClose(mode) {\n        var targetIndex  = MainViewManager.findInWorkingSet(MainViewManager.ACTIVE_PANE, MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE)),\n            workingSetList = MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE),\n            start        = (mode === closeBelow) ? (targetIndex + 1) : 0,\n            end          = (mode === closeAbove) ? (targetIndex) : (workingSetList.length),\n            files        = [],\n            i;\n\n        <buildFileList>\n        for (i = start; i < end; i++) {\n            if ((mode === closeOthers && i !== targetIndex) || (mode !== closeOthers)) {\n                files.push(workingSetList[i]);\n            }\n        }\n        </buildFileList>\n\n        <closeFiles>\n        CommandManager.execute(Commands.FILE_CLOSE_LIST, {fileList: files});\n        </closeFiles>\n    }\n"], ["anonymous", "\nfunction (workout) {\n        var q = $q.defer();\n        <saveWorkout>\n        $window.plugins.healthkit.saveWorkout(workout,\n          function (success) {\n            q.resolve(success);\n          },\n          function (err) {\n            q.resolve(err);\n          }\n        );\n        </saveWorkout>\n        return q.promise;\n      }\n"], ["anonymous", "\nfunction (plus, minus) {\n    var out = {}, i;\n\n    <computeDifference>\n    for (i in plus) {\n      if (plus.hasOwnProperty(i) && plus[i] !== minus[i]) {\n        out[i] = plus[i];\n      }\n    }\n    </computeDifference>\n\n    return out;\n  }\n"], ["GameShell", "\nfunction GameShell() {\n  EventEmitter.call(this)\n  this._curKeyState  = new Array(keyNames.length)\n  this._pressCount   = new Array(keyNames.length)\n  this._releaseCount = new Array(keyNames.length)\n  \n  this._tickInterval = null\n  this._rafHandle = null\n  this._tickRate = 0\n  this._lastTick = hrtime()\n  this._frameTime = 0.0\n  this._paused = true\n  this._width = 0\n  this._height = 0\n  \n  this._wantFullscreen = false\n  this._wantPointerLock = false\n  this._fullscreenActive = false\n  this._pointerLockActive = false\n  \n  this._rafFunction = tickOrRender.bind(undefined, this, true)\n\n  this.preventDefaults = true\n  this.stopPropagation = false\n  \n  <initializeKeyStates>\n  for(var i=0; i<keyNames.length; ++i) {\n    this._curKeyState[i] = false\n    this._pressCount[i] = this._releaseCount[i] = 0\n  }\n  </initializeKeyStates>\n  \n  \n  this.element = null\n  this.bindings = {}\n  this.frameSkip = 100.0\n  this.tickCount = 0\n  this.frameCount = 0\n  this.startTime = hrtime()\n  this.tickTime = this._tickRate\n  this.frameTime = 10.0\n  this.stickyFullscreen = false\n  this.stickyPointerLock = false\n  \n  \n  this.scroll = [0,0,0]\n    \n  \n  this.mouseX = 0\n  this.mouseY = 0\n  this.prevMouseX = 0\n  this.prevMouseY = 0\n}\n"], ["toObject", "\nfunction toObject(input, obj) {\n    if (isString(input)) {\n        <convertStringToObject>\n        input = obj(input);\n        </convertStringToObject>\n    }\n    <validateInput>\n    if (typeof input !== 'object') {\n        throw new TypeError('Input must be an object or string.');\n    }\n    </validateInput>\n    return input;\n}\n"], "```"]