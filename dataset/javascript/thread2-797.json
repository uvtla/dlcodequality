[["constructObject", "function construct(ctor, args) {\n  <createEmptyObjectWithProto>\n  function F() {\n    return ctor.apply(this, args);\n  }\n  F.prototype = ctor.prototype;\n  </createEmptyObjectWithProto>\n  return new F();\n}\n"], ["calculateCoordinates", "function getCoords(ev) {\n  <initializeVariables>\n  var x, y, w, h, el;\n  </initializeVariables>\n\n  <pageCoordinatesCheck>\n  if (ev.pageX === null) return;\n  </pageCoordinatesCheck>\n\n  <computeElementRelativeXY>\n  x = ev.pageX;\n  y = ev.pageY;\n  el = self.element;\n  while (el !== document.documentElement) {\n    x -= el.offsetLeft;\n    y -= el.offsetTop;\n    el = el.parentNode;\n  }\n  </computeElementRelativeXY>\n\n  <calculateGridCoordinates>\n  w = self.element.clientWidth;\n  h = self.element.clientHeight;\n  x = ((x / w) * self.cols) | 0;\n  y = ((y / h) * self.rows) | 0;\n  </calculateGridCoordinates>\n\n  <clampCoordinatesWithinLimits>\n  if (x < 0) x = 0;\n  if (x > self.cols) x = self.cols;\n  if (y < 0) y = 0;\n  if (y > self.rows) y = self.rows;\n  </clampCoordinatesWithinLimits>\n\n  <offsetCoordinates>\n  x += 32;\n  y += 32;\n  </offsetCoordinates>\n\n  <returnCoordinateObject>\n  return {\n    x: x,\n    y: y,\n    down: ev.type === 'mousedown',\n    up: ev.type === 'mouseup',\n    wheel: ev.type === wheelEvent,\n    move: ev.type === 'mousemove'\n  };\n  </returnCoordinateObject>\n}\n"], ["moveFocus", "function moveFocusToIndex(idx, elements) {\n  <wrapIndexAround>\n  if (idx < 0) {\n    idx = elements.length - 1;\n  } else if (idx >= elements.length) {\n    idx = 0;\n  }\n  </wrapIndexAround>\n\n  <setElementFocus>\n  if (elements[idx]) {\n    elements[idx].focus();\n  }\n  </setElementFocus>\n\n  return idx;\n}\n"], ["createConditionalStructure", "function createCondition(match, thenBranch, elseBranch) {\n  <optimizationChecks>\n  if (thenBranch === MATCH && elseBranch === MISMATCH) {\n    return match;\n  }\n  if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {\n    return match;\n  }\n  if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {\n    thenBranch = match.then;\n    match = match.match;\n  }\n  </optimizationChecks>\n\n  <constructConditionalObject>\n  return {\n    type: 'If',\n    match: match,\n    then: thenBranch,\n    else: elseBranch\n  };\n  </constructConditionalObject>\n}\n"], ["readFileWithExceptionHandling", "function readFile(fileName) {\n  try {\n    <fileRead>\n    return read(fileName);\n    </fileRead>\n  } catch (e) {\n    <errorLogging>\n    print(fileName + ': ' + (e.message || e));\n    </errorLogging>\n    throw e;\n  }\n}\n"], ["removeActiveClassFromPanels", "function (panels) {\n  for (var j = 0; j < panels.length; j++) {\n    <removeClassFromPanel>\n    u.removeClass(panels[j], this._CssClasses.IS_ACTIVE);\n    </removeClassFromPanel>\n  }\n}\n"], ["getOptionWithDefault", "function getOption(opts, key, def) {\n  <retrieveOptionOrDefault>\n  var value = opts[key];\n  return value === undefined ? def : value;\n  </retrieveOptionOrDefault>\n}\n"], ["findUserFromDatabase", "function findUserFromToken(token, cb) {\n  <constructQueryString>\n  var q = \"SELECT * FROM users \" +\n    \"JOIN tokens t ON t.token = $1 \" +\n    \"JOIN users u ON u.id = t.user_id\";\n  </constructQueryString>\n\n  <databaseQueryExecution>\n  db.getClient(function(err, client, done) {\n    client.query(q, [token], function(err, r) {\n      <handleQueryResult>\n      var result = r && r.rows[0];\n      if(!result && !err) { err = new exceptions.NotFound(); }\n      if(err) {\n        cb(err);\n        done(err);\n      } else {\n        cb(null, result);\n        done();\n      }\n      </handleQueryResult>\n    });\n  });\n  </databaseQueryExecution>\n}\n"], ["parseArcXMLData", "function(data) {\n  <initializeArcXMLParser>\n  var axl = new OpenLayers.Format.ArcXML();\n  </initializeArcXMLParser>\n  <readAndParseData>\n  var parsed = axl.read(data);\n  </readAndParseData>\n  <returnParsedFeatures>\n  return parsed.features.feature;\n  </returnParsedFeatures>\n}\n"], ["saveListWithInstances", "function saveWithInstances(dbPath, list, save) {\n  <initializePromisesArray>\n  const promises = [];\n  </initializePromisesArray>\n\n  <iterateAndSaveList>\n  _.each(list, function (item, itemName) {\n    <prepareObjectToSave>\n    let obj = _.omit(item, 'instances');\n\n    if (_.isObject(item)) {\n      obj = _.omit(item, 'instances');\n      </prepareObjectToSave>\n\n      <saveObject>\n      if (_.size(obj) > 0) {\n        promises.push(save(dbPath + itemName, obj));\n      }\n      </saveObject>\n\n      <iterateAndSaveInstances>\n      if (item && item.instances) {\n        \n        _.each(item.instances, function (instance, instanceId) {\n          if (_.size(instance) > 0) {\n            promises.push(save(dbPath + itemName + '/instances/' + instanceId, instance));\n          }\n        });\n      }\n      </iterateAndSaveInstances>\n    }\n  });\n  </iterateAndSaveList>\n\n  <waitForAllSavesToComplete>\n  return bluebird.all(promises);\n  </waitForAllSavesToComplete>\n}\n"], "```"]