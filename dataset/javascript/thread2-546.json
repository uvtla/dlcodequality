[["function", "\nfunction(e) {\n    var target = e.target,\n        className = target.className || '';\n\n    <getValue>\n    function getValue(name) {\n        var r = new RegExp(name + '_(\\\\w+)'),\n            match = r.exec(className);\n\n        return match ? match[1] : null;\n    };\n    </getValue>\n\n    var highlighter = getHighlighterById(findParentElement(target, '.syntaxhighlighter').id),\n        commandName = getValue('command');\n\n    <executeCommand>\n    if (highlighter && commandName)\n        sh.toolbar.items[commandName].execute(highlighter);\n    </executeCommand>\n\n    e.preventDefault();\n}\n"], ["isValid", "\nfunction isValid(instance, schema) {\n\n  if (instance) {\n    if (schema) {\n\n      \n      let err = v.validate(instance, schema).errors;\n\n      <returnValidationResult>\n      if (err.length === 0) {\n        \n        return true;\n      } else {\n        \n        return err;\n      }\n      </returnValidationResult>\n    }\n  }\n}\n"], ["warnIfNotLocal", "\nfunction warnIfNotLocal() {\n  <checkNotLocalhost>\n  if (config.esclient.hosts.some((env) => { return env.host !== 'localhost'; } )) {\n    console.log(colors.red(`WARNING: DROPPING SCHEMA NOT ON LOCALHOST: ${config.esclient.hosts[0].host}`));\n  }\n  </checkNotLocalhost>\n}\n"], ["function", "\nfunction(geometry, style) {\n    var nodeType = null;\n    <determineNodeType>\n    switch (geometry.CLASS_NAME) {\n        case \"OpenLayers.Geometry.Point\":\n            if (style.externalGraphic) {\n                nodeType = \"image\";\n            } else if (this.isComplexSymbol(style.graphicName)) {\n                nodeType = \"svg\";\n            } else {\n                nodeType = \"circle\";\n            }\n            break;\n        case \"OpenLayers.Geometry.Rectangle\":\n            nodeType = \"rect\";\n            break;\n        case \"OpenLayers.Geometry.LineString\":\n            nodeType = \"polyline\";\n            break;\n        case \"OpenLayers.Geometry.LinearRing\":\n            nodeType = \"polygon\";\n            break;\n        case \"OpenLayers.Geometry.Polygon\":\n        case \"OpenLayers.Geometry.Curve\":\n            nodeType = \"path\";\n            break;\n        default:\n            break;\n    }\n    </determineNodeType>\n    return nodeType;\n}\n"], ["function", "\nfunction(str) {\n    <encodeString>\n    if (typeof btoa !== 'undefined') {\n        \n        return btoa(_.utf8_encode(str));\n    }\n    </encodeString>\n    \n    <bufferEncode>\n    if (Buffer) {\n        var buffer = (str instanceof Buffer) ? str : new Buffer(str.toString(), 'binary');\n        return buffer.toString('base64');\n    }\n    </bufferEncode>\n    \n    <customEncode>\n    for (\n        var block, charCode, idx = 0, map = chars, output = '';\n        str.charAt(idx | 0) || (map = '=', idx % 1);\n        output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n        charCode = str.charCodeAt(idx += 3 / 4);\n        block = block << 8 | charCode;\n    }\n    </customEncode>\n    \n    return output;\n}\n"], ["Prompt", "\nfunction Prompt() {\n  Base.apply(this, arguments);\n\n  <validateChoices>\n  if (!this.opt.choices) {\n    this.throwParamError('choices');\n  }\n  </validateChoices>\n\n  this.firstRender = true;\n  this.selected = 0;\n\n  <setDefault>\n  var def = this.opt.default;\n\n  \n  if (utils.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n    this.selected = def;\n  }\n\n  \n  if (typeof def === 'string') {\n    this.selected = this.opt.choices.pluck('value').indexOf(def);\n  }\n  </setDefault>\n\n  this.opt.default = null;\n  this.paginator = new Paginator();\n}\n"], ["Logger", "\nfunction Logger (level, name) {\n  <initializeDebug>\n  if (name) {\n    debug = require('debug')(typeof name === 'string' ? name : 'vxx');\n  }\n  </initializeDebug>\n  this.level = level;\n  <logStart>\n  this.debug('Logger started');\n  </logStart>\n}\n"], ["read", "\nfunction read (path) {\n  return <streamRead>\n  function (done) {\n    fs.createReadStream(resolve(__dirname, path))\n      .pipe(concat(function (data) {\n        done(null, data.toString())\n      }))\n  }\n  </streamRead>\n}\n"], ["set_session", "\nfunction set_session(req,cb) {\n    <handleSession>\n    try {\n        var maxAge = req.session.cookie.maxAge\n        var ttl = _ttl || ('number' == typeof maxAge\n                          ? maxAge / 1000 | 0\n                          : oneDay)\n        redclient.setex(req.session.st, ttl, req.sessionID, function(err){\n            if(!err){\n                 logger.debug('SETEX session ticket, max age ' + ttl);\n            }\n            cb && cb(err)\n        })\n    } catch (err) {\n        logger.error('saving session ticket to Redis threw an error')\n        \n        cb && cb(err);\n    }\n    </handleSession>\n}\n"], ["function", "\nfunction (point, win) {\n    var clientX = point.clientX;\n    var clientY = point.clientY;\n\n    if(point == null){return null;}\n\t\n    <calculateOffset>\n    if (syn.support.elementFromPage) {\n        var off = syn.helpers.scrollOffset(win);\n        clientX = clientX + off.left; \n        clientY = clientY + off.top; \n    }\n    </calculateOffset>\n\t\n    return win.document.elementFromPoint(Math.round(clientX), Math.round(clientY));\n}\n"], ""]