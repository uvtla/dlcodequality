[["eventToPromise", "\nfunction eventToPromise(emitter, event, opts) {\n  var cancel\n  <createPromise>\n  var promise = new Promise(function (resolve, reject) {\n    var addEvent = makeEventAdder(emitter, opts && opts.array)\n    cancel = function () {\n      cancel = noop\n      addEvent.cleanUp()\n    }\n\n    addEvent(event, resolve)\n\n    if (!opts || !opts.ignoreErrors) {\n      addEvent((opts && opts.error) || 'error', reject)\n    }\n  })</createPromise>\n  promise.cancel = function () { return cancel() }\n\n  return promise\n}\n"], ["drawCircle", "\nfunction (x0, y0, radius, color, c) {\n    _c = c || _c\n    if (color) {\n        _c.fillStyle = color\n    }\n    <calculateScaledDimensions>\n    x0 *= _scale\n    y0 *= _scale\n    radius *= _scale</calculateScaledDimensions>\n    let x = radius\n    let y = 0\n    let decisionOver2 = 1 - x   \n    <drawCircleAlgorithm>\n    while (x >= y) {\n        box(-x + x0, y + y0, x * 2, 1)\n        box(-y + x0, x + y0, y * 2, 1)\n        box(-x + x0, -y + y0, x * 2, 1)\n        box(-y + x0, -x + y0, y * 2, 1)\n        y++\n        if (decisionOver2 <= 0) {\n            decisionOver2 += 2 * y + 1 \n        } else {\n            x--\n            decisionOver2 += 2 * (y - x) + 1 \n        }\n    }</drawCircleAlgorithm>\n}\n"], ["LineDashedMaterial", "\nfunction LineDashedMaterial(parameters) {\n    <extendMaterial>\n    LineBasicMaterial.call(this);</extendMaterial>\n\n    this.type = 'LineDashedMaterial';\n\n    <initializeProperties>\n    this.scale = 1;\n    this.dashSize = 3;\n    this.gapSize = 1;</initializeProperties>\n\n    <setMaterialValues>\n    this.setValues(parameters);</setMaterialValues>\n}\n"], ["formatMessage", "\nfunction formatMessage(message) {\n  <messageTransformation>\n  return message\n    .replace('Module build failed: SyntaxError:', friendlySyntaxErrorLabel)\n    .replace(/Module not found: Error: Cannot resolve 'file' or 'directory'/, 'Module not found:')\n    .replace(/^\\s*at\\s.*:\\d+:\\d+[\\s\\)]*\\n/gm, '') \n    .replace('./~/css-loader!./~/postcss-loader!', '');\n  </messageTransformation>\n}\n"], ["setupHelper", "\nfunction (helperName, paramSize, params, useRegister) {\n    <prepareOptions>\n    var options = this.objectLiteral(this.setupOptions(helperName, paramSize, params));</prepareOptions>\n\n    <useRegisterOption>\n    if (useRegister) {\n        this.useRegister('options');\n        params.push('options');\n        return 'options=' + options;\n    } else {\n        params.push(options);\n        return '';\n    }</useRegisterOption>\n}\n"], ["compileProgram", "\nasync function compileProgram(dirPath, command) {\n  <validateInput>\n  await validateDirPathForCLI(dirPath);</validateInput>\n  <pickCommandParameters>\n  const params = pick(command, [\n    'fontName',\n    // ...other properties\n    'experimentalDisableStyles'\n  ]);</pickCommandParameters>\n\n  <attemptCompilation>\n  try {\n    return collecticonsCompile({\n      dirPath,\n      ...params\n    });\n  } catch (error) {\n    <handleCompilationErrors>\n    if (!error.userError) throw error;\n    \n    <interpretErrorCodes>\n    const code = error.code;\n    if (code === 'PLC_CLASS_EXC') {\n      error.details = ['Error: --no-sass-placeholder and --no-css-class are mutually exclusive'];\n    } else if (code === 'FONT_TYPE') {\n      error.details = ['Error: invalid font type value passed to --font-types'];\n    } else if (code === 'CLASS_CSS_FORMAT') {\n      error.details = ['Error: \"--no-css-class\" and \"--style-formats css\" are not compatible'];\n    } else if (code === 'STYLE_TYPE') {\n      error.details = ['Error: invalid style format value passed to --style-format'];\n    }</interpretErrorCodes>\n    throw error;</handleCompilationErrors>\n  }</attemptCompilation>\n}\n"], ["asyncMessageHandler", "\nfunction (msg) {\n    var ack;\n    <acknowledgmentSetup>\n    if (msg.type === asyncMessageType.MESSAGE_ACK_NEEDED || msg.type === asyncMessageType.MESSAGE_SENDER_ACK_NEEDED) {\n      ack = function () {\n        pushSendData({\n          type: asyncMessageType.ACK,\n          content: {\n            messageId: msg.id\n          }\n        });\n      }\n    }</acknowledgmentSetup>\n\n    <messageTypeHandling>\n    switch (msg.type) {\n      // case statements\n    }</messageTypeHandling>\n}\n"], ["writeblobs", "\nfunction writeblobs(data, cb) {\n    <setupAsyncBuilder>\n    var ab = asyncbuilder(cb);</setupAsyncBuilder>\n    <createQueue>\n    var reqQ = new Queue({ concurrency: 5 });</createQueue>\n\n    <processData>\n    u.each(data, function (file) {\n        var append = ab.asyncAppend();\n        var blob = {\n            encoding: file.buffer ? 'base64' : 'utf-8',\n            content: file.buffer ? file.buffer.toString('base64') : (file.text || '')\n        };\n\n        reqQ.push(function (reqDone) {\n            post(self.endpoint + '/git/blobs', blob, function (err, ghblob) {\n                if (ghblob) { file.sha = ghblob.sha; }\n                append(err, file);\n                reqDone();\n            });\n        });\n\n    });</processData>\n    <finalizeAsync>\n    ab.complete();</finalizeAsync>\n}\n"], ["buildLinkNeighbourRegex", "\nfunction buildLinkNeighbourRegex(string, isTrail) {\n    <prepareRegexString>\n\tvar regexResult = string.match(stripRegex);\n    // ...processing and catching exceptions\n    }</prepareRegexString>\n    // ... more code (omitted for brevity)\n}\n"], ["extendStateData", "\nfunction (state) {\n  <mergeParentStateData>\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = extend({}, state.parent.data, state.data);\n  }</mergeParentStateData>\n  return state.data;\n}\n"], "```"]