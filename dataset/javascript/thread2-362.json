[["mkfn", "\nfunction mkfn(fn, params, name, ctx) {\n  return {\n    fn : fn,\n    ctx : ctx || null,\n    params : params || 0,\n    name : name || null,\n  };\n}\n"], ["anonymous", "\nfunction (params) {\n  const oThis = this;\n\n  oThis.contractName = params.contract_name;\n  oThis.contractAddress = params.contract_address;\n  oThis.chain = params.chain;\n  oThis.senderAddress = params.sender_address;\n  oThis.methodName = params.method_name;\n  oThis.methodArguments = params.method_arguments;\n}\n"], ["rowDragFun", "\nfunction rowDragFun(e) {\n    var oThis = this;\n    \n    if (!oThis.options.canRowDrag) {\n        return;\n    }\n\n    if (this.rowDragFlag) {\n        this.rowDragEndX = e.clientX;\n        this.rowDragEndY = e.clientY;\n        <calculateDrag>\n        var changeX = this.rowDragEndX - this.rowDragStartX,\n            changeY = this.rowDragEndY - this.rowDragStartY;\n        var rowHeight = this.rowDragEle.clientHeight;\n\n        var rowCounts = parseInt(changeY / rowHeight);\n\n        if (rowCounts < 0) {\n            this.dragdirection = -1;\n        } else {\n            this.dragdirection = 1;\n        }\n\n        this.rowDragEndIndex = this.rowDragStartIndex + rowCounts;\n        </calculateDrag>\n\n        <validateRowDrag>\n        if (this.rowDragEndIndex < 0) {\n            this.rowDragEndIndex = 0;\n        }\n        </validateRowDrag>\n\n        <updateDragUI>\n        if (this.rowDragEndIndex != this.rowDragStartIndex) {            \n            $('#' + this.options.id + '_content_tbody').find('tr td').removeClass('u-grid-drag-icon');            \n            $('#' + this.options.id + '_content_tbody').find('tr').eq(this.rowDragEndIndex).find('td').first().addClass('u-grid-drag-icon');\n        }\n        </updateDragUI>\n    }\n}\n"], ["segmentIndex", "\nfunction(index) {\n    var segments = this.segments;\n    var numSegments = segments.length;\n    if (numSegments === 0) throw new Error('Path has no segments.');\n\n    if (index < 0) index = numSegments + index;\n    <validateIndex>\n    if (index >= numSegments || index < 0) throw new Error('Index out of range.');\n    </validateIndex>\n\n    return segments[index];\n}\n"], ["webpackBlock", "\nfunction(module,exports,__webpack_require__){\"use strict\";(function(module){\n<!-- Omitted webpack internal functionality as it is beyond the scope of the task -->\n})(function(CodeMirror){\"use strict\";\n<!-- Omitted CodeMirror mode definition as it is beyond the scope of the task -->\n}\n"], ["formatInline", "\nfunction(composer, command, tagName, className, classRegExp, cssStyle, styleRegExp) {\n  var that = this;\n\n  <checkExecuteConditions>\n  if (this.state(composer, command, tagName, className, classRegExp, cssStyle, styleRegExp) &&\n    composer.selection.isCollapsed() &&\n    !composer.selection.caretIsLastInSelection() &&\n    !composer.selection.caretIsFirstInSelection()\n  ) {\n    var state_element = that.state(composer, command, tagName, className, classRegExp)[0];\n    composer.selection.executeAndRestoreRangy(function() {\n      var parent = state_element.parentNode;\n      composer.selection.selectNode(state_element, true);\n      wysihtml5.commands.formatInline.exec(composer, command, tagName, className, classRegExp, cssStyle, styleRegExp, true, true);\n    });\n  } else {\n    if (this.state(composer, command, tagName, className, classRegExp, cssStyle, styleRegExp) && !composer.selection.isCollapsed()) {\n      composer.selection.executeAndRestoreRangy(function() {\n        wysihtml5.commands.formatInline.exec(composer, command, tagName, className, classRegExp, cssStyle, styleRegExp, true, true);\n      });\n    } else {\n      wysihtml5.commands.formatInline.exec(composer, command, tagName, className, classRegExp, cssStyle, styleRegExp);\n    }\n  }\n  </checkExecuteConditions>\n}\n"], ["processMessageList", "\nfunction(messagelist, next) {\n  var keyList = JSON.parse(messagelist.Body);\n  if (CONSOLE_MESSAGES) console.log(new Date().toISOString(),'Raw messageList object:',keyList);\n  \n  <processEachMessage>\n  keyList.messages.forEach(function(item, index) {\n    data.INBOX.messages.push({\n      key: item.key,\n      raw: '',\n      flags: [],\n      internaldate: formatInternalDate(new Date(item.created))\n    });\n  }); \n  </processEachMessage>\n  \n  <indexFolders>\n  indexFolders();\n  </indexFolders>\n\n  if (CONSOLE_MESSAGES) console.log(new Date().toISOString(),'Refreshed INBOX:',data);\n  if (CONSOLE_MESSAGES) console.log(new Date().toISOString(),'INBOX message detail:',data.INBOX.messages);\n\n  next(null);\n}\n"], ["extend", "\nfunction extend(helper = {}) {\n  <pluginIntegration>\n  Object.keys(plugins).forEach((key) => {\n    const plugin = plugins[key]\n    helper[key] = plugin.default.bind(helper)\n  })\n  </pluginIntegration>\n  <extendMethod>\n  helper.extend = (name, method) => {\n    helper[name] = method.bind(helper)\n  }\n  </extendMethod>\n}\n"], ["compile", "\nfunction compile(config) {\n  let compiler;\n  <createCompiler>\n  try {\n    compiler = webpack(config);\n  } catch (e) {\n    printErrors('Failed to compile.', [e]);\n    process.exit(1);\n  }\n  </createCompiler>\n  return compiler;\n}\n"], ["stringifyClass", "\nfunction stringifyClass(classAttr) {\n  if (typeof classAttr === 'string') {\n    return classAttr;\n  }\n  <buildClassString>\n  var classes = [];\n  for (var key in classAttr) {\n    if (classAttr[key]) {\n      classes.push(key);\n    }\n  }\n  </buildClassString>\n  return classes.join(' ');\n}\n"], "```"]