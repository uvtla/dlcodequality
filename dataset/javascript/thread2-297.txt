<getHtml>
function getHtml(methods) {
    return [
        '<!doctype html>',
        '<html lang="en">',
            '<head>',
                '<title>API Index</title>',
                '<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>',
                '<link rel="stylesheet" href="
            '</head>',
            '<body class="container">',
                '<div class="col-md-7">',
                    Object.keys(methods).map(function (name) {
                        <generateMethodHtml>
                        return getMethodHtml(methods[name]);
                        </generateMethodHtml>
                    }).join(''),
                '</div>',
            '</body>',
        '</html>'
    ].join('');
}
</getHtml>

<extendJQueryDatepicker>
function (o) {
            o = o || {};
            var tmp_args = arguments;
            
			<handleStringIdentifier>
            if (typeof(o) === 'string') {
                <handleSpecificStringCases>
                if (o === 'getDate'  || (o === 'option' && tmp_args.length === 2 && typeof (tmp_args[1]) === 'string')) {
                    return $.fn.datepicker.apply($(this[0]), tmp_args);
                } else {
                </handleSpecificStringCases>
                    <applyDatepickerEachElement>
                    return this.each(function () {
                        var $t = $(this);
                        $t.datepicker.apply($t, tmp_args);
                    });
                    </applyDatepickerEachElement>
                }
			</handleStringIdentifier>
            else {
                <applyDatepickerWithNewInstanceEachElement>
                return this.each(function () {
                    var $t = $(this);
                    $t.datepicker($.timepicker._newInst($t, o)._defaults);
                });
                </applyDatepickerWithNewInstanceEachElement>
            }
        }
</extendJQueryDatepicker>

<checkForMatch>
function(match) {
    <simpleComparisonBlock>
    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
    if (matches)
        iFormat++;
    return matches;
    </simpleComparisonBlock>
}
</checkForMatch>

<ResponseCache>
function ResponseCache(appName, ttl) {
    this.enabled = false;
    this.ttl = undefined;

    <validateTTLAndSetupCache>
    if (typeof ttl === 'number') {
        if (ttl < 1) {
            throw new Error('Response cache *must* expire, 0 TTL not accepted.');
        }

        if (mage.core.archivist.topicExists('ucResponseMeta') || mage.core.archivist.topicExists('ucResponseData')) {
            
			<assertArchivistAbilities>
            mage.core.archivist.assertTopicAbilities('ucResponseMeta', ['session'], ['set', 'get', 'touch']);
            mage.core.archivist.assertTopicAbilities('ucResponseData', ['session'], ['set', 'get', 'touch']);
			</assertArchivistAbilities>

            this.ttl = ttl;

            this.enabled = true;

            <logInformation>
            logger.info('User command response enabled for app', appName, 'with TTL:', ttl, 'sec');
            </logInformation>
        } else {
            <logWarningIfTopicsNotConfigured>
            logger.warning(
                'Archivist topics "ucResponseMeta" and "ucResponseData" not configured.',
                'User command response cache disabled for app:', appName
            );
            </logWarningIfTopicsNotConfigured>
        }
    } else {
        <logWarningIfFalsyTTLOrUndefined>
        logger.warning('Falsy Response Cache TTL configured. User command response cache disabled for app:', appName);
        </logWarningIfFalsyTTLOrUndefined>
    }
    </validateTTLAndSetupCache>
}
</ResponseCache>

<evalFilter>
function evalFilter(filters, results, pos = {value: 0}) {
    <evaluateFilterCriteria>
  const key = Object.keys(filters)[0];

  if (['and', 'or', 'not'].indexOf(key) === -1 || filters._isLeaf) {
    pos.value++;
    return results[pos.value - 1];
  }

  if (key === 'not') {
    return !evalFilter(filters[key], results, pos);
  }

  return filters[key].reduce((p, c) => {
    const r = evalFilter(c, results, pos);

    if (p === null) {
      return r;
    }

    return key === 'and' ? p && r : p || r;
  }, null);
  </evaluateFilterCriteria>
}
</evalFilter>

<onMessage>
function onMessage(message) {
    <guardClauses>
	if (done) return
    if (message.type != "utf8") return sendConnectFailed(wsConn)
    </guardClauses>

    <parseIncomingMessage>
    try {
      message = JSON.parse(message.utf8Data)
    }
    catch(err) {
      return sendConnectFailed(wsConn)
    }
    </parseIncomingMessage>

    <validateMessageContent>
    var id  = message.id

    if (message.type != "request") return sendConnectFailed(wsConn)
    if (message.name != "connect") return sendConnectFailed(wsConn)
    if (message.to   != "server") return sendConnectFailed(wsConn)
    </validateMessageContent>

    <getOrCreateSession>
    var body = message.body || {}

    if (!body.key) return sendConnectFailed(wsConn)

    var session = sessions.getSession(body.key)
    </getOrCreateSession>

    <createAndSendMessage>
    var channel = channels.createChannel(session, wsConn)

    message = {
      type: "response",
      name: "connect",
      from: "server",
      id:   message.id,
      body: null
    }

    wsConn.sendUTF(JSON.stringify(message))
    </createAndSendMessage>

    <cleanUpConnection>
    cleanUp()
    </cleanUpConnection>
  }
</onMessage>

<cloneLayerHTTPRequest>
function (obj) {
        
        <handleNullInput>
        if (obj == null) {
            obj = new OpenLayers.Layer.HTTPRequest(this.name,
                                                   this.url,
                                                   this.params,
                                                   this.getOptions());
        }
        </handleNullInput>
        
        <applyPrototypeClone>
        obj = OpenLayers.Layer.prototype.clone.apply(this, [obj]);
        </applyPrototypeClone>
        
        return obj;
    }
</cloneLayerHTTPRequest>

<createDefaultDisplayedArea>
function createDefaultDisplayedArea () {
    <initializeDisplayedArea>
    return {
        tlhc: {
            x: 1,
            y: 1
        },
        
        brhc: {
            x: 1,
            y: 1
        },
        rowPixelSpacing: 1,
        columnPixelSpacing: 1,
        presentationSizeMode: 'NONE'
    };
    </initializeDisplayedArea>
}
</createDefaultDisplayedArea>

<defaultMetaDataBuilder>
function defaultMetaDataBuilder(spec, descriptions, results, capabilities) {
	
	<constructMetaDataObject>
    var metaData = {
            description: descriptions.join(' ')
            , passed: results.passed()
            , os: capabilities.caps_.platform
            , sessionId: capabilities.caps_['webdriver.remote.sessionid']
            , browser: {
                name: capabilities.caps_.browserName
                , version: capabilities.caps_.version
            }
        };
    </constructMetaDataObject>

    <handleTestResults>
    if(results.items_.length > 0) {
		var result = results.items_[0];
		if(!results.passed()){
            <handleFailedTest>
			var failedItem = _.where(results.items_,{passed_: false})[0];
			if(failedItem){
				metaData.message = failedItem.message || 'Failed';
				metaData.trace = failedItem.trace? (failedItem.trace.stack || 'No Stack trace information') : 'No Stack trace information';
			}
            </handleFailedTest>

		}else{
            <handlePassedTest>
			metaData.message = result.message || 'Passed';
			metaData.trace = result.trace.stack;
            </handlePassedTest>
		}

	}
    </handleTestResults>

	return metaData;
}
</defaultMetaDataBuilder>

<arraySplice>
function arraySplice(a1, from, to, a2) {
    <performArraySplicing>
    var aL = a1.slice(0, from);
    var aR = a1.slice(to);

    return aL.concat(a2).concat(aR);
    </performArraySplicing>
}
</arraySplice>