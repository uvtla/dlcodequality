[["function", "\nfunction(uri) {\n    var prefix = null;\n    if(uri == null) {\n        prefix = this.namespaces[this.defaultPrefix];\n    } else {\n        for(prefix in this.namespaces) {\n            if(this.namespaces[prefix] == uri) {\n                break;\n            }\n        }\n    }\n    return prefix;\n}\n"], ["toMetaString", "\nfunction toMetaString(obj) {\n  var attrs = _.map(obj, function(_v, _k) {\n    return _k + '=\"' + _.escape(_v) + '\"';\n  });\n\n  var res = _.compact(attrs).join(\" \");\n  return res ? \"<meta \" + res + \">\" : \"\";\n}\n"], ["httpRequestStableId", "\nfunction httpRequestStableId (data) {\n    \n    data = requireValidOptionalObject(data)\n    \n    var stableData = _.pick(data, ['options', 'moduleCallSignature', 'requestId', 'stack'])\n    \n    var stableIdWithData = stableId(stableData, true)\n    \n    return stableIdWithData.id\n}\n"], ["getImportPaths", "\nfunction getImportPaths(filePath){\n  var importPaths = [];\n  try{\n    var contents = fs.readFileSync(filePath).toString('utf8');\n    importPaths = parseImpt(contents);\n  }\n  catch(exception){}\n  return importPaths;\n}\n"], ["createIHDRChunk", "\nfunction createIHDRChunk(width, height) {\n    const data = buffer.Buffer.alloc(13);\n\n    \n    data.writeUInt32BE(width);\n    \n    data.writeUInt32BE(height, 4);\n    \n    data.writeUInt8(8, 8);\n    \n    data.writeUInt8(6, 9);\n    \n    data.writeUInt8(0, 10);\n    \n    data.writeUInt8(0, 11);\n    \n    data.writeUInt8(0, 12);\n\n    return createChunk('IHDR', data);\n}\n"], ["function", "\nfunction(error, params) {\n      if (error) {\n        if (!options.silenceErrors) {\n          logger.error('_sync.onComplete', t.className, error);\n        }\n        options.error(null, error);\n      } else {\n        logger.info('_sync.onComplete', t.className, model.get('id'));\n        options.success(params);\n      }\n    }\n"], ["updateUserDataField", "\nfunction updateUserDataField(userId, data, overwrite, callback) {\n    return _updateUserObjectField(userId, ['data'], data, overwrite)\n        .then(function (userData) {\n            return userData.data;\n        })\n        .nodeify(callback);\n}\n"], ["getSections", "\nfunction getSections() {\n    var sections = [];\n    \n    for (var name in builtinSections)\n      sections.push(builtinSections[name]);\n    \n    for (var i in Espruino.Core.Config.data) {\n      var c = Espruino.Core.Config.data[i];\n      \n      var found = false;\n      for (var s in sections)\n        if (sections[s].name == c.section)\n          found = true;\n      \n      if (!found) {\n        console.warn(\"Section named \"+c.section+\" was not added with Config.addSection\");\n        sections[c.section] = {\n            name : c.section,\n            sortOrder : 0\n        };        \n      }\n    }\n    \n    sections.sort(function (a,b) { return a.sortOrder - b.sortOrder; });\n    \n    return sections;\n  }\n"], ["addPhaseTrigger", "\nfunction addPhaseTrigger(priv, target, propertyName) {\n  check(target, 'target').is.anEventTarget();\n  var property = propertyName || 'transform';\n  check(property, 'property').is.aString();\n\n  if (property === 'transform') {\n    property = feature.transformPropertyName;\n  }\n  priv.phaseTriggers.put(property, target);\n  maybeStart(priv);\n}\n"], ["doPostCss", "\nfunction doPostCss(css, callback) {\n\tpostcss([autoprefixer]).process(css, {from: undefined}).then(function gotCssResult(result) {\n\t\tcallback(null, result.css);\n\t}).catch(function gotError(err) {\n\t\tcallback(err);\n\t});\n}\n"], ""]