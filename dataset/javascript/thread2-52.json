[["add", "\nfunction add(name) {\n    <set>\n    function set(v) {\n      var oldValue = shadow[name];\n      if (oldValue === v) return;\n      o[name] = v;\n      notifier.notify({type: 'update', object: u, name, oldValue});\n      shadow[name] = oldValue.change(v);\n    }\n    </set>\n\n    <get>\n    function get() {\n      accessNotifier.notify({type: 'access', object: u, name});\n      return shadow[name];\n    }\n    </get>\n\n    <observe>\n    function observe(changes) {\n    }\n    </observe>\n\n    <initialSetup>\n    shadow[name] = makeUpwardable(o[name]);\n    observers[name] = Observer(shadow[name], observe, ['upward']).observe();\n    defineProperty(u, name, {set: set, get: get, enumerable: true});\n    </initialSetup>\n}\n"], ["Conversation", "\nfunction Conversation (config) {\n  <validation>\n  if (!(this instanceof Conversation)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n  </validation>\n\n  <setupConfiguration>\n  this.id =       config && config.id       || uuid.v4();\n  this.self =     config && config.self     || null;\n  this.other =    config && config.other    || null;\n  this.context =  config && config.context  || {};\n  </setupConfiguration>\n\n  <initializePrivateMembers>\n  this._send =    config && config.send     || null;\n  this._inbox = [];     \n  this._receivers = []; \n  </initializePrivateMembers>\n}\n"], ["ThemeSwitcher", "\nfunction ThemeSwitcher(options) {\n    var _this = _super.call(this, options) || this;\n    <uiSetup>\n    switch (ui_1.Theme.getCurrentUIPlatform()) {\n        case \"ios\":\n            _this.$el.find(\"#gallery-theme-ios\").prop(\"checked\", true);\n            break;\n        case \"android\":\n            _this.$el.find(\"#gallery-theme-android\").prop(\"checked\", true);\n            break;\n        default:\n            ui_1.Toast.show(TAG + \"\\n unknown platform.\");\n            _this.$el.find(\"#gallery-theme-default\").prop(\"checked\", true);\n            break;\n    }\n    _this.$el.find(\"input[name='segmented-control-platform-theme']\").checkboxradio(\"refresh\");\n    </uiSetup>\n    return _this;\n}\n"], ["baseAssignValue", "\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && _defineProperty$1) {\n    _defineProperty$1(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n"], ["md5", "\nfunction md5(files) {\n    var hash = crypto.createHash('md5');\n    <fileHashing>\n    _.each(files, function(file) {\n        if (!isExternal(file))\n            hash.update(grunt.file.read(file), 'utf-8');\n    });\n    </fileHashing>\n    return hash.digest('hex');\n}\n"], ["convertContent", "\nfunction convertContent(content) {\n    divNode.innerHTML = '<svg><text gg=\"asfdas\">' + content.replace(/\\s/gi, \"&nbsp;\") + \"</text></svg>\";\n    return divNode.firstChild.firstChild.textContent;\n}\n"], ["anonymousFunction1", "\nfunction() {\n    var listWidth = 0;\n\n    <showSlideshow>\n    pgwSlideshow.plugin.show();\n    </showSlideshow>\n\n    <calculateListWidth>\n    pgwSlideshow.plugin.find('.ps-list > ul > li').show().each(function() {\n        listWidth += $(this).width();\n    });\n    </calculateListWidth>\n\n    <setWidth>\n    pgwSlideshow.plugin.find('.ps-list > ul').width(listWidth);\n    </setWidth>\n    return true;\n}\n"], ["BlockDecoder", "\nfunction BlockDecoder(opts) {\n  opts = opts || {};\n  <setup>\n  var noDecode = !!opts.noDecode;\n  stream.Duplex.call(this, {\n    allowHalfOpen: true, \n    readableObjectMode: !noDecode\n  });\n\n  this._rType = opts.readerSchema !== undefined ?\n    types.Type.forSchema(opts.readerSchema) :\n    undefined;\n  this._wType = null;\n  this._codecs = opts.codecs;\n  this._codec = undefined;\n  this._parseHook = opts.parseHook;\n  </setup>\n\n  <initializeMembers>\n  this._tap = new Tap(utils.newBuffer(0));\n  this._blockTap = new Tap(utils.newBuffer(0));\n  this._syncMarker = null;\n  this._readValue = null;\n  this._noDecode = noDecode;\n  this._queue = new utils.OrderedQueue();\n  this._decompress = null; \n  this._index = 0; \n  this._remaining = undefined; \n  this._needPush = false;\n  this._finished = false;\n  </initializeMembers>\n\n  <handleFinishEvent>\n  this.on('finish', function () {\n    this._finished = true;\n    if (this._needPush) {\n      this._read();\n    }\n  });\n  </handleFinishEvent>\n}\n"], ["unbindEventHandlers", "\nfunction(oEvent){\n\tjQuery(document.body).unbind(\"selectstart.\" + this.getId()).unbind(\"mouseup.\" + this.getId()).unbind(\"mousemove.\" + this.getId());\n\tthis.$(\"ghost\").remove();\n\tthis.$(\"rsz\").removeClass(\"sapUiUx3ExactLstRSzDrag\");\n\tthis._iStartWidth = undefined;\n\tthis._iStartDragX = undefined;\n\tthis.focus();\n}\n"], ["setGlobalLevel", "\nfunction setGlobalLevel(level) {\n    <levelValidation>\n\tif (!(typeof(level) == 'string' || level instanceof String)) {\n\t\tlevel = Object.keys(logger.levels).reduce(function (previousValue, currentValue, index, array) {\n\t\t\tif (logger.levels[previousValue] == level) {\n\t\t\t\treturn previousValue;\n\t\t\t} else {\n\t\t\t\treturn currentValue;\n\t\t\t}\n\t\t}, logger.level);\n\t}\n\t</levelValidation>\n\t\n\t<updateGlobalLevel>\n\tlogger.level = level;\n\t</updateGlobalLevel>\n\t\n\t<updateTransportLevels>\n\tObject.keys(logger.transports).forEach(function (name) {\n\t\tvar transport = logger.transports[name];\n\t\t\n\t\ttransport.level = level;\n\t});\n\t</updateTransportLevels>\n}\n"], ""]