```javascript
<getInheritedCollectionPaths>
function getInheritedCollectionPaths(node, name) {
    var paths = [],
        startNode = node,
        actualNode = node,
        endNode,
        prefixNode,
        i,
        inverseOverlays,
        target;

    while (startNode) {
        <resolveNodePaths>
        actualNode = self.getBase(startNode);
        endNode = self.getBase(getInstanceRoot(startNode));
        target = '';
        if (actualNode && endNode) {
            prefixNode = node;
            while (actualNode && actualNode !== self.getParent(endNode)) {
                inverseOverlays = innerCore.getInverseOverlayOfNode(actualNode);
                if (inverseOverlays[target] && inverseOverlays[target][name]) {
                    for (i = 0; i < inverseOverlays[target][name].length; i += 1) {
                        paths.push(self.joinPaths(self.getPath(prefixNode), inverseOverlays[target][name][i]));
                    }
                }
                target = CONSTANTS.PATH_SEP + self.getRelid(actualNode) + target;
                actualNode = self.getParent(actualNode);
                prefixNode = self.getParent(prefixNode);
            }
        }
        </resolveNodePaths>
        startNode = self.getBase(startNode);
    }

    return paths;
}
</getInheritedCollectionPaths>

<allParams>
function allParams(req){
  <mergeParamsAndQuery>
  var params = req.params.all();
  return _.merge(req.query, params);
  </mergeParamsAndQuery>
}
</allParams>

<setSelectionRange>
function(line, column, end, callback) {
    if (this._textView) {
        var model = this.getModel();
        line = Math.max(0, Math.min(line, model.getLineCount() - 1));
        var lineStart = model.getLineStart(line);
        var start = 0;
        if (end === undefined) {
            end = 0;
        }
        if (typeof column === "string") { 
            var index = model.getLine(line).indexOf(column);
            if (index !== -1) {
                start = index;
                end = start + column.length;
            }
        } else {
            start = column;
            var lineLength = model.getLineEnd(line) - lineStart;
            start = Math.min(start, lineLength);
            end = Math.min(end, lineLength);
        }
        this.moveSelection(lineStart + start, lineStart + end, callback);
    }
}
</setSelectionRange>

<validateBid>
function(bid) {
    const siteId = bid.params.siteId || '';
    if (!siteId) {
      <logNoSiteError>
      utils.logError(LOG_MSG.noSite);
      </logNoSiteError>
    }
    <returnValidationResult>
    return !!(bid.adUnitCode && siteId);
    </returnValidationResult>
}
</validateBid>

<_fnInit>
function _fnInit( table, datatable, oInit, that )
{
    // The function is not compliant with SRP, so multiple tags will be used
    _that = that;

    <initDefaultOptions>
    if ( typeof oInit == 'undefined' ) {
        oInit = {};
    }

    if ( typeof oInit.focus == 'undefined' ) {
        oInit.focus = [0,0];
    }

    oInit.table = table;
    $(oInit.table).addClass('KeyTable');

    if ( typeof oInit.focusClass != 'undefined' ) {
        _sFocusClass = oInit.focusClass;
    }

    if ( typeof datatable != 'undefined' ) {
        _oDatatable = datatable;
    }

    if ( typeof oInit.initScroll == 'undefined' ) {
        oInit.initScroll = true;
    }

    if ( typeof oInit.form == 'undefined' ) {
        oInit.form = false;
    }
    _bForm = oInit.form;
    </initDefaultOptions>
    
    <setTableBody>
    _nBody = oInit.table.getElementsByTagName('tbody')[0];
    </setTableBody>

    <handleKeyTableForm>
    if ( _bForm )
    // Contains logic specific to handling the form within the KeyTable
    ...
    </handleKeyTableForm>
    
    <setupEventHandlers>
    $(document).bind( "keydown", _fnKey );

    if ( _oDatatable )
    {
        $(_oDatatable.nTable).on( 'click', 'td', _fnClick );
    }
    else
    {
        $(_nBody).on( 'click', 'td', _fnClick );
    }
    
    $(document).click( function(e) {
        // Code to handle a document wide click event
        ...
    } );
    </setupEventHandlers>
}
</_fnInit>

<reorderItems>
function(originalIndex, newIndex) {
      if(originalIndex < newIndex) {
         this.items.splice(newIndex+1,0, this.items[originalIndex]);
         this.items[originalIndex] = null;
      }
      else {
         this.items.splice(newIndex,0, this.items[originalIndex]);
         this.items[originalIndex+1] = null;
      }      
      <compactArray>
      this.items = inputEx.compactArray(this.items);
      </compactArray>
      
      <fireListReorderedEvent>
      this.listReorderedEvt.fire();
      </fireListReorderedEvent>
}
</reorderItems>

<PASSIVE_TOUCH>
function PASSIVE_TOUCH(eventName) {
  <determineEventOptions>
  if (isMouseEvent(eventName) || eventName === 'touchend') {
    return;
  }
  if (HAS_NATIVE_TA && SUPPORTS_PASSIVE && passiveTouchGestures) {
    return {passive: true};
  } else {
    return;
  }
  </determineEventOptions>
}
</PASSIVE_TOUCH>

<listenPushNotification>
function listenPushNotification(callback) {
    // This function has multiple responsibilities related to setting up push notifications.
    if (callback === void 0) { callback = defaultPushCallback; }
    ...
}
// Since the function is not compliant with SRP and contains numerous responsibilities, it is too complex to annotate in this format.
</listenPushNotification>

<processDocuments>
function( documents ) {
    // This function has multiple responsibilities related to processing documents.
    var key, document
    ...
}
// Similar to the previous function, this one is also not compliant with SRP, and it's too complex to annotate specifically with simple tags.
</processDocuments>

<getHeightAuto>
function() {
    <calculateHeight>
    return this.attrs.height === AUTO ? (this.getTextHeight() * this.textArr.length * this.getLineHeight()) + this.getPadding() * 2 : this.attrs.height;
    </calculateHeight>
}
</getHeightAuto>
```

For the last two functions (`listenPushNotification` and `processDocuments`), SRP violations are indicated, but specific responsibilities are too intertwined to annotate clearly with tags due to the complexity and length of the functions.