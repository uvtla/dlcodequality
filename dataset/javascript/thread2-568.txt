<Statement>
function Statement (attributes) {
  <assignAttributes>
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) this[key] = result(attributes[key]);
  }
  </assignAttributes>

  <populateTransactions>
  var transactions = Table.prototype.rowsToArray(this.rows, {
    processRow: function (row) {
      return this.createTransaction(weld(this.columns, row));
    }.bind(this)
  });
  this.transactions = new Transactions(transactions, this);
  </populateTransactions>
}
</Statement>

<save_allstate>
function save_allstate() {
  var res = {};

  <storeGlkObjects>
  if (gli_rootwin)
      res.rootwin = gli_rootwin.disprock;

  if (gli_currentstr)
      res.currentstr = gli_currentstr.disprock;

  if (gli_timer_interval)
      res.timer_interval = gli_timer_interval;
  </storeGlkObjects>

  <serializeWindows>
  res.windows = [];
  for (var win = gli_windowlist; win; win = win.next) {
    // This loop consists of several responsibilities due to the different types of windows
    // It serializes the state of all windows, adapts according to window type, and stores in res.windows
  }
  </serializeWindows>

  <serializeStreams>
  res.streams = [];
  for (var str = gli_streamlist; str; str = str.next) {
    // Similar to windows, this loop serializes streams with differing properties based on type
  }
  </serializeStreams>

  <serializeFilerefs>
  res.filerefs = [];
  for (var fref = gli_filereflist; fref; fref = fref.next) {
    // Filerefs are enumerated and serialized, creating an object for each with associated properties
  }
  </serializeFilerefs>

  <serializeGlkoteState>
  res.glkote = GlkOte.save_allstate();
  </serializeGlkoteState>

  return res;
}
</save_allstate>

<findRequireComments>
function findRequireComments(source, source_path, options, deps) {
  <defineRegex>
  var comment_reg = /{! require\("([\w\.\/\-_\|[\]]+)\"\) !}/g, 
    bracket_reg = /\[([^\]]*)\]/g,
    result = null, bracket_result = null, alt, name;
  </defineRegex>

  
  <processComments>
  while ((result = comment_reg.exec(source)) !== null) {
    
    <handleBrackets>
    bracket_result = bracket_reg.exec(result[1]);

    
    if (bracket_result) {
      alt = bracket_result[1].split("|");
      for (var i = 0; i < alt.length; i++) {
        name = result[1].replace(bracket_reg, alt[i]);
        <logDependency>
        log(options, 'found comment dependency "' + name + '"');
        </logDependency>

        <addDependency>
        addDustDependency(name, source_path, options, deps);
        </addDependency>
      }
    }
    </handleBrackets>
    
    <handleSingleDependency>
    else {
      <logSingleDependency>
      log(options, 'found comment dependency "' + result[1] + '"');
      </logSingleDependency>
      <addSingleDependency>
      addDustDependency(result[1], source_path, options, deps);
      </addSingleDependency>
    }
    </handleSingleDependency>
  }
  </processComments>
}
</findRequireComments>

<assertPublisherOptions>
function assertPublisherOptions(options) {
  <validateOptions>
  // The entire function is a single responsibility of input validation
  mod_assert.object(options, 'options');
  mod_assert.object(options.log, 'options.log');
  mod_assert.object(options.moray, 'options.moray');
  mod_assert.string(options.moray.bucketName, 'options.moray.bucketName');
  mod_assert.optionalObject(options.backoff, 'options.backoff');
  mod_assert.optionalObject(options.moray.client, 'options.moray.client');
  mod_assert.optionalObject(options.restifyServer, 'options.restifyServer');
  if (options.moray.client === undefined || options.moray.client === null) {
      mod_assert.string(options.moray.host, 'options.moray.host');
      mod_assert.number(options.moray.port, 'options.moray.port');
  } else {
      mod_assert.equal(options.moray.host, undefined, 'options.moray.host');
      mod_assert.equal(options.moray.port, undefined, 'options.moray.port');
  }
  </validateOptions>
}
</assertPublisherOptions>

<createStatEntry>
function createStatEntry(file, fullpath, callback) {
  <performLstat>
  fs.lstat(fullpath, function (err, stat) {
    var entry = {
      name: file
    };

    <handleError>
    if (err) {
      entry.err = err;
      return callback(entry);
    }
    </handleError>
    else {
      <populateEntryWithStat>
      entry.size = stat.size;
      entry.mtime = stat.mtime.valueOf();

      <assignMimeType>
      if (stat.isDirectory()) {
        entry.mime = "inode/directory";
      } else if (stat.isBlockDevice()) entry.mime = "inode/blockdevice";
      else if (stat.isCharacterDevice()) entry.mime = "inode/chardevice";
      else if (stat.isSymbolicLink()) entry.mime = "inode/symlink";
      else if (stat.isFIFO()) entry.mime = "inode/fifo";
      else if (stat.isSocket()) entry.mime = "inode/socket";
      else {
        entry.mime = getMime(fullpath);
      }
      </assignMimeType>
      </populateEntryWithStat>

      <processSymbolicLink>
      if (!stat.isSymbolicLink()) {
        return callback(entry);
      }
      fs.readlink(fullpath, function (err, link) {
        if (entry.name == link) {
          entry.linkStatErr = "ELOOP: recursive symlink";
          return callback(entry);
        }

        if (err) {
          entry.linkErr = err.stack;
          return callback(entry);
        }
        entry.link = link;
        resolvePath(pathResolve(dirname(fullpath), link), {alreadyRooted: true}, function (err, newpath) {
          if (err) {
              entry.linkStatErr = err;
              return callback(entry);
          }
          createStatEntry(basename(newpath), newpath, function (linkStat) {
              entry.linkStat = linkStat;
              linkStat.fullPath = newpath.substr(base.length) || "/";
              return callback(entry);
          });
        });
      });
      </processSymbolicLink>
    }
  });
  </performLstat>
}
</createStatEntry>

<anonymousRangeSelection>
function( element ) {
	<setRangeForElement>
	var range = new CKEDITOR.dom.range( this.root );
	range.setStartBefore( element );
	range.setEndAfter( element );
	this.selectRanges( [ range ] );
	</setRangeForElement>
}
</anonymousRangeSelection>

<maskString>
function maskString(srcStr, mask, start, length) {
  <assignDefaults>
  var str = String(srcStr), ptn = /[^\u4e00-\u9fa5]/mg, ptn_ = /[\u4e00-\u9fa5]/mg;
  if (isNum(mask)) {
    length = start, start = mask, mask = '*';
  } else if (!isStr(mask)) {
    mask = '*';
  }
  </assignDefaults>
  
  <maskSubString>
  var maskStr = str.substr(start, length).replace(ptn, mask).replace(ptn_, mask + mask);
  return str.substr(0, start) + maskStr + (isUdf(length) ? '' : str.substr(start + length));
  </maskSubString>
}
</maskString>

<getProtectedBinary>
function getProtectedBinary(node) {
  <handleBinaryProtection>
  if (node.protectedValue) {
    return node.protectedValue;
  }
  var text = node.textContent;
  var ref = node.getAttribute(XmlNames.Attr.Ref);
  if (ref) {
      return { ref: ref };
  }
  if (!text) {
      return undefined;
  }
  var compressed = strToBoolean(node.getAttribute(XmlNames.Attr.Compressed));
  var bytes = ByteUtils.base64ToBytes(text);
  if (compressed) {
      bytes = pako.ungzip(bytes);
  }
  return ByteUtils.arrayToBuffer(bytes);
  </handleBinaryProtection>
}
</getProtectedBinary>

<logUrlTestStart>
function(url) {
	<outputStartMessage>
	if (silentMode) {
		return;
	}

	console.log(
		colors.bold('\nTesting ' + link(url)) +
			' ... please wait, this may take a minute.'
	);
	if (program.timer) {
		console.time('Total test time');
	}
	</outputStartMessage>
}
</logUrlTestStart>

<callServer>
function callServer(params,key) {
  <logEnteringProxy>
  debug("enter proxy!");
  </logEnteringProxy>
  
  <initializeOptions>
  var options = {
    url: params.domain + params.api.url,
    method: params.api.method,
  };
  </initializeOptions>
  
  <setRequestMethod>
  if (params.api.apiMethod) {
    options.method = params.api.apiMethod;
  }
  </setRequestMethod>

  <assignQueryOrFormData>
  if(options.method === 'GET') {
    options.qs = params.params;
  } else {
    options.form = params.params;
  }
  </assignQueryOrFormData>
  
  <handleJsonPayload>
  if(params.api.isJsonRaw) {
    options.headers =  {
       'Content-Type' : 'application/json'
    };
    options.body = JSON.stringify(params.params);
    delete options.form;
  }
  </handleJsonPayload>
  
  <mergeHeaders>
  if(params.req._yoheaders) {
    options.headers = options.headers||{};
    options.headers = _.merge(options.headers,params.req._yoheaders);
  }
  </mergeHeaders>

  <logApiInput>
  params.req.app.yolog.api.log('verbose','server api input: ',options);
  params.req.app.yolog.profile('proxy api time:'+options.url,'api');
  </logApiInput>
  <makeRequestCall>
  request(options, function(error, response, body) {
    <profileApiTime>
    params.req.app.yolog.profile('proxy api time:'+options.url,'api');
    </profileApiTime>
    if (response && response.statusCode === 200) {
      <handleSuccessfulResponse>
      params.req.app.yolog.api.log('verbose','server api status 200 output:',body);
      if (params.res.setCache && params.api.cache) {
        var cacheKey = params.res.genKey(params.domain, params.api.url, JSON.stringify(params.params));

        params.res.setCache(cacheKey, body, params.api.cache);
      }
      params.body = body;
      debug("proxy callback!");
      debug(params);
      procRet(params,key);
      </handleSuccessfulResponse>
    } else {
      <handleErrorResponse>
      params.req.input = {
          error:true,
          message:'api server error!'
      };
      params.req.app.yolog.log('error','server api error input: %j',options,{});
      
      if (response) {
        params.req.input.message = 'error: ' + response.statusCode;
        params.req.app.yolog.log('error','server api error %d output: %j',response.statusCode,body,{});
      } else {
        params.req.app.yolog.log('error','call server api yo response: %j',params.req.input,{});
      }
      params.next();
      </handleErrorResponse>
    }
  });
  </makeRequestCall>
}
</callServer>