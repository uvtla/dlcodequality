<add>
function add(name) {
    <set>
    function set(v) {
      var oldValue = shadow[name];
      if (oldValue === v) return;
      o[name] = v;
      notifier.notify({type: 'update', object: u, name, oldValue});
      shadow[name] = oldValue.change(v);
    }
    </set>

    <get>
    function get() {
      accessNotifier.notify({type: 'access', object: u, name});
      return shadow[name];
    }
    </get>

    <observe>
    function observe(changes) {
    }
    </observe>

    <initialSetup>
    shadow[name] = makeUpwardable(o[name]);
    observers[name] = Observer(shadow[name], observe, ['upward']).observe();
    defineProperty(u, name, {set: set, get: get, enumerable: true});
    </initialSetup>
}
</add>

<Conversation>
function Conversation (config) {
  <validation>
  if (!(this instanceof Conversation)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }
  </validation>

  <setupConfiguration>
  this.id =       config && config.id       || uuid.v4();
  this.self =     config && config.self     || null;
  this.other =    config && config.other    || null;
  this.context =  config && config.context  || {};
  </setupConfiguration>

  <initializePrivateMembers>
  this._send =    config && config.send     || null;
  this._inbox = [];     
  this._receivers = []; 
  </initializePrivateMembers>
}
</Conversation>

<ThemeSwitcher>
function ThemeSwitcher(options) {
    var _this = _super.call(this, options) || this;
    <uiSetup>
    switch (ui_1.Theme.getCurrentUIPlatform()) {
        case "ios":
            _this.$el.find("#gallery-theme-ios").prop("checked", true);
            break;
        case "android":
            _this.$el.find("#gallery-theme-android").prop("checked", true);
            break;
        default:
            ui_1.Toast.show(TAG + "\n unknown platform.");
            _this.$el.find("#gallery-theme-default").prop("checked", true);
            break;
    }
    _this.$el.find("input[name='segmented-control-platform-theme']").checkboxradio("refresh");
    </uiSetup>
    return _this;
}
</ThemeSwitcher>

<baseAssignValue>
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty$1) {
    _defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}
</baseAssignValue>

<md5>
function md5(files) {
    var hash = crypto.createHash('md5');
    <fileHashing>
    _.each(files, function(file) {
        if (!isExternal(file))
            hash.update(grunt.file.read(file), 'utf-8');
    });
    </fileHashing>
    return hash.digest('hex');
}
</md5>

<convertContent>
function convertContent(content) {
    divNode.innerHTML = '<svg><text gg="asfdas">' + content.replace(/\s/gi, "&nbsp;") + "</text></svg>";
    return divNode.firstChild.firstChild.textContent;
}
</convertContent>

<anonymousFunction1>
function() {
    var listWidth = 0;

    <showSlideshow>
    pgwSlideshow.plugin.show();
    </showSlideshow>

    <calculateListWidth>
    pgwSlideshow.plugin.find('.ps-list > ul > li').show().each(function() {
        listWidth += $(this).width();
    });
    </calculateListWidth>

    <setWidth>
    pgwSlideshow.plugin.find('.ps-list > ul').width(listWidth);
    </setWidth>
    return true;
}
</anonymousFunction1>

<BlockDecoder>
function BlockDecoder(opts) {
  opts = opts || {};
  <setup>
  var noDecode = !!opts.noDecode;
  stream.Duplex.call(this, {
    allowHalfOpen: true, 
    readableObjectMode: !noDecode
  });

  this._rType = opts.readerSchema !== undefined ?
    types.Type.forSchema(opts.readerSchema) :
    undefined;
  this._wType = null;
  this._codecs = opts.codecs;
  this._codec = undefined;
  this._parseHook = opts.parseHook;
  </setup>

  <initializeMembers>
  this._tap = new Tap(utils.newBuffer(0));
  this._blockTap = new Tap(utils.newBuffer(0));
  this._syncMarker = null;
  this._readValue = null;
  this._noDecode = noDecode;
  this._queue = new utils.OrderedQueue();
  this._decompress = null; 
  this._index = 0; 
  this._remaining = undefined; 
  this._needPush = false;
  this._finished = false;
  </initializeMembers>

  <handleFinishEvent>
  this.on('finish', function () {
    this._finished = true;
    if (this._needPush) {
      this._read();
    }
  });
  </handleFinishEvent>
}
</BlockDecoder>

<unbindEventHandlers>
function(oEvent){
	jQuery(document.body).unbind("selectstart." + this.getId()).unbind("mouseup." + this.getId()).unbind("mousemove." + this.getId());
	this.$("ghost").remove();
	this.$("rsz").removeClass("sapUiUx3ExactLstRSzDrag");
	this._iStartWidth = undefined;
	this._iStartDragX = undefined;
	this.focus();
}
</unbindEventHandlers>

<setGlobalLevel>
function setGlobalLevel(level) {
    <levelValidation>
	if (!(typeof(level) == 'string' || level instanceof String)) {
		level = Object.keys(logger.levels).reduce(function (previousValue, currentValue, index, array) {
			if (logger.levels[previousValue] == level) {
				return previousValue;
			} else {
				return currentValue;
			}
		}, logger.level);
	}
	</levelValidation>
	
	<updateGlobalLevel>
	logger.level = level;
	</updateGlobalLevel>
	
	<updateTransportLevels>
	Object.keys(logger.transports).forEach(function (name) {
		var transport = logger.transports[name];
		
		transport.level = level;
	});
	</updateTransportLevels>
}
</setGlobalLevel>