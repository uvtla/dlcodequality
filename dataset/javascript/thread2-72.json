[["object", "simplify\n```javascript\nfunction simplify(folds) {\n    if (!folds) {\n        return;\n    }\n    var res = {}, range;\n    Object.keys(folds).forEach(function (line) {\n        range = folds[line];\n        res[line] = Array.isArray(range) ? range : [\n            [range.from.line, range.from.ch],\n            [range.to.line, range.to.ch]\n        ];\n    });\n    return res;\n}\n```\n"], ["build", "\n```javascript\nfunction build() {\n  console.log('Creating an optimized production build...');\n  webpack(config).run((err) => {\n    if (err) {\n      console.error('Failed to create a production build. Reason:');\n      console.error(err.message || err);\n      process.exit(1);\n    }\n\n    console.log(chalk.green('Compiled successfully.'));\n    console.log();\n\n    copyToDistFolder();\n\n    const openCommand = process.platform === 'win32' ? 'start' : 'open';\n    const homepagePath = require(paths.appPackageJson).homepage;\n    const publicPath = config.output.publicPath;\n\n    if (homepagePath && homepagePath.indexOf('.github.io/') !== -1) {\n      console.log(`The project was built assuming it is hosted at ${chalk.green(publicPath)}.`);\n      // Instructions for deployment on GitHub Pages omitted for brevity\n    } else if (publicPath !== '/') {\n      console.log(`The project was built assuming it is hosted at ${chalk.green(publicPath)}.`);\n      // Instructions for general deployment omitted for brevity\n    } else {\n      console.log('The project was built assuming it is hosted at the server root.');\n      if (homepagePath) {\n        // Instructions for specifying homepage omitted for brevity\n      } else {\n        // Instructions for GitHub Pages deployment omitted for brevity\n      }\n      console.log(`The ${chalk.cyan('dist')} folder is ready to be deployed.`);\n      console.log('You may also serve it locally with a static server:');\n      // Instructions for local server setup omitted for brevity\n    }\n  });\n}\n```\n"], ["anonymousFunction", "\n```javascript\nfunction(name, parentName, parentAddress) {\n  if (typeof parentName == 'object')\n    parentName = parentName.name;\n\n  var loaderObj = this;\n\n  return Promise.resolve(loaderObj.normalize(name, parentName))\n  .then(function(name) {\n    var loader = loaderObj._loader;\n\n    if (loader.modules[name])\n      return loader.modules[name].module;\n\n    return loader.importPromises[name] || createImportPromise(loaderObj, name,\n      loadModule(loader, name, {})\n      .then(function(load) {\n        delete loader.importPromises[name];\n        return load.module.module;\n      }));\n  });\n}\n```\n"], ["reference", "\n```javascript\nfunction reference(node, index, parent) {\n    var definition = definitions(node.identifier)\n    var replacement\n    var image\n\n    if (definition) {\n      image = node.type === 'imageReference'\n\n      replacement = {\n        type: image ? 'image' : 'link',\n        url: definition.url,\n        title: definition.title\n      }\n\n      if (image) {\n        replacement.alt = node.alt\n      } else {\n        replacement.children = node.children\n      }\n\n      parent.children[index] = replacement\n    }\n}\n```\n"], ["updateDatabaseRegExps", "\n```javascript\nfunction() {\n    for (var i = 0; i < databaseLen; i++) {\n        var databaseName = database[\"field\" + i];\n        databaseName.regExp = createReg(databaseName);\n    }\n}\n```\n"], ["addEventListenerShim", "\n```javascript\nfunction(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n}\n```\n"], ["OneSignal", "\n```javascript\nfunction OneSignal(keys){\n  if (!keys) return\n  this.name = \"onesignal\"\n  this.keys = keys\n\n  this.send = function(data, callback) {\n    var context = this;\n    var onesignalStat;\n    var deviceType = getOneSignalDeviceType(data.deviceType);\n    var notification = getOneSignalNotificationObject(deviceType, context.keys.app_id, data.deviceToken, data.message);\n\n    request( getOneSignalRegisterOptions(context.keys.app_id, deviceType, data.deviceToken), function(err, result) {\n      if (err) {\n        onesignalStat = new OneSignalErrorStatus(err);\n        debug(\"-_-_ FAILED with onesignal _-_-\");\n        debug(err);\n        debug(onesignalStat);\n        return callback(onesignalStat);\n      } else if (result.statusCode != 200) {\n        onesignalStat = new OneSignalErrorStatus(result.body);\n        debug(\"-_-_ FAILED with onesignal _-_-\");\n        debug(onesignalStat);\n        return callback(onesignalStat);\n      }\n\n      request( getOneSignalSendOptions(context.keys.api_key, notification), function(err, result) {\n        if (err) {\n          onesignalStat = new OneSignalErrorStatus(err);\n          debug(\"-_-_ FAILED with onesignal _-_-\");\n          debug(err);\n          debug(onesignalStat);\n          return callback(onesignalStat);\n        } else if (result.statusCode != 200) {\n          onesignalStat = new OneSignalErrorStatus(result.body);\n          debug(\"-_-_ FAILED with onesignal _-_-\");\n          debug(onesignalStat);\n          return callback(onesignalStat);\n        } else {\n          onesignalStat = new OneSignalSuccessStatus(result.body);\n          debug(\"-_-_ sent with onesignal _-_-\");\n          result.service = context;\n          result.status = onesignalStat;\n          debug(result);\n          return callback(null, result);\n        }\n      })\n    });\n  }\n}\n```\n"], ["retryRequestIfAuthRequired", "\n```javascript\nfunction (auth, response, done) {\n    if (auth.get(DISABLE_RETRY_REQUEST) || !response) {\n        return done(null, true);\n    }\n\n    var code,\n        realm,\n        nonce,\n        qop,\n        opaque,\n        authHeader,\n        authParams = {};\n\n    code = response.code;\n    authHeader = _getDigestAuthHeader(response.headers);\n\n    if ((code === 401 || code === 403) && authHeader) {\n        nonce = _extractField(authHeader.value, nonceRegex);\n        realm = _extractField(authHeader.value, realmRegex);\n        qop = _extractField(authHeader.value, qopRegex);\n        opaque = _extractField(authHeader.value, opaqueRegex);\n\n        authParams.nonce = nonce;\n        authParams.realm = realm;\n        opaque && (authParams.opaque = opaque);\n        qop && (authParams.qop = qop);\n\n        if (authParams.qop || auth.get(QOP)) {\n            authParams.clientNonce = randomString(8);\n            authParams.nonceCount = ONE;\n        }\n\n        if (_.every(authParams, function (value, key) { return auth.get(key); })) {\n            return done(null, true);\n        }\n\n        auth.set(authParams);\n\n        return done(null, false);\n    }\n\n    done(null, true);\n}\n```\n"], ["isImmutable", "\n```javascript\nfunction isImmutable(value) {\n    return value == null || isBoolean(value) || isNumber(value) || isString(value);\n}\n```\n"], ["getFromWeakMap", "\n```javascript\nfunction get(key) {\n    if (isObject(key)) {\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(this).get(key);\n        return data ? data[this._i] : undefined;\n    }\n}\n```\n"], ""]