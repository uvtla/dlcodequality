[["updateVariable", "\nfunction updateVariable(key, value) {\n  <addOrUpdateVariable>\n  variableService.addOrUpdate({key: key, value: value}, function () {\n  </addOrUpdateVariable>\n      vm.variables[key] = value;\n      vm.variable = {\n          key: undefined,\n          value: undefined\n      };\n  });\n}\n"], ["humanizeSize", "\nfunction humanizeSize(bytes) {\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  if (index < 0) return '';\n  return `${+((bytes / 1024) ** index).toFixed(2)} ${units[index]}`;\n}\n"], ["reorderObjects", "\nfunction (object) {\n  var objects = this.getObjects(),\n      idx = objects.indexOf(object),\n      nextIntersectingIdx = idx;\n  \n  <findNextIntersectingObject>\n  if (idx !== objects.length-1) {\n      for (var i = idx + 1, l = this._objects.length; i < l; ++i) {\n        if (object.intersectsWithObject(objects[i]) || object.isContainedWithinObject(this._objects[i])) {\n          nextIntersectingIdx = i;\n          break;\n        }\n      }\n  </findNextIntersectingObject>\n  <updateObjectsArray>\n  removeFromArray(objects, object);\n  objects.splice(nextIntersectingIdx, 0, object);\n  </updateObjectsArray>\n  this.renderAll();\n}\n"], ["iterateData", "\nfunction(callback)\n{\n    <checkLimit>\n    if (this._limit != null && this.offset >= this._limit)\n    {\n        return callback(null, null);\n    }\n    </checkLimit>\n\n    var self = this;\n    <fetchNextItem>\n    var _next = function(err)\n    {       \n        if (err)\n        {\n            return callback(err);\n        }\n    \n        if (self.pos < self.data.length)\n        {\n            var itemData = self.data[self.pos];\n            self.pos++;\n            self.offset++;\n            var cls = self.itemCls;\n            callback(null, new cls(self.api, itemData, true));\n        }\n        else\n        {\n            callback(null, null);\n        }\n    };\n    </fetchNextItem>\n    \n    <loadDataIfNeeded>\n    if (this.data == null || this.pos >= this.data.length && this.truncated)\n    {\n        this.loadNextPage(_next);\n    }\n    else\n    {\n        process.nextTick(_next);\n    }\n    </loadDataIfNeeded>\n}\n"], ["rotate", "\nfunction rotate(out, a, angle) {\n  var c = Math.cos(angle),\n      s = Math.sin(angle)\n  var x = a[0],\n      y = a[1]\n\n  out[0] = x * c - y * s\n  out[1] = x * s + y * c\n\n  return out\n}\n"], ["initiateJoin", "\nfunction (joinType, table, tableAlias) {\n  this.__joinType = joinType;\n  this.__table = table;\n  this.__tableAlias = tableAlias || null;\n}\n"], ["pauseSpotifyPlayback", "\nfunction(options, callback) {\n  return (\n    <buildPauseRequest>\n    WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/me/player/pause')\n      .withQueryParameters(\n        options && options.device_id ? { device_id: options.device_id } : null\n      )\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .build()\n    </buildPauseRequest>\n    <executePauseRequest>\n    .execute(HttpManager.put, callback)\n    </executePauseRequest>\n  );\n}\n"], ["subscribeToTopic", "\nfunction sub (topic, spy, options, context) {\n  <setupSpy>\n  spy = spy || jasmine.createSpy();\n  </setupSpy>\n  <subscribeToArbiter>\n  spy.token = arbiter.subscribe(topic, spy, options, context);\n  </subscribeToArbiter>\n  return spy;\n}\n"], ["decodeHexString", "\nfunction decodeHexString( hex ) {\n  const bytes = [];\n  for(let i=0; i< hex.length-1; i+=2) {\n      bytes.push(parseInt(hex.substr(i, 2), 16));\n  }\n  return Buffer.from(bytes)\n}\n"], ["parseCurrencyText", "\nfunction parseCurrencyText(text) {\n  <extractAmount>\n  let amount = Number(text.replace(/[^0-9.]+/g, ''));\n  </extractAmount>\n  <handleDebitRepresentation>\n  if (text.indexOf('DR') > -1) {\n    amount = -amount;\n  }\n  </handleDebitRepresentation>\n  return amount;\n}\n"], ""]