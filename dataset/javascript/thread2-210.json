[["createRepl", "\nfunction () {\n\n    <setupStreams>\n    var writeStream = fs.createWriteStream('/dev/null'),\n        readStream = fs.createReadStream('/dev/null');\n    </setupStreams>\n\n    return repl.start({\n      prompt: format('kona~%s > ', this.version),\n      useColors: true,\n      input: this.env === 'test' ? readStream : process.stdin,\n      output: this.env === 'test' ? writeStream : process.stdout\n    });\n\n}\n"], ["normalizePresets", "\nfunction processPresets(baseURL, presets) {\n    var normalized = [];\n\n    <modifyBaseURL>\n    baseURL = baseURL.replace(\"file:\", \"\");\n    presets = presets || [];\n    </modifyBaseURL>\n\n    <processEachPreset>\n    presets.forEach(function(preset) {\n        var name = getPresetName(preset);\n\n        if (!includesPresetName(preset) || isBuiltinPreset(name)) {\n            normalized.push(preset);\n        }\n        else if (!isBuiltinPreset(name)) {\n            var npmPresetNameOrPath = getNpmPresetNameOrPath(baseURL, name);\n\n            var presetDefinition = require(npmPresetNameOrPath);\n\n            if (_.isString(preset)) {\n                normalized.push(presetDefinition);\n            }\n            else if (_.isArray(preset)) {\n                normalized.push([presetDefinition, preset[1]]);\n            }\n        }\n    });\n    </processEachPreset>\n\n    return normalized;\n}\n"], ["setupDiscoveryProcess", "\nfunction discover(cb) {\n    return function (host, args) {\n        \n        if (!args) {\n            <defaultArgsAndHost>\n            args = host || {};\n            host = 'localhost';\n            </defaultArgsAndHost>\n        }\n        \n        <defineResultCb>\n        function resultCb(result) {\n          console.log(text.__('Jenkins ver. %s is running on %s'),\n              result.hudson.version[0],\n              (result.hudson.url && result.hudson.url[0]) ? result.hudson.url[0] : host);\n        }\n        </defineResultCb>\n\n        <defineJenkinsCb>\n        function jenkinsCb(jenkins) {\n          jenkins.discover(host, cli.exitCb(null, resultCb));\n        }\n        </defineJenkinsCb>\n\n        cb(args, jenkinsCb);\n    };\n}\n"], ["triggerLoadStart", "\nfunction() {\n    if (!this.loaded) {\n        this.events.triggerEvent(\"loadstart\");\n        OpenLayers.Request.GET({\n            url: this.location,\n            success: this.parseData,\n            scope: this\n        });\n        this.loaded = true;\n    }    \n}\n"], ["formattingDate", "\nfunction() {\n    switch( this.format.toLowerCase() ) {\n        case 'microformat2':\n        case 'rfc3339':\n        case 'w3c':\n        case 'html5':\n            this.sep = ' ';\n            this.dsep = '-';\n            this.tsep = ':';\n            this.tzsep = '';\n            this.tzZulu = 'Z';\n            break;\n        default:\n            this.sep = this.autoProfile.sep;\n            this.dsep = this.autoProfile.dsep;\n            this.tsep = this.autoProfile.tsep;\n            this.tzsep = this.autoProfile.tzsep;\n            this.tzZulu = this.autoProfile.tzZulu;\n    }\n}\n"], ["renderTranslation", "\nfunction render(locale, translation) {\n    var replacements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var pluralization = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    \n    var objType = _typeof(translation);\n\n    var pluralizationType = _typeof(pluralization);\n\n    <resolvePlaceholders>\n    var resolvePlaceholders = function resolvePlaceholders() {\n      if (isArray$1(translation)) {\n        return translation.map(function (item) {\n          return replace(item, replacements, false);\n        });\n      } else if (objType === 'string') {\n        return replace(translation, replacements, true);\n      }\n    };\n    </resolvePlaceholders>\n\n    <checkPluralizationNull>\n    if (pluralization === null) {\n      return resolvePlaceholders();\n    }\n    </checkPluralizationNull>\n\n    <checkPluralizationType>\n    if (pluralizationType !== 'number') {\n      if (warnings) console.warn('i18n: pluralization is not a number');\n      return resolvePlaceholders();\n    }\n    </checkPluralizationType>\n\n    <resolveTranslation>\n    var resolvedTranslation = resolvePlaceholders();\n    </resolveTranslation>\n\n    <definePluralizations>\n    var pluralizations = null;\n    if (isArray$1(resolvedTranslation) && resolvedTranslation.length > 0) {\n      pluralizations = resolvedTranslation;\n    } else {\n      pluralizations = resolvedTranslation.split(':::');\n    }\n    </definePluralizations>\n\n    <calculateIndexAndReturnTranslation>\n    var index = plurals.getTranslationIndex(locale, pluralization);\n    if (typeof pluralizations[index] === 'undefined') {\n      if (warnings) {\n        console.warn('i18n: pluralization not provided in locale', translation, locale, index);\n      }\n      return pluralizations[0].trim();\n    }\n    </calculateIndexAndReturnTranslation>\n\n    return pluralizations[index].trim();\n}\n"], ["formSubmissionFlow", "\nfunction ( e ) {\n    if ( this.options.enableValidations !== false ) {\n        <validateFormData>\n        if ( !this.isValid() ) {\n            this.createEncryptedField( \"false\" );\n            if ( e.preventDefault ) {\n                e.preventDefault();\n            }\n            if ( window.event ) {\n                window.event.returnValue = false;\n            }\n            if ( e.originalEvent ) {\n                e.originalEvent.returnValue = false;\n            }\n            e.returnValue = false;\n            return false;\n        }\n        </validateFormData>\n    }\n    <createEncryptedField>\n    this.createEncryptedField( this.encrypt() );\n    </createEncryptedField>\n\n    <triggerOnSubmit>\n    this.onsubmit( e );\n    </triggerOnSubmit>\n}\n"], ["handleStartup", "\nfunction waitForStartup(err, pid) {\n    if (err) {\n        throw new Error('Couldn\\'t start ' + bin);\n    }\n\n    if (pid || child.exitCode !== null) {\n        child.emit('started');\n    } else {\n        setTimeout(function () {\n            pidof(bin, waitForStartup);\n        }, 100);\n    }\n}\n"], ["indexKalemEntries", "\nfunction (_ihale_id, _kalem, _tahta_id) {\n    \n\n    function f_indexle(_tahta_id, _ihale_id, _kalem) {\n        \n        return db.tahta.f_db_tahta_anahtar_tumu(_tahta_id)\n            .then(\n                function (_arrKelimeler) {\n                    if (_arrKelimeler && _arrKelimeler.length > 0) {\n                        \n                        _.some(_arrKelimeler, function (_elm) {\n                            var anahtar = _elm.Anahtar.turkishToLower();\n                            if ((_kalem.Aciklama && _kalem.Aciklama.turkishToLower().indexOf(anahtar) > -1) ||\n                                (_kalem.BransKodu && _kalem.BransKodu.turkishToLower().indexOf(anahtar) > -1)) {\n                                return db.redis.dbQ.Q.all([\n                                    db.anahtar.f_db_anahtar_index_ekle_kalem(_elm.Id, _kalem.Id),\n                                    db.anahtar.f_db_anahtar_index_ekle_ihale(_elm.Id, _ihale_id)\n                                ]);\n                            }\n                        });\n                    } else {\n                        return _kalem;\n                    }\n                })\n            .then(function () {\n                return _kalem;\n            });\n    }\n\n    if (_tahta_id && _tahta_id > 0) {\n        f_indexle(_tahta_id, _ihale_id, _kalem);\n    } else {\n        \n        return db.tahta.f_db_tahta_tumu()\n            .then(function (_arrTahtalar) {\n                \n                var arrPromises = _.map(_arrTahtalar, function (_dbTahta) {\n                    return f_indexle(_dbTahta.Id, _ihale_id, _kalem)\n                        .then(function () {\n                            return _kalem;\n                        });\n                });\n\n                return db.redis.db.dbQ.Q.all(arrPromises);\n            })\n            .then(function (_arr) {\n                return _arr;\n            });\n    }\n}\n"], ["methodAutomocker", "\nfunction automock (method) {\n    \n    if (typeof method !== 'function') {\n        throw new Error('automock error: automock must be called with function')\n    }\n    \n    var automockWrapper = function coreAutomockWrapper (args) {\n        args = requireValidOptionalObject(args)\n        \n        <checkSessionAutomockFlag>\n        if (args && args.session && args.session.automock === false) {\n            delete args.session.automock\n            return method.apply(this, arguments)\n        }\n        </checkSessionAutomockFlag>\n\n        <generateStableId>\n        var stableId = moduleCallStableId({\n            args: args,\n            methodName: method.meta.methodName,\n            moduleName: method.meta.moduleName,\n        })\n        </generateStableId>\n\n        <useAutomocks>\n        var moduleCallMock = immutableAutomock.moduleCallMocks[stableId]\n        var moduleCallResolveMock = moduleCallMock && immutableAutomock.moduleCallResolveMocks[moduleCallMock.moduleCallId]\n        \n        if (moduleCallMock && moduleCallResolveMock) {\n            return moduleCallResolveMock.resolved\n                ? Promise.resolve(_.cloneDeep(moduleCallResolveMock.moduleCallResolveData))\n                : Promise.reject(_.cloneDeep(moduleCallResolveMock.moduleCallResolveData))\n        }\n        </useAutomocks>\n\n        <checkRequireAutomock>\n        else if (args && args.session && args.session.requireAutomock) {\n            var error = new Error('missing automock for method: '+method.meta.moduleName+'.'+method.meta.methodName)\n            error.automockCallData = {\n                args: args,\n                methodName: method.meta.methodName,\n                moduleName: method.meta.moduleName,\n            }\n            error.automockStableId = stableId\n            throw error\n        }\n        </checkRequireAutomock>\n        \n        return method.apply(this, arguments)\n    }\n    \n    automockWrapper.meta = method.meta\n    \n    return automockWrapper\n}\n"], "```"]