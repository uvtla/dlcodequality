[["nodeNameToCheck", "\nfunction (nodeName) {\n    nodeName = nodeName.toUpperCase();\n    return function (node) {\n        if (node !== undefined && node.nodeName !== undefined) {\n            return node && node.nodeName.toUpperCase() === nodeName;\n        }\n        return false;\n    };\n}\n"], ["checkHttpCode", "\nfunction checkHttpCode(expected, res, body, callback) {\n  if (res.statusCode !== expected) {\n    if (!body) {\n      return callback(new Error(format('Unexpected deis response (expected %s but %s was returned)', expected, res.statusCode)));\n    }\n\n    var error = body.hasOwnProperty('detail') ?\n        body.detail : JSON.stringify(body);\n\n    return callback(new Error(error));\n  }\n\n  return callback(null, body);\n}\n"], ["compileToken", "\nfunction compileToken (token, arg) {\n  let fn = tokens[token] || noOp\n\n  return function () {\n    return arg ? fn.call(this, arg) : fn.call(this)\n  }\n}\n"], ["f_alert_secildi", "\nfunction f_alert_secildi(_uyari) {\n    l.info(\"f_alert_secildi\");\n    <getUyeIds>\n    var ids = f_uye_id_array(_uyari);\n    </getUyeIds>\n\n    return _uyari.RENDER.Sonuc.Data.map(function (_elm) {\n        <createDetail>\n        var detay = f_detay_olustur(schema.SABIT.UYARI.ALERT, _uyari, _elm);\n        </createDetail>\n        <addResultAndDikkat>\n        return f_uyari_sonucu_ekle(detay)\n            .then(function (_id) {\n                var db_dikkat = require('./db_dikkat');\n                return ids.mapX(null, db_dikkat.f_db_dikkat_ekle, _id).allX();\n            });\n        </addResultAndDikkat>\n    }).allX();\n}\n"], ["percentEscape", "\nfunction percentEscape(value) {\n    var escapedString = '';\n\n    for (var i = 0; i < value.length; i++) {\n        var char = value.charCodeAt(i);\n\n        if ((char >= 48 && char <= 57) ||       \n            (char >= 65 && char <= 90) ||       \n            (char >= 97 && char <= 122) ||      \n            char == 45 ||                       \n            char == 95 ||                       \n            char == 46 ||                       \n            char == 126) {                      \n            escapedString += String.fromCharCode(char);\n        }\n        else {\n            escapedString += '%' + char.toString(16).toUpperCase();\n        }\n    }\n    return escapedString;\n}\n"], ["ElementConfiguration", "\nfunction(view, config, widget) {\n    <Initialize>\n    var name,\n        resource_owner,\n        container_resources,\n        static_classes,\n        static_properties,\n        static_styles;\n    this._id = Lava.ELEMENT_ID_PREFIX + view.guid;\n    this._view = view;\n    this._config = config;\n    this._widget = widget;\n    this._tag_name = config.tag_name;\n    this._is_void = Lava.isVoidTag(this._tag_name);\n    </Initialize>\n    <HandleResources>\n    if (Lava.schema.RESOURCES_ENABLED && config.resource_id) {\n        resource_owner = Lava.view_manager.locateTarget(widget, config.resource_id.locator_type, config.resource_id.locator);\n        if (Lava.schema.DEBUG && !resource_owner) Lava.t(\"[Element container] resource owner not found: \" + config.resource_id.locator_type + \"=\" + config.resource_id.locator);\n        container_resources = resource_owner.getResource(config.resource_id.name);\n    }\n    </HandleResources>\n    <AssignResources>\n    if (Lava.schema.RESOURCES_ENABLED && container_resources) {\n        if (Lava.schema.DEBUG && container_resources.type != 'container') Lava.t(\"Element container: received resource type is not container: \" + container_resources.type);\n        static_classes = container_resources.value['static_classes'];\n        static_properties = container_resources.value['static_properties'];\n        static_styles = container_resources.value['static_styles'];\n    } else {\n        static_classes = config['static_classes'];\n        static_properties = config['static_properties'];\n        static_styles = config['static_styles'];\n    }\n    </AssignResources>\n    <HandleBindings>\n    if (static_classes) this._static_classes = static_classes.slice();\n    for (name in static_styles) {\n        this._static_styles[name] = static_styles[name];\n    }\n    for (name in static_properties) {\n        this._static_properties[name] = static_properties[name];\n    }\n    for (name in config.events) {\n        this._events[name] = Firestorm.clone(config.events[name]);\n    }\n    this._property_bindings = this._createArguments(config.property_bindings, view, this._onPropertyBindingChanged);\n    this._style_bindings = this._createArguments(config.style_bindings, view, this._onStyleBindingChanged);\n    this._class_bindings = this._createArguments(config.class_bindings, view, this._onClassBindingChanged);\n    for (name in this._class_bindings) {\n        this._class_bindings_values[name] = this._toClassNames(this._class_bindings[name].getValue() || '');\n    }\n\t</HandleBindings>\n}\n"], ["HotkeyInitialization", "\nfunction Hotkey (combo, description, callback, action, allowIn, persistent) {\n    this.combo = combo instanceof Array ? combo : [combo];\n    this.description = description;\n    this.callback = callback;\n    this.action = action;\n    this.allowIn = allowIn;\n    this.persistent = persistent;\n    this._formated = null;\n}\n"], ["PluginDescriptors", "\nfunction(chart) {\n    var cache = chart.$plugins || (chart.$plugins = {});\n    if (cache.id === this._cacheId) {\n        return cache.descriptors;\n    }\n    <PluginHandling>\n    var plugins = [];\n    var descriptors = [];\n    var config = (chart && chart.config) || {};\n    var options = (config.options && config.options.plugins) || {};\n    this._plugins.concat(config.plugins || []).forEach(function(plugin) {\n        var idx = plugins.indexOf(plugin);\n        if (idx !== -1) {\n            return;\n        }\n        var id = plugin.id;\n        var opts = options[id];\n        if (opts === false) {\n            return;\n        }\n        if (opts === true) {\n            opts = helpers.clone(defaults.global.plugins[id]);\n        }\n        plugins.push(plugin);\n        descriptors.push({\n            plugin: plugin,\n            options: opts || {}\n        });\n    });\n    </PluginHandling>\n    cache.descriptors = descriptors;\n    cache.id = this._cacheId;\n    return descriptors;\n}\n"], ["URLReader", "\nfunction(first) {\n    var reader  = this._reader,\n        uri     = first,\n        inner   = \"\",\n        c       = reader.peek();\n    <SkipWhitespace>\n    while (c && isWhitespace(c)) {\n        reader.read();\n        c = reader.peek();\n    }\n    </SkipWhitespace>\n    <ReadURL>\n    if (c === \"'\" || c === \"\\\"\") {\n        inner = this.readString();\n        if (inner !== null) {\n            inner = PropertyValuePart.parseString(inner);\n        }\n    } else {\n        inner = this.readUnquotedURL();\n    }\n    </ReadURL>\n    c = reader.peek();\n    <SkipWhitespaceEnd>\n    while (c && isWhitespace(c)) {\n        reader.read();\n        c = reader.peek();\n    }\n    </SkipWhitespaceEnd>\n    <ValidateURL>\n    if (inner === null || c !== \")\") {\n        uri = null;\n    } else {\n        uri += PropertyValuePart.serializeString(inner) + reader.read();\n    }\n    </ValidateURL>\n    return uri;\n}\n"], ["ArrayFilterWrapper", "\nfunction ( target, callback ) {\n    if ( typeof Array.prototype.filter === 'function' ) {\n        this.filter = function ( target, callback ) {\n            if ( this.is(target) ) {\n                return target.filter( callback );\n            } else {\n                throw new Error('[ixBand] \"filter()\" ' + MSG_NOT_ARRAY);\n            }\n        };\n    } else {\n        this.filter = function ( target, callback ) {\n            if ( this.is(target) ) {\n                var tArray = target,\n                    aryNum = tArray.length,\n                    result = [], i;\n                for ( i = 0; i < aryNum; ++i ) {\n                    var ary = tArray[i],\n                        state = callback.call( this , ary, i, tArray );\n                    if ( state == true ) result.push( ary );\n                }\n                return result;\n            } else {\n                throw new Error('[ixBand] \"filter()\" ' + MSG_NOT_ARRAY);\n            }\n        };\n    }\n    return this.filter( target, callback );\n}\n"], "```\nThis function is a wrapper for an array filter operation, and it has a single responsibility - to provide a filter method for arrays. However, there's redundancy in creating two separate implementations based on an existing feature check."]