[["dispose", "\nfunction dispose(moduleNames, callback) {\n  <determineInputParams>\n  var nameOrArr, cb;\n\n  if (typeof moduleNames === 'function') {\n      logger.debug('Disposing all modules on scope, ' + self.name);\n      nameOrArr = null;\n      cb = moduleNames;\n  } else {\n      logger.debug({\n          message: 'Disposing module(s) on scope, ' + self.name,\n          moduleNames: moduleNames\n      });\n      nameOrArr = moduleNames;\n      cb = callback;\n  }\n  </determineInputParams>\n\n  <performDispose>\n  return optionalAsync(function () {\n      var results;\n\n      if (is.array(nameOrArr)) {\n          results = context.container.dispose(nameOrArr).disposed.concat(\n              context.singletonContainer.dispose(nameOrArr).disposed\n          );\n\n          return {\n              result: results.length === nameOrArr.length,\n              disposed: results\n          };\n      }\n\n      return context.container.dispose(nameOrArr) ||\n          context.singletonContainer.dispose(nameOrArr);\n  }, new Error(), cb);\n  </performDispose>\n}\n"], ["writeSourceMap", "\nfunction writeSourceMap(srcpath, destpath, options, f) {\n  var path = require('path'),\n      SourceMapGenerator = require('source-map').SourceMapGenerator,\n      sourceMap = new SourceMapGenerator({file: path.basename(destpath)}),\n      sourceMapDest = destpath + '.map',\n      sourceMappingUrl = encodeURIComponent(path.basename(sourceMapDest)),\n      res;\n  <generateSourceMap>\n  res = f(sourceMap) + (options.sourceMap ?\n    '\\n//# sourceMappingURL=' + sourceMappingUrl : '');\n  </generateSourceMap>\n  <writeFiles>\n  if (options.sourceMap) {\n    grunt.file.write(sourceMapDest, sourceMap.toString());\n    grunt.file.copy(srcpath, path.join.apply(path, [\n      path.dirname(destpath),\n      path.basename(srcpath)\n    ]));\n  }\n  </writeFiles>\n\n  return res;\n}\n"], ["handleInputMask", "\nfunction (element, value) {\n  <applyOrRemoveMask>\n  if (value) {\n      if (value.constructor === String) {\n          $(element).mask(value);\n      } else {\n          $(element).mask(value.mask, value.settings);\n      }\n  } else {\n      $(element).unmask();\n  }\n  </applyOrRemoveMask>\n}\n"], ["setBrowserClasses", "\nfunction (browser) {\n  <generateCssClasses>\n  var classes = [\"stage\"], value;\n\n  for (var key in browser) {\n      if (browser.hasOwnProperty(key)) {\n\n          value = browser[key];\n\n          if (typeof(value) === \"boolean\") {\n              if (browserClassMap.hasOwnProperty(key)) {\n                  classes.push(browserClassMap[key][value ? 0 : 1]);\n              } else if (key === 'isIOS' && value) {\n                  classes.push('ios');\n                  classes.push('ios' + this._getIOSVersion());\n              }\n          } else {\n              if (key === 'version') {\n                  classes.push(browser.name + value);\n              } else {\n                  classes.push(value);\n              }\n          }\n      }\n  }\n  </generateCssClasses>\n\n  this.set('componentClass', classes.join(\" \"));\n}\n"], ["WrappedResponse", "\nfunction WrappedResponse(msg, hdr, err, res) {\n  this._msg = msg;\n  this.headers = hdr;\n  this.error = err;\n  this.response = res;\n}\n"], ["logWrap", "\nfunction logWrap(level) {\n  return function log() {\n    <prepareLogMessage>\n    let context, message, args, trace, err;\n\n    if (arguments[0] instanceof Error) {\n      context = API.getContext();\n      args = Array.prototype.slice.call(arguments, 1);\n      if (!args.length) {\n        err = arguments[0];\n        message = err.name + ': ' + err.message;\n      } else {\n        err = arguments[0];\n        message = arguments[1];\n        args = Array.prototype.slice.call(args, 1);\n      }\n    } else if (arguments[0] == null || (typeof (arguments[0]) !== 'object' && arguments[0] !== null) ||\n        Array.isArray(arguments[0])) {\n      context = API.getContext();\n      message = arguments[0];\n      args = Array.prototype.slice.call(arguments, 1);\n    } else {\n      context = merge(API.getContext(), arguments[0]);\n      message = arguments[1];\n      args = Array.prototype.slice.call(arguments, 2);\n    }\n    </prepareLogMessage>\n\n    <writeTrace>\n    trace = API.format(level, context || {}, message, args, err);\n    API.stream.write(trace + '\\n');\n    </writeTrace>\n  };\n}\n"], ["createTag", "\nfunction create(req, res, next) {\n  <getRequestBodyData>\n  var body = req.body,\n      slug = string.slugify(body.title);\n  </getRequestBodyData>\n\n  <lookupOrCreateTag>\n  db.tags.findBySlug(slug, function (err, tag) {\n    if (err && err.statusCode != 404) {\n      return next(err);\n    }\n\n    if (tag) {\n      res.json(201, tag);\n    } else {\n      db.tags.create(req.body, function (err, tag) {\n        if (err) {\n          next(err);\n        } else {\n          res.json(201, tag);\n          <emitTagCreationEvent>\n          signals.emit('tag:create', tag);\n          </emitTagCreationEvent>\n        }\n      });\n    }\n  });\n  </lookupOrCreateTag>\n}\n"], ["property", "\nfunction property() {\n  <resourceConstructorCall>\n  var self = Thng.resourceConstructor.call(this, this.id);\n  </resourceConstructorCall>\n\n  <delegatePropertyCall>\n  return self.property.apply(self, arguments);\n  </delegatePropertyCall>\n}\n"], ["getTargetInstForInputEventIE", "\nfunction getTargetInstForInputEventIE(topLevelType, targetInst) {\n  <specialActiveElementHandling>\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementInst;\n    }\n  }\n  </specialActiveElementHandling>\n}\n"], ["mixinEmitter", "\nfunction mixin(obj) {\n  <attachEmitterMethods>\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  </attachEmitterMethods>\n\n  return obj;\n}\n"], "```"]