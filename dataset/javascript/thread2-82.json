[["clearElementTextContent", "\nfunction () {\n    var elem,\n        i = 0;\n\n    for (; ( elem = this[i] ) != null; i++) {\n        if (elem.nodeType === 1) {\n            \n            elem.textContent = '';\n        }\n    }\n    return this;\n}\n"], ["testAlphabeticalOrder", "\nfunction getAlphabetical() {\n      <errorHandling>\n      try {\n      </errorHandling>\n        storeBeingTested.getList(test.list, {}, {name: 1}, function (list, error) {\n          <errorCondition>\n          if (typeof error != 'undefined') {\n            callback(error);\n            return;\n          }\n          </errorCondition>\n          \n          <listNavigationAndAssertion>\n          test.shouldBeTrue(list.moveFirst(), 'moveFirst');\n          test.shouldBeTrue(!list.movePrevious(), 'movePrevious');\n          test.shouldBeTrue(list.get('name') == 'Al Pacino', 'AP');\n          test.shouldBeTrue(list.moveLast(), 'moveLast');\n          test.shouldBeTrue(!list.moveNext(), 'moveNext');\n          test.shouldBeTrue(list.get('name') == 'Tom Hanks', 'TH');\n          </listNavigationAndAssertion>\n\n          callback(true);\n        });\n      <errorHandling>\n      }\n      catch (err) {\n        callback(err);\n      }\n      </errorHandling>\n}\n"], ["logTestResults", "\nfunction writeLogs(test, dirName) {\n  <buildLogString>\n  var logs =\n    test.fullTitle() +\n    '\\n' +\n    test.file +\n    '\\nStart: ' +\n    test.start +\n    '\\nEnd: ' +\n    test.end +\n    '\\nElapsed: ' +\n    test.duration +\n    '\\nStatus: ' +\n    test.state;\n  if (test.state === 'fail') {\n    logs += '\\nError: ' + test.err.stack;\n  }\n  </buildLogString>\n\n  <createDirectoryAndWriteLogs>\n  mkdirp.sync(testDir(test, dirName));\n  fs.writeFileSync(testURL(test, dirName), logs);\n  </createDirectoryAndWriteLogs>\n\n  test.url = testURL(test, dirName);\n}\n"], ["createStructuresWithCharacterSearch", "\nfunction makeStructures(char) {\n    <createStructureInstance>\n    let structures = function (id) {\n        return new StructureImpl(char, id);\n    };\n    </createStructureInstance>\n    \n    <attachSearchFunctionToStructures>\n    structures.search = search_1.makeCharacterSearch(char.agent, \"structure\" , char.id, char.ssoToken);\n    </attachSearchFunctionToStructures>\n    \n    return structures;\n}\n"], ["setHideTooltipTimeout", "\nfunction () {\n\n    var me = this;\n\n    me.logger.log(\"Setting hide tooltip timeout\", \"time\");\n\n    return setTimeout(function () {\n\n        <logAndHideTooltip>\n        me.logger.log(\"Hide tooltip\", \"time\");\n        me.hide();\n        </logAndHideTooltip>\n\n    }, this.cfg.getProperty(\"autodismissdelay\"));\n\n}\n"], ["retryGetUserInfoWithStorageUpdate", "\nfunction getUserInfoRecursive(callback) {\n    <retryLogic>\n    getUserInfoRetryCount++;\n\n    if (getUserInfoRetryCount > getUserInfoRetry) {\n        getUserInfoTimeout && clearTimeout(getUserInfoTimeout);\n\n        getUserInfoRetryCount = 0;\n\n        fireEvent('error', {\n            code: 6101,\n            message: CHAT_ERRORS[6101],\n            error: null\n        });\n    }\n    </retryLogic>\n    else {\n        <resetTimeout>\n        getUserInfoTimeout && clearTimeout(getUserInfoTimeout);\n\n        getUserInfoTimeout = setTimeout(function() {\n            getUserInfoRecursive(callback);\n        }, getUserInfoRetryCount * 10000);\n        </resetTimeout>\n\n        <sendMessageAndHandleResponse>\n        return sendMessage({\n            chatMessageVOType: chatMessageVOTypes.USER_INFO,\n            typeCode: params.typeCode\n        }, {\n            onResult: function(result) {\n                <handleResult>\n                var returnData = {\n                    hasError: result.hasError,\n                    cache: false,\n                    errorMessage: result.errorMessage,\n                    errorCode: result.errorCode\n                };\n\n                if (!returnData.hasError) {\n                    getUserInfoTimeout && clearTimeout(getUserInfoTimeout);\n\n                    <formatDataAndUpdateStorage>\n                    var messageContent = result.result;\n                    var currentUser = formatDataToMakeUser(messageContent);\n\n                    \n                    if (canUseCache) {\n                        if (db) {\n                            db.users\n                                .where('id')\n                                .equals(currentUser.id)\n                                .toArray()\n                                .then(function(users) {\n                                    if (users.length > 0 && users[0].id > 0) {\n                                        db.users\n                                            .update(currentUser.id, {\n                                                cellphoneNumber: currentUser.cellphoneNumber,\n                                                email: currentUser.email,\n                                                image: currentUser.image,\n                                                name: currentUser.name\n                                            })\n                                            .catch(function(error) {\n                                                fireEvent('error', {\n                                                    code: error.code,\n                                                    message: error.message,\n                                                    error: error\n                                                });\n                                            });\n                                    }\n                                    else {\n                                        db.users.put(currentUser)\n                                            .catch(function(error) {\n                                                fireEvent('error', {\n                                                    code: error.code,\n                                                    message: error.message,\n                                                    error: error\n                                                });\n                                            });\n                                    }\n                                });\n                        }\n                        else {\n                            fireEvent('error', {\n                                code: 6601,\n                                message: CHAT_ERRORS[6601],\n                                error: null\n                            });\n                        }\n                    }\n                    </formatDataAndUpdateStorage>\n\n                    <resultAssignment>\n                    resultData = {\n                        user: currentUser\n                    };\n\n                    returnData.result = resultData;\n                    getUserInfoRetryCount = 0;\n\n                    callback && callback(returnData);\n                    </resultAssignment>\n\n                    \n                    callback = undefined;\n                }\n                </handleResult>\n            }\n        });\n        </sendMessageAndHandleResponse>\n    }\n}\n"], ["findIndexOfNextEnvAppearance", "\nfunction getIndexOfNextEnvAppearance(fromIndex, env, sequence){\n    <mapEnvAndFindIndex>\n    return sequence.map(function(el){\n      return el._env;\n    }).indexOf(env, fromIndex);\n    </mapEnvAndFindIndex>\n}\n"], ["parsePersonStringToObject", "\nfunction parsePersonString(obj) {\n    <validateAndSplitPersonString>\n    if (typeof (obj) === \"string\") {\n        var parts = _personRegex.exec(obj);\n\n        \n        if (!parts) {\n            return {\n                name: obj\n            };\n        } else {\n            var result = {\n                name: parts[1]\n            };\n            if (parts[2]) {\n                result.email = parts[2];\n            }\n            if (parts[3]) {\n                result.url = parts[3];\n            }\n            return result;\n        }\n    } else {\n    </validateAndSplitPersonString>\n    \n    <returnObjectAsIs>\n    return obj;\n    </returnObjectAsIs>\n}\n"], ["removeFriendshipBetweenMembers", "\nfunction removeFriendship(m1, m2) {\n    <updateDBToRemoveFriend>\n    return this.update({ _id: m1 }, {\n      $pull: _defineProperty({}, pathName, { _id: m2 })\n    });\n    </updateDBToRemoveFriend>\n}\n"], ["restoreSelection", "\nfunction setRange(saved, sel) {\n    <checkSavedSelection>\n    if (!saved) { return; }\n    </checkSavedSelection>\n    \n    <restoreRangeToSelection>\n    sel = sel || getSelection();\n    sel.removeAllRanges();\n    sel.addRange(saved);\n    </restoreRangeToSelection>\n}\n"], "```"]