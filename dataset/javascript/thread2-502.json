[["validateLiteral", "\nfunction validateLiteral(node) {\n  var token = context.getTokens(node)[0];\n  if (\n    token.type === 'RegularExpression' &&\n    !safe(token.value)\n  ) {\n    context.report(node, 'Unsafe regular expression');\n  }\n}\n"], ["changeState", "\nfunction changeState(state, url, replace, lastURLValue) {\n  if (!isSupportHistoryAPI) {\n    if (isUsedHistoryLocationFlag === 0) isUsedHistoryLocationFlag = 2;\n    \n    <parseURLAndChange>\n    var urlObject = parseURL(url, isUsedHistoryLocationFlag === 2 && ('' + url).indexOf(\"#\") !== -1);\n    if (urlObject._relative !== parseURL()._relative) {\n      lastURL = lastURLValue;\n      if (replace) {\n        windowLocation.replace(\"#\" + urlObject._special);\n      } else {\n        windowLocation.hash = urlObject._special;\n      }\n    }\n    </parseURLAndChange>\n    \n  } else {\n    lastURL = windowLocation.href;\n  }\n  <manageStateStorage>\n  if (!isSupportStateObjectInHistory && state) {\n    stateStorage[windowLocation.href] = state;\n  }\n  </manageStateStorage>\n  \n  isFireInitialState = false;\n}\n"], ["getType", "\nfunction getType(key, req) {\n  var val = this.getKey(key, req);\n  if (val === undefined) return undefined;\n  return val.rtype || TYPE_NAMES.STRING;\n}\n"], ["doUniqueMemberIdsCheckAndReport", "\nfunction () {\n  var doUniqueMemberIdsCheck = function (compound) {\n    var duplicateMemberIds = [];\n    compound.members.forEach(function (member) {\n      var memberId = member.memberId;\n\n      <filterMembersById>\n      function filterByMemberId(member) {\n        return member.memberId === memberId;\n      }\n      var arrayByMemberId = compound.members.filter(filterByMemberId);\n      </filterMembersById>\n      \n      <checkDuplicatesAndRecord>\n      if (arrayByMemberId.length > 1 && duplicateMemberIds.indexOf(memberId) < 0) {\n        duplicateMemberIds.push(memberId);\n      }\n      </checkDuplicatesAndRecord>\n    });\n    <reportDuplicateMemberIds>\n    duplicateMemberIds.forEach(function (memberId) {\n      errors.push('RuleViolation identified: Artifact \\'' + compound.artifactId +\n        '\\' contains multiple members with \\'memberId\\'=\\'' + memberId + '\\'');\n    });\n    </reportDuplicateMemberIds>\n  };\n  \n  <applyUniqueCheckToComponents>\n  if (doc.artifacts && doc.artifacts.compoundComponents) {\n    doc.artifacts.compoundComponents.forEach(doUniqueMemberIdsCheck);\n  }\n  </applyUniqueCheckToComponents>\n}\n"], ["refreshComponent", "\nfunction (domElt, refreshArgs) {\n  if (this._cfg && this._cfg.animation && refreshArgs && refreshArgs.animate && !this._animating) {\n    this._animateRefresh(domElt, refreshArgs);\n  } else {\n    <replaceHTMLAndSetDom>\n    domElt = ariaUtilsDom.replaceHTML(domElt, this.html);\n    this.setDom(domElt);\n    </replaceHTMLAndSetDom>\n  }\n}\n"], ["generateApiSkeleton", "\nfunction (scope, cb) {\n  <validateScope>\n  if (!scope.args[0]) {\n    return cb(new Error('Please provide a name for this humpback-api.'));\n  }\n  if (!scope.rootPath) {\n    return cb(INVALID_SCOPE_VARIABLE('rootPath'));\n  }\n  </validateScope>\n\n  <defineDefaults>\n  _.defaults(scope, {\n    createdAt: new Date()\n  });\n  </defineDefaults>\n\n  <setControllerNameDetails>\n  scope.controllerName = scope.args[0].toLowerCase();\n  scope.ControllerName = scope.args[0].charAt(0).toUpperCase() + scope.args[0].slice(1) + 'Ctrl';\n  scope.ControllerNameLong = scope.args[0].charAt(0).toUpperCase() + scope.args[0].slice(1) + 'Controller';\n  scope.ControllerFilename = scope.args[0].charAt(0).toUpperCase() + scope.args[0].slice(1) + 'Controller.js';\n  scope.whatIsThisController = 'humpback-controller created at ' + scope.createdAt;\n  </setControllerNameDetails>\n\n  <setModelNameDetails>\n  scope.modelname = scope.args[0].toLowerCase();\n  scope.Modelname = scope.args[0].charAt(0).toUpperCase() + scope.args[0].slice(1);\n  scope.ModelFilename = scope.args[0].charAt(0).toUpperCase() + scope.args[0].slice(1) + '.js';\n  scope.whatIsThisModel = 'humpback-model created at ' + scope.createdAt;\n  </setModelNameDetails>\n\n  cb();\n}\n"], ["parseURI", "\nfunction parse(uriStr) {\n  <matchURIAgainstPattern>\n  var m = ('' + uriStr).match(URI_RE_);\n  if (!m) { return null; }\n  </matchURIAgainstPattern>\n  \n  <createURIInstance>\n  return new URI(\n    nullIfAbsent(m[1]),\n    nullIfAbsent(m[2]),\n    nullIfAbsent(m[3]),\n    nullIfAbsent(m[4]),\n    nullIfAbsent(m[5]),\n    nullIfAbsent(m[6]),\n    nullIfAbsent(m[7])\n  );\n  </createURIInstance>\n}\n"], ["setDefaults", "\nfunction setDefaults(model, defaults) {\n  if (!defaults) { return; }\n  _.each(defaults, function (value, key) {\n    if (model[key] === undefined) {\n      model[key] = value;\n    }\n  });\n}\n"], ["updateAndDeleteProperties", "\nfunction (lastProps, nextProps, transaction) {\n  <logicToHandlePropertyUpdatesAndDeletes>\n  // Multiple responsibilities are combined in this function, such as handling style updates, event listener updates, and attribute manipulation. Specific annotations within the function would be needed to further delineate these separate responsibilities.\n  </logicToHandlePropertyUpdatesAndDeletes>\n}\n"], ["not", "\nfunction not(arr) {\n  var ans = new Array(arr.length);\n  for (var i = 0; i < ans.length; i++)\n      ans[i] = ~arr[i];\n  return ans;\n}\n"], "```"]