[["patchList", "\nfunction(patchList) {\n    var dfd, i, p2, key, patch, node,\n        patchCount = patchList.length,\n        deferredList = [];\n\n    for(i=0; i<patchCount; i++){\n        p2 = patchList[i];\n        _assert(p2.length === 2, \"patchList must be an array of length-2-arrays\");\n        key = p2[0];\n        patch = p2[1];\n        node = (key === null) ? this.rootNode : this.getNodeByKey(key);\n        if(node){\n            dfd = new $.Deferred();\n            deferredList.push(dfd);\n            node.applyPatch(patch).always(_makeResolveFunc(dfd, node));\n        }else{\n            this.warn(\"could not find node with key '\" + key + \"'\");\n        }\n    }\n    \n    return $.when.apply($, deferredList).promise();\n}\n"], ["solveCurveX", "\nfunction solveCurveX(x) {\n    var t2 = x,\n        derivative,\n        x2;\n\n    \n    \n    \n    for (var i = 0; i < 8; i++) {\n        \n        x2 = sampleCurveX(t2) - x;\n        if (Math.abs(x2) < ZERO_LIMIT) {\n            return t2;\n        }\n        derivative = sampleCurveDerivativeX(t2);\n        \n        if (Math.abs(derivative) < ZERO_LIMIT) {\n            break;\n        }\n        t2 -= x2 / derivative;\n    }\n\n    \n    \n    \n    var t1 = 1,\n        t0 = 0;\n    t2 = x;\n    while (t1 > t0) {\n        x2 = sampleCurveX(t2) - x;\n        if (Math.abs(x2) < ZERO_LIMIT) {\n            return t2;\n        }\n        if (x2 > 0) {\n            t1 = t2;\n        } else {\n            t0 = t2;\n        }\n        t2 = (t1 + t0) / 2;\n    }\n\n    \n    return t2;\n}\n"], ["function", "\nfunction()\n{\n  \n  var buffer = chunks.slice(start, start + prefetchSize + 1);\n\n  \n  var nextChunk = buffer[0];\n\n  \n  if (!nextChunk)\n  {\n    self.asyncClose();\n  }\n  else\n  {\n    \n    \n    var chunk, index, length;\n    for (index = 0, length = buffer.length; index < length; index++)\n    {\n      chunk = buffer[index];\n      if (!chunk.isLoading())\n      {\n        chunk.load();\n      }\n    }\n\n    \n    nextChunk.on('loadcomplete', onLoadComplete);\n  }\n}\n"], ["Modal", "\nfunction Modal(el, options) {\n    _classCallCheck(this, Modal);\n\n    var _this13 = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, Modal, el, options));\n\n    _this13.el.M_Modal = _this13;\n\n    \n    _this13.options = $.extend({}, Modal.defaults, options);\n\n    \n    _this13.isOpen = false;\n\n    _this13.id = _this13.$el.attr('id');\n    _this13._openingTrigger = undefined;\n    _this13.$overlay = $('<div class=\"modal-overlay\"></div>');\n    _this13.el.tabIndex = 0;\n    _this13._nthModalOpened = 0;\n\n    Modal._count++;\n    _this13._setupEventHandlers();\n    return _this13;\n}\n"], ["buildAndRun", "\nfunction buildAndRun(args) {\n  \n\n<changeDirectory>\n  process.chdir(path.join(args.root, 'android'));\n</changeDirectory>\n  \n  \n\n  <adbDevices>\n  try {\n      adb.getDevices().map((device) => tryRunAdbReverse(device));\n  </adbDevices>\n\n  \n  <gradleBuild>\n  <setupGradleCommand>\n  const cmd = process.platform.startsWith('win')\n    ? 'gradlew.bat'\n    : './gradlew';\n\n  const gradleArgs = [];\n  if (args.variant) {\n    gradleArgs.push('install' +\n      args.variant[0].toUpperCase() + args.variant.slice(1)\n    );\n  } else if (args.flavor) {\n    console.warn(chalk.yellow(\n      '--flavor has been deprecated. Use --variant instead'\n    ));\n    gradleArgs.push('install' +\n      args.flavor[0].toUpperCase() + args.flavor.slice(1)\n    );\n  } else {\n    gradleArgs.push('installDebug');\n  }\n\n  if (args.installDebug) {\n    gradleArgs.push(args.installDebug);\n  }\n  </setupGradleCommand>\n\n  <executeGradleBuild>\n  console.log(chalk.bold(\n    `Building and installing the app on the device (cd android && ${cmd} ${gradleArgs.join(' ')}...`\n  ));\n\n  child_process.execFileSync(cmd, gradleArgs, {\n    stdio: [process.stdin, process.stdout, process.stderr],\n  });\n  </executeGradleBuild>\n  \n  <catchGradleBuildError>\n  } catch (e) {\n  console.log(chalk.red(\n    'Could not install the app on the device, read the error above for details.\\n' +\n    'Make sure you have an Android emulator running or a device connected and have\\n' +\n    'set up your Android development environment:\\n' +\n    'https:\n  ));\n  return Promise.reject();\n}\n</catchGradleBuildError>\n\n<startAppOnDevice>\n  try {\n    <readPackageName>\n    const packageName = fs.readFileSync(\n      'app/src/main/AndroidManifest.xml',\n      'utf8'\n    ).match(/package=\"(.+?)\"/)[1];\n    </readPackageName>\n\n    <defineAdb>\n    const adbPath = getAdbPath();\n    </defineAdb>\n\n    <getDevicesAndStartApp>\n    const devices = adb.getDevices();\n\n    if (devices && devices.length > 0) {\n      devices.forEach((device) => {\n\n        const adbArgs = ['-s', device, 'shell', 'am', 'start', '-n', packageName + '/.MainActivity'];\n\n        console.log(chalk.bold(\n          `Starting the app on ${device} (${adbPath} ${adbArgs.join(' ')})...`\n        ));\n\n        child_process.spawnSync(adbPath, adbArgs, {stdio: 'inherit'});\n      });\n    } else {\n      \n      const fallbackAdbArgs = [\n        'shell', 'am', 'start', '-n', packageName + '/.MainActivity'\n      ];\n      console.log(chalk.bold(\n        `Starting the app (${adbPath} ${fallbackAdbArgs.join(' ')}...`\n      ));\n      child_process.spawnSync(adbPath, fallbackAdbArgs, {stdio: 'inherit'});\n    }\n    </getDevicesAndStartApp>\n    <catchStartAppError>\n    \n    </catchStartAppError>\n  } catch (e) {\n  console.log(chalk.red(\n    'adb invocation failed. Do you have adb in your PATH?'\n  ));\n  return Promise.reject();\n  }\n</startAppOnDevice>\n  \n}\n"], ["function", "\nfunction() {\n<calculatePasswordStrength>\n  \t     var strength = inputEx.PasswordField.getPasswordStrength(this.getValue());\n</calculatePasswordStrength>\n        <displayStrengthIndicator>\n        for(var i = 0 ; i < 4 ; i++) {\n           var on = (strength >= i*25) && (strength>0);\n           YAHOO.util.Dom.setStyle(this.strengthBlocks[i],\"background-color\", on ? \"#4AE817\" : \"#FFFFFF\");\n\t\t  }\n        </displayStrengthIndicator>\n     }\n"], ["function", "\nfunction(key, fn) {\n<makeFilepath>\n    var filepath = this._makeFilepath(key);\n</makeFilepath>\n\n<checkExistsAndDelete>\n    fs.exists(filepath, function(exists) {\n      if (!exists) {\n        return fn();\n      }\n\n      fs.unlink(filepath, fn);\n    });\n</checkExistsAndDelete>\n  }\n"], ["findMatchingSimulator", "\nfunction findMatchingSimulator(simulators, simulatorName) {\n  if (!simulators.devices) {\n    return null;\n  }\n  const devices = simulators.devices;\n  var match;\n  \n  <loopThroughDevices>\n  for (let version in devices) {\n    \n    if (version.indexOf('iOS') !== 0) {\n      continue;\n    }\n    for (let i in devices[version]) {\n      let simulator = devices[version][i];\n      \n      <matchRunningSimulator>\n      if (simulator.availability !== '(available)') {\n        continue;\n      }\n      \n      if (simulator.state === 'Booted') {\n        if (simulatorName !== null) {\n          console.warn(\"We couldn't boot your defined simulator due to an already booted simulator. We are limited to one simulator launched at a time.\");\n        }\n        return {\n          udid: simulator.udid,\n          name: simulator.name,\n          version\n        };\n      }\n      </matchRunningSimulator>\n\n      <matchByName>\n      if (simulator.name === simulatorName) {\n        return {\n          udid: simulator.udid,\n          name: simulator.name,\n          version\n        };\n      }\n      </matchByName>\n\n      <matchFirstAvailable>\n      if (simulatorName === null && !match) {\n        match = {\n          udid: simulator.udid,\n          name: simulator.name,\n          version\n        };\n      }\n      </matchFirstAvailable>\n    }\n  }\n  </loopThroughDevices>\n\n  <returnMatch>\n  if (match) {\n    return match;\n  }\n  </returnMatch>\n  return null;\n}\n"], ["function", "\nfunction(obj) {\n<findClosestPoint>\n                if (obj.start && obj.end) {\n                  \n                  var P = obj.pointClosestTo(this);\n                  return (P === null) ? null : this.pointClosestTo(P);\n                }\n</findClosestPoint>\n                <findLineIntersection>\n                else if (obj.direction) {\n                  \n                  if (this.intersects(obj)) { return this.intersectionWith(obj); }\n                  if (this.isParallelTo(obj)) { return null; }\n                  var D = this.direction.elements, E = obj.direction.elements;\n                  var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];\n                  \n                  \n                  var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);\n                  var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];\n                  var P = plane.create(obj.anchor, N);\n                  return P.intersectionWith(this);\n                }\n                </findLineIntersection>\n                <findClosestVector>\n                else {\n                  \n                  var P = obj.elements || obj;\n                  if (this.contains(P)) { return vector.create(P); }\n                  var A = this.anchor.elements, D = this.direction.elements;\n                  var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];\n                  var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),\n                      z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);\n                  var V = vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);\n                  var k = this.distanceFrom(P) / V.modulus();\n                  return vector.create([\n                    P[0] + V.elements[0] * k,\n                    P[1] + V.elements[1] * k,\n                    (P[2] || 0) + V.elements[2] * k\n                  ]);\n                }\n                </findClosestVector>\n              }\n"], ["SwiperSlide", "\nfunction SwiperSlide() {\n    return {\n        restrict: 'E',\n        require: '^ksSwiperContainer',\n        transclude: true,\n        scope: {\n          sliderCls: '@',\n        },\n        template: '<div class=\"swiper-slide {{sliderCls}}\" ng-transclude></div>',\n        replace: true\n    };\n}\n"], ""]