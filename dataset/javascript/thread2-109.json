[["toArrayReducer", "\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\n"], ["_sanitizeHtml", "\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    var inertBodyElement = null;\n    try {\n        <initializeSanitizer>\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        </initializeSanitizer>\n\n        <handleUntrustedHTML>\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        </handleUntrustedHTML>\n\n        <mXSSEliminationLoop>\n        var mXSSAttempts = 5;\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = inertBodyElement.innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        </mXSSEliminationLoop>\n\n        <finalizeSanitization>\n        var sanitizer = new SanitizingHtmlSerializer();\n        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http:\n        }\n        return safeHtml;\n        </finalizeSanitization>\n    }\n    finally {\n        <cleanup>\n        if (inertBodyElement) {\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n        </cleanup>\n    }\n}\n"], ["handleTypedefProperties", "\nfunction(e) {\n    if (e.doclet.kind == 'typedef' && e.doclet.properties) {\n      properties[e.doclet.longname] = e.doclet.properties;\n    }\n  }\n"], ["endOperations", "\nfunction endOperations(group) {\n  let ops = group.ops\n  for (let i = 0; i < ops.length; i++) \n    endOperation_R1(ops[i])\n  for (let i = 0; i < ops.length; i++) \n    endOperation_W1(ops[i])\n  for (let i = 0; i < ops.length; i++) \n    endOperation_R2(ops[i])\n  for (let i = 0; i < ops.length; i++) \n    endOperation_W2(ops[i])\n  for (let i = 0; i < ops.length; i++) \n    endOperation_finish(ops[i])\n}\n"], ["formSubmission", "\nfunction(url, options, fn){\n        var r = request.post(url, fn);\n        var form = r.form();\n        form.append('field', options.field);\n        <fileStreamAppending>\n        form.append('files', fs.createReadStream(options.filepath));\n        </fileStreamAppending>\n        return form;\n    }\n"], ["initializeDatabase", "\nfunction(db) {\n\t\tvar types_uuid = uuid();\n\t\tdebug.assert(types_uuid).is('uuid');\n\t\treturn db.query('CREATE SEQUENCE types_seq')\n\t\t\t.query([\n\t\t\t\t'CREATE TABLE IF NOT EXISTS types (',\n\t\t\t\t\"\tid uuid PRIMARY KEY NOT NULL default uuid_generate_v5('\"+types_uuid+\"', nextval('types_seq'::regclass)::text),\",\n\t\t\t\t'\tname text,',\n\t\t\t\t'\tschema json,',\n\t\t\t\t'\tvalidator text,',\n\t\t\t\t'\tmeta json,',\n\t\t\t\t'\tcreated timestamptz NOT NULL default now(),',\n\t\t\t\t'\tmodified timestamptz NOT NULL default now(),',\n\t\t\t\t'\tCHECK (check_javascript(validator))',\n\t\t\t\t')'].join('\\n'))\n\t\t\t.query(\t'ALTER SEQUENCE types_seq OWNED BY types.id');\n\t}\n"], ["getScript", "\nfunction getScript(url, async, cb) {\n    if (typeof async === 'function') {\n      cb = async;\n      async = false;\n    }\n\n    <createScriptElement>\n    var el = document.createElement('script');\n    el.type = 'text/javascript';\n    el.src = url;\n    if (async)\n      el.async = true;\n    </createScriptElement>\n\n    <scriptLoadEventHandler>\n    el.onload = el.onreadystatechange = function() {\n      if ((!this.readyState ||\n            this.readyState == 'loaded' ||\n            this.readyState == 'complete')) {\n        el.onload = el.onreadystatechange = null;\n\n        artoo.mountNode.removeChild(el);\n\n        if (typeof cb === 'function')\n          cb();\n      }\n    };\n    </scriptLoadEventHandler>\n\n    <appendScriptElement>\n    artoo.mountNode.appendChild(el);\n    </appendScriptElement>\n  }\n"], ["enable_job", "\nfunction enable_job(jobName, customParams, callback) {\n      <parseArguments>\n      var _doArgs41 = doArgs(arguments, ['string', ['object', {}], 'function']);\n      var _doArgs42 = _slicedToArray(_doArgs41, 3);\n      jobName = _doArgs42[0];\n      customParams = _doArgs42[1];\n      callback = _doArgs42[2];\n      </parseArguments>\n\n      var self = this;\n      <sendEnableRequest>\n      doRequest({\n        method: 'POST',\n        urlPattern: [JOB_ENABLE, jobName],\n        noparse: true\n      }, customParams, function (error, data) {\n        if (error) {\n          callback(error, data);\n          return;\n        }\n        self.job_info(jobName, customParams, callback);\n      });\n      </sendEnableRequest>\n    }\n"], ["setTransitionProperties", "\nfunction setTransitionProperties() {\n        <assignTransitionProperties>\n        PermTransitionProperties.toState = toState;\n        PermTransitionProperties.toParams = toParams;\n        PermTransitionProperties.fromState = fromState;\n        PermTransitionProperties.fromParams = fromParams;\n        PermTransitionProperties.options = options;\n        </assignTransitionProperties>\n      }\n"], ["resizeWrapper", "\nfunction( element ) {\n            \n            element = $.getElement( element );\n\n            <createWrappers>\n            var wrappers = [\n                $.makeNeutralElement( 'div' ),\n                $.makeNeutralElement( 'div' ),\n                $.makeNeutralElement( 'div' )\n            ];\n            </createWrappers>\n\n            <applyStyles>\n            $.extend(wrappers[0].style, {\n                display: \"table\",\n                height: \"100%\",\n                width: \"100%\"\n            });\n            $.extend(wrappers[1].style, {\n                display: \"table-row\"\n            });\n            $.extend(wrappers[2].style, {\n                display: \"table-cell\",\n                verticalAlign: \"middle\",\n                textAlign: \"center\"\n            });\n            </applyStyles>\n\n            <appendWrappers>\n            wrappers[0].appendChild(wrappers[1]);\n            wrappers[1].appendChild(wrappers[2]);\n            wrappers[2].appendChild(element);\n            </appendWrappers>\n\n            return wrappers[0];\n        }\n"], "```\n\nMost of the functions have been tagged with single responsibility indicating that they are SRP compliant. However, some functions are tagged with internal responsibilities, as they include distinct coherent blocks of code serving specific separate purposes which may or may not be signs of SRP violation depending on the context and granularity of responsibilities within the context of the application's architecture.\n"]