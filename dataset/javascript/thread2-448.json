[["setAnimationParent", "\nfunction(parent) {\n  <checkIfSelfParent>\n  if (parent === this) {\n    throw new Error('parent can not be set to self!');\n  }\n  </checkIfSelfParent>\n  \n  enterModifyCurrentAnimationState();\n  \n  try {\n    <detachFromCurrentPlayer>\n    if (this._player !== null) {\n      this._player.source = null;\n      this._player = null;\n    }\n    </detachFromCurrentPlayer>\n    \n    <removeFromParent>\n    if (this.parent !== null) {\n      this.remove();\n    }\n    </removeFromParent>\n\n    this._parent = parent;\n\n    <updateStartTime>\n    if (this.parent === null || this.parent.type !== 'seq') {\n      this._startTime =\n          this._stashedStartTime === undefined ? 0.0 : this._stashedStartTime;\n      this._stashedStartTime = undefined;\n    }\n    </updateStartTime>\n\n    this._updateTimeMarkers();\n  } finally {\n    <exitModifyAnimationState>\n    exitModifyCurrentAnimationState(\n        Boolean(this.player) ? repeatLastTick : null);\n    </exitModifyAnimationState>\n  }\n}\n"], ["copyIfSet", "\nfunction copyIfSet(src, dest, prop) {\n  if (src[prop]) {\n    dest[prop] = src[prop];\n  }\n}\n"], ["createCustomError", "\nfunction(msg, type, details) {\n  if(_nodejs) {\n    <setupErrorInheritance>\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    </setupErrorInheritance>\n  }\n  this.name = type || 'jsonld.Error';\n  this.message = msg || 'An unspecified JSON-LD error occurred.';\n  this.details = details || {};\n}\n"], ["preventComplexMerge", "\nfunction preventComplexMerge(objValue, srcValue) {\n  if (!isObjectLike(objValue) && !isObjectLike(srcValue)) {\n    return DEFAULT_MERGER;\n  }\n\n  if (!isPlainObject(objValue) || !isPlainObject(srcValue)) {\n    return srcValue || objValue;\n  }\n\n  return mergeWith({}, objValue, srcValue, preventComplexMerge);\n}\n"], ["loadMyrmexApi", "\nfunction loadApi(apiSpecPath, identifier) {\n  return plugin.myrmex.fire('beforeApiLoad', apiSpecPath, identifier)\n  .spread((apiSpecPath, identifier) => {\n    <getApiSpecification>\n    const apiSpec = _.cloneDeep(require(apiSpecPath));\n    apiSpec['x-myrmex'] = apiSpec['x-myrmex'] || {};\n    </getApiSpecification>\n\n    <instantiateApi>\n    const Api = require('./api');\n    const api = new Api(apiSpec, identifier);\n    </instantiateApi>\n\n    return plugin.myrmex.fire('afterApiLoad', api);\n  })\n  .spread(api => {\n    <initializeApi>\n    return api.init();\n    </initializeApi>\n  });\n}\n"], ["validateConfig", "\nfunction(config){\n    if (!config.name)\n        throw \"ERR: No name was assigned\";\n    if(!config.post)\n        throw \"ERR: No post function was assigned\";\n    this.name = config.name;\n    this.req = config.req || [];\n    this.post = config.post;\n    this.invokers = config.invokers || [];\n    this.pre = config.pre;\n}\n"], ["getBagsByAttribute", "\nfunction _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {\n  var result = [];\n\n  for(var i = 0; i < safeContents.length; i ++) {\n    for(var j = 0; j < safeContents[i].safeBags.length; j ++) {\n      var bag = safeContents[i].safeBags[j];\n      if(bagType !== undefined && bag.type !== bagType) {\n        continue;\n      }\n\n      if(attrName === null) {\n        result.push(bag);\n        continue;\n      }\n      if(bag.attributes[attrName] !== undefined &&\n        bag.attributes[attrName].indexOf(attrValue) >= 0) {\n        result.push(bag);\n      }\n    }\n  }\n\n  return result;\n}\n"], ["getCompletionData", "\nfunction() {\n  var input = this.terminal.getInputState();\n  var start = input.cursor.start;\n  var index = this.terminal.getChoiceIndex();\n\n  return this.requisition.getStateData(start, index).then(function(data) {\n    <formatCompletionData>\n    data.statusMarkup.forEach(function(member) {\n      member.string = member.string.replace(/ /g, '\\u00a0'); \n      member.className = 'gcli-in-' + member.status.toString().toLowerCase();\n    }, this);\n    </formatCompletionData>\n\n    return data;\n  });\n}\n"], ["checkHasMethod", "\nfunction hasMethod (signature) {\n  <normalizeSignature>\n  signature = getValidSignature(signature)\n  </normalizeSignature>\n\n  <lookupModuleAndMethod>\n  var module = immutable.modules[signature.moduleName]\n  \n  if (!defined(module)) {\n      return false\n  }\n  \n  return defined(module[signature.methodName]) ? true : false\n  </lookupModuleAndMethod>\n}\n"], ["drawPatternOnCompositor", "\nfunction drawPattern(pattern, x, y, width, height) {\n  <enqueuePatternDrawing>\n  var key = \"0,0,\" + width + \",\" + height;\n  this.compositor.addQuad(pattern, key, x, y, width, height);\n  </enqueuePatternDrawing>\n}\n"], "```"]