[["apply", "\nfunction apply(updatedModules) {\n    module.hot.apply(APPLY_OPTIONS, function(err, renewedModules) {\n      if (err) return handleError(err);\n      <checkForUpdates>\n      if (!upToDate()) check(); </checkForUpdates>\n      <logModuleUpdates>\n      logResults(updatedModules, renewedModules); </logModuleUpdates>\n    });\n}\n"], ["handleRequest", "\nfunction handleRequest(body, methods, req, res, session) {\n  <initializeBatchProcess>\n  var isBatch = Array.isArray(body);\n  session = session || {};\n  session.httpRequest = req;\n  var reqs = isBatch ? body : [body]; </initializeBatchProcess>\n  <resolvePromises>\n  var p = Promise.all(setup(reqs, methods, session)).then(\n   function (result) {\n     <postProcessing>\n     if (methods.__post)\n       result = methods.__post(result, session);\n     </postProcessing>\n     <filterResult>\n     result = result.filter(function(elem){\n       var keep = !!elem.id;\n       return keep;\n     });\n     </filterResult>\n     <handleEmptyResult>\n     if (!result.length) {\n       return null;\n     }\n     <handleNonBatch>\n     if (!isBatch && result.length == 1)\n       return result[0];\n     </handleNonBatch>\n     return result;\n  });\n  </resolvePromises>\n  <sendResponse>\n  if (res) {\n    p = p.then(function(result) {\n      if (result) {\n        var rpcResponse = (methods.__stringify || JSON.stringify)(result);\n        var contentLength = Buffer.byteLength(rpcResponse);\n        res.writeHead(contentLength ? 200 : 204, {\n          'Content-Length': String(contentLength),\n          'Content-Type': 'application/json'\n        });\n        res.end(rpcResponse);\n      } else {\n        res.end();\n      }\n    });\n  }\n  </sendResponse>\n  return p;\n}\n"], ["isValidTransition", "\nfunction isValidTransition (link, context) {\n  var isValid = true;\n  if (!(PromisePipe.envTransitions[context._env] && PromisePipe.envTransitions[context._env][link._env])) {\n    if (!isSystemTransition(link._env)) {\n      isValid = false;\n    }\n  }\n  return isValid;\n}\n"], ["setPrimaryCryptoKeyVersion", "\nasync function setPrimaryCryptoKeyVersion(\n  projectId = 'your-project-id', \n  keyRingId = 'my-key-ring', \n  cryptoKeyId = 'my-key', \n  version = 1234 \n) {\n  <loadKMSClient>\n  const kms = require('@google-cloud/kms');\n  const client = new kms.KeyManagementServiceClient();\n  </loadKMSClient>\n  \n  <setupRequestData>\n  const locationId = 'global';\n  const name = client.cryptoKeyPath(\n    projectId,\n    locationId,\n    keyRingId,\n    cryptoKeyId\n  );\n  const cryptoKeyVersionId = version;\n  const request = {name, cryptoKeyVersionId};\n  </setupRequestData>\n  \n  <updateCryptoKey>\n  const [cryptoKey] = await client.updateCryptoKeyPrimaryVersion(request);\n  </updateCryptoKey>\n  \n  <logCryptoKeyInfo>\n  console.log(`Set ${version} as primary version for crypto key ${cryptoKeyId}.\\n`);\n  console.log(`Name: ${cryptoKey.name}:`);\n  console.log(`Created: ${new Date(cryptoKey.createTime)}`);\n  console.log(`Purpose: ${cryptoKey.purpose}`);\n  console.log(`Primary: ${cryptoKey.primary.name}`);\n  console.log(`  State: ${cryptoKey.primary.state}`);\n  console.log(`  Created: ${new Date(cryptoKey.primary.createTime)}`);\n  </logCryptoKeyInfo>\n}\n"], ["RecursiveDirectiveHelperCompilePost", "\nfunction RecursiveDirectiveHelperCompilePost(scope, element) {\n  <compileContents>\n  if (!compiledContents) {\n    compiledContents = $compile(contents);\n  }\n  \n  compiledContents(scope, function (clone) {\n    element.append(clone);\n  });\n  </compileContents>\n  \n  <applyLinkPost>\n  if (link && link.post) {\n    link.post.apply(null, arguments);\n  }\n  </applyLinkPost>\n}\n"], ["createPlaceHolder", "\nfunction createPlaceHolder($page, type) {\n  var placeHolders = { kittens: 'placekitten.com', bears: 'placebear.com', lorem: 'lorempixel.com',\n      bacon: 'baconmockup.com', murray: 'www.fillmurray.com'};\n  <generateGallery>\n  var gallery = '';\n  for (var i = 0; i < getRandomInt(50,100); i++) {\n    gallery += '<li class=\"photoClass\" style=\"background:url(http:\n        getRandomInt(200,300) + '/' + getRandomInt(200,300) + ') 50% 50% no-repeat\"></li>';\n  }\n  </generateGallery>\n  <updatePageContent>\n  $page.find('.photo-gallery').html(gallery);\n  tt.refreshScroll(); \n  tt.scrollTo(0,0);   \n  </updatePageContent>\n}\n"], ["jsonGetData", "\nfunction jsonGetData(data, keypath, appendData = 0, delimiter = '.') {\n  <traverseToKeyPath>\n  let tmp = data,\n      ignore,\n      r;\n  keypath = keypath || [];\n  typeof keypath == 'string' && (keypath = keypath.split(delimiter));\n\n  if (!(data && keypath.length)) return r;\n  keypath.slice(0, -1).map(val => {\n    if (val && tmp && val in tmp) {\n        tmp = tmp[val];\n    } else {\n        if (appendData) {\n            tmp[val] = {};\n            tmp = tmp[val];\n        } else {\n            ignore = 1;\n        }\n    }\n  });\n  </traverseToKeyPath>\n  <returnFinalKeyValue>\n  if (!ignore && tmp && keypath && keypath.length) {\n    r = tmp[keypath.slice(-1)];\n  }\n  </returnFinalKeyValue>\n\n  return r;\n}\n"], ["assembleMIDI", "\nfunction (notes, settings) {\n  <createNoteEvents>\n  var noteEvents = makeNoteEvents(notes, settings);\n  </createNoteEvents>\n  <createPatchEvent>\n  var setPatch = makePatchEvent(0, settings.melodyPatch);\n  </createPatchEvent>\n  <calculateLengthAndConcatenate>\n  var length = setPatch.length + noteEvents.length + trackFooter.length;\n  return Buffer.concat([trackHeader, padNumber(length, 4), setPatch, noteEvents, trackFooter]);\n  </calculateLengthAndConcatenate>\n}\n"], ["renderAffix", "\nfunction renderAffix() {\n  <determineHierarchy>\n  var hierarchy = getHierarchy();\n  </determineHierarchy>\n  if (hierarchy && hierarchy.length > 0) {\n    <buildHTMLContent>\n    var html = '<h5 class=\"title\">In This Article</h5>'\n    html += util.formList(hierarchy, ['nav', 'bs-docs-sidenav']);\n    $(\"#affix\").empty().append(html);\n    </buildHTMLContent>\n    <styleAffixIfNeeded>\n    if ($('footer').is(':visible')) {\n      $(\".sideaffix\").css(\"bottom\", \"70px\");\n    }\n    </styleAffixIfNeeded>\n    <attachClickEvent>\n    $('#affix a').click(function() {\n      var scrollspy = $('[data-spy=\"scroll\"]').data()['bs.scrollspy'];\n      var target = e.target.hash;\n      if (scrollspy && target) {\n        scrollspy.activate(target);\n      }\n    });\n    </attachClickEvent>\n  }\n}\n"], ["normalizeCmd", "\nfunction normalizeCmd(cmd, options) {\n  <handleCommandAsObject>\n  if (cmd.cmd) {\n    options = options || {};\n    _.extend(options, cmd);\n    cmd = options.cmd;\n    delete options.cmd;\n  }\n  </handleCommandAsObject>\n  <ensureCommandStructure>\n  if (typeof(cmd) === 'string') {\n    cmd = {\n      command: cmd\n    };\n  }\n  </ensureCommandStructure>\n  <setupCommandArguments>\n  if (typeof(cmd.args) === 'undefined') {\n    cmd.args = shellParse(cmd.command);\n    cmd.command = cmd.args.shift();\n  }\n  </setupCommandArguments>\n  return cmd;\n}\n"], "```"]