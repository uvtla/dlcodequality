[["signUpOrLoginWithMobilePhone", "\nfunction(\n        mobilePhoneNumber,\n        smsCode,\n        attrs,\n        options\n      ) {\n        attrs = attrs || {};\n        attrs.mobilePhoneNumber = mobilePhoneNumber;\n        attrs.smsCode = smsCode;\n        var user = AV.Object._create('_User');\n        return user.signUpOrlogInWithMobilePhone(attrs, options);\n      }\n"], ["getCode", "\nfunction getCode(code, opts, attrs, url) {\n  var type = getType(attrs),\n    parserOpts = getParserOptions(attrs)\n\n  if (url) {\n    <readFile>\n    var src = getAttr(attrs, 'src')\n    if (src) {\n      var\n        charset = getAttr(attrs, 'charset'),\n        file = path.resolve(path.dirname(url), src)\n      code = require('fs').readFileSync(file, charset || 'utf8')\n    }\n    </readFile>\n  }\n  return _compileJS(code, opts, type, parserOpts, url)\n}\n"], ["removeMethod", "\n<removeKeybinding>\nfunction removeMethod (char, method) {\n  if (!hasKeybinding(char, method)) return;\n  var fnIndex = bindings[char].methods.indexOf(method);\n  window.removeEventListener('keyup', bindings[char].listeners[fnIndex]);\n  bindings[char].methods.splice(fnIndex, 1);\n  bindings[char].listeners.splice(fnIndex, 1);\n</removeKeybinding>\n\n<cleanupBindings>\n  if (!bindings[char].methods.length) {\n    delete bindings[char];\n  } else if (fnIndex === 0) {\n    window.addEventListener('keyup', bindings[char].listeners[0]);\n  }\n}\n</cleanupBindings>\n"], ["TypedFeatureStructure", "\nfunction TypedFeatureStructure(options) {\n  this.type = options.type;\n  if (!this.type) {\n    this.type = options.signature.typeLattice.bottom;\n  }\n  this.features = {};\n  this.aux_type = null;\n  this.aux_features = {};\n  this.forward = null;\n  this.forward_mark = NO_GENERATION;\n  this.unifact = null;\n  this.unifact_mark = NO_GENERATION;\n  this.label = null;\n  this.printed = false;\n  this.id = node_id_counter++;\n  this.coreference = false;\n  if (options.features) {\n    this.setFeatures(options.features, options.signature);\n  }\n  this.lexicalString = null;\n  this.incoming = {};\n}\n"], ["FindDarkestColor", "\nfunction(){\n  var darkest,\n    minBrightness = Number.MAX_VALUE;\n  this.each(function(c){\n    var luma = c.luminance();\n    if(luma < minBrightness){\n      darkest = c;\n      minBrightness = luma;\n    }\n  });\n  return darkest;\n}\n"], ["initializePopOverInteractionData", "\nfunction initializePopOverInteractionData() {\n  var $li = jQuery(this).parent().parent();\n  var index = parseInt($li.attr('data-interaction-index'));\n  var interaction = that.interactions[index];\n\n  if (!interaction) {\n    return;\n  }\n\n  durationText.setText(that.formatDuration(interaction.duration));\n  processingText.setText(that.formatDuration(interaction.duration - interaction.roundtrip));\n  requestTimeText.setText(that.formatDuration(interaction.requestTime));\n  roundtripText.setText(that.formatDuration(interaction.roundtrip));\n\n  bytesReceivedText.setText(interaction.bytesReceived);\n  requestNumberText.setText(interaction.requests.length);\n\n  startTimeText.setText(that.formatTime(interaction.start));\n}\n"], ["onCopy", "\nfunction onCopy(\n  opts?: Options,\n  event: *,\n  change: Change,\n  editor: Editor\n): Object {\n  <getCopiedFragmentBlock>\n  const copiedFragment = getCopiedFragment(opts, change.value);\n  if (!copiedFragment) {\n    return null;\n  }\n  </getCopiedFragmentBlock>\n\n  <cloneFragmentBlock>\n  cloneFragment(event, change.value, copiedFragment);\n  </cloneFragmentBlock>\n  return true;\n}\n"], ["resolvePort", "\nasync function resolvePort (port) {\n  const portfinder = require('portfinder')\n  portfinder.basePort = parseInt(port) || 8080\n  port = await portfinder.getPortPromise()\n  return port\n}\n"], ["promiseWrapper", "\nfunction (azurePromise) {\n  var deferred = $q.defer();\n  azurePromise.done(function (items) {\n    deferred.resolve(items);\n  }, function (err) {\n    deferred.reject(err);\n  });\n  return deferred.promise;\n}\n"], ["MouseEventBoundaryCondition", "\nfunction(e){\n  if(this === e.target ||\n     container_id === jQuery(e.target).parent().attr('id') ||\n     container_id === jQuery(e.target).attr('id')){\n    <updateStartPosition>\n      _update_start_pos(e);\n      jQuery(container_div).bind('mousemove', _scroller);\n    </updateStartPosition>\n  }\n}\n"], "```\nSRP Compliance: This function performs the task of checking boundary conditions for mouse events and then updates the start position if the conditions are met. It can be considered as a single responsibility towards handling mouse events within a specific boundary condition."]