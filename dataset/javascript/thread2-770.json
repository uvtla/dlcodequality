[["sortFacesByMaterial", "\nfunction sortFacesByMaterial (geometry, material) {\n  var f, fl, face, materialIndex, vertices,\n    groupHash, hash_map = {};\n\n  var numMorphTargets = geometry.morphTargets.length;\n  var numMorphNormals = geometry.morphNormals.length;\n\n  <usesFaceMaterial>\n  var usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;\n  </usesFaceMaterial>\n\n  geometry.geometryGroups = {};\n\n  <groupingFaces>\n  for (f = 0, fl = geometry.faces.length; f < fl; f++) {\n    face = geometry.faces[f];\n    materialIndex = usesFaceMaterial ? face.materialIndex : 0;\n\n    if (hash_map[materialIndex] === undefined) {\n      hash_map[materialIndex] = {'hash': materialIndex, 'counter': 0};\n    }\n\n    groupHash = hash_map[materialIndex].hash + '_' + hash_map[materialIndex].counter;\n\n    if (geometry.geometryGroups[groupHash] === undefined) {\n      geometry.geometryGroups[groupHash] = {'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals};\n    }\n\n    vertices = 3;\n\n    if (geometry.geometryGroups[groupHash].vertices + vertices > 65535) {\n      hash_map[materialIndex].counter += 1;\n      groupHash = hash_map[materialIndex].hash + '_' + hash_map[materialIndex].counter;\n\n      if (geometry.geometryGroups[groupHash] === undefined) {\n        geometry.geometryGroups[groupHash] = {'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals};\n      }\n    }\n\n    geometry.geometryGroups[groupHash].faces3.push(f);\n    geometry.geometryGroups[groupHash].vertices += vertices;\n  }\n  </groupingFaces>\n\n  <creatingGeometryGroupsList>\n  geometry.geometryGroupsList = [];\n\n  for (var g in geometry.geometryGroups) {\n    geometry.geometryGroups[g].id = _geometryGroupCounter++;\n    geometry.geometryGroupsList.push(geometry.geometryGroups[g]);\n  }\n  </creatingGeometryGroupsList>\n}\n"], ["updatePseudoClassStyle", "\nfunction updatePseudoClassStyle(ratingWrapperStyleId, properties, preventFocusStyleForTouchAndClick) {\n  <decideRatingFocusStyle>\n  let ratingFocusStyle;\n  if (preventFocusStyleForTouchAndClick) {\n    ratingFocusStyle = { outline: 0 };\n  } else {\n    ratingFocusStyle = {\n      ...style.focusStyle,\n      ...properties.focusStyle,\n    };\n  }\n  </decideRatingFocusStyle>\n\n  <prepareStyles>\n  const styles = [\n    {\n      id: ratingWrapperStyleId,\n      style: ratingFocusStyle,\n      pseudoClass: 'focus',\n    },\n  ];\n  </prepareStyles>\n\n  <injectPreparedStyles>\n  injectStyles(styles);\n  </injectPreparedStyles>\n}\n"], ["getDefaultExcerpt", "\nfunction getDefaultExcerpt(content) {\n  var pTags = [];\n\n  <createDOM>\n  doc = doc || createDom(content);\n  </createDOM>\n  \n  <queryParagraphs>\n  pTags = doc.querySelectorAll('p');\n  </queryParagraphs>\n\n  <getFirstParagraphOrEmpty>\n  if (pTags.length) {\n    return '<p>' + pTags[0].innerHTML + '</p>';\n  } else {\n    return '';\n  }\n  </getFirstParagraphOrEmpty>\n}\n"], ["updateSatellite", "\nfunction(name, satellite, autoSet){\n  <satelliteManagementVars>\n  var oldSatellite = this.satellite[name] || null;\n  var auto = this.satellite[AUTO];\n  var autoConfig = auto && auto[name];\n  var preserveAuto = autoSet && autoConfig;\n  </satelliteManagementVars>\n\n  <preserveAutoConfiguration>\n  if (preserveAuto) {\n    satellite = autoConfig.instance;\n    if (satellite && autoConfig.config.instance)\n      delete autoConfig.config.instance.setOwner;\n  }\n  </preserveAutoConfiguration>\n\n  <processSatelliteConfig>\n  else {\n    satellite = processSatelliteConfig(satellite);\n\n    <checkSatelliteNameChange>\n    if (satellite && satellite.owner === this && auto && satellite.ownerSatelliteName && auto[satellite.ownerSatelliteName]) {\n      basis.dev.warn(namespace + ': auto-create satellite can\\'t change name inside owner');\n      return;\n    }\n    </checkSatelliteNameChange>\n\n    <deleteOldAutoConfig>\n    if (autoConfig) {\n      delete auto[name];\n\n      if (autoConfig.config.instance)\n        autoConfig.config.instance.removeHandler(AUTO_SATELLITE_INSTANCE_HANDLER, autoConfig);\n\n      if (autoConfig.config.handler)\n        this.removeHandler(autoConfig.config.handler, autoConfig);\n    }\n    </deleteOldAutoConfig>\n  }\n  </processSatelliteConfig>\n\n  <updateSatelliteInstance>\n  if (oldSatellite !== satellite) {\n    var satelliteListen = this.listen.satellite;\n    var satellitePersonalListen = this.listen['satellite:' + name];\n    var destroySatellite;\n\n    if (oldSatellite) {\n      <removeOldSatellite>\n      delete this.satellite[name];\n      var oldSatelliteName = oldSatellite.ownerSatelliteName;\n      if (oldSatelliteName != null) {\n        oldSatellite.ownerSatelliteName = null;\n        oldSatellite.emit_ownerSatelliteNameChanged(oldSatelliteName);\n      }\n\n      if (autoConfig && oldSatellite.destroy === warnOnAutoSatelliteDestoy) {\n        destroySatellite = oldSatellite;\n      }\n      </removeOldSatellite>\n\n      <destroyOrPreserveOldSatellite>\n      else {\n        if (satelliteListen)\n          oldSatellite.removeHandler(satelliteListen, this);\n        if (satellitePersonalListen)\n          oldSatellite.removeHandler(satellitePersonalListen, this);\n\n        oldSatellite.setOwner(null);\n      }\n      </destroyOrPreserveOldSatellite>\n\n      <managePreserveAuto>\n      if (preserveAuto && !satellite && autoConfig.config.instance)\n        autoConfig.config.instance.setOwner = warnOnAutoSatelliteOwnerChange;\n      </managePreserveAuto>\n    }\n\n    <updateNewSatellite>\n    if (satellite) {\n      if (satellite instanceof AbstractNode == false) {\n        <initializeAutoConfig>\n        var autoConfig = {\n          owner: this,\n          name: name,\n          config: satellite,\n          factoryType: null,\n          factory: null,\n          instance: null,\n          instanceRA_: null,\n          existsRA_: null\n        };\n        </initializeAutoConfig>\n\n        <addSatelliteHandlers>\n        if (satellite.handler)\n          this.addHandler(satellite.handler, autoConfig);\n\n        if (satellite.instance) {\n          satellite.instance.addHandler(AUTO_SATELLITE_INSTANCE_HANDLER, autoConfig);\n          satellite.instance.setOwner = warnOnAutoSatelliteOwnerChange;\n        }\n        </addSatelliteHandlers>\n\n        <updateAutoSatellite>\n        if (!auto) {\n          if (this.satellite === NULL_SATELLITE)\n            this.satellite = {};\n          auto = this.satellite[AUTO] = {};\n        }\n\n        auto[name] = autoConfig;\n        SATELLITE_UPDATE.call(autoConfig, this);\n\n        if (!autoConfig.instance && oldSatellite)\n          this.emit_satelliteChanged(name, oldSatellite);\n\n        if (destroySatellite) {\n          delete destroySatellite.destroy;\n          destroySatellite.destroy();\n        }\n        </updateAutoSatellite>\n\n        return;\n      }\n\n      <finalOwnerAdjustment>\n      if (satellite.owner !== this) {\n        if (autoConfig && autoConfig.config.delegate) {\n          var autoDelegate = satellite.autoDelegate;\n          satellite.autoDelegate = false;\n          satellite.setOwner(this);\n          satellite.autoDelegate = autoDelegate;\n        }\n        else\n          satellite.setOwner(this);\n\n        if (satellite.owner !== this) {\n          this.setSatellite(name, null);\n          return;\n        }\n\n        if (satelliteListen)\n          satellite.addHandler(satelliteListen, this);\n        if (satellitePersonalListen)\n          satellite.addHandler(satellitePersonalListen, this);\n      }\n      else {\n        if (satellite.ownerSatelliteName) {\n          delete this.satellite[satellite.ownerSatelliteName];\n          this.emit_satelliteChanged(satellite.ownerSatelliteName, satellite);\n        }\n      }\n\n      <setNewSatellite>\n      if (this.satellite == NULL_SATELLITE)\n        this.satellite = {};\n\n      this.satellite[name] = satellite;\n      var oldSatelliteName = satellite.ownerSatelliteName;\n      if (oldSatelliteName != name) {\n        satellite.ownerSatelliteName = name;\n        satellite.emit_ownerSatelliteNameChanged(oldSatelliteName);\n      }\n      </setNewSatellite>\n      </finalOwnerAdjustment>\n    }\n\n    <emitSatelliteChanges>\n    this.emit_satelliteChanged(name, oldSatellite);\n\n    if (destroySatellite) {\n      delete destroySatellite.destroy;\n      destroySatellite.destroy();\n    }\n    </emitSatelliteChanges>\n  }\n  </updateSatelliteInstance>\n}\n"], ["showInterfaceIdl", "\nfunction showInterfaceIdl(intf, html) {\n  <initializeIdlDisplay>\n  html.push(\"<div class='show-Idl'><h3>IDL</h3><pre>\")\n  html.push(\"interface {\")\n  </initializeIdlDisplay>\n\n  <appendMethods>\n  intf.methods.forEach(function(method){\n    showInterfaceIdlMethod(method, html)\n  })\n  </appendMethods>\n\n  <appendAttributes>\n  if (intf.attributes.length > 0) html.push(\"<table>\")\n  intf.attributes.forEach(function(attribute){\n    showInterfaceIdlAttribute(attribute, html)\n  })\n  if (intf.attributes.length > 0) html.push(\"</table>\")\n  </appendAttributes>\n\n  <finalizeIdlDisplay>\n  html.push(\"};\")\n  html.push(\"</pre></div>\")\n  </finalizeIdlDisplay>\n}\n"], ["updateListeners", "\nfunction updateListeners(\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, fn, event, capture;\n  <compareListeners>\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    if (!cur) {\n      \"development\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + name + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (!old) {\n      capture = name.charAt(0) === '!';\n      event = capture ? name.slice(1) : name;\n      if (Array.isArray(cur)) {\n        add(event, (cur.invoker = arrInvoker(cur)), capture);\n      } else {\n        if (!cur.invoker) {\n          fn = cur;\n          cur = on[name] = {};\n          cur.fn = fn;\n          cur.invoker = fnInvoker(cur);\n        }\n        add(event, cur.invoker, capture);\n      }\n    } else if (cur !== old) {\n      if (Array.isArray(old)) {\n        old.length = cur.length;\n        for (var i = 0; i < old.length; i++) { old[i] = cur[i]; }\n        on[name] = old;\n      } else {\n        old.fn = cur;\n        on[name] = old;\n      }\n    }\n  }\n  </compareListeners>\n  <removeUnusedListeners>\n  for (name in oldOn) {\n    if (!on[name]) {\n      event = name.charAt(0) === '!' ? name.slice(1) : name;\n      remove$$1(event, oldOn[name].invoker);\n    }\n  }\n  </removeUnusedListeners>\n}\n"], ["_walk", "\nfunction _walk(node) {\n  var i, l, child, s, state, allSelected, someSelected,\n    children = node.children;\n\n  <iterateChildren>\n  if (children && children.length) {\n    allSelected = true;\n    someSelected = false;\n\n    for (i = 0, l = children.length; i < l; i++) {\n      child = children[i];\n      \n      <updateChildState>\n      s = _walk(child);\n      if (s !== false) {\n        someSelected = true;\n      }\n      if (s !== true) {\n        allSelected = false;\n      }\n      </updateChildState>\n    }\n    state = allSelected ? true : (someSelected ? undefined : false);\n  } else {\n    state = !!node.selected;\n  }\n  </iterateChildren>\n\n  <changeSelectStatusAttrs>\n  node._changeSelectStatusAttrs(state);\n  </changeSelectStatusAttrs>\n  return state;\n}\n"], ["isIn", "\nfunction isIn(arrayLike, value) {\n  var result = false;\n\n  <checkForValue>\n  for (var i = 0, len = arrayLike.length; i < len; i++) {\n    if (areSVZ(value, arrayLike[i])) {\n      result = true;\n      break;\n    }\n  }\n  </checkForValue>\n\n  return result;\n}\n"], ["cleanupFiles", "\nfunction cleanupFiles(workingDir, zipFileName, callback) {\n  <constructDeleteCommand>\n  var command = \"rm -rf \" + workingDir + \" \" + zipFileName;\n  </constructDeleteCommand>\n  <executeDeleteCommand>\n  exec(command, function(err) {\n    if (callback) {\n      callback(err);\n    }\n  });\n  </executeDeleteCommand>\n}\n"], ["localization", "\nfunction (lang) {\n  <languageSpecificAssignments>\n  if (lang == \"es\") {\n    <spanishLocalization>\n    // ... Spanish localization data ...\n    </spanishLocalization>\n  } else if (lang == \"fr\") {\n    <frenchLocalization>\n    // ... French localization data ...\n    </frenchLocalization>\n  } else if (lang == \"pt-BR\") {\n    <brazilianPortugueseLocalization>\n    // ... Brazilian Portuguese localization data ...\n    </brazilianPortugueseLocalization>\n  }\n  </languageSpecificAssignments>\n}\n"], ""]