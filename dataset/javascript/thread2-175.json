[["widgetMouseOutHandler", "\nfunction (widget, domEvt) {\n    if (!this._cfgOk) {\n        return;\n    }\n    <popupHandler>\n    if (this._popup) {\n        this._popup.closeOnMouseOut(domEvt);\n    }\n    </popupHandler>\n    <showTimeoutHandler>\n    if (this._showTimeout) {\n        timer.cancelCallback(this._showTimeout);\n        this._showTimeout = null;\n    }\n    </showTimeoutHandler>\n}\n"], ["onError", "\nfunction on_error(xhr, status, error) {\n    <responseInitialization>\n\tvar response = new anchor._response_handler(null);\n\tresponse.okay(false);\n\tresponse.message(error);\n\tresponse.message_type(status);\n\t</responseInitialization>\n    <applyCallbacks>\n    anchor.apply_callbacks('error', [response, anchor]);\n    </applyCallbacks>\n}\n"], ["resolve", "\nfunction resolve(success, fail, path, fsType, sandbox, options, size) {\n    <setDefaultOptions>\n    options = options || { create: false };\n    size = size || info.MAX_SIZE;\n    </setDefaultOptions>\n    <checkQuota>\n    if (size > info.MAX_SIZE) {\n        fail(FileError.QUOTA_EXCEEDED_ERR);\n    }\n    </checkQuota>\n    <checkPathEncoding>\n    else if (path.indexOf(':') > -1) {\n        fail(FileError.ENCODING_ERR);\n    }\n    </checkPathEncoding>\n    <resolveFileSystem>\n    else {\n        requestAnimationFrame(function () {\n            cordova.exec(function () {\n                requestAnimationFrame(function () {\n                    resolveNative(success, fail, path, fsType, options, size);\n                });\n            }, fail, 'File', 'setSandbox', [sandbox], false);\n        });\n    }\n    </resolveFileSystem>\n}\n"], ["renameRequest", "\nfunction (args, callback) {\n    if (ternserver) {\n    <queryTernServer>\n      ternserver.request({\n          query: {\n            type: \"rename\",  \n            file: args.meta.location,\n            end: args.params.offset,\n            newName: args.newname\n          },\n          files: args.files\n        },\n        </queryTernServer>\n        <handleTernResponse>\n        function (error, changes) {\n          if (error) {\n            callback({\n              request: 'rename',\n              error: typeof error === 'string' ? error : error.message,\n              message: Messages['failedRenameTern']\n            }); \n          } else if (changes && Array.isArray(changes.changes)) {\n            callback({request: 'rename', changes: changes}); \n          } else {\n            callback({request: 'rename', changes: []}); \n          }\n        });\n        </handleTernResponse>\n    } else {\n    <handleMissingTernServer>\n      callback({request: 'rename', message: Messages['failedRenameNoServer']}); \n    </handleMissingTernServer>\n    }\n}\n"], ["initializeWidget", "\nfunction() {\n    <setInnerHTML>\n    this.node.innerHTML = this.templateString;\n    </setInnerHTML>\n    <findSections>\n    this.sections = lib.$('.sections', this.node); \n    </findSections>\n    <createSections>\n    this.createSections();\n    </createSections>\n    <handleLocalStyle>\n    if (this.local) {\n        this.sections.classList.add(\"local\"); \n    }\n    </handleLocalStyle>\n    <handleGlobalStyle>\n    else {\n        var commandArea = document.getElementById( 'pageActions' ); \n        commandArea.innerHTML = this.commandTemplate;\n        this.createToolbar();\n    }\n    </handleGlobalStyle>\n}\n"], ["getClosestHeading", "\nfunction getClosestHeading($, headingsSelector, element) {\n  <traversePreviousElements>\n  const prevElements = $(element).prevAll();\n  for (let i = 0; i < prevElements.length; i += 1) {\n    const currentElement = $(prevElements[i]);\n    if (currentElement.is(headingsSelector)) {\n      return currentElement;\n    }\n    const childHeadings = currentElement.find(headingsSelector);\n    if (childHeadings.length > 0) {\n      return childHeadings.last();\n    }\n  }\n  </traversePreviousElements>\n  <checkRootElement>\n  if ($(element).parent().length === 0) {\n    return null;\n  }\n  </checkRootElement>\n  <recurseForClosestHeading>\n  return getClosestHeading($, headingsSelector, $(element).parent());\n  </recurseForClosestHeading>\n}\n"], ["CreateMarkdownGrammar", "\nfunction CreateMarkdownGrammar(myna) {\n    // This function contains multiple distinct responsibilities related to the grammatical structure generation.\n    // Proper annotation would require more fine-grained knowledge of the Myna library and Markdown grammatical structures.\n    // For the purpose of this example, the entire function is considered as a single responsibility block.\n    let m = myna;\n    // ... (Multiple function and assignment operations)\n    \n    return m.registerGrammar(\"markdown\", g, g.document);\n}\n"], ["encodeBuffer", "\nfunction encode(buffer, extra) {\n  <setupBuffer>\n  if (!extra) extra = 0;\n  var blen = buffer.length;\n  var lenbytes = vencode(blen);\n  var mb = new Buffer(extra + blen + lenbytes.length);\n  </setupBuffer>\n  <copyBufferData>\n  for (var i = 0; i < lenbytes.length; i++) {\n    mb.writeUInt8(lenbytes[i], extra + i);\n  }\n  buffer.copy(mb, lenbytes.length + extra, 0, blen);\n  </copyBufferData>\n  return mb;\n}\n"], ["handleForm", "\nfunction (form) {\n    <renderFormWithOrWithoutErrors>\n    if (form.data && !form.data.login && !form.data.password) {\n        return renderForm(form);\n    }\n    renderForm(form, { formErrors: helpers.collectFormErrors(form) });\n    </renderFormWithOrWithoutErrors>\n}\n"], ["getCurrentUserLanguage", "\nfunction () {\n    <nativePluginLanguage>\n    if ($bc_.pN) {\n        return $bc_.pN.app.curUserLanguage();\n    }\n    </nativePluginLanguage>\n    <windowLocalStorageLanguage>\n    else if (window) {\n        try {\n            return window.localStorage.getItem('APP_USER_SETTING_LANGUAGE') || 'en-US';\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    </windowLocalStorageLanguage>\n    <defaultLanguage>\n    return 'en-US';\n    </defaultLanguage>\n}\n"], "```"]