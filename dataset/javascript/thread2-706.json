[["function1", "\nfunction () {\n  var self = this;\n  var indexes = self.$indexes || [];\n\n  return Promise.try(function () {\n    assert.arrayOfObject(indexes, '$indexes should be an array of object');\n    _.forEach(indexes, function (indexItem) {\n      assert.object(indexItem.keys, 'Database index keys should be object');\n      if (indexItem.options) {\n        assert.object(indexItem.options, 'Database index options should be object');\n      } else {\n        indexItem.options = {};\n      }\n    });\n\n    return indexes;\n  })\n    .then(function (indexes) {\n      <mongoIndexCreation>\n      if (_.isEmpty(indexes)) {\n        return;\n      }\n      switch (self.connection.toString()) {\n        case 'mongo':\n          return Promise.map(indexes, function (indexItem) {\n            return self.createMongoIndexes([indexItem.keys, indexItem.options]);\n          });\n        default:\n          break;\n      }\n      </mongoIndexCreation>\n    });\n}\n"], ["function2", "\nfunction values(data, columns) {\n  if (!data || typeof data !== 'object') {\n    throw new TypeError('Invalid parameter \\'data\\' specified.');\n  }\n\n  const isArray = Array.isArray(data);\n\n  if (!(columns instanceof npm.ColumnSet)) {\n    if (isArray && npm.utils.isNull(columns)) {\n      throw new TypeError('Parameter \\'columns\\' is required when generating multi-row values.');\n    }\n    columns = new npm.ColumnSet(columns || data);\n  }\n\n  if (!columns.columns.length) {\n    throw new Error('Cannot generate values without any columns.');\n  }\n\n  const format = npm.formatting.as.format;\n\n  if (isArray) {\n    return data.map((d, index) => {\n      if (!d || typeof d !== 'object') {\n        throw new Error('Invalid object at index ' + index + '.');\n      }\n      return '(' + format(columns.variables, columns.prepare(d)) + ')';\n    }).join();\n  }\n  return '(' + format(columns.variables, columns.prepare(data)) + ')';\n}\n"], ["function3", "\nfunction validateAWSConfig(awsConfig) {\n  return validateAccessKeyID(awsConfig.accessKeyId) &&\n    validateSecretAccessKey(awsConfig.secretAccessKey) &&\n    validateAWSRegion(awsConfig.region);\n}\n"], ["function4", "\nfunction (e) {\n  var that = this;\n  var startingTd = this.dom.currentTarget;\n\n  this.s.drag.dragging = true;\n\n  that.dom.borderTop.style.display = \"block\";\n  that.dom.borderRight.style.display = \"block\";\n  that.dom.borderBottom.style.display = \"block\";\n  that.dom.borderLeft.style.display = \"block\";\n\n  var coords = this._fnTargetCoords(startingTd);\n  this.s.drag.startX = coords.x;\n  this.s.drag.startY = coords.y;\n  this.s.drag.startTd = startingTd;\n  this.s.drag.endTd = startingTd;\n\n  this._fnUpdateBorder(startingTd, startingTd);\n\n  $(document).bind('mousemove.AutoFill', function (e) {\n    that._fnFillerDragMove.call(that, e);\n  });\n\n  $(document).bind('mouseup.AutoFill', function (e) {\n    that._fnFillerFinish.call(that, e);\n  });\n\n  this.s.screen.y = e.pageY;\n  this.s.screen.height = $(window).height();\n  this.s.screen.scrollTop = $(document).scrollTop();\n\n  if (this.s.dt.oScroll.sY !== \"\") {\n    this.s.scroller.top = $(this.s.dt.nTable.parentNode).offset().top;\n    this.s.scroller.bottom = this.s.scroller.top + $(this.s.dt.nTable.parentNode).height();\n  }\n\n  <autoScroll>\n  this.s.screen.interval = setInterval(function () {\n    var iScrollTop = $(document).scrollTop();\n    var iScrollDelta = iScrollTop - that.s.screen.scrollTop;\n    that.s.screen.y += iScrollDelta;\n\n    if (that.s.screen.height - that.s.screen.y + iScrollTop < 50) {\n      $('html, body').animate({\n        \"scrollTop\": iScrollTop + 50\n      }, 240, 'linear');\n    }\n    else if (that.s.screen.y - iScrollTop < 50) {\n      $('html, body').animate({\n        \"scrollTop\": iScrollTop - 50\n      }, 240, 'linear');\n    }\n\n    if (that.s.dt.oScroll.sY !== \"\") {\n      if (that.s.screen.y > that.s.scroller.bottom - 50) {\n        $(that.s.dt.nTable.parentNode).animate({\n          \"scrollTop\": $(that.s.dt.nTable.parentNode).scrollTop() + 50\n        }, 240, 'linear');\n      }\n      else if (that.s.screen.y < that.s.scroller.top + 50) {\n        $(that.s.dt.nTable.parentNode).animate({\n          \"scrollTop\": $(that.s.dt.nTable.parentNode).scrollTop() - 50\n        }, 240, 'linear');\n      }\n    }\n  }, 250);\n  </autoScroll>\n}\n"], ["function5", "\nfunction (name) {\n  var loader = this._loader;\n  delete loader.importPromises[name];\n  delete loader.moduleRecords[name];\n  return loader.modules[name] ? delete loader.modules[name] : false;\n}\n"], ["function6", "\nfunction sampleTime$2(period, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async.async;\n  }\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n"], ["function7", "\nfunction templateObjectOrArray(o, context) {\n  deepForEach(o, (value, key, subj, path) => {\n    const newPath = template(path, context, true);\n\n    let newValue;\n    if (value && (value.constructor !== Object && value.constructor !== Array)) {\n      newValue = template(value, context, true);\n    } else {\n      newValue = value;\n    }\n\n    debug(`path = ${path} ; value = ${JSON.stringify(value)} (${typeof value}) ; (subj type: ${subj.length ? 'list' : 'hash'}) ; newValue = ${JSON.stringify(newValue)} ; newPath = ${newPath}`);\n\n    if (path !== newPath) {\n      <unsetAndSet>\n      L.unset(o, path);\n      newValue = template(value, context, true);\n      </unsetAndSet>\n    }\n\n    L.set(o, newPath, newValue);\n  });\n}\n"], ["function8", "\nfunction seqActions(actions, seed, onCompleted) {\n  var index = 0;\n\n  <invokeNext>\n  function invokeNext(v) {\n    var action = actions[index];\n    action(v, function (res) {\n      index = index + 1;\n      if (index < actions.length) {\n        invokeNext(res);\n      } else {\n        onCompleted(res);\n      }\n    });\n  }\n  </invokeNext>\n\n  invokeNext(seed);\n}\n"], ["function9", "\nfunction (source, format, ctx) {\n  if (inputFormats.hasOwnProperty(format)) {\n    return inputFormats[format](source, ctx);\n  } else {\n    throw new Error('invalid format to make a text block from: ' + source.format);\n  }\n}\n"], ["function10", "\nfunction () {\n  this._oComponent = sap.ui.component(\"sap.uxap\");\n  if (!this._oComponent) {\n    this._oComponent = sap.ui.component({\n      name: this.getName(),\n      url: this.getUrl(),\n      componentData: {\n        jsonConfigurationURL: this.getJsonConfigurationURL(),\n        mode: this.getMode()\n      }\n    });\n\n    this.setComponent(this._oComponent, true);\n  }\n\n  if (ComponentContainer.prototype.onBeforeRendering) {\n    ComponentContainer.prototype.onBeforeRendering.call(this);\n  }\n}\n"], ""]