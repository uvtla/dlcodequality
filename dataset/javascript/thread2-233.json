[["JsonArray", "\nfunction JsonArray(arr) {\n    if (!(this instanceof JsonArray)) {\n        return new JsonArray(arr);\n    }\n    Array.call(this);\n    var i = -1, l = arr.length;\n    while (++i < l) {\n        this.push(arr[i]);\n    }\n}\n"], ["router", "\nfunction router(req, res) {\n\n\tlet parse = req.parse = url.parse(req.url, true);\n\tlet method = req.method = req.method.toUpperCase();\n\n\tlet _postData = '';\n\treq.setEncoding('utf8');\n\n\tsetClientInfo(req);\n\n\tif (clientDisAccessable(req.client.USERAGENT)) { \n\t\tres.writeHead(403);\n\t\tres.end();\n\t\treturn;\n\t} else {\n\t\treq.on('error', onError)\n\t\t\t.on('data', function (chunk) {\n\t\t\t\t_postData += chunk;\n\t\t\t}).on(\"end\", function () {\n\t\t\t\tswitch (method) {\n\t\t\t\t\tcase HttpRequestMethod.PUT:\n\t\t\t\t\tcase HttpRequestMethod.POST:\n\t\t\t\t\t\tObject.addAll(qs.parse(_postData), parse.query);\n\t\t\t\t\tcase HttpRequestMethod.GET:\n\t\t\t\t\t\trequest(req, res);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase HttpRequestMethod.DELETE:\n\t\t\t\t\tcase HttpRequestMethod.HEAD: \n\t\t\t\t\tcase HttpRequestMethod.CONNECT:\n\t\t\t\t\tcase HttpRequestMethod.OPTIONS:\n\t\t\t\t\tcase HttpRequestMethod.TRACE:\n\t\t\t\t\tcase HttpRequestMethod.PATCH:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunsupportedOperation(method);\n\t\t\t\t}\n\t\t\t}).setTimeout(TIMEOUT, function () {\n\t\t\t\tif (developMode) return; \n\t\t\t\tCoralian.logger.err('request error code : ' + HttpStatusCode.REQUEST_TIMEOUT);\n\t\t\t\treq.url = formatString(ERROR_ROUTE_FORMAT, HttpStatusCode.REQUEST_TIMEOUT);\n\t\t\t\treq.parse = url.parse(req.url, true);\n\t\t\t\trequest(req, res);\n\t\t\t});\n\t\tres.on('error', onError)\n\t\t\t.setTimeout(TIMEOUT, function () {\n\t\t\t\tif (developMode) return; \n\t\t\t\tCoralian.logger.err('response error code : ' + HttpStatusCode.GATEWAY_TIMEOUT);\n\t\t\t\treq.url = formatString(ERROR_ROUTE_FORMAT, HttpStatusCode.GATEWAY_TIMEOUT);\n\t\t\t\tparse = url.parse(req.url, true);\n\t\t\t\trequest(req, res);\n\t\t\t});\n\t}\n\n\t<onError>\n\tfunction onError(err) {\n\t\tCoralian.logger.err(\"HTTP req error : \");\n\t\tCoralian.logger.err(err.code);\n\t\tCoralian.logger.err(err.stack);\n\n\t\tif (String.contains(err.message, 'write after end')) return;\n\n\t\treq.url = formatString(ERROR_ROUTE_FORMAT, (err.code || HttpStatusCode.INTERNAL_SERVER_ERROR));\n\t\treq.parse = url.parse(req.url, true);\n\t\trequest(req, res);\n\t}\n\t</onError>\n}\n"], ["FetchLongPollingTransport", "\nfunction FetchLongPollingTransport(fetch) {\n  var _super = new LongPollingTransport()\n  var that = Transport.derive(_super)\n\n  <xhrSend>\n  that.xhrSend = function (packet) {\n    fetch(packet.url, {\n      method: 'post',\n      body: packet.body,\n      headers: Object.assign(packet.headers, {\n        'Content-Type': 'application/json;charset=UTF-8'\n      })\n    })\n    .then(function (response) {\n      return response.json()\n    })\n    .then(packet.onSuccess)\n    .catch(packet.onError)\n  }\n  </xhrSend>\n\n  return that\n}\n"], ["QueryCompiler", "\nfunction QueryCompiler(client, builder) {\n  this.client = client;\n  this.method = builder._method || 'select';\n  this.options = builder._options || {};\n  this.single = builder._single;\n  var grouped = this.grouped = {};\n  builder._statements.forEach(function (item) {\n    if (!item.grouping) {\n      return;\n    }\n    var val = item.grouping;\n    if (!(val in grouped)) {\n      grouped[val] = [];\n    }\n    grouped[val].push(item);\n  });\n  this.formatter = new Formatter(client);\n}\n"], ["cachePersistence", "\nfunction () {\n    if (this._storage) {\n        this._removeOldCache();\n        this._storage.setItem(this._storageKey, this._cache);\n        this._storage.$dispose();\n        this._storage = null;\n    }\n    ariaUtilsEvent.removeListener(Aria.$window, \"unload\", this._saveCacheCB);\n}\n"], ["finishExchange", "\nfunction (cb) {\n    if (done || !localSentWants || !localSentHeads || !remoteSentWants || !remoteSentHeads) return cb()\n    done = true\n    if (!live) return stream.finalize(cb)\n    sendChanges()\n    cb()\n  }\n"], ["attach", "\nfunction attach(node) {\n  // The body of this function violates SRP by handling multiple responsibilities:\n  // initializing modals, attaching event listeners, and managing UI interactions\n}\n"], ["getPlatformVersion", "\nfunction getPlatformVersion (platformRoot) {\n    var versionFile = path.join(platformRoot, 'cordova/version');\n\n    if (!fs.existsSync(versionFile)) {\n        return null;\n    }\n\n    var version = shell.cat(versionFile).match(/VERSION\\s=\\s[\"'](.*)[\"'];/m);\n    return version && version[1];\n}\n"], ["getRelevantElements", "\nfunction _getRelevantElements(oElement, oRelevantContainer, sAggregationName) {\n  // The body of this function is considered as a single unit of functionality,\n  // thus it adheres to the SRP.\n}\n"], ["getSinks", "\nfunction() {\n  // The body of this function is considered as a single unit of functionality,\n  // thus it adheres to the SRP.\n}\n"], "```"]