[["function_spawnProcessAndPipeOutput", "\nfunction(args, options, cb) {\n    <processArguments>\n    args = !_.isArray(args) ? [args] : args;\n    args = options && args.concat(helper.optsToArgs(options)) || args;\n    </processArguments>\n    \n    <spawnChildProcess>\n    var child = grunt.util.spawn({\n        cmd: \"node\",\n        args: args\n    }, function (error, result, code) {\n        cb(error);\n    });\n    </spawnChildProcess>\n\n    <pipeToParentProcess>\n    child.stdout.pipe(process.stdout);\n    child.stderr.pipe(process.stderr);\n    </pipeToParentProcess>\n}\n"], ["function_pixelToleranceCheck", "\nfunction(pixel1, pixel2, tolerance) {\n    <checkTolerance>\n    var passes = true;\n\n    if (tolerance != null && pixel1 && pixel2) {\n        var dist = pixel1.distanceTo(pixel2);\n        if (dist > tolerance) {\n            passes = false;\n        }\n    }\n    </checkTolerance>\n    return passes;\n}\n"], ["function_unsubscribeFromChannel", "\nfunction(channel, fn, context) {\n    <checkChannelExistence>\n    if (!channels[channel]) return;\n    </checkChannelExistence>\n\n    <unsubscribeLoop>\n    var subscription;\n    for (var i = 0; i < channels[channel].length; i++) {\n        subscription = channels[channel][i];\n        if (subscription.fn === fn && subscription.context === context) {\n            channels[channel].splice(i, 1);\n            i--;\n        }\n    }\n    </unsubscribeLoop>\n}\n"], ["function_validateAndPerformAfterAction", "\nfunction() {\n    <validateUnknownAttributes>\n    var key, unknownAttrs = [];\n    for (key in obj) {\n        if (!self.validators.hasOwnProperty(key))\n            unknownAttrs.push(key);\n    }\n    if (unknownAttrs.length)\n        self._merge(validationErrors, 'unknown attributes [' + unknownAttrs.join(', ') + ']', prefix);\n    </validateUnknownAttributes>\n\n    <afterValidationAction>\n    if (isValid && self.after) {\n        try {\n            self.after.call(obj);\n        } catch (err) {\n            if (!_handleError(err)) return done(err);\n        }\n    }\n    </afterValidationAction>\n    done(null, validationErrors);\n}\n"], ["function_bindMethodToScope", "\nfunction bind(scope, method) {\n    <argumentPreparation>\n    var args = slice.call(arguments, 2);\n    </argumentPreparation>\n\n    <validateAndResolveMethod>\n    if (typeof method === 'string') {\n        method = scope[method];\n    }\n    if (!method) {\n        throw new Error('Proxy: method `' + method + '` does not exist');\n    }\n    </validateAndResolveMethod>\n\n    <methodBinding>\n    return function () {\n        return method.apply(scope, concat.apply(args, arguments));\n    };\n    </methodBinding>\n}\n"], ["function_updateTagWithValidationAndCleanup", "\nfunction updateTag(tag, tagData) {\n    <validateTagAndMacAddress>\n    if (!tag) return;\n    if (tagData.mac && (tag.wirelessTagManager.mac !== tagData.mac)) {\n        throw new Error(\"expected tag \" + tag.uuid\n            + \" to be with tag manager \" + tag.mac\n            + \" but is reported to be with \" + tagData.mac);\n    }\n    </validateTagAndMacAddress>\n\n    <cleanupTagProperties>\n    managerProps.forEach((k) => { delete tagData[k] });\n    </cleanupTagProperties>\n    \n    <assignTagData>\n    tag.data = tagData;\n    </assignTagData>\n}\n"], ["function_initiateSessionAndUpdateFileReceiver", "\nfunction(changes, cb) {\n    <logAndGetState>\n    var self = this;\n    this._log('info', 'Initiating incoming session');\n    this.state = 'pending';\n    </logAndGetState>\n\n    <prepareAndStartReceiver>\n    this.pc.isInitiator = false;\n    var desc = changes.contents[0].application;\n    this.receiver = new FileTransfer.Receiver({ hash: desc.offer.hash.algo });\n    this.receiver.on('progress', function (received, size) {\n        self._log('info', 'Receive progress ' + received + '/' + size);\n    });\n    this.receiver.on('receivedFile', function (file) {\n        self.receivedFile = file;\n        self.maybeReceivedFile();\n    });\n    this.receiver.metadata = desc.offer;\n    </prepareAndStartReceiver>\n\n    <updateApplicationTypeAndHandleOffer>\n    changes.contents[0].application = {\n        applicationType: 'datachannel'\n    };\n    this.pc.handleOffer({\n        type: 'offer',\n        jingle: changes\n    }, function (err) {\n        if (err) {\n            self._log('error', 'Could not create WebRTC answer');\n            return cb({ condition: 'general-error' });\n        }\n        cb();\n    });\n    </updateApplicationTypeAndHandleOffer>\n}\n"], ["function_generatePasswordFromDateAndSeed", "\nfunction genPassOfDay(d, s = DEFAULT_SEED) {\n    <validateInputs>\n    if (!(d instanceof Date)) {\n        throw new TypeError('Date is not a Date instance');\n    }\n    if (typeof s !== 'string') {\n        throw new TypeError('Seed is not a String instance');\n    }\n    if (s.length < 1) {\n        throw new Error('Seed min length: 1');\n    }\n    </validateInputs>\n\n    <generatePassword>\n    const seed = s.repeat(10);\n    const year = d.getFullYear() % 100;\n    const month = d.getMonth() + 1;\n    const dayOfMonth = d.getDate();\n    const dayOfWeek = d.getDay() === 0 ? 6 : d.getDay() - 1;\n    \n    const l1 = TABLE1[dayOfWeek].slice(0);\n    // ... rest of password generation...\n    </generatePassword>\n    \n    <encodePassword>\n    return l5.map(i => ALPHANUM[i]).join('');\n    </encodePassword>\n}\n"], ["function_defaultWrapperForChart", "\nfunction defaultWrapper(_) {\n    <generateDefaultChartData>\n    switch (_) {\n        case 'title': return {\n            enable: false,\n            text: 'Write Your Title',\n            className: 'h4',\n            css: {\n                width: scope.options.chart.width + 'px',\n                textAlign: 'center'\n            }\n        };\n        case 'subtitle': return {\n            enable: false,\n            text: 'Write Your Subtitle',\n            css: {\n                width: scope.options.chart.width + 'px',\n                textAlign: 'center'\n            }\n        };\n        case 'caption': return {\n            enable: false,\n            text: 'Figure 1. Write Your Caption text.',\n            css: {\n                width: scope.options.chart.width + 'px',\n                textAlign: 'center'\n            }\n        };\n    }\n    </generateDefaultChartData>\n}\n"], ["function_returnValidationError", "\nfunction invalid(res, statusCode, data) {\n    return res.status(data\n        ? statusCode\n        : status.VALIDATION_FAILED).json(data || statusCode || {\n        message: 'Validation Failed'\n    });\n}\n"], ""]