[["addListElement", "\nfunction add(element, options) {\n  \n  <validateElement>\n  if (!element.nodeName || /^(ul|li)$/i.test(element.nodeName) === false) {\n    return false;\n  }\n  </validateElement>\n  \n  <checkAndRemoveExistingElement>\n  else if (contains(element)) {\n    remove(element);\n  }\n  </checkAndRemoveExistingElement>\n\n  <initializeList>\n  var list = IS_TOUCH_DEVICE ? new TouchList(element) : new List(element);\n  </initializeList>\n\n  <liveSyncSetup>\n  if (options && options.live) {\n    list.syncInterval = setInterval(function() {\n      list.sync.call(list);\n    }, LIVE_INTERVAL);\n  }\n  </liveSyncSetup>\n\n  <syncList>\n  list.sync();\n  </syncList>\n\n  <addToLists>\n  lists.push(list);\n  </addToLists>\n\n  <startRefreshIfNeeded>\n  if (lists.length === 1) {\n    active = true;\n    refresh();\n  }\n  </startRefreshIfNeeded>\n}\n"], ["normalizeString", "\nfunction (str, inside) {\n  if (typeof str === 'string') {\n    str = str.replace(/^\\s+|\\s+$/g, '');\n\n    <removeSpacesIfNeeded>\n    if (inside && /^[0-9\\s]+$/.test(str)) {\n      str = str.replace(/\\s/g, '');\n    }\n    </removeSpacesIfNeeded>\n\n    <replaceDecimalSeparator>\n    if (this.decimalRegex) {\n      str = str.replace(this.decimalRegex, '$1.$2');\n    }\n    </replaceDecimalSeparator>\n  }\n  return str;\n}\n"], ["encryptPassword", "\nfunction cmd_encrypt_password(args, done) {\n\n  <generateSalt>\n  var salt = args.salt || create_salt()\n  </generateSalt>\n\n  <passwordSetup>\n  var password = args.password\n  </passwordSetup>\n\n  <performHashing>\n  hasher(pepper + password + salt, options.rounds, function(pass) {\n    done(null, { ok: true, pass: pass, salt: salt })\n  })\n  </performHashing>\n}\n"], ["generateDateRange", "\nfunction (startDate, endDate) {\n  var current = new Date(startDate);\n  var end = new Date(endDate);\n  var dates = [];\n\n  <calculatingDatesInRange>\n  while (current <= end) {\n    var m = current.getMonth() + 1;\n    var d = current.getDate();\n    var oneDate = [\n      current.getFullYear(),\n      m < 10 ? \"0\" + m : m,\n      d < 10 ? \"0\" + d : d].join('-');\n\n    dates.push(oneDate);\n    current.setDate(current.getDate() + 1);\n  }\n  </calculatingDatesInRange>\n\n  return dates;\n}\n"], ["readPackageMetadata", "\nfunction (options, callback) {\n  <asarPathSetup>\n  var withAsar = path.join(options.src, 'resources/app.asar')\n  </asarPathSetup>\n  <nonAsarPathSetup>\n  var withoutAsar = path.join(options.src, 'resources/app/package.json')\n  </nonAsarPathSetup>\n\n  <readWithAsar>\n  try {\n    fs.accessSync(withAsar)\n    options.logger('Reading package metadata from ' + withAsar)\n    callback(null, JSON.parse(asar.extractFile(withAsar, 'package.json')))\n    return\n  } catch (err) {\n  }\n  </readWithAsar>\n\n  <readWithoutAsar>\n  try {\n    options.logger('Reading package metadata from ' + withoutAsar)\n    callback(null, fs.readJsonSync(withoutAsar))\n  } catch (err) {\n    callback(new Error('Error reading package metadata: ' + (err.message || err)))\n  }\n  </readWithoutAsar>\n}\n"], ["executeScript", "\nfunction step() {\n  <fetchNextFunction>\n  var f = script.shift();\n  </fetchNextFunction>\n  \n  <executeOrComplete>\n  if (f) {\n    f(stack, step);\n  }\n  else {\n    return cb(null, stack.pop());\n  }\n  </executeOrComplete>\n}\n"], ["cloneRepository", "\nfunction cloneSeed() {\n  return Q.Promise(function (resolve, reject) {\n    <defineRepository>\n    var repo = 'https://example.com/repo.git';\n    </defineRepository>\n    <getCurrentDirectory>\n    var cwd = process.cwd();\n    </getCurrentDirectory>\n    \n    <cloneAndCleanup>\n    cmd('git', ['clone', repo, cwd])\n      .then(function () {\n        fs.removeSync(path.join(cwd, '.git'));\n        resolve();\n      })\n      .fail(function (err) {\n        reject(err);\n      });\n    </cloneAndCleanup>\n  });\n}\n"], ["constructReducer", "\nfunction reducer(props, map, key) {\n  <mergeProperties>\n  return Object.assign({}, map, {\n    [key]: props[key],\n  });\n  </mergeProperties>\n}\n"], ["initializeMeshToonMaterial", "\nfunction MeshToonMaterial(parameters) {\n  <callParentConstructor>\n  MeshPhongMaterial.call(this);\n  </callParentConstructor>\n\n  <setupDefinitions>\n  this.defines = { 'TOON': '' };\n  </setupDefinitions>\n\n  <defineMaterialType>\n  this.type = 'MeshToonMaterial';\n  </defineMaterialType>\n\n  <initializeGradientMap>\n  this.gradientMap = null;\n  </initializeGradientMap>\n\n  <setMaterialParameters>\n  this.setValues(parameters);\n  </setMaterialParameters>\n}\n"], ["readHostsFile", "\nfunction (dir) {\n  <setDefaultDirectory>\n  dir = dir || _OS_HOSTS_DIR;\n  </setDefaultDirectory>\n\n  <readFileAndFormat>\n  var file = fs.readFileSync(dir, 'utf-8');\n  this.formatFile(file);\n  </readFileAndFormat>\n  \n  return this;\n}\n"], ""]