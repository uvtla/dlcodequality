[["incChildrenVersion", "\nfunction incChildrenVersion (pnode) {\n    if (pnode && pnode._childrenVersion) pnode._childrenVersion++\n    else pnode._childrenVersion = 1\n    return pnode\n}\n"], ["AnonymousFunctionConstructor", "\nfunction(code, source, target, status, body) {\n    this.code = code || null;\n    this.source = source || null;\n    this.target = target || null;\n    this.http_status = status || null;\n    this.body = body || null;\n}\n"], ["TimeoutErrorConstructor", "\nfunction TimeoutError(message) {\n  \n  if (!(this instanceof TimeoutError)) { return new TimeoutError(message); }\n  Error.captureStackTrace(this, TimeoutError);\n  if (message !== undefined) {\n    Object.defineProperty(this, 'message', {\n      value: String(message),\n      configurable: true,\n      writable: true\n    });\n  }\n}\n"], ["shouldExclude", "\nfunction shouldExclude(sets) {\n    for (var i = 0; i < sets.length; ++i) {\n        if (!(sets[i] in exclude)) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["isPartOfDirectivePrologue", "\nfunction isPartOfDirectivePrologue(node) {\n    const block = node.parent.parent;\n\n    if (block.type !== \"Program\" && (block.type !== \"BlockStatement\" || !astUtils.isFunction(block.parent))) {\n        return false;\n    }\n    \n    for (let i = 0; i < block.body.length; ++i) {\n        const statement = block.body[i];\n\n        if (statement === node.parent) {\n            return true;\n        }\n        if (!isDirective(statement)) {\n            break;\n        }\n    }\n\n    return false;\n}\n"], ["isNativeFunction", "\nfunction isNative( value ) {\n\tif ( !isFunction( value ) ) {\n\t\treturn false;\n\t}\n\t\n\treturn re.test( fcn2str.call( value ) );\n}\n"], ["handleColumnEvent", "\nfunction(e) {\n    <shouldMoveColumn>\n    if(this._shouldMoveColumn(e)){\n        this.moveColumn(null, 1);\n        e.preventDefault();\n        return true;\n    }\n    </shouldMoveColumn>\n    var curModel = this._modelIterator.cursor();\n    if(!curModel){\n        return false;\n    }\n    <handleExpansion>\n    if(this.isExpandable(curModel)){\n        if(!this.isExpanded(curModel)){\n            this.explorer.myTree.expand(curModel);\n            if (this.explorer.postUserExpand) {\n                this.explorer.postUserExpand(this.model.getId(curModel));\n            }\n            e.preventDefault();\n            return false;\n        }\n    }\n    </handleExpansion>\n}\n"], ["ConnectionConstructor", "\nfunction Connection(socket, pool) {\n    _classCallCheck(this, Connection);\n\n    this.socket = socket;\n    this.id = socket.id;\n    this.pool = pool;\n    this.incomingFilters = [];\n}\n"], ["DetectLocalIPAddress", "\nfunction DetectLocalIPAddress(callback, stream) {\n    <checkWebRTCSupport>\n    if (!DetectRTC.isWebRTCSupported) {\n        return;\n    }\n    </checkWebRTCSupport>\n\n    var isPublic = true,\n        isIpv4 = true;\n    <getIPsCallback>\n    getIPs(function(ip) {\n        if (!ip) {\n            callback(); \n        } else if (ip.match(regexIpv4Local)) {\n            isPublic = false;\n            callback('Local: ' + ip, isPublic, isIpv4);\n        } else if (ip.match(regexIpv6)) { \n            isIpv4 = false;\n            callback('Public: ' + ip, isPublic, isIpv4);\n        } else {\n            callback('Public: ' + ip, isPublic, isIpv4);\n        }\n    }, stream);\n    </getIPsCallback>\n}\n"], ["reorderUsingAlgorithm", "\nfunction(less, values, algorithm_name) {\n\t\t\n\t\t<initIndices>\n\t\tvar indices = [],\n\t\t\ti = 0,\n\t\t\t_less;\n\n\t\t_less = function(a, b) {\n\t\t\treturn less(values[a], values[b]);\n\t\t};\n\t\t\n\t\tfor (; i < this._count; i++) {\n\t\t\tindices.push(i);\n\t\t}\n\t\t</initIndices>\n\n\t\t<sortIndices>\n\t\tindices = Lava.algorithms.sorting[algorithm_name || Lava.schema.DEFAULT_STABLE_SORT_ALGORITHM](indices, _less);\n\t\t</sortIndices>\n\n\t\t<applyReorder>\n\t\tthis.reorder(indices);\n\t\t</applyReorder>\n\t\t\n\t}\n"], ""]