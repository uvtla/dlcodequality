[["function_1", "\nfunction(node, pseudos) {\n  var len = pseudos.length,\n    pseudoFilters = expandFilters[\"pseudos\"];\n\n  for (; len--;) {\n    <validatePseudoClass>\n    var pseudo = pseudos[len],\n      name = pseudo.name,\n      filter = pseudoFilters[name];\n\n    if (!filter) throw Error(\"\u4e0d\u652f\u6301\u7684\u4f2a\u7c7b:\" + name);\n    if (!filter(node, pseudo.param)) return false;\n    </validatePseudoClass>\n  }\n  return true;\n}\n"], ["function_2", "\nfunction(type, params) {\n  var elm = this.spirit.element,\n    evt = null;\n\n  <createEvent>\n  if (window.CustomEvent && !gui.Client.isExplorer) { \n    evt = new CustomEvent(type, params);\n  } else {\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n    evt = document.createEvent('HTMLEvents');\n    evt.initEvent(type, params.bubbles, params.cancelable);\n  }\n  evt.eventName = type;\n  </createEvent>\n\n  <dispatchEvent>\n  if (elm.dispatchEvent) {\n    return elm.dispatchEvent(evt);\n  } else if (elm[type]) {\n    return elm[type]();\n  } else if (elm['on' + type]) {\n    return elm['on' + type]();\n  }\n  </dispatchEvent>\n}\n"], ["function_3", "\nfunction (object, callbacks) {\n  callbacks = callbacks || {};\n\n  var empty = function() {},\n    onComplete = callbacks.onComplete || empty,\n    onChange = callbacks.onChange || empty,\n    _this = this;\n\n  <animateObject>\n  fabric.util.animate({\n    startValue: object.get('opacity'),\n    endValue: 0,\n    duration: this.FX_DURATION,\n    onStart: function() {\n      object.setActive(false);\n    },\n    onChange: function(value) {\n      object.set('opacity', value);\n      _this.renderAll();\n      onChange();\n    },\n    onComplete: function() {\n      _this.remove(object);\n      onComplete();\n    }\n  });\n  </animateObject>\n\n  return this;\n}\n"], ["function_4", "\nfunction nodeModulesResolverFn(normalizedId) {\n  if (!nodeModulesAt) {\n    throw new Error('Before you can load external dependencies, you must specify where node_modules can be found by ' +\n      'setting the \\'nodeModulesAt\\' option when creating the context');\n  }\n\n  var extId = normalizedId.id;\n\n  var modulePath = path.join(nodeModulesAt, extId);\n  <checkExternalDependency>\n  if (!externalDepExists[modulePath]) {\n    \n    <checkFileSystem>\n    if (fs.existsSync(modulePath)) {\n      externalDepExists[modulePath] = true;\n    } else {\n      var msg = 'Could not find external dependency [' + extId + '] at path [' + modulePath + ']';\n      throw new Error(buildMissingDepMsg(msg, extId, allExternalIds()));\n    }\n    </checkFileSystem>\n    \n  }\n  </checkExternalDependency>\n\n  return require(modulePath);\n}\n"], ["function_5", "\nfunction (elem) {\n  var self = this;\n  if (elem === undefined) return;\n\n  <handleMapElements>\n  if (elem.mapElem !== undefined) {\n    self.animate(elem.mapElem, elem.mapElem.originalAttrs, elem.mapElem.attrsHover.animDuration);\n  }\n\n  if (elem.textElem !== undefined) {\n    self.animate(elem.textElem, elem.textElem.originalAttrs, elem.textElem.attrsHover.animDuration);\n  }\n  </handleMapElements>\n\n  <updateTooltipDisplay>\n  if (elem.options && elem.options.tooltip !== undefined) {\n    self.$tooltip.css({\n      'display': 'none',\n      'top': -1000,\n      'left': -1000\n    });\n  }\n  </updateTooltipDisplay>\n\n  <performBrowserAdjustment>\n  if (elem.mapElem !== undefined || elem.textElem !== undefined) {\n    if (self.paper.safari) self.paper.safari();\n  }\n  </performBrowserAdjustment>\n}\n"], ["function_6", "\nfunction() {\n  <hideSections>\n  dom.hide(this.$startHelp);\n  dom.hide(this.$results);\n  dom.hide(this.$measureTasks);\n  dom.hide(this.$measuringPrompt);\n  dom.show(this.$startPrompt);\n  </hideSections>\n}\n"], ["function_7", "\nfunction bindToBotDialog(bot, intentDialog, modelUrl, actions, options) {\n  <validateInputs>\n  if (!bot) {\n    throw new Error('bot is required');\n  }\n  if (!intentDialog) {\n    throw new Error('intentDialog is required');\n  }\n\n  if (!modelUrl) {\n    throw new Error('ModelUrl is required');\n  }\n  </validateInputs>\n\n  options = options || {};\n\n  <configureBotPersistence>\n  bot.set('persistConversationData', true);\n  </configureBotPersistence>\n\n  <setupBotLibrary>\n  bot.library(createBotLibrary(modelUrl, actions, options));\n  </setupBotLibrary>\n\n  <bindIntentActions>\n  _.forEach(actions, function(action) {\n    intentDialog.matches(action.intentName, createBotAction(action, modelUrl));\n  });\n  </bindIntentActions>\n}\n"], ["function_8", "\nfunction(element) {\n  this.$element = $(element)\n  this.carousel = this.$element.data('bs.carousel')\n  this.options = $.extend({}, CarouselSwipe.DEFAULTS, this.carousel.options)\n  this.startX =\n    this.startY =\n    this.startTime =\n    this.cycling =\n    this.$active =\n    this.$items =\n    this.$next =\n    this.$prev =\n    this.dx = null\n  this.sliding = false\n\n  <setupTouchHandlers>\n  this.$element\n    .on('touchstart', $.proxy(this.touchstart, this))\n    .on('touchmove', $.proxy(this.touchmove, this))\n    .on('touchend', $.proxy(this.touchend, this))\n    .on('slide.bs.carousel', $.proxy(this.startSliding, this))\n    .on('slid.bs.carousel', $.proxy(this.stopSliding, this))\n  </setupTouchHandlers>\n}\n"], ["function_9", "\nfunction build(config, locale, done) {\n  const shouldWatch = (util.env[`watch`] || util.env[`w`]) && (config.watch !== false);\n\n  <checkLocale>\n  if (locale && config.i18n && (config.i18n.locales instanceof Array) && (locale === config.i18n.locales[0]))\n    locale = undefined;\n  </checkLocale>\n\n  <normalizeConfig>\n  config = normalizeConfig(config, locale);\n  </normalizeConfig>\n\n  <setupMetalsmithBuild>\n  metalsmith(config.base || __dirname)\n    .clean(false)\n    .source(config.src)\n    .ignore(config.ignore)\n    .destination(config.dest)\n    .metadata(config.metadata.global)\n    .use(collections(config.collections))\n    .use(related(config.related))\n    .use((config.tags) ? tags(config.tags) : noop())\n    .use(pagination(config.pagination))\n    .use(metadata(config.metadata.collections))\n    .use(markdown(config.markdown))\n    .use(config.multilingual ? multilingual(locale) : noop())\n    .use(permalinks(config.permalinks))\n    .use(pathfinder(locale, config.i18n && config.i18n.locales))\n    .use(layouts(config.layouts))\n    .use(inPlace(config.inPlace))\n    .use((config.prism !== false) ? prism(config.prism, locale) : noop())\n    .use((config.mathjax !== false) ? mathjax(config.mathjax, locale) : noop())\n    .use(permalinks(config.permalinks))\n    .use(reporter(locale))\n    </setupMetalsmithBuild>\n\n  <executeBuild>\n  .build(function(err) {\n    if (err && shouldWatch) util.log(util.colors.blue(`[metalsmith]`), util.colors.red(err));\n    done(!shouldWatch && err);\n  });\n  </executeBuild>\n}\n"], ["function_10", "\nfunction handleEntryPoint(index, value, that) {\n\n  var percentage;\n\n  <validateValueArray>\n  if (typeof value === \"number\") {\n    value = [value];\n  }\n\n  if (Object.prototype.toString.call(value) !== '[object Array]') {\n    throw new Error(\"noUiSlider: 'range' contains invalid value.\");\n  }\n  </validateValueArray>\n\n  <assignPercentage>\n  if (index === 'min') {\n    percentage = 0;\n  } else if (index === 'max') {\n    percentage = 100;\n  } else {\n    percentage = parseFloat(index);\n  }\n  </assignPercentage>\n\n  <validatePercentageValue>\n  if (!isNumeric(percentage) || !isNumeric(value[0])) {\n    throw new Error(\"noUiSlider: 'range' value isn't numeric.\");\n  }\n  </validatePercentageValue>\n\n  <updateSliderParameters>\n  that.xPct.push(percentage);\n  that.xVal.push(value[0]);\n\n  if (!percentage) {\n    if (!isNaN(value[1])) {\n      that.xSteps[0] = value[1];\n    }\n  } else {\n    that.xSteps.push(isNaN(value[1]) ? false : value[1]);\n  }\n\n  that.xHighestCompleteStep.push(0);\n  </updateSliderParameters>\n}\n"], "```"]