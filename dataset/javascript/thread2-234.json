[["function_1", "\nfunction (string, userConfig) {\n\n    <initialValidation>\n    if (string.trim() === '') {\n        return '';\n    }\n    userConfig = userConfig || {};\n    </initialValidation>\n    \n    <overwriteConfig>\n    overwriteConfig(_config, userConfig);\n    </overwriteConfig>\n\n    <INDENT_definition>\n    var INDENT = (function () {\n        var indentStr = '';\n        var space = _config.useTabIndent ? '\\t' : ' ';\n        var indent = _config.indent ? Number(_config.indent) : 4;\n        while (indent--) {\n            indentStr += space;\n        }\n        return indentStr;\n    })();\n    </INDENT_definition>\n\n    // Remaining code defines factory functions, checks, and transformations, which contribute collectively to string formatting\n    // The function ends with parsing AST (Abstract Syntax Tree), manipulating it, and returning the formatted string\n    // Considering that all these operations together fulfill a single, cohesive process of parsing and formatting code,\n    // they will not be split into individual responsibilities.\n}\n"], ["function_2", "\nfunction _LayoutCommon_getGroupInfo(groupIndex) {\n    <retrieveGroup>\n    var group = this._site.groupFromIndex(groupIndex),\n        groupInfo = this._groupInfo,\n        margins = this._sizes.containerMargins,\n        adjustedInfo = { enableCellSpanning: false };\n    </retrieveGroup>\n\n    <evaluateGroupInfo>\n    groupInfo = (typeof groupInfo === \"function\" ? groupInfo(group) : groupInfo);\n    if (groupInfo) {\n        if (groupInfo.enableCellSpanning && (+groupInfo.cellWidth !== groupInfo.cellWidth || +groupInfo.cellHeight !== groupInfo.cellHeight)) {\n            throw new _ErrorFromName(\"WinJS.UI.GridLayout.GroupInfoResultIsInvalid\", strings.groupInfoResultIsInvalid);\n        }\n        adjustedInfo = {\n            enableCellSpanning: !!groupInfo.enableCellSpanning,\n            cellWidth: groupInfo.cellWidth + margins.left + margins.right,\n            cellHeight: groupInfo.cellHeight + margins.top + margins.bottom\n        };\n    }\n    </evaluateGroupInfo>\n\n    return adjustedInfo;\n}\n"], ["function_3", "\nfunction setSize(size, dimension) {\n    <parseAndSetSize>\n    return Math.round((/%/.test(size) ? ((dimension === 'x' ? $window.width() : winheight()) / 100) : 1) * parseInt(size, 10));\n    </parseAndSetSize>\n}\n"], ["function_4", "\nfunction ParentConstructorFirst() {\n\n    <extendDefaults>\n    utils.deepExtend(this, this.constructor.prototype.__defaults);\n    </extendDefaults>\n\n    <constructParentStack>\n    (function constructParentStack(context, child, args) {\n        var parent = child.constructor.__parent;\n\n        if (parent) {\n            constructParentStack(context, parent, args);\n        }\n\n        if (child.hasOwnProperty('__constructor')) {\n            child.__constructor.apply(context, args);\n        }\n    })(this, this.constructor.__parent, arguments);\n    </constructParentStack>\n\n    <callOwnConstructor>\n    if (this.constructor.prototype.hasOwnProperty('__constructor')) {\n        this.constructor.prototype.__constructor.apply(this, arguments);\n    }\n    </callOwnConstructor>\n}\n"], ["function_5", "\nfunction (attributes, options) {\n\n    <findModel>\n    var model = Backbone.Relational.store.find(this, attributes);\n    </findModel>\n\n    <setOrCreateModel>\n    if (_.isObject(attributes)) {\n        if (model) {\n            model.set(model.parse ? model.parse(attributes) : attributes, options);\n        }\n        else if (!options || (options && options.create !== false)) {\n            model = this.build(attributes, options);\n        }\n    }\n    </setOrCreateModel>\n\n    return model;\n}\n"], ["function_6", "\nfunction realpath(path) {\n\n    <normalizePath>\n    path = path.replace(DOT_RE, \"/\")\n\n    path = path.replace(MULTI_SLASH_RE, \"$1/\")\n    </normalizePath>\n\n    <resolveDoubleDots>\n    while (path.match(DOUBLE_DOT_RE)) {\n        path = path.replace(DOUBLE_DOT_RE, \"/\")\n    }\n    </resolveDoubleDots>\n\n    return path\n}\n"], ["function_7", "\nfunction User(props) {\n    <buildRequestUrl>\n    let url = 'https:\n    let options = {};\n    if (props.id) {\n        url += `/users/${props.id}`;\n    } else {\n        url += `/me`;\n    }\n    </buildRequestUrl>\n\n    <APIRequest>\n    return (\n        <ApiRequest url={url} options={options}>\n            {(data, loading, error) => props.children(data, loading, error)}\n        </ApiRequest>\n    );\n    </APIRequest>\n}\n"], ["function_8", "\nfunction (p) {\n    <calculateSideDeterminant>\n    var normal = this.b.sub(this.a).perpendicular();\n    var d = p.sub(this.a).dot(normal);\n    return mathUtils.sign(d);\n    </calculateSideDeterminant>\n}\n"], ["function_9", "\nfunction (file) {\n    <validateAndNormalizePath>\n    if (!((process.platform === 'win32' && /^[a-zA-Z]:/.test(file)) || (process.platform !== 'win32' && file[0] === '/'))) {\n        Array.prototype.unshift.call(arguments, process.cwd());\n    }\n\n    return path.normalize(path.join.apply(null, arguments));\n    </validateAndNormalizePath>\n}\n"], ["function_10", "\nfunction (out) {\n    \n    <enterClassInitBlock>\n    out.enterBlock(\"classInit\");\n    this._writeMapInheritance(out, \"__$macrolibs\", out.templateParam.$macrolibs, \"{}\");\n    out.leaveBlock();\n    </enterClassInitBlock>\n    \n    <writeClassInit>\n    this.$ClassGenerator._writeClassInit.call(this, out);\n    </writeClassInit>\n}\n"], "```"]