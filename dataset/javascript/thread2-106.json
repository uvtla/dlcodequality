[["form", "\nfunction form (req, modelName, callback, formDsl) {\n\n    const formFn = () => new Promise((resolve, reject) => {\n\n        const formLabels = labels(modelName);\n        const schema = get(modelName, true).schema;\n\n        if (formDsl && typeof formDsl === 'function') {\n            return resolve(pluginHelpers.formSettings(req, schema, clone(formDsl()), formLabels));\n        }\n\n        if (formDsl) {\n            return resolve(pluginHelpers.formSettings(req, schema, clone(formDsl), formLabels));\n        }\n\n        \n        get(modelName, true).getForm(req, (err, decoratedForm) => {\n\n            if (err) {\n                return reject(err);\n            }\n\n            return resolve(decoratedForm);\n\n        });\n\n    });\n\n    formFn()\n        .then((result) => callback(null, result))\n        .catch(callback);\n\n}\n"], ["store", "\nfunction store (action) {\n    if (!action || !isPlainObject(action)) {\n      throw new Error('action parameter is required and must be a plain object')\n    }\n\n    if (!action.type || typeof action.type !== 'string') {\n      throw new Error('type property of action is required and must be a string')\n    }\n\n    if (isEmitting) {\n      throw new Error('modifiers may not emit actions')\n    }\n\n    isEmitting = true\n    var oldState = extend(state)\n    state = modifier(action, oldState)\n    var newState = extend(state)\n\n    emitter.emit(action.type, action, newState, oldState)\n    isEmitting = false\n  }\n"], ["parseInLine", "\nfunction parseInLine(inLineElement) {\n  var childNodes = inLineElement.childNodes;\n  var ad = new Ad();\n  ad.id = inLineElement.getAttribute('id') || null;\n  ad.sequence = inLineElement.getAttribute('sequence') || null;\n\n  for (var nodeKey in childNodes) {\n    var node = childNodes[nodeKey];\n\n    switch (node.nodeName) {\n      case 'Error':\n        ad.errorURLTemplates.push(parserUtils.parseNodeText(node));\n        break;\n\n      case 'Impression':\n        ad.impressionURLTemplates.push(parserUtils.parseNodeText(node));\n        break;\n\n      case 'Creatives':\n        parserUtils.childrenByName(node, 'Creative').forEach(function (creativeElement) {\n                <parseCreativeAttributes>\n          var creativeAttributes = {\n            id: creativeElement.getAttribute('id') || null,\n            adId: parseCreativeAdIdAttribute(creativeElement),\n            sequence: creativeElement.getAttribute('sequence') || null,\n            apiFramework: creativeElement.getAttribute('apiFramework') || null\n          };\n\n          for (var creativeTypeElementKey in creativeElement.childNodes) {\n            var creativeTypeElement = creativeElement.childNodes[creativeTypeElementKey];\n            var parsedCreative = void 0;\n\n            switch (creativeTypeElement.nodeName) {\n              case 'Linear':\n                parsedCreative = parseCreativeLinear(creativeTypeElement, creativeAttributes);\n                if (parsedCreative) {\n                  ad.creatives.push(parsedCreative);\n                }\n                break;\n\n              case 'NonLinearAds':\n                parsedCreative = parseCreativeNonLinear(creativeTypeElement, creativeAttributes);\n                if (parsedCreative) {\n                  ad.creatives.push(parsedCreative);\n                }\n                break;\n\n              case 'CompanionAds':\n                parsedCreative = parseCreativeCompanion(creativeTypeElement, creativeAttributes);\n                if (parsedCreative) {\n                  ad.creatives.push(parsedCreative);\n                }\n                break;\n            }\n          }\n                </parseCreativeAttributes>\n        });\n        break;\n\n      case 'Extensions':\n        parseExtensions(ad.extensions, parserUtils.childrenByName(node, 'Extension'));\n        break;\n\n      case 'AdSystem':\n        ad.system = {\n          value: parserUtils.parseNodeText(node),\n          version: node.getAttribute('version') || null\n        };\n        break;\n\n      case 'AdTitle':\n        ad.title = parserUtils.parseNodeText(node);\n        break;\n\n      case 'Description':\n        ad.description = parserUtils.parseNodeText(node);\n        break;\n\n      case 'Advertiser':\n        ad.advertiser = parserUtils.parseNodeText(node);\n        break;\n\n      case 'Pricing':\n        ad.pricing = {\n          value: parserUtils.parseNodeText(node),\n          model: node.getAttribute('model') || null,\n          currency: node.getAttribute('currency') || null\n        };\n        break;\n\n      case 'Survey':\n        ad.survey = parserUtils.parseNodeText(node);\n        break;\n    }\n  }\n\n  return ad;\n}\n"], ["transformResponse", "\nfunction transformResponse(transform) {\n\n  assert.ok(transform);\n  assert.ok(transform instanceof Function);\n\n  var originalStatus, originalJson, reqClosure;\n\n  return function (req, res, next) {\n    originalStatus = res.status;\n    originalJson = res.json;\n    reqClosure = req;\n    res.status = setStatus;\n    res.json = sendJson;\n    return next();\n  }\n\n  function setStatus(status) {\n    this.__status = status;\n    return this;\n  }\n\n  function sendJson(body) {\n    this.__body = body;\n    var B = new Bundle(transform, reqClosure, this);\n    originalStatus.call(this, B.status);\n    return originalJson.call(this, B.body);\n  }\n\n}\n"], ["visitReturnInFactory", "\nfunction visitReturnInFactory(traverse, node, path, state) {\n        utils.catchup(node.range[0], state);\n        utils.move(node.argument.range[0], state);\n        utils.append('module.exports = ', state);\n        utils.catchup(node.range[1] - 1, state);\n        return false;\n    }\n"], ["unnamedFunction", "\nfunction (f) {\n                if (f == this._filter)\n                    return;\n                this._filter = f;\n                this._filteredItems = null;\n                if (this.hasItems()) {\n                    this.onCollectionChangedInternal(\"refresh\", -1, null);\n                }\n            }\n"], ["Circle3D", "\nfunction Circle3D( x , y , z , nx , ny , nz , r ) {\n\tthis.center = new Vector3D( x , y , z ) ;\n\tthis.r = + r ;\n\tthis.planeNormal = new Vector3D( nx , ny , nz ).normalizeCheck() ;\n}\n"], ["strict", "\nfunction strict(query) {\n  return foldl(function(acc, val, key) {\n    if (has.call(allowedKeys, key)) acc[key] = val;\n    return acc;\n  }, {}, utm(query));\n}\n"], ["makeDetectable", "\nfunction makeDetectable(options, element, callback) {\n        if (!callback) {\n            callback = element;\n            element = options;\n            options = null;\n        }\n\n        options = options || {};\n\n        <debug>\n        function debug() {\n            if (options.debug) {\n                var args = Array.prototype.slice.call(arguments);\n                args.unshift(idHandler.get(element), \"Scroll: \");\n                if (reporter.log.apply) {\n                    reporter.log.apply(null, args);\n                } else {\n                    for (var i = 0; i < args.length; i++) {\n                        reporter.log(args[i]);\n                    }\n                }\n            }\n        }\n        </debug>\n\n        <isDetached>\n        function isDetached(element) {\n            function isInDocument(element) {\n                return element === element.ownerDocument.body || element.ownerDocument.body.contains(element);\n            }\n\n            if (!isInDocument(element)) {\n                return true;\n            }\n\n            \n            if (getComputedStyle(element) === null) {\n                return true;\n            }\n\n            return false;\n        }\n        </isDetached>\n\n        <isUnrendered>\n        function isUnrendered(element) {\n            \n            var container = getState(element).container.childNodes[0];\n            var style = getComputedStyle(container);\n            return !style.width || style.width.indexOf(\"px\") === -1; \n        }\n        </isUnrendered>\n\n        <getStyle>\n        function getStyle() {\n            \n            \n            var elementStyle            = getComputedStyle(element);\n            var style                   = {};\n            style.position              = elementStyle.position;\n            style.width                 = element.offsetWidth;\n            style.height                = element.offsetHeight;\n            style.top                   = elementStyle.top;\n            style.right                 = elementStyle.right;\n            style.bottom                = elementStyle.bottom;\n            style.left                  = elementStyle.left;\n            style.widthCSS              = elementStyle.width;\n            style.heightCSS             = elementStyle.height;\n            return style;\n        }\n        </getStyle>\n\n        <storeStartSize>\n        function storeStartSize() {\n            var style = getStyle();\n            getState(element).startSize = {\n                width: style.width,\n                height: style.height\n            };\n            debug(\"Element start size\", getState(element).startSize);\n        }\n        </storeStartSize>\n\n        <initListeners>\n        function initListeners() {\n            getState(element).listeners = [];\n        }\n        </initListeners>\n\n        <storeStyle>\n        function storeStyle() {\n            debug(\"storeStyle invoked.\");\n            if (!getState(element)) {\n                debug(\"Aborting because element has been uninstalled\");\n                return;\n            }\n\n            var style = getStyle();\n            getState(element).style = style;\n        }\n        </storeStyle>\n\n        <storeCurrentSize>\n        function storeCurrentSize(element, width, height) {\n            getState(element).lastWidth = width;\n            getState(element).lastHeight  = height;\n        }\n        </storeCurrentSize>\n\n        <getExpandChildElement>\n        function getExpandChildElement(element) {\n            return getExpandElement(element).childNodes[0];\n        }\n        </getExpandChildElement>\n\n        <getWidthOffset>\n        function getWidthOffset() {\n            return 2 * scrollbarSizes.width + 1;\n        }\n        </getWidthOffset>\n\n        <getHeightOffset>\n        function getHeightOffset() {\n            return 2 * scrollbarSizes.height + 1;\n        }\n        </getHeightOffset>\n\n        <getExpandWidth>\n        function getExpandWidth(width) {\n            return width + 10 + getWidthOffset();\n        }\n        </getExpandWidth>\n\n        <getExpandHeight>\n        function getExpandHeight(height) {\n            return height + 10 + getHeightOffset();\n        }\n        </getExpandHeight>\n\n        <getShrinkWidth>\n        function getShrinkWidth(width) {\n            return width * 2 + getWidthOffset();\n        }\n        </getShrinkWidth>\n\n        <getShrinkHeight>\n        function getShrinkHeight(height) {\n            return height * 2 + getHeightOffset();\n        }\n        </getShrinkHeight>\n\n        <positionScrollbars>\n        function positionScrollbars(element, width, height) {\n            var expand          = getExpandElement(element);\n            var shrink          = getShrinkElement(element);\n            var expandWidth     = getExpandWidth(width);\n            var expandHeight    = getExpandHeight(height);\n            var shrinkWidth     = getShrinkWidth(width);\n            var shrinkHeight    = getShrinkHeight(height);\n            expand.scrollLeft   = expandWidth;\n            expand.scrollTop    = expandHeight;\n            shrink.scrollLeft   = shrinkWidth;\n            shrink.scrollTop    = shrinkHeight;\n        }\n        </positionScrollbars>\n\n        <injectContainerElement>\n        function injectContainerElement() {\n            var container = getState(element).container;\n\n            if (!container) {\n                container                   = document.createElement(\"div\");\n                container.className         = detectionContainerClass;\n                container.style.cssText     = \"visibility: hidden; display: inline; width: 0px; height: 0px; z-index: -1; overflow: hidden; margin: 0; padding: 0;\";\n                getState(element).container = container;\n                addAnimationClass(container);\n                element.appendChild(container);\n\n                var onAnimationStart = function () {\n                    getState(element).onRendered && getState(element).onRendered();\n                };\n\n                addEvent(container, \"animationstart\", onAnimationStart);\n\n                \n                \n                getState(element).onAnimationStart = onAnimationStart;\n            }\n\n            return container;\n        }\n        </injectContainerElement>\n\n        <injectScrollElements>\n        function injectScrollElements() {\n                  \n                  <alterPositionStyles>\n            function alterPositionStyles() {\n                var style = getState(element).style;\n\n                if(style.position === \"static\") {\n                    element.style.position = \"relative\";\n\n                    var removeRelativeStyles = function(reporter, element, style, property) {\n                        function getNumericalValue(value) {\n                            return value.replace(/[^-\\d\\.]/g, \"\");\n                        }\n\n                        var value = style[property];\n\n                        if(value !== \"auto\" && getNumericalValue(value) !== \"0\") {\n                            reporter.warn(\"An element that is positioned static has style.\" + property + \"=\" + value + \" which is ignored due to the static positioning. The element will need to be positioned relative, so the style.\" + property + \" will be set to 0. Element: \", element);\n                            element.style[property] = 0;\n                        }\n                    };\n\n                    \n                    \n                    removeRelativeStyles(reporter, element, style, \"top\");\n                    removeRelativeStyles(reporter, element, style, \"right\");\n                    removeRelativeStyles(reporter, element, style, \"bottom\");\n                    removeRelativeStyles(reporter, element, style, \"left\");\n                }\n            }\n                  </alterPositionStyles>\n\n            <getLeftTopBottomRightCssText>\n            function getLeftTopBottomRightCssText(left, top, bottom, right) {\n                left = (!left ? \"0\" : (left + \"px\"));\n                top = (!top ? \"0\" : (top + \"px\"));\n                bottom = (!bottom ? \"0\" : (bottom + \"px\"));\n                right = (!right ? \"0\" : (right + \"px\"));\n\n                return \"left: \" + left + \"; top: \" + top + \"; right: \" + right + \"; bottom: \" + bottom + \";\";\n            }\n            </getLeftTopBottomRightCssText>\n\n            debug(\"Injecting elements\");\n\n            if (!getState(element)) {\n                debug(\"Aborting because element has been uninstalled\");\n                return;\n            }\n\n            alterPositionStyles();\n\n            var rootContainer = getState(element).container;\n\n            if (!rootContainer) {\n                rootContainer = injectContainerElement();\n            }\n\n            \n            \n            \n            \n\n            \n            \n\n            var scrollbarWidth          = scrollbarSizes.width;\n            var scrollbarHeight         = scrollbarSizes.height;\n            var containerContainerStyle = \"position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; width: 100%; height: 100%; left: 0px; top: 0px;\";\n            var containerStyle          = \"position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; \" + getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth);\n            var expandStyle             = \"position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;\";\n            var shrinkStyle             = \"position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;\";\n            var expandChildStyle        = \"position: absolute; left: 0; top: 0;\";\n            var shrinkChildStyle        = \"position: absolute; width: 200%; height: 200%;\";\n\n            var containerContainer      = document.createElement(\"div\");\n            var container               = document.createElement(\"div\");\n            var expand                  = document.createElement(\"div\");\n            var expandChild             = document.createElement(\"div\");\n            var shrink                  = document.createElement(\"div\");\n            var shrinkChild             = document.createElement(\"div\");\n\n            \n            \n            containerContainer.dir              = \"ltr\";\n\n            containerContainer.style.cssText    = containerContainerStyle;\n            containerContainer.className        = detectionContainerClass;\n            container.className                 = detectionContainerClass;\n            container.style.cssText             = containerStyle;\n            expand.style.cssText                = expandStyle;\n            expandChild.style.cssText           = expandChildStyle;\n            shrink.style.cssText                = shrinkStyle;\n            shrinkChild.style.cssText           = shrinkChildStyle;\n\n            expand.appendChild(expandChild);\n            shrink.appendChild(shrinkChild);\n            container.appendChild(expand);\n            container.appendChild(shrink);\n            containerContainer.appendChild(container);\n            rootContainer.appendChild(containerContainer);\n\n            <onExpandScroll>\n            function onExpandScroll() {\n                getState(element).onExpand && getState(element).onExpand();\n            }\n            </onExpandScroll>\n\n            <onShrinkScroll>\n            function onShrinkScroll() {\n                getState(element).onShrink && getState(element).onShrink();\n            }\n            </onShrinkScroll>\n\n            addEvent(expand, \"scroll\", onExpandScroll);\n            addEvent(shrink, \"scroll\", onShrinkScroll);\n\n            \n            \n            getState(element).onExpandScroll = onExpandScroll;\n            getState(element).onShrinkScroll = onShrinkScroll;\n        }\n        </injectScrollElements>\n\n        <registerListenersAndPositionElements>\n        function registerListenersAndPositionElements() {\n                  \n                  <updateChildSizes>\n            function updateChildSizes(element, width, height) {\n                var expandChild             = getExpandChildElement(element);\n                var expandWidth             = getExpandWidth(width);\n                var expandHeight            = getExpandHeight(height);\n                expandChild.style.width     = expandWidth + \"px\";\n                expandChild.style.height    = expandHeight + \"px\";\n            }\n                  </updateChildSizes>\n\n            <updateDetectorElements>\n            function updateDetectorElements(done) {\n                var width           = element.offsetWidth;\n                var height          = element.offsetHeight;\n\n                debug(\"Storing current size\", width, height);\n\n                \n                \n                storeCurrentSize(element, width, height);\n\n                \n                \n\n                batchProcessor.add(0, function performUpdateChildSizes() {\n                    if (!getState(element)) {\n                        debug(\"Aborting because element has been uninstalled\");\n                        return;\n                    }\n\n                    if (!areElementsInjected()) {\n                        debug(\"Aborting because element container has not been initialized\");\n                        return;\n                    }\n\n                    if (options.debug) {\n                        var w = element.offsetWidth;\n                        var h = element.offsetHeight;\n\n                        if (w !== width || h !== height) {\n                            reporter.warn(idHandler.get(element), \"Scroll: Size changed before updating detector elements.\");\n                        }\n                    }\n\n                    updateChildSizes(element, width, height);\n                });\n\n                batchProcessor.add(1, function updateScrollbars() {\n                    if (!getState(element)) {\n                        debug(\"Aborting because element has been uninstalled\");\n                        return;\n                    }\n\n                    if (!areElementsInjected()) {\n                        debug(\"Aborting because element container has not been initialized\");\n                        return;\n                    }\n\n                    positionScrollbars(element, width, height);\n                });\n\n                if (done) {\n                    batchProcessor.add(2, function () {\n                        if (!getState(element)) {\n                            debug(\"Aborting because element has been uninstalled\");\n                            return;\n                        }\n\n                        if (!areElementsInjected()) {\n                          debug(\"Aborting because element container has not been initialized\");\n                          return;\n                        }\n\n                        done();\n                    });\n                }\n            }\n            </updateDetectorElements>\n\n            <areElementsInjected>\n            function areElementsInjected() {\n                return !!getState(element).container;\n            }\n            </areElementsInjected>\n\t}\n\t<registerListenersAndPositionElements>\n}\n"], ["ignoredForGoodReason", "\n"], ""]