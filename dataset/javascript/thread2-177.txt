```javascript
<matchedText>
function matchedText(pattern, candidate) {
        ts.Debug.assert(isPatternMatch(pattern, candidate));
        return candidate.substr(pattern.prefix.length, candidate.length - pattern.suffix.length);
}
</matchedText>

<unnamedFunction>
function () {
        this.logger = Logger.getLogger("LogisticGradient_js");
        var jvmObject;
        if (arguments[0]) {
            if (arguments[0] instanceof org.apache.spark.mllib.optimization.LogisticGradient) {
                jvmObject = arguments[0];
            } else {
                jvmObject = new org.apache.spark.mllib.optimization.LogisticGradient(arguments[0]);
            }
        } else {
            jvmObject = new org.apache.spark.mllib.optimization.LogisticGradient();
        }

        Gradient.call(this, jvmObject);

}
</unnamedFunction>

<compile>
function compile(emit) {
    self.bundler.run(function(err, stats) {
      if (err || stats.compilation.errors.length) {
        var errors = stats.toJson({ errorDetails: true }).errors;
        <handleCompilationErrors>
        var recompile = errors.reduce(function(recompile, err) {
          if (Resolver.isMissingModuleError(err))
            recompile = Resolver.installPackageFromError(err);
          return recompile;
        }, false);
        if (recompile) return compile();
        
        if (err) global.shipp.logger.error(err);
        if (stats.compilation.errors.length) global.shipp.logger.error(stats.toString({ errorDetails: true }));

        return;
        </handleCompilationErrors>
      }

      global.shipp.log("Bundled", self.path);
      if (emit) global.shipp.emit("route:refresh", { route: self.path });
    });
}
</compile>

<midRange>
function midRange(start, end, count) {
    count = Math.max(+count || 0, 2); 
    count -= 1; 
    var diff = end - start;
    var incr = diff / count;
    var ret = [];
    for (var i = 0; i <= count; i++) {
        ret.push(start + incr * i);
    }
    return ret;
}
</midRange>

<unnamedFunction_2>
function() {
      this.writeDebug('sorting',arguments);
      var _this = this,
          $mapDiv = $('#' + _this.settings.mapID),
          $sortSelect = $('#' + _this.settings.sortID);

      if ($sortSelect.length === 0) {
          return;
      }

      $sortSelect.on('change.'+pluginName, function (e) {
          e.stopPropagation();

          if (_this.settings.pagination === true) {
              _this.paginationChange(0);
          }

          var sortMethod,
              sortVal;

          sortMethod = (typeof $(this).find(':selected').attr('data-method') !== 'undefined') ?  $(this).find(':selected').attr('data-method') : 'distance';
          sortVal = $(this).val();

          _this.settings.sortBy.method = sortMethod;
          _this.settings.sortBy.prop = sortVal;

          if (_this.settings.callbackSorting) {
              _this.settings.callbackSorting.call(this, _this.settings.sortBy);
          }

          if ($mapDiv.hasClass('bh-sl-map-open')) {
              _this.mapping(mappingObj);
          }
      });
}
</unnamedFunction_2>

<dataUpdatePaddings>
function (forceUpdatePaddings) {
            var state = this.state,
                pages = state.pages,
                rows = state.rows,
                scrollTop = this.$viewport.scrollTop(),
                scrollLeft = this.$viewport.scrollLeft(),
                rowIndex = 0,
                lastY1 = 0,
                rightmostPageIndex = 0,
                bottommostPageIndex = 0,
                i,
                len,
                page,
                pageEl,
                $pageEl;

            rows.length = state.sumWidths = state.sumHeights = state.totalWidth = state.totalHeight = 0;
            state.widestPage.totalActualWidth = state.tallestPage.totalActualHeight = 0;

            for (i = 0, len = this.$pages.length; i < len; ++i) {
                $pageEl = this.$pages.eq(i);
                pageEl = $pageEl[0];
                page = pages[i];
                if (!page || forceUpdatePaddings) {
                    $pageEl.css('padding', '');
                    page = {
                        index: i,
                        paddingLeft: parseFloat($pageEl.css(STYLE_PADDING_LEFT)),
                        paddingRight: parseFloat($pageEl.css(STYLE_PADDING_RIGHT)),
                        paddingTop: parseFloat($pageEl.css(STYLE_PADDING_TOP)),
                        paddingBottom: parseFloat($pageEl.css(STYLE_PADDING_BOTTOM))
                    };
                }

                if (!page.actualWidth) {
                    page.actualWidth = parseFloat(pageEl.getAttribute('data-width'));
                }
                if (!page.actualHeight) {
                    page.actualHeight = parseFloat(pageEl.getAttribute('data-height'));
                }

                page.totalActualWidth = page.actualWidth + page.paddingLeft + page.paddingRight;
                page.totalActualHeight = page.actualHeight + page.paddingTop + page.paddingBottom;

                page.width = pageEl.offsetWidth;
                page.height = pageEl.offsetHeight;
                page.x0 = pageEl.offsetLeft;
                page.y0 = pageEl.offsetTop;

                page.x1 = page.width + page.x0;
                page.y1 = page.height + page.y0;

                if (lastY1 && getMaxY1InRow(pages, rows[rowIndex]) <= page.y0 + 2) {
                    rowIndex++;
                }
                lastY1 = page.y1;
                if (!rows[rowIndex]) {
                    rows[rowIndex] = [];
                }
                if (page.totalActualWidth > state.widestPage.totalActualWidth) {
                    state.widestPage = page;
                }
                if (page.totalActualHeight > state.tallestPage.totalActualHeight) {
                    state.tallestPage = page;
                }
                state.sumWidths += page.width;
                state.sumHeights += page.height;
                page.rowIndex = rowIndex;
                pages[i] = page;
                rows[rowIndex].push(i);

                if (pages[rightmostPageIndex].x0 + pages[rightmostPageIndex].width < page.x0 + page.width) {
                    rightmostPageIndex = i;
                }
                if (pages[bottommostPageIndex].y0 + pages[bottommostPageIndex].height < page.y0 + page.height) {
                    bottommostPageIndex = i;
                }
            }

            state.totalWidth = pages[rightmostPageIndex].x0 + pages[rightmostPageIndex].width;
            state.totalHeight = pages[bottommostPageIndex].y0 + pages[bottommostPageIndex].height;
            state.scrollTop = scrollTop;
            state.scrollLeft = scrollLeft;
            this.setCurrentPage(this.calculateCurrentPage());
}
</dataUpdatePaddings>

<_fnStringToCss>
function _fnStringToCss( s )
{
    if ( s === null )
    {
        return "0px";
    }

    if ( typeof s == 'number' )
    {
        if ( s < 0 )
        {
            return "0px";
        }
        return s+"px";
    }

    var c = s.charCodeAt( s.length-1 );
    if (c < 0x30 || c > 0x39)
    {
        return s;
    }
    return s+"px";
}
</_fnStringToCss>

<get>
function get(arr, n) {
    return n >= 0 ? arr[n] : arr[arr.length + n];
}
</get>

<bsearch>
function bsearch(arr, val, key) {
  var pred = typeof val === 'function' ? val : (typeof key === 'string'
    ? function(item) { return val <= item[key]; }
    : function(item) { return val <= item; });

  var lo = -1, hi = arr.length;
  while (1 + lo !== hi) {
    var mi = lo + ((hi - lo) >> 1);
    if (pred(arr[mi])) {
      hi = mi;
    } else {
      lo = mi;
    }
  }
  return hi;
}
</bsearch>

<_handleDataUpdate>
function _handleDataUpdate() {
    const rawData = dataEditor.getValue();
    let freshData = null;

    <parseData>
    try {
        freshData = evalDataString(rawData);
    } catch(e) {
        errors.push(new Error('Could not parse the data from the input field', rawData));
    }
    </parseData>

    storage.setDataByKey(savedDataKey, freshData);

    if (freshData) {
        setNewChart();
    }
}
</_handleDataUpdate>
```