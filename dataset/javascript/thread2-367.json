[["parse_BrtHLink", "\nfunction parse_BrtHLink(data, length) {\n\tvar end = data.l + length;\n\tvar rfx = parse_UncheckedRfX(data, 16);\n\tvar relId = parse_XLNullableWideString(data);\n\tvar loc = parse_XLWideString(data);\n\tvar tooltip = parse_XLWideString(data);\n\tvar display = parse_XLWideString(data);\n\tdata.l = end;\n\tvar o = ({rfx:rfx, relId:relId, loc:loc, display:display});\n\tif(tooltip) o.Tooltip = tooltip;\n\treturn o;\n}\n"], ["encode", "\nfunction encode(body) {\n  if (typeof(body) == 'string') {\n    return [new Buffer(body, 'utf8')];\n  } else if (body instanceof Buffer) {\n    return [body];\n  } else {\n    var jsonBody = JSON.stringify(body);\n    return [new Buffer(jsonBody, 'utf8'), 'application/json'];\n  }\n}\n"], ["constructor-apiClient", "\nfunction(apiClient) {\n    <setAPIClient>\n\tthis.apiClient = apiClient || ApiClient.instance;\n    </setAPIClient>\n\n    <confirmUser>\n    this.confirmUser = function(registrationInfo, callback) {\n      var postBody = registrationInfo;\n      <checkRegistrationInfo>\n      if (registrationInfo == undefined || registrationInfo == null) {\n        throw \"Missing the required parameter 'registrationInfo' when calling confirmUser\";\n      }\n      </checkRegistrationInfo>\n      \n      <requestDataStructure>\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n      </requestDataStructure>\n\n      var authNames = ['artikcloud_oauth'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = DeviceRegConfirmUserResponseEnvelope;\n\n      <callApi>\n      return this.apiClient.callApi(\n        '/devices/registrations/pin', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n      </callApi>\n    }\n    </confirmUser>\n\n    <getRequestStatusForUser>\n    this.getRequestStatusForUser = function(requestId, callback) {\n      var postBody = null;\n\n      <checkRequestId>\n      if (requestId == undefined || requestId == null) {\n        throw \"Missing the required parameter 'requestId' when calling getRequestStatusForUser\";\n      }\n      </checkRequestId>\n\n      <requestStatusDataStructure>\n      var pathParams = {\n        'requestId': requestId\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n      </requestStatusDataStructure>\n\n      var authNames = ['artikcloud_oauth'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = DeviceRegStatusResponseEnvelope;\n\n      <callApi>\n      return this.apiClient.callApi(\n        '/devices/registrations/{requestId}/status', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n      </callApi>\n    }\n    </getRequestStatusForUser>\n    \n    <unregisterDevice>\n    this.unregisterDevice = function(deviceId, callback) {\n      var postBody = null;\n\n      <checkDeviceId>\n      if (deviceId == undefined || deviceId == null) {\n        throw \"Missing the required parameter 'deviceId' when calling unregisterDevice\";\n      }\n      </checkDeviceId>\n\n      <unregisterDeviceDataStructure>\n      var pathParams = {\n        'deviceId': deviceId\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n      </unregisterDeviceDataStructure>\n\n      var authNames = ['artikcloud_oauth'];\n      var contentTypes = [];\n      var accepts = ['application/json'];\n      var returnType = UnregisterDeviceResponseEnvelope;\n\n      <callApi>\n      return this.apiClient.callApi(\n        '/devices/{deviceId}/registrations', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n      </callApi>\n    }\n    </unregisterDevice>\n}\n"], ["opts-function", " \nfunction(opts) {\n\t<defaultOptionsAssignment>\n\tvar opts = opts || {};\n\tvar shouldHash = typeof opts.hash != 'undefined' ? opts.hash : defaults.hash;\n\tvar prefix = _.flatten([defaults.prefix]);\n\tvar shouldPrefix = typeof opts.shouldPrefix != 'undefined' ? opts.shouldPrefix : true;\n\t</defaultOptionsAssignment>\n\treturn <throughFunction>through.obj</throughFunction>(function(file, enc, cb) {\n\t\t\n\t\t<generateHash>\n\t\tvar hash = md5(opts, file.contents.toString());\n\t\t</generateHash>\n\n\t\t<fileNameExtensionProcessing>\n\t\tvar ext = path.extname(file.path);\n\t\tvar basePath = path.basename(file.path, ext);\n\t\tvar filename = typeof hash !== 'undefined' ? basePath + '-' + hash + ext : basePath + ext;\n\t\tfile.path = path.join(path.dirname(file.path), filename);\n\t\t</fileNameExtensionProcessing>\n\n\t\t<removeOldFile>\n\t\tvar base = path.join(file.cwd, defaults.src);\n\t\tvar key = originalPath.replace(base, '');\n\t\tvar existing = manifest[key];\n\t\tif (existing && existing.src && defaults.cleanup) {\n\t\t\tfs.unlink(path.join(file.cwd, defaults.dest, existing.src));\n\t\t} else if (defaults.cleanup && shouldHash) {\n\t\t\tvar nonHashPath = path.join(path.dirname(originalPath), basePath + ext).replace(base, '');\n\t\t\tvar absPath = path.join(file.cwd, defaults.dest, nonHashPath);\n\t\t\tfs.exists(absPath, function(exists) {\n\t\t\t\tif (!exists) return;\n\t\t\t\tfs.unlink(absPath);\n\t\t\t});\n\t\t}\n\t\t</removeOldFile>\n\n\t\t<addPrefixToFile>\n\t\tvar filePrefix = shouldPrefix ? prefix[index % prefix.length] : '';\n\t\tvar src = file.path.replace(base, '');\n\t\tmanifest[key] = {\n\t\t\tindex: index++,\n\t\t\tsrc: src,\n\t\t\tdest: filePrefix + src\n\t\t};\n\t\t</addPrefixToFile>\n\n\t\t<writeManifestAndUpdateStream>\n\t\twriteManifest();\n\t\tthis.push(file);\n\t\tcb();\n\t\t</writeManifestAndUpdateStream>\n\t});\n}\n"], ["createEndpointRequest", "\nfunction createEndpointRequest( handlerSpec, resource, namespace ) {\n\n\t<extendWPRequest>\n\tclass EndpointRequest extends WPRequest {\n\t\tconstructor( options ) {\n\t\t\tsuper( options );\n\t\t\tthis._levels = handlerSpec._levels;\n\t\t\tthis\n\t\t\t\t.setPathPart( 0, resource )\n\t\t\t\t.namespace( namespace );\n\t\t}\n\t}\n\t</extendWPRequest>\n\n\t<applyGetMixins>\n\tif ( typeof handlerSpec._getArgs === 'object' ) {\n\t\tObject.keys( handlerSpec._getArgs ).forEach( ( supportedQueryParam ) => {\n\t\t\tconst mixinsForParam = mixins[ supportedQueryParam ];\n\t\t\tif ( typeof mixinsForParam === 'object' ) {\n\t\t\t\tObject.keys( mixinsForParam ).forEach( ( methodName ) => {\n\t\t\t\t\tapplyMixin( EndpointRequest.prototype, methodName, mixinsForParam[ methodName ] );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\t</applyGetMixins>\n\n\t<attachSetters>\n\tObject.keys( handlerSpec._setters ).forEach( ( setterFnName ) => {\n\t\tif ( ! EndpointRequest.prototype[ setterFnName ] ) {\n\t\t\tEndpointRequest.prototype[ setterFnName ] = handlerSpec._setters[ setterFnName ];\n\t\t}\n\t} );\n\t</attachSetters>\n\n\treturn EndpointRequest;\n}\n"], ["can_mangle", "\nfunction can_mangle(name) {\n\t<checkForUnmangleableNames>\n\tif (unmangleable.indexOf(name) >= 0) return false;\n\t</checkForUnmangleableNames>\n\t<checkForReservedNames>\n\tif (reserved.indexOf(name) >= 0) return false;\n\t</checkForReservedNames>\n\t<checkForCacheProperties>\n\tif (options.only_cache) {\n\t\treturn cache.props.has(name);\n\t}\n\t</checkForCacheProperties>\n\t<checkForNumericStrings>\n\tif (/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(name)) return false;\n\t</checkForNumericStrings>\n\treturn true;\n}\n"], ["build", "\nfunction build() {\n    \n    <buildIdentity>\n    var _ret = buildIdentity.call(this);\n    var typeId = _ret.typeId;\n    var typeName = _ret.typeName;\n    var body =\n        '\\tvar opts = options ? options : {};\\n' +\n        '\\tthis.constructor.util._extend(this, opts.props);\\n' +\n        '\\tthis.constructor.super_.call(this, opts.buffer, opts.offset' +\n        (typeId ? '' : ', true') +\n        ');\\n';\n    </buildIdentity>\n    \n    <buildBody>\n    body += _ret.body;\n    </buildBody>\n    \n    <buildSerialize>\n    body += buildSerialize.call(this);\n    </buildSerialize>\n    \n    <buildDeserialize>\n    body += buildDeserialize.call(this);\n    </buildDeserialize>\n    \n    <appendMethods>\n    for (var i = 0; i < this._methods.length; i++) {\n        body += this._methods[i];\n    }\n    </appendMethods>\n    \n    <loggingDebug>\n    if (logger.isDebugEnabled()) {\n        logger.debug('Body for %s type constructor:', typeName);\n        logger.debug('\\n' + body);\n    }\n    </loggingDebug>\n    \n    <createConstructor>\n    return createConstructor(body, typeId, typeName);\n    </createConstructor>\n}\n"], ["key-value-options", "\nfunction(key, value, options) {\n\t<handleOptionsType>\n    if (isObject(key)) options = value;\n    else {\n    \t<generateOrRetrieveKey>\n        if (!key) key = this.keygen();\n        </generateOrRetrieveKey>\n        <constructKeyValueObject>\n        var out = {};\n        out[key] = value;\n        key = out;\n        </constructKeyValueObject>\n    }\n    </handleOptionsType>\n    <mergeOptions>\n    options = opts(this, options);\n    </mergeOptions>\n\n    <returnAPICall>\n    return new APICall({\n        action: 'text',\n        type: 'POST',\n        options: options,\n        query: server_params(options),\n        data: JSON.stringify(key)\n    });\n    </returnAPICall>\n}\n"], ["context-model-properties", "\nfunction (contextModel, properties) {\n\t<createCacheId>\n    var cacheId = this.createContextCacheId(contextModel, properties);\n    if (!cacheId) {\n        return this;\n    }\n    </createCacheId>\n    \n    <checkAndCreateContext>\n    if (!this.$contextCache.hasOwnProperty(cacheId)) {\n        this.$contextCache[cacheId] = this.$dataSource.createContext(contextModel, properties, this);\n    }\n    </checkAndCreateContext>\n\n    return this.$contextCache[cacheId];\n}\n"], ["isHashOrKeyValueArray", "\nfunction (obj) {\n\t<validateObjectStructure>\n    return isHash(obj) || (isArray(obj) && obj.length && obj.every(function (i) {\n            return isArray(i) && i.length === 2;\n        }));\n    </validateObjectStructure>\n}\n"], "```"]