[["toggleWindow", "\nfunction togglify(win, opts) {\n    <setDefaultOptions>\n    opts = oassign({\n        animation: 'hide'\n    }, opts);\n    </setDefaultOptions>\n\n    <initializeToggleAction>\n    win._toggleAction = new ToggleAnimation(win, opts.animation);\n    </initializeToggleAction>\n\n    <defineToggleMethod>\n    win.toggle = function () {\n        if (this.isVisible() && this.isFocused()) {\n            this._toggleAction.hide();\n        } else if (this.isVisible() && !this.isFocused()) {\n            this._toggleAction.focus();\n        } else if (this.isMinimized() || !this.isVisible()) {\n            this._toggleAction.restore();\n        }\n    };\n    </defineToggleMethod>\n\n    <setupBlurEventHandler>\n    win.on('blur', function () {\n        if (win.isVisible()) {\n            this._toggleAction.blur();\n        }\n    });\n    </setupBlurEventHandler>\n\n    return win;\n}\n"], ["clearBucketRegionCache", "\nfunction(buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n        buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n        buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n        delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n}\n"], ["prepareData", "\nfunction prepare(data, consumerkey) {\n    var prop;\n    data = data || {};\n\n    for (prop in data) {\n        if (data.hasOwnProperty(prop)) {\n            if (_.isDate(data[prop])) {\n                data[prop] = helpers.toYYYYMMDD(data[prop]);\n            }\n        }\n    }\n\n    data.oauth_consumer_key = consumerkey;\n\n    return data;\n}\n"], ["loadFactories", "\nfunction loadFactories(opts) {\n    this.flapjackFactory = new FlapjackFactory(this);\n\n    return [\n        new InternalObjFactory(this),\n        new AdapterFactory(this),\n        new ServiceFactory(this),\n        new ModelFactory(this),\n        new UipartFactory(this),\n        this.flapjackFactory,\n        new ModulePluginFactory(this, opts.modulePlugins),\n        new DefaultFactory(this)\n    ];\n}\n"], ["initializeLine", "\nfunction Line(properties) {\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null)\n                this[keys[i]] = properties[keys[i]];\n}\n"], ["checkEventValidity", "\nfunction isEventValid (comp, type) {\n    if (appearEvts.indexOf(type) <= -1) {\n        return true\n    }\n    if (comp._appear === undefined && type === 'disappear') {\n        return false\n    }\n    let res\n    if (comp._appear === undefined && type === 'appear') {\n        res = true\n    }\n    else {\n        res = (type !== comp._appear)\n    }\n    res && (comp._appear = type)\n    return res\n}\n"], ["applyThemeToElement", "\nfunction (scope, el) {\n    if (el === undefined) { el = scope; scope = undefined; }\n    if (scope === undefined) { scope = $rootScope; }\n    applyTheme.inherit(el, el);\n}\n"], ["validateWebSocketConfig", "\nfunction validateConfig(config) {\n    var result = {}\n\n    if (config.httpServer == null) throw Error(\"httpServer config property is null\")\n    result.httpServer = config.httpServer\n\n    result.onRequest = config.onRequest || default_onRequest\n    if (!_.isFunction(result.onRequest)) throw Error(\"onRequest config property is not a function\")\n\n    result.verbose = !!config.verbose\n\n    return result\n    <defaultOnRequestFunction>\n    function default_onRequest(request) {\n        if (-1 == request.requestedProtocols.indexOf(exports.wsProtocol)) {\n            return request.reject()\n        }\n\n        request.accept(exports.wsProtocol, request.origin)\n    }\n    </defaultOnRequestFunction>\n}\n"], ["countByObjectProperty", "\nfunction countBy (obj, iterate, context) {\n    var result = groupBy(obj, iterate, context || this)\n    objectEach(result, function (item, key) {\n        result[key] = item.length\n    })\n    return result\n}\n"], ["setAttributeValues", "\nfunction setAttributeValues(dom) {\n    let elems = dom.find(\n        `input[type=text], input[type=search], input[type=tel], input[type=url], input[type=email],\n         input[type=password], input[type=number], input[type=checkbox], input[type=radio]`\n    );\n\n    percyJQuery(elems).each(function() {\n        let elem = percyJQuery(this);\n        switch(elem.attr('type')) {\n            case 'checkbox':\n            case 'radio':\n                if (elem.is(':checked')) {\n                    elem.attr('checked', '');\n                }\n                break;\n            default:\n                elem.attr('value', elem.val());\n        }\n    });\n\n    return dom;\n}\n"], "```"]