[["constructor", "\nfunction (strategy) {\n        <loggingSetup>\n        this.logger = Logger.getLogger(\"DecisionTree_js\");</loggingSetup>\n        \n        var jvmObject;\n        \n        <constructorLogic>\n        if (strategy instanceof Strategy) {\n            jvmObject = new org.apache.spark.mllib.tree.DecisionTree(Utils.unwrapObject(strategy));\n        } else if (strategy instanceof rg.apache.spark.mllib.tree.DecisionTree) {\n            jvmObject = strategy;\n        } else {\n            throw \"DecisionTree invalid constructor parameter\";\n        }</constructorLogic>\n\n        <javaWrapperCall>\n        JavaWrapper.call(this, jvmObject);</javaWrapperCall>\n\n    }\n"], ["removeAllKeys", "\nfunction () {\n                <getAllKeys>\n                var keys = getAllKeys();</getAllKeys>\n\n                allKeyMap = {};\n                storage.removeAttribute(\"kMap\");\n\n                <removeKeys>\n                for (var key in keys) {\n                    if (keys.hasOwnProperty(key)) {\n                        storage.removeAttribute(keys[key]);\n                    }\n                }</removeKeys>\n                \n                <saveStorage>\n                storage.save(\"JSONPersist\");</saveStorage>\n            }\n"], ["logToServer", "\nfunction _send(level, args) {\n  <preparePayload>\n  var payload = (\n    'level=' + encodeURIComponent(level) +\n    '&message=' + encodeURIComponent(args.join(' ')));</preparePayload>\n\n  <createAndSendXhr>\n  var xhr = new XMLHttpRequest();\n  xhr.open('POST', '/log');\n  xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n  xhr.onreadystatechange = function () {\n    \n    if (xhr.readyState === 4 && xhr.status !== 200) {\n      <handleErrorResponse>\n      if (console && console.log) {\n        console.log(xhr.responseText);\n      }</handleErrorResponse>\n    }\n  };\n  xhr.send(payload);</createAndSendXhr>\n}\n"], ["deactivateAllObjects", "\nfunction () {\n      var allObjects = this.getObjects(),\n          i = 0,\n          len = allObjects.length;\n          \n      <deactivateObjects>\n      for ( ; i < len; i++) {\n        allObjects[i].setActive(false);\n      }</deactivateObjects>\n      \n      <discardActive>\n      this.discardActiveGroup();\n      this.discardActiveObject();</discardActive>\n      \n      return this;\n    }\n"], ["reportRules", "\nfunction enable (context, loc, group, rules) {\n  <reportConstruction>\n  if (rules.length === 0) {\n    context.report({ loc, message: '++ {{group}}', data: { group }})\n  } else {\n    context.report({ loc, message: '+ {{group}} {{rules}}', data: { group, rules: rules.join(' ') }})\n  }</reportConstruction>\n}\n"], ["calculateVerticalAlignment", "\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  <initAlignPos>\n  \n  _.forEach(layering, function(layer) {\n    _.forEach(layer, function(v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });</initAlignPos>\n\n  <computeVerticalAlignment>\n  _.forEach(layering, function(layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function(w) { return pos[w]; });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });</computeVerticalAlignment>\n\n  return { root: root, align: align };\n}\n"], ["createPaneIfNeeded", "\nfunction _createPaneIfNecessary(paneId) {\n        var newPane;\n\n        <checkPaneExistence>\n        if (!_panes.hasOwnProperty(paneId)) {\n            <createPane>\n            newPane = new Pane(paneId, _$el);\n            _panes[paneId] = newPane;\n\n            <emitPaneCreate>\n            exports.trigger(\"paneCreate\", newPane.id);</emitPaneCreate>\n\n            <paneClickAndDrag>\n            newPane.$el.on(\"click.mainview dragover.mainview\", function () {\n                setActivePaneId(newPane.id);\n            });</paneClickAndDrag>\n\n            <viewListChange>\n            newPane.on(\"viewListChange.mainview\", function () {\n                _updatePaneHeaders();\n                exports.trigger(\"workingSetUpdate\", newPane.id);\n            });</viewListChange>\n\n            <currentViewChange>\n            newPane.on(\"currentViewChange.mainview\", function (e, newView, oldView) {\n                _updatePaneHeaders();\n                if (_activePaneId === newPane.id) {\n                    exports.trigger(\"currentFileChange\",\n                            newView && newView.getFile(),\n                            newPane.id, oldView && oldView.getFile(),\n                            newPane.id);\n                }\n            });</currentViewChange>\n\n            <viewDestroy>\n            newPane.on(\"viewDestroy.mainView\", function (e, view) {\n                _removeFileFromMRU(newPane.id, view.getFile());\n            });</viewDestroy>\n            }</createPane>\n        }</checkPaneExistence>\n\n        return newPane;\n}\n"], ["calculateNewPx", "\nfunction(px) {\n        <applyOffset>\n        var newPx = OpenLayers.Popup.Anchored.prototype.calculateNewPx.apply(\n            this, arguments\n        );\n\n        newPx = newPx.offset(this.positionBlocks[this.relativePosition].offset);</applyOffset>\n\n        return newPx;\n}\n"], ["extractContentFromDesc", "\nfunction extractContent(desc) {\n  \n  <getTitle>\n  var title = getTitle(desc.content, '<title') || getTitle(desc.content, '<TITLE');</getTitle>\n\n  return { selector: 'body', content: desc.content, text: 'NOTEXTRACTED', title: title };\n}\n"], ["createObject", "\nfunction create(it, P){                                                                \n  <createWithDefinedProperties>\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);</createWithDefinedProperties>\n}\n"], "```\n\nThe annotations above show an interpretation of SRP compliance or violations within each function by identifying separate responsibilities. Functions are tagged at the beginning and end, with more detailed tags encapsulating blocks of code representing distinct responsibilities."]