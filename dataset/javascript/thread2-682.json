[["calculateDragDistance", "\nfunction overDragThreshold(pos2, mouseDownEvent) {\n  var pos1 = eventToPosition(mouseDownEvent); // Convert mouseDownEvent to position object\n  var dx = Math.abs(pos1.x - pos2.x); // Calculate delta X\n  var dy = Math.abs(pos1.y - pos2.y); // Calculate delta Y\n  return Math.sqrt(dx * dx + dy * dy) > DRAG_THRESHOLD; // Check if the distance exceeds threshold\n}\n"], ["sendMessageToPool", "\nfunction (name, data, response) {\n  log('ws', 'send', name, data); // Log the message being sent\n  \n  pool[name].response = response; // Store the response callback in the pool\n  \n  pool[name].socket.send(data); // Send the data through the socket\n  pool[name].count++; // Increment the send count for the pool\n}\n"], ["getRemoteMethodInputStructure", "\nfunction getRemoteMethodInput(method, isConnection = false) {\n    const acceptingParams = {};\n  \n    <buildAcceptingParameters>\n    method.accepts.forEach((param) => {\n        let paramType = '';\n        if (typeof param.type === 'object') {\n            paramType = 'JSON';\n        } else if (!SCALARS[param.type.toLowerCase()]) {\n            paramType = `${param.type}Input`;\n        } else {\n            paramType = _.upperFirst(param.type);\n        }\n        if (param.arg) {\n            acceptingParams[param.arg] = {\n                type: getType(exchangeTypes[paramType] || paramType)\n            };\n        }\n    });\n    </buildAcceptingParameters>\n\n    <returnValueTypeAdjustment>\n    return (isConnection) ? Object.assign({}, acceptingParams, connectionArgs) : acceptingParams;\n    </returnValueTypeAdjustment>\n}\n"], ["setGregorianCalendarFields", "\nfunction (field, v) {\n  var len = arguments.length;\n  <validateAndSetField>\n  if (len === 2) {\n      this.fields[field] = v;\n  } else if (len < MILLISECONDS + 1) {\n      for (var i = 0; i < len; i++) {\n          this.fields[YEAR + i] = arguments[i];\n      }\n  } else {\n      throw new Error('illegal arguments for KISSY GregorianCalendar set');\n  }\n  </validateAndSetField>\n  <resetCalendarTime>\n  this.time = undefined;\n  </resetCalendarTime>\n}\n"], ["generateUniqueIdForTinymce", "\nfunction() {\n  var UITinymceService = function() {\n    var ID_ATTR = 'ui-tinymce';\n\n    var uniqueId = 0;\n\n    <getUniqueId>\n    var getUniqueId = function() {\n      uniqueId++; // Increment unique identifier\n      return ID_ATTR + '-' + uniqueId; // Generate unique ID\n    };\n    </getUniqueId>\n\n    return {\n      getUniqueId: getUniqueId\n    };\n  };\n\n  return new UITinymceService(); // Instantiate the unique ID service\n}\n"], ["registerMathJaxExplorerHook", "\nfunction(jax) {\n  <removePreviousExplorerHook>\n  Explorer.RemoveHook();\n  </removePreviousExplorerHook>\n  \n  <registerNewExplorerHook>\n  Explorer.hook = MathJax.Hub.Register.MessageHook(\n      'End Math', function(message) {\n        var newid = message[1].id + '-Frame';\n        var math = document.getElementById(newid);\n        if (jax && newid === Explorer.expanded) {\n          Explorer.ActivateWalker(math, jax); // Activate the Explorer walker\n          math.focus(); // Set focus on the math element\n          Explorer.expanded = false; // Reset expansion flag\n        }\n      });\n  </registerNewExplorerHook>\n}\n"], ["releaseResources", "\nfunction() {\n  <releaseCallbackQueue>\n  CallbackQueue.release(this.reactMountReady); // Release the mount ready callback queue\n  this.reactMountReady = null;\n  </releaseCallbackQueue>\n\n  <releasePutListenerQueue>\n  ReactPutListenerQueue.release(this.putListenerQueue); // Release the put listener queue\n  this.putListenerQueue = null;\n  </releasePutListenerQueue>\n}\n"], ["getUserFormattedData", "\nfunction getUFData(userName, identity, options, callback) {\n  var url = 'http://example.com'; // Placeholder URL\n  \n  <initializePageObject>\n  cache = options.cache;\n  page =  new Page(url, identity, null, options);\n  </initializePageObject>\n  \n  <fetchAndFormatData>\n  page.fetchUrl(function(){\n    if(page.profile.hCards.length > 0){\n      page.profile.hCards[0].source = 'microformat'; // Annotate microformat source\n      callback(null, page.profile.hCards[0]); // Callback with profile data\n    }else{\n      callback(null, {}); // Callback with empty data\n    }\n  })\n  </fetchAndFormatData>\n}\n"], ["findIndexOfCharacterSkippingSpaces", "\nfunction nearestCharAfter(char, str, index) {\n  let i = index + 1;\n  while (i < str.length) {\n    if (str.charAt(i) === char) return i;\n    if (!/\\s/.test(str.charAt(i))) return -1;\n    i += 1;\n  }\n  return -1;\n}\n"], ["expandCodeAtCursor", "\nfunction expandCurrent() {\n  var editor = EditorManager.getFocusedEditor(); // Get the currently focused editor\n  if (editor) {\n      <unfoldCodeAtCursor>\n      var cursor = editor.getCursorPos(), cm = editor._codeMirror;\n      cm.unfoldCode(cursor.line); // Unfold code at the cursor's line\n      </unfoldCodeAtCursor>\n  }\n}\n"], "```"]