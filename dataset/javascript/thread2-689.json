[["copycontext", "\nfunction copycontext(context) {\n    var t = {};\n    var keys =  context.keys();\n    var i = keys.length;\n    var k, v, j;\n    while (i--) {\n      k = keys[i];\n      <ignorePrivateAndFunctions>\n      if (k[0] == '_')\n        continue;\n      v = context.get(k);\n      if (v && {}.toString.call(v) === '[object Function]')\n        continue;\n      </ignorePrivateAndFunctions>\n\n      <serializeAndDeserialize>\n      try {\n        j = JSON.stringify(v);\n        t[k] = JSON.parse(j);\n      } catch(err) {\n        t[k] = \"Exception: \" + err;\n      }\n      </serializeAndDeserialize>\n    }\n    \n    return t;\n}\n"], ["resolve", "\nfunction resolve(root, args) {\n  args = root.concat(Array.prototype.slice.call(args));\n  return path.resolve.apply(path, args);\n}\n"], ["unnamed", "\nfunction(b)\n{\n   var rval = '';\n   <structureRDF>\n   var first = true;\n   for(var p in b)\n   {\n      if(p !== '@id')\n      {\n         if(first)\n         {\n            first = false;\n         }\n         else\n         {\n            rval += '|';\n         }\n         rval += '<' + p + '>';\n         var objs = (b[p].constructor === Array) ? b[p] : [b[p]];\n         for(var oi in objs)\n         {\n            var o = objs[oi];\n            if(o.constructor === Object)\n            {\n               <expandIRI>\n               if('@id' in o)\n               {\n                  if(_isBlankNodeIri(o['@id']))\n                  {\n                     rval += '_:';\n                  }\n                  else\n                  {\n                     rval += '<' + o['@id'] + '>';\n                  }\n               }\n               </expandIRI>\n               <expandLiteral>\n               else\n               {\n                  rval += '\"' + o['@literal'] + '\"';\n                  if('@type' in o)\n                  {\n                     rval += '^^<' + o['@type'] + '>';\n                  }\n                  else if('@language' in o)\n                  {\n                     rval += '@' + o['@language'];\n                  }\n               }\n               </expandLiteral>\n            }\n            <handleSimpleTypes>\n            else\n            {\n               rval += '\"' + o + '\"';\n            }\n            </handleSimpleTypes>\n         }\n      }\n   }\n   </structureRDF>\n   return rval;\n}\n"], ["detectObject", "\nfunction detectObject({ imageName, sensitivity, tolerance }) {\n\n    <validateParams>\n    if (!imageName || !sensitivity || !tolerance) {\n        alert(\"Must mention imageName, sensitivity and tolerance in passed configuration.\");\n        throw new Error(\"Must mention imageName, sensitivity and tolerance in passed configuration.\");\n    }\n    \n    if (sensitivity < 1 || sensitivity > 100 || tolerance < 1 || tolerance > 100) {\n        alert(\"Sensitivity and Tolerance ranges between 1 and 100\");\n        throw new Error(\"Sensitivity and Tolerance ranges between 1 and 100\");\n    }\n    </validateParams>\n    \n    var white = {\n        r: 255,\n        g: 255,\n        b: 255\n    };\n\n    <processDetection>\n    var base64Img = createRGBPixels(imageName)\n        .then(function(img) {\n            var detectedObject = img.detectObject(sensitivity, tolerance, white);\n            return detectedObject;\n        })\n        .then(function(detectedObject) {\n            var base64ImgResponse = detectedObject.save();\n            return base64ImgResponse;\n        });\n    </processDetection>\n\n    return base64Img;\n}\n"], ["grid", "\nfunction grid (data, callback) {\n    <renderTemplate>\n    linz.app.render(linz.api.views.viewPath('modelIndex/grid.jade'), data, (err, html) => {\n        if (err) {\n            return callback(err);\n        }\n        return callback(null, html);\n    });\n    </renderTemplate>\n}\n"], ["setMember", "\nfunction setMember(name, value, options) {\n\t\t\tvar member = members[name];\n\t\t\t<checkMember>\n\t\t\tif (!member) {\n\t\t\t\tthrow new Error(\"Error setting state. Member not registered : \" + name);\n\t\t\t} else {\n\t\t\t\tvar stateType = stateTypes[member.type];\n\t\t\t\t<updateState>\n\t\t\t\tif (stateType) {\n\t\t\t\t\tstateType.set(member, value, options);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Error setting state. Type '\"+ member.type +\"' not recognised for member : \" + name);\n\t\t\t\t}\n\t\t\t\t</updateState>\n\t\t\t}\n\t\t\t</checkMember>\n}\n"], ["inputEx.PasswordField.setOptions", "\nfunction(options) {\n\t   inputEx.PasswordField.superclass.setOptions.call(this, options);\n\t   \n   \t<setClassAndRegexp>\n   \tthis.options.className = options.className ? options.className : \"inputEx-Field inputEx-PasswordField\";\n   \tthis.options.regexp = options.regexp || inputEx.regexps.password;\n   \t</setClassAndRegexp>\n\t   \n\t<setIndicators>\n\t\tthis.options.strengthIndicator = YAHOO.lang.isUndefined(options.strengthIndicator) ? false : options.strengthIndicator;\n\t\tthis.options.capsLockWarning = YAHOO.lang.isUndefined(options.capsLockWarning) ? false : options.capsLockWarning;\n\t</setIndicators>\n\n\t<registerPasswordField>\n\t\tinputEx.PasswordField.byId[options.id] = this;\n\t\tvar passwordField;\n\t\tif(options.confirm && (passwordField = inputEx.PasswordField.byId[options.confirm]) ) {\n\t\t\tthis.setConfirmationField(passwordField);\n\t\t}\n\t</registerPasswordField>\n}\n"], ["removeRecognizer", "\nfunction (recognizer) {\n    <processRemoval>\n    if (invokeArrayArg(recognizer, 'remove', this)) {\n      return this;\n    }\n    </processRemoval>\n    <updateRecognizers>\n    var recognizers = this.recognizers;\n    recognizer = this.get(recognizer);\n    recognizers.splice(recognizers.indexOf(recognizer), 1);\n    this.touchAction.update();\n    </updateRecognizers>\n    return this;\n}\n"], ["createDefaultMiddleware", "\nfunction createDefaultMiddleware(connect, options) {\n    <initializeMiddlewareArray>\n    var middlewares = [];\n    </initializeMiddlewareArray>\n    <processBaseOptions>\n    if (!Array.isArray(options.base)) {\n      options.base = [options.base];\n    }\n    var defaultStaticOptions = {};\n    var directory = options.directory || options.base[options.base.length - 1];\n    options.base.forEach(function(base) {\n      var path = base.path || base;\n      var staticOptions = base.options || defaultStaticOptions;\n      middlewares.push(serveStatic(path, staticOptions));\n    });\n    </processBaseOptions>\n    <appendIndexMiddleware>\n    middlewares.push(serveIndex(directory.path || directory, directory.options));\n    </appendIndexMiddleware>\n    return middlewares;\n}\n"], ["plugin", "\nfunction plugin(opts){\n  <validateAndInitializeOptions>\n  opts = opts || {};\n  if (!_.isObject(opts)) throw new Error('option should be an Object');\n  var params = omit(opts, settings) || {};\n  var options = pick(opts, settings) || {};\n  </validateAndInitializeOptions>\n  \n  <setDefaultOptions>\n  var pattern = opts.pattern || '**';\n  options.templatesDir = options.templatesDir || templates;\n  options.layoutsDir = options.layoutsDir || options.templatesDir; \n  options.partialsDir = options.partialsDir || (options.templatesDir + '/partials'); \n  options.defaultTemplate = options.defaultTemplate || 'default';\n  options.extname = options.extname || ext;\n  </setDefaultOptions>\n\n  return function(files, metalsmith, done){\n    var metadata = metalsmith.metadata();\n    var render;\n    <prepareMatches>\n    var matches = {};\n    var ext = options.extname;\n    var reg = new RegExp(ext + '$', 'i');\n    var concurrency = options.concurrency || Infinity;\n    </prepareMatches>\n    \n    <defineRender>\n    if(options.defaultLayout) {\n      options.defaultLayout = metalsmith.path(options.layoutsDir, options.defaultLayout);\n      if(!reg.test(options.defaultLayout)) options.defaultLayout += ext;\n    }\n    options.templatesDir = metalsmith.path(options.templatesDir);\n    options.layoutsDir = metalsmith.path(options.layoutsDir);\n    options.partialsDir = metalsmith.path(options.partialsDir);\n    render = hbs.express4(options);\n    </defineRender>\n\n    <buildFileList>\n    function check(file){\n      var data = files[file];\n      if (pattern && !match(file, pattern)[0]) return false;\n      return true;\n    }\n    Object.keys(files).forEach(function(file){\n      if (!check(file)) return;\n      debug('stringifying file: %s', file);\n      var data = files[file];\n      data.contents = data.contents.toString();\n      matches[file] = data;\n    });\n    </buildFileList>\n\n    <convertFiles>\n    eachLimit(Object.keys(matches), concurrency, convert, done);\n    function convert(file, done){\n      debug('converting file: %s', file);\n      var data = files[file];\n      var clonedParams = extend(true, {}, params);\n      var clone = extend({settings:{}}, clonedParams, metadata, data);\n      var templatePath = data.template || options.defaultTemplate;\n      templatePath = metalsmith.path(options.templatesDir, templatePath);\n      if(!reg.test(templatePath)) templatePath += ext;\n      render(templatePath, clone, function(err, str){\n        if (err) return done(err);\n        data.contents = new Buffer(str);\n        debug('converted file: %s', file);\n        done();\n      });\n    }\n    </convertFiles>\n  };\n}\n"], "```"]