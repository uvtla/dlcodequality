```javascript
<bnToBuffer>
function bnToBuffer(bn) {
  <hexConversion>
  var hex = bn.toString(16)
  hex = hex.length % 2 === 1 ? '0' + hex : hex
  </hexConversion>
  return Buffer.from(hex, 'hex')
}
</bnToBuffer>

<anonymousDatabaseDeletion>
function (source, args, context, info) {
  <logActivity>
  console.log('Type Config', this.utils.getTypeConfig(info))
  </logActivity>
  return r.db(tables.User.db).table(tables.User.table).delete().run().then(function () {
    return 200
  }).catch(function (err) {
    return 500
  })
}
</anonymousDatabaseDeletion>

<removeListener>
function (element, event, callback) {
  
  <normalizeTargetAndEvent>
  var normalized = this._normalizeTargetAndEvent(element, event);
  element = normalized.element;
  event = normalized.event;

  event = this._getType(event);
  </normalizeTargetAndEvent>
  
  <handleElementIdentification>
  if (this.typesUtil.isString(element)) {
    element = Aria.$window.document.getElementById(element);
    if (!element) {
      return false;
    }
  } else if (this._isValidCollection(element)) {
    

    var ok = true;
    for (i = element.length - 1; i > -1; i--) {
      ok = (this.removeListener(element[i], event, callback) && ok);
    }
    return ok;
  }
  </handleElementIdentification>

  <purgeOnNoCallback>
  if (!callback || !(callback.call || callback.fn)) {
    
    return this.purgeElement(element, false, event);
  }
  </purgeOnNoCallback>

  <handleUnloadEventSpecialCase>
  if ("unload" == event) {
    if (unloadListeners) {
      
      ...
      
      return true;
    }
    return false;
  }
  </handleUnloadEventSpecialCase>

  <removeCacheItem>
  var cacheItem = null;
  var index = arguments[3];
  if ("undefined" === typeof index) {
    index = this._getCacheIndex(listeners, element, event, callback);
  }
  if (index >= 0) {
    cacheItem = listeners[index];
  }
  if (!element || !cacheItem) {
    return false;
  }
  var bCapture = cacheItem[CAPTURE] === true ? true : false;
  try {
    this._simpleRemove(element, event, cacheItem[WFN], bCapture);
  } catch (ex) {
    lastError = ex;
    return false;
  }
  delete listeners[index][WFN];
  if (listeners[index][FN] != listeners[index][CB]) {
    listeners[index][CB].$dispose();
  }
  listeners[index][CLEANCB]();
  delete listeners[index][CLEANCB];
  
  listeners.splice(index, 1);
  </removeCacheItem>

  return true;
}
</removeListener>

<discoverServicesAndCharacteristics>
function discoverServicesAndCharacteristics(error) {
  if (error) { return reject(error); }
  peripheral.discoverSomeServicesAndCharacteristics(
    ALL_SERVICES,
    ALL_CHARACTERISTICS,
    setupEmitter
  );
}
</discoverServicesAndCharacteristics>

<_gpfAddEventListener>
function _gpfAddEventListener(event, eventsHandler) {
  
  var listeners = _gpfAllocateEventDispatcherListeners(this);
  if (undefined === listeners[event]) {
    listeners[event] = [];
  }
  listeners[event].push(eventsHandler);
  return this;
}
</_gpfAddEventListener>

<parseTemplate>
function (attrs) {
  var result = null;

  if (HTML.isArray(attrs)) {
    <handleArrayAttrs>
    var nondynamicAttrs = parseAttrs(attrs[0]);
    if (nondynamicAttrs) {
      result = (result || []);
      result.push(nondynamicAttrs);
    }
    for (var i = 1; i < attrs.length; i++) {
      var token = attrs[i];
      if (token.t !== 'TemplateTag')
        throw new Error("Expected TemplateTag token");
      result = (result || []);
      result.push(token.v);
    }
    </handleArrayAttrs>
    return result;
  }

  <handleObjectAttrs>
  for (var k in attrs) {
    if (!result)
      result = {};

    var inValue = attrs[k];
    var outParts = [];
    for (var i = 0; i < inValue.length; i++) {
      var token = inValue[i];
      if (token.t === 'CharRef') {
        outParts.push(convertCharRef(token));
      } else if (token.t === 'TemplateTag') {
        outParts.push(token.v);
      } else if (token.t === 'Chars') {
        pushOrAppendString(outParts, token.v);
      }
    }

    var outValue = (inValue.length === 0 ? '' :
                    (outParts.length === 1 ? outParts[0] : outParts));
    var properKey = HTMLTools.properCaseAttributeName(k);
    result[properKey] = outValue;
  }
  </handleObjectAttrs>

  return result;
}
</parseTemplate>

<ihaleSil>
function f_cop_ihale_sil(_tahta_id, _ihale_id, _kullanici_id) {
  <ihaleControl>
  var ihale = require('./db_ihale');
  return ihale.f_db_ihale_genel_kontrol(_ihale_id)
    .then(function (_iGenel) {
      if (_iGenel == 1) {
        
        throw new exception.Istisna("İhale Silinemedi!",
          "Silinmek istenen ihale GENEL ihaleler içerisinde kayıtlı olduğu için işlem tamamlanamadı!");
      } else {
        return ihale.f_db_ihale_teklifleri(_tahta_id, _ihale_id)
        ...
        </ihaleControl>
        
        <tekliflerControl>
        .then(function (_teklifler) {
          if (_teklifler != null && _teklifler.length > 0) {
            throw new exception.Istisna("İhale silinemez!",
              "Silinmek istenen ihaleye bağlı teklifler kayıtlı olduğu için işlem gerçekleştirilemez!");
          } else {
            
            return ihale.f_db_tahta_ihale_sil(_ihale_id, _tahta_id, _kullanici_id);
          }
        });
        </tekliflerControl>
      }
    });
}
</ihaleSil>

<NIfTIToNRRD>
function NIfTIToNRRD(niftiHeader) {
  var ret = {}
  ret.dimension = niftiHeader.dim[0]
  ret.type = niftiHeader.datatype 
  ret.encoding = 'raw'
  ret.endian = niftiHeader.littleEndian ? 'little' : 'big'
  ret.sizes = niftiHeader.dim.slice(1)
  ret.thicknesses = niftiHeader.pixdim.slice(1);

  <handlePresentationUnits>
  if (niftiHeader.xyzt_units !== undefined) {
    ret.spaceUnits = niftiHeader.xyzt_units
    while (ret.spaceUnits.length < ret.dimension) {
      ret.spaceUnits.push("")
    }
    ret.spaceUnits.length = ret.dimension
  }
  </handlePresentationUnits>
  
  <handleOrientation>
  if (niftiHeader.qform_code === 0) {
    ret.spacings = niftiHeader.pixdim.slice(1)
    while (ret.spacings.length < ret.dimension) {
      ret.spacings.push(NaN)
    }
    ret.spaceDimension = Math.min(ret.dimension, 3)
  } else if (niftiHeader.qform_code > 0) {
    
    ret.space = "right-anterior-superior"
    
    ...
    
    ret.spaceDirections = [
      ...
    ]
    ret.spaceOrigin = [niftiHeader.qoffset_x, niftiHeader.qoffset_y, niftiHeader.qoffset_z]
  } else {
    console.warn("Invalid qform_code: " + niftiHeader.qform_code + ", orientation is probably messed up.")
  }
  
  if (niftiHeader.sform_code > 0) {
    console.warn("sform transformation are currently ignored.")
  }
  </handleOrientation>
  
  return ret
}
</NIfTIToNRRD>

<routeHandler>
function routeHandler(route, opts) {
  <handlerPresentation>
  const handler = stripIndent(`   ${route.handler.toString()}`);
  const code = m('pre', { style: { border: 0, margin: 0 } }, handler);

  const panelOptions = { collapsed: opts.routeHandlers !== 'expanded' };
  </handlerPresentation>
  
  return collapsablePanel('Handler', panelOptions, code);
}
</routeHandler>

<stringSubstitution>
function (str, variables) {
  
  <validateInput>
  if (!(str && _.isString(str))) { return str; }
  </validateInput>
  
  <substitutionProcess>
  !Substitutor.isInstance(variables) && !_.isArray(variables) && (variables = _.tail(arguments));
  return Substitutor.box(variables, Substitutor.DEFAULT_VARS).parse(str).toString();
  </substitutionProcess>
}
</stringSubstitution>
```