[["initializeReader", "\nfunction(settings){\n\t\n\tthis._currentElement = new Element(\"document\");\n\tthis._topCandidate = null;\n\tthis._origTitle = this._headerTitle = \"\";\n\tthis._scannedLinks = {};\n\tif(settings) this._processSettings(settings);\n}\n"], ["encodeURL", "\nfunction encode_url(str) {\n    <constructURL>\n    var slash = str.indexOf('/', 8) + 1 || str.length;\n    var res = encode(str.slice(0, slash).toUpperCase(), false);\n    </constructURL>\n\n    <encodePath>\n    if (slash >= str.length) {\n        return res;\n    }\n    var path_res = encode(str.slice(slash), false);\n    res.data27 = res.data27.concat(path_res.data27);\n    </encodePath>\n\n    <mergeEncodedData>\n    if (res.data10 && path_res.data10) {\n        res.data10 = res.data10.concat(path_res.data10);\n    }\n    if (res.data1 && path_res.data1) {\n        res.data1 = res.data1.concat(path_res.data1);\n    }\n    </mergeEncodedData>\n\n    return res;\n}\n"], ["generateCallStack", "\nfunction(){\n    var funcstring, stack = \"\";\n    if (this.args) {\n        var func = this.args.callee;\n        while (func){\n            funcstring = String(func);\n            func = func.caller;\n        }\n    }\n    return stack;\n}\n"], ["getSynchronousStackTrace", "\nfunction StackTrace$$getSync(opts) {\n    opts = _merge(_options, opts);\n    var err = _generateError();\n    var stack = _isShapedLikeParsableError(err) ? ErrorStackParser.parse(err) : StackGenerator.backtrace(opts);\n    return _filtered(stack, opts.filter);\n}\n"], ["generateMinifiedJSFilePaths", "\nfunction getMinifiedJSFiles(files) {\n  <aggregateMinifiedFileNames>\n  var minifiedFiles = [];\n  files.forEach(function(path) {\n    minifiedFiles.push('<%- project.uglify %>/' + path.replace('.js', '.min.js').replace('/<%= originalPluginName %>/', ''));\n  });\n  </aggregateMinifiedFileNames>\n  return minifiedFiles;\n}\n"], ["emitSIGINTSignal", "\nfunction emitSIGINT() {\n    <cleanupResources>\n    if (rl) {\n        rl.close()\n        rl = null\n    }\n    if (ipcListener) {\n        process.removeListener(\"message\", ipcListener)\n        ipcListener = null\n    }\n    </cleanupResources>\n    \n    <emitInterruptSignal>\n    emitter.emit(\"SIGINT\")\n    </emitInterruptSignal>\n}\n"], ["convertToArray", "\nfunction(collection) {\n    return Array.from ? Array.from(collection) : Array.apply(null, collection);\n}\n"], ["validateReferenceValue", "\nfunction isValidRefValue(recordTypes, val, propDesc) {\n\n\t<checkValueType>\n\tif ((typeof val) !== 'string')\n\t\treturn false;\n\t</checkValueType>\n\n\t<checkHashFormat>\n\tconst hashInd = val.indexOf('#');\n\tif ((hashInd <= 0) || (hashInd === val.length - 1))\n\t\treturn false;\n\t</checkHashFormat>\n\n\t<validateReferenceTarget>\n\tconst refTarget = val.substring(0, hashInd);\n\tif (refTarget !== propDesc.refTarget)\n\t\treturn false;\n\t</validateReferenceTarget>\n\n\t<validateReferencedID>\n\tconst refTargetDesc = recordTypes.getRecordTypeDesc(refTarget);\n\tconst refIdPropDesc = refTargetDesc.getPropertyDesc(\n\t\trefTargetDesc.idPropertyName);\n\tif ((refIdPropDesc.scalarValueType === 'number') &&\n\t\t!Number.isFinite(Number(val.substring(hashInd + 1))))\n\t\treturn false;\n\t</validateReferencedID>\n\n\treturn true;\n}\n"], ["uglifyJavaScript", "\nfunction uglify(src, dest) {\n    <retrieveLicence>\n    var licence = getLicence(src);\n    </retrieveLicence>\n\n    <minifyAndWrite>\n    try {\n        var final_code = uglifyJs.minify(src, {\n            ascii_only: true\n        });\n        fs.writeFileSync(dest, licence + \"\\r\\n\" + final_code.code, FILE_ENCODING);\n    } catch (ex) {\n        console.log(ex, ex.stack);\n        error = true;\n    }\n    </minifyAndWrite>\n}\n"], ["listLogSummary", "\nfunction ListLogSummary (all) {\n   this.all = all;\n   this.latest = all.length && all[0] || null;\n   this.total = all.length;\n}\n"], "```\nEach annotated block represents a cohesive set of operations that fulfill a specific role in the context of the parent function. For example, in the `uglifyJavaScript` function, there are two distinct responsibilities: retrieving the license and performing the minification and file writing. These have been annotated with separate tags, `<retrieveLicence>` and `<minifyAndWrite>` respectively."]