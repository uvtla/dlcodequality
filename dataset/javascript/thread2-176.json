[["flip", "\nfunction flip(obj) {\n  var result = {};\n  var keys = Object.keys(obj);\n  var len = keys.length;\n  for (var i = 0; i < len; i++) {\n    var key = keys[i];\n    result[obj[key]] = key;\n  }\n  return result;\n}\n"], ["unnamed-uploadImage", "\nfunction ($placeholder, file, that) {\n  $.ajax({\n    type: \"post\",\n    url: that.options.imagesUploadScript,\n    xhr: function () {\n      var xhr = new XMLHttpRequest();\n      xhr.upload.onprogress = that.updateProgressBar;\n      return xhr;\n    },\n    cache: false,\n    contentType: false,\n    complete: function (jqxhr) {\n      that.uploadCompleted(jqxhr, $placeholder);\n    },\n    processData: false,\n    data: that.options.formatData(file)\n  });\n}\n"], ["unnamed-generateHash", "\nfunction(cb_) {\n    common.log.out('Hash generation: ' + base_name + '.tar.gz.sha1sum');\n    var sha1sum = require('child_process').spawn('sha1sum', \n      [base_name + '.tar.gz'], {\n      cwd: out_path\n    });\n    var out = fs.createWriteStream(path.join(out_path, base_name + '.tar.gz.sha1sum'));\n    sha1sum.stdout.on('data', function(data) {\n      out.write(data);\n    });\n    sha1sum.stderr.on('data', function(data) {\n      console.log('stderr: ' + data);\n    });\n    sha1sum.on('close', function(code) {\n      out.end();\n      if(code !== 0) {\n        return cb_(common.err('`sha1sum` failed with code: ' + code,\n                              'auto_updater:failed_sha1sum'));\n      }\n      return cb_();\n    });\n}\n"], ["unnamed-removeIf", "\nfunction ( obj, fn ) {\n\t\tif ( typeof fn !== \"function\" ) {\n\t\t\tthrow new Error( label.error.invalidArguments );\n\t\t}\n\n\t\tvar remove = [];\n\n\t\tarray.each( obj, function ( i ) {\n\t\t\tif ( fn( i ) !== false ) {\n\t\t\t\tremove.push( i );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tarray.each( remove, function ( i ) {\n\t\t\tarray.remove( obj, array.index( obj, i) );\n\t\t});\n\n\t\treturn obj;\n}\n"], ["oneBroker", "\nfunction oneBroker(api_key) {\n  var self = this;\n  var config = {\n    url: 'https:\n    version: 'v1',\n    api_key: api_key,\n    timeoutMS: 10000\n  };\n  \n  function accountInfo(callback) {\n    var path  = '/' + config.version + '/account/info.php';\n    var params = {};\n    return apiMethod(path, params, callback);\n  }\n  function accountAddress(callback) {\n    var path  = '/' + config.version + '/account/bitcoindepositaddress.php';\n    var params = {};\n    return apiMethod(path, params, callback);\n  }\n\n  function positionList(callback) {\n    var path  = '/' + config.version + '/position/list_open.php';\n    var params = {};\n    return apiMethod(path, params, callback);\n  }\n  function positionEdit(position_id, callback) {\n    var path  = '/' + config.version + '/position/edit.php';\n    var params = { position_id: position_id };\n    return apiMethod(path, params, callback);\n  }\n  \n  function marketList(callback) {\n    var path  = '/' + config.version + '/market/list.php';\n    var params = {};\n    return apiMethod(path, params, callback);\n  }\n  function marketDetail(symbol, callback) {\n    var path  = '/' + config.version + '/market/detail.php';\n    var params = \"symbol=\"+symbol;\n    return apiMethod(path, params, callback);\n  }\n  function marketQuotes(symbols, callback) {\n    var path  = '/' + config.version + '/market/quotes.php';\n    var params = \"symbols=\"+symbols;\n    return apiMethod(path, params, callback);\n  }\n  \n  function apiMethod(path, params, callback) {\n    var url    = config.url + path + '?token=' + config.api_key;\n    if(params) url = url+= '&'+params;\n    return apiRequest(url, callback);\n  }\n  \n  function apiRequest(url, callback) {\n    var options = {\n      url: url,\n      method: 'GET',\n      timeout: config.timeoutMS,\n      maxAttempts: 3,\n      retryDelay: 2000,  \n      retryStrategy: request.RetryStrategies.HTTPOrNetworkError \n    };\n\n    var req = request(options, function(error, response, body) {\n      if(typeof callback === 'function') {\n        var data;\n        if(error) {\n          callback.call(self, new Error('Error in server response: ' + JSON.stringify(error)), null);\n          return;\n        }\n        try {\n          data = JSON.parse(body);\n          if(data.error != false){\n            callback.call(self, new Error('API error.'), null);\n          } else {\n            callback.call(self,null,data.response);\n          }\n        }\n        catch(e) {\n          callback.call(self, new Error('Could unknown server response occured.'), null);\n          return;\n        }\n      }\n    });\n\n    return req;\n  }\n\n  self.accountInfo = accountInfo;\n  self.accountAddress = accountAddress;\n  self.positionList = positionList;\n  self.positionEdit = positionEdit;\n  self.marketList = marketList;\n  self.marketDetail = marketDetail;\n  self.marketQuotes = marketQuotes;\n}\n"], ["unnamed-commandExecuter", "\nfunction(command, arg) {\n  if (!arg) {\n    arg = 'default';\n  }\n\n  if (!commands[command]) {\n    grunt.fail.fatal('Command [' + command + '] not found.');\n  }\n\n  if (typeof (commands[command]) !== 'function') {\n    if (!commands[command][arg]) {\n      grunt.fail.fatal('Argument [' + arg + '] for [' + command\n          + '] not found.');\n    }\n  }\n\n  var func = (arg) ? commands[command][arg] : commands[command];\n  if (!func) {\n    func = commands[command]; \n  }\n\n  var options = this.options();\n  var docker = (options.docker) ? new Docker(options.docker) : null;\n  var done = this.async();\n\n  var callback = function(e) {\n    if (e) {\n      grunt.fail.warn(e);\n    }\n    done();\n  };\n\n  func.apply(this, [ grunt, docker, options, callback, arg ]);\n}\n"], ["normalize", "\nfunction normalize(arr, base) {\n  for (let i = 0; i < arr.length; i++) {\n    let singlet = arr[i];\n    if (singlet >= base) {\n      arr[i] = singlet % base;\n      addNum(arr, Math.floor(singlet / base), i + 1);\n    }\n  }\n}\n"], ["watcherCSS", "\nfunction watcherCSS() {\n  return gulp.watch('src/css/*.css', gulp.series(coreCSS, coreMinCSS, concatCSS, concatMinCSS, clean));\n}\n"], ["toDate", "\nfunction toDate(date) {\n  date = new Date(date)\n  return months[date.getMonth()] + ' ' + date.getFullYear()\n}\n"], ["StackTrace$$get", "\nfunction StackTrace$$get(opts) {\n  var err = _generateError();\n  return _isShapedLikeParsableError(err) ? this.fromError(err, opts) : this.generateArtificially(opts);\n}\n"], "```"]