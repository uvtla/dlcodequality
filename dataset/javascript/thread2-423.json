[["handleErrorResponse", "\nfunction (unused, req) {\n    var res = req.res, cb = req.callback;\n    if (!cb) {\n        this.$logError(this.MISSING_IO_CALLBACK, [res.url]);\n    } else if (res.error != null) {\n        \n        \n        if (cb.onerror == null) {\n            \n            this.$logError(this.IO_REQUEST_FAILED, [res.url, res.error]);\n        } else {\n            var scope = cb.onerrorScope;\n            if (!scope) {\n                scope = cb.scope;\n            }\n            try {\n                cb.onerror.call(scope, res, cb.args);\n            } catch (ex) {\n                this.$logError(this.IO_CALLBACK_ERROR, [res.url], ex);\n            }\n        }\n    } else {\n\n        \n        if (req.expectedResponseType) {\n\n            this._jsonTextConverter(res, req.expectedResponseType);\n        }\n\n        cb.fn.call(cb.scope, res, cb.args);\n    }\n    req = cb = null;\n}\n"], ["findColumnInForm", "\nfunction(v) {\n    var $formBody = $(\"td.ms-formbody, td.ms-formbodysurvey\"),\n    \n    \n    escapeRegExp = function (v){\n        return v.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n    },\n    columnName = escapeRegExp(v),\n    rcommentValidation = new RegExp(\"(?:Field|FieldInternal)Name=\\\"\" + columnName + \"\\\"\", \"i\"),\n    $columnNode = $formBody.contents().filter(function () {\n        return this.nodeType === 8 && rcommentValidation.test(this.nodeValue);\n    })\n\n    ;\n\n    return $columnNode.parent(\"td\");\n}\n"], ["checkIfIndependentMember", "\nfunction isIndependentMember(symbol) {\n    if (symbol.declarations && symbol.declarations.length === 1) {\n        var declaration = symbol.declarations[0];\n        if (declaration) {\n            switch (declaration.kind) {\n                case 145 :\n                case 144 :\n                    return isIndependentVariableLikeDeclaration(declaration);\n                case 147 :\n                case 146 :\n                case 148 :\n                    return isIndependentFunctionLikeDeclaration(declaration);\n            }\n        }\n    }\n    return false;\n}\n"], ["loadData", "\nfunction(table, limit, page, query, fields)\n{\n    if (this._doneLoading)\n        return;\n\n    var _this = this;\n\n    \n    var args = [table, limit, page, query, fields];\n    if (this._orderBy) {\n        args.push(this._orderBy);\n        args.push(this._ascending);\n    }\n\n    var p = this.dataService.query.apply(this.dataService.query, args)\n\n    \n    .then(function(results) {\n        results.forEach(function(r) {\n            var obj = new _this._T();\n            _(r).each(function(value, key) {\n                obj[key] = value;\n            });\n            _this._results.push(obj);\n        });\n\n        \n        if (results.length !== limit)\n            _this._doneLoading = true;\n\n        return _this._results;\n    });\n\n    return p;\n}\n"], ["copyCordovaFiles", "\nfunction copyCordovaSrc(sourceLib, platformInfo) {\n    \n    \n    shell.mkdir('-p', platformInfo.locations.platformWww);\n    shell.cp('-f', path.join(platformInfo.locations.www, 'cordova.js'),\n        path.join(platformInfo.locations.platformWww, 'cordova.js'));\n\n    \n    \n    var cordovaJsSrcPath = path.resolve(sourceLib, platformInfo.locations.cordovaJsSrc);\n\n    \n    if(fs.existsSync(cordovaJsSrcPath)) {\n        shell.cp('-rf', cordovaJsSrcPath, platformInfo.locations.platformWww);\n    }\n}\n"], ["formatDateTime", "\nfunction datetime(date = new Date(), format) {\n  if (date && isString(date)) {\n    const dateString = date;\n    date = new Date(Date.parse(date));\n\n    if (isNaN(date.getTime()) && !format) {\n      format = dateString;\n      date = new Date();\n    }\n  }\n  format = format || 'YYYY-MM-DD HH:mm:ss';\n\n  const fn = d => {\n    return ('0' + d).slice(-2);\n  };\n\n  const d = new Date(date);\n  const formats = {\n    YYYY: d.getFullYear(),\n    MM: fn(d.getMonth() + 1),\n    DD: fn(d.getDate()),\n    HH: fn(d.getHours()),\n    mm: fn(d.getMinutes()),\n    ss: fn(d.getSeconds())\n  };\n\n  return format.replace(/([a-z])\\1+/ig, a => {\n    return formats[a] || a;\n  });\n}\n"], ["getRecordLocation", "\nfunction (record, index) {\n\tvar code = this.options.codeField ? L.Util.getFieldValue(record, this.options.codeField) : index;\n\tvar geoJSON;\n\tvar centroid;\n\tvar states = L.states || {};\n\tvar stateCentroids = L.stateCentroids || {};\n\tvar originalCode = code.toUpperCase();\n\n\tcode = originalCode;\n\n\tgeoJSON = states[code];\n\tcentroid = stateCentroids[code];\n\n\tvar geoJSONLayer = new L.GeoJSON(geoJSON);\n\n\treturn {\n\t\tlocation: geoJSONLayer,\n\t\ttext: L.GeometryUtils.getName(geoJSON) || code,\n\t\tcenter: centroid\n\t};\n}\n"], ["showSidebarAndDropdown", "\nfunction handleKeyEvent() {\n    if (!$dropdown) {\n        if (!SidebarView.isVisible()) {\n            SidebarView.show();\n        }\n\n        $(\"#project-dropdown-toggle\").trigger(\"click\");\n\n        $dropdown.focus();\n        $links = $dropdown.find(\"a\");\n        \n        \n        $dropdownItem = $links.eq($links.length > 1 ? 1 : 0);\n        $dropdownItem.addClass(\"selected\");\n\n        \n        window.setTimeout(function () {\n            $dropdown.focus();\n        }, 0);\n    }\n}\n"], ["createServerWrapper", "\nfunction (onConnection, onError, onStart) {\n  onError = onError || function (err) {\n    console.error('server error, from', err.address)\n    console.error(err.stack)\n  }\n  return asyncify(proto.server(function (stream) {\n    compose(\n      wrap(stream),\n      trans.map(function (tr) { return tr.create() }),\n      function (err, stream) {\n        if(err) onError(err)\n        else onConnection(stream)\n      }\n    )\n  }, onStart))\n}\n"], ["sendHomekitServiceTypes", "\nfunction () {\n  \n  RED.httpAdmin.get('/homekit/service/types', RED.auth.needsPermission('homekit.read'), function (req, res) {\n    var data = {}\n    Object.keys(HapNodeJS.Service).forEach(function (key) {\n      var val = HapNodeJS.Service[key]\n      if (typeof val === 'function' && val.hasOwnProperty('UUID')) {\n        data[key] = val.UUID\n      }\n    })\n    res.json(data)\n  })\n}\n"], "```"]