[["Alert", "\nfunction Alert(props) {\n  const { children, icon, onClose, title, visible } = props;\n\n  return (\n    <StyledAlert {...props}>\n      <Content>\n        {title && (\n          <Title>\n            {icon && <Icon className={`fa ${normaliseIconName(icon)}`} />}\n            <StyledText>{title}</StyledText>\n          </Title>\n        )}\n        {children}\n      </Content>\n      {onClose && (\n        <CloseIcon\n          visible={visible}\n          onClick={onClose}\n          className=\"fa fa-times\"\n        />\n      )}\n    </StyledAlert>\n  );\n}\n"], ["swap", "\nfunction swap($elements, newCss, callback) {\n        var restore, item;\n\n        restore = [];\n\n        <styleElements>\n        $elements.each(function () {\n            var name;\n\n            for (name in newCss) {\n                if (Object.prototype.hasOwnProperty.call(newCss, name)) {\n                    restore.push({\n                        el: this,\n                        name: name,\n                        old: this.style[name]\n                    });\n\n                    this.style[name] = newCss[name];\n                }\n            }\n        });\n        </styleElements>\n\n        <executeCallback>\n        callback();\n        </executeCallback>\n        \n        <restoreStyle>\n        while (restore.length) {\n            item = restore.pop();\n            item.el.style[item.name] = item.old;\n        }\n        </restoreStyle>\n    }\n"], ["parseFilter", "\nfunction(_style){\n  var _result = 0;\n  if (_reg0.test(_style.filter||'')){\n      _result = parseFloat(RegExp.$1)/100;\n  }\n  return _result;\n}\n"], ["updateFieldsBasedOnOption", "\nfunction( option ) {\n        if ( option ) {\n          <updateSelectField>\n          if ( context.$select_field.val() !== option['real-value'] ) {\n            context.$select_field.val( option['real-value'] );\n            <triggerChangeEvent>\n            context.$select_field.change();\n            </triggerChangeEvent>\n          }\n          </updateSelectField>\n        } else {\n          <findAndProcessMatchingOption>\n          var option_name = context.$text_field.val().toLowerCase();\n          var matching_option = { 'real-value': false };\n          for (var i=0; i < context.options.length; i++) {\n            if ( option_name === context.options[i]['label'].toLowerCase() ) {\n              matching_option = context.options[i];\n              break;\n            }\n          };\n          if ( context.$select_field.val() !== matching_option['real-value'] ) {\n            context.$select_field.val( matching_option['real-value'] || '' );\n            <triggerChangeEvent>\n            context.$select_field.change();\n            </triggerChangeEvent>\n          }\n          if ( matching_option['real-value'] ) {\n            context.$text_field.val( matching_option['label'] );\n          }\n          </findAndProcessMatchingOption>\n          \n          <handleInvalidInput>\n          if ( typeof context.settings['handle_invalid_input'] === 'function' && context.$select_field.val() === '' ) {\n            context.settings['handle_invalid_input']( context );\n          }\n          </handleInvalidInput>\n        }\n      }\n"], ["createDirectoryStructure", "\nfunction (ds, acc, m, cb) {\n    if (ds.length > 0) {\n      var d = ds.shift();\n\n      acc.push(d);\n      var dir = acc.join(path.sep);\n\n      <fileSystemOperation>\n      fs.stat(dir, function (err, stat) {\n        if (err) {\n          if (err.errno == 2 || err.errno == 34) {\n            fs.mkdir(dir, m, function (erro) {\n              if (erro && erro.errno != 17 && erro.errno != 34) {\n                return cb(erro);\n              } else {\n                return walk(ds, acc, m, cb);\n              }\n            });\n          } else {\n            return cb(err);\n          }\n        } else {\n          if (stat.isDirectory()) {\n            return walk(ds, acc, m, cb);\n          } else {\n            return cb(new Error(\"Failed to mkdir \" + dir + \": File exists\\n\"));\n          }\n        }\n      });\n      </fileSystemOperation>\n    } else {\n      return cb();\n    }\n  }\n"], ["isBlacklisted", "\nfunction isBlacklisted(ip, callback) {\n    var host_lookup = reverseIp(ip) + bl_zones[current_bl];\n    <dnsLookup>\n    dns.resolve4(host_lookup, function(err, domain) {\n        if (err) {\n            <blacklistCheck>\n            callback(false);\n            </blacklistCheck>\n        } else {\n            <blacklistCheck>\n            callback(true);\n            </blacklistCheck>\n        }\n    });\n    </dnsLookup>\n}\n"], ["_singleNodeConnect", "\nfunction _singleNodeConnect(uri, options, cb){\n  <uriParsingAndValidation>\n  var uriObj = mongodbUri.parse(uri)\n  if (uriObj.hosts.length > 1) {\n    var err = new Error(\"Multiple hosts found for single node connection\")\n    if (cb) {\n      return cb(err)\n    }\n    throw err\n  }\n  </uriParsingAndValidation>\n\n  <serverAndDbInitalisation>\n  var host = uriObj.hosts[0]\n  var serverOptions = options[\"server\"] || null\n  var dbOptions = options[\"db\"] || options[\"database\"] || null\n  var server = new Server(host.host, host.port, serverOptions)\n  var db = new NativeDB(uriObj.database, server, dbOptions)\n  </serverAndDbInitalisation>\n\n  <authenticationSequence>\n  var seq = async.seq(\n    function(db, cb) {\n      return db.open(cb)\n    },\n    function(db, cb) {\n      if (uriObj.username && uriObj.password) {\n        return db.authenticate(uriObj.username, uriObj.password, {}, function(err, authed) {\n          return cb(err ? new Error(\"Unable to authenticate\") : undefined, db)\n        })\n      }\n      return cb(undefined, db)\n    })\n  </authenticationSequence>\n\n  <returnDbObject>\n  return syncOrAsync(undefined, seq, [db], function(db) {\n      return new DB(db)\n  }, cb)\n  </returnDbObject>\n}\n"], ["flattenDepth", "\nfunction flattenDepth (array, depth) {\n  <validateArguments>\n  if (!Array.isArray(array)) {\n    throw new TypeError('Expected value to be an array')\n  }\n  </validateArguments>\n  return flattenFromDepth(array, depth)\n}\n"], ["getHelp", "\nfunction getHelp(argv) {\n  <retrieveVersion>\n  const version = require('./version').getVersion();\n  </retrieveVersion>\n\n  <displayHelpInfo>\n  logger.info(`\n***********************************************************************\n* SKY UX App Builder ${version}                                       *\n* Usage: skyux [command] [options]                                    *\n* Help: skyux help or skyux help [command]                            *\n* https:\n***********************************************************************\n`);\n\n  logger.info(getHelpTopic(argv._[1]));\n  </displayHelpInfo>\n\n}\n"], ["_attach", "\nfunction _attach(ngmodel, target_element, options) {\n        \n        <checkForExistingElement>\n        if (current_element === target_element) {\n          return;\n        }\n        </checkForExistingElement>\n\n        <detachPreviousElement>\n        if (current_element) {\n          that.detach();\n        }\n        </detachPreviousElement>\n\n        <returnIfNotActiveElement>\n        if (target_element[0] !== $document[0].activeElement) {\n          return;\n        }\n        </returnIfNotActiveElement>\n\n        <onAttachCallback>\n        if (options.on_attach) {\n          options.on_attach();\n        }\n        </onAttachCallback>\n        \n        <setupAutocomplete>\n        current_element = target_element;\n        current_model = ngmodel;\n        current_options = options;\n        previous_value = ngmodel.$viewValue;\n        current_element_random_id_set = ensure_element_id(target_element);\n        $scope.container[0].setAttribute('aria-labelledby', current_element.id);\n\n        $scope.results = [];\n        $scope.selected_index = -1;\n        bind_element();\n        </setupAutocomplete>\n\n        <watchModelValue>\n        value_watch = $scope.$watch(\n          function() {\n            return ngmodel.$modelValue;\n          },\n          function(nv) {\n            \n            if (nv === last_selected_value) {\n              return;\n            }\n\n            _position_autocomplete();\n            suggest(nv, current_element);\n          }\n        );\n        </watchModelValue>\n      }\n"], "```"]