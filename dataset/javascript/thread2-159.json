[["extractSelectionText", "\nfunction () {\n    var nativeSel, nativeRange;\n    if ( this.isFocus() && (nativeSel = this.getNative()) ) {\n        <getRangeText>\n        nativeRange = browser.ie9below ? nativeSel.createRange() : nativeSel.getRangeAt( 0 );\n        return browser.ie9below ? nativeRange.text : nativeRange.toString();\n        </getRangeText>\n    }\n    return '';\n}\n"], ["updateElementRepresentation", "\nfunction(elem) {\n\t<serializeElementValue>\n\tvar t = this,\n\t\tstrValue;\n\n\ttry {strValue = JSON.stringify(elem.value);}\n\tcatch (e) {strValue = \"{object}\";}\n\t</serializeElementValue>\n\n\t<updateStringValue>\n\tif (strValue !== elem.strValue) {\n\t\tvar priorStrValue = elem.strValue;\n\t\telem.strValue = strValue;\n\t</updateStringValue>\n\n\t<updateDisplayText>\n\telem.span.text(strValue);\n\tif (elem.innerView) {\n\t\telem.innerView.model = elem.value;\n\t\telem.innerView.setData();\n\t</updateDisplayText>\n\n\t<togglingElementVisibility>\n\tvar isClosed = false;\n\tif (priorStrValue) {\n\t\tisClosed = elem.innerView.isClosed;\n\t} else {\n\t\tisClosed = t.closedOnInit ? true : strValue.length < AUTO_CLOSE_CHARS;\n\t}\n\tt.toggleClosed(elem, isClosed);\n\t</togglingElementVisibility>\n\t}\n}\n"], ["renderPercentageIndicator", "\nfunction() {\n\tvar width = canvasWidth,\n\theight = canvasHeight,\n\tpositionX = canvasWidth / 2,\n\tpositionY = canvasHeight / 2,\n\talphaPercentage = (width / 100) * self.currentPercentage;\n\n\t<clearCanvas>\n\tclear();\n\t</clearCanvas>\n\n\t<drawPercentageText>\n\tctx.restore();\n\tctx.beginPath();\n\tctx.font = font;\n\tctx.fillStyle = color;\n\tctx.textAlign = \"center\";\n\tctx.fillText((self.currentPercentage | 0) + \"%\", positionX, positionY - (lineWidth + 10));\n\t</drawPercentageText>\n\t\n\t<drawProgress>\n\tctx.lineWidth = lineWidth;\n\tctx.strokeStyle = color;\n\tif (glowColor) {\n\t\tctx.shadowOffsetX = 0;\n\t\tctx.shadowOffsetY = 0;\n\t\tctx.shadowBlur = 10;\n\t\tctx.shadowColor = glowColor;\n\t}\n\tctx.moveTo(positionX - (width / 2), positionY);\n\tctx.lineTo(alphaPercentage, positionY);\n\tctx.stroke();\n\t</drawProgress>\n\n\t<saveCanvasState>\n\tctx.save();\n\t</saveCanvasState>\n}\n"], ["BCDtoInteger", "\nfunction(bcd) \n{\n\tvar n = 0;\n\tvar m = 1;\n\tfor(var i = 0; i<bcd.length; i+=1) {\n\t\tn += (bcd[bcd.length-1-i] & 0x0F) * m;\n\t\tn += ((bcd[bcd.length-1-i]>>4) & 0x0F) * m * 10;\n\t\tm *= 100;\n\t}\n\treturn n;\n}\n"], ["createDelayedObservable", "\nfunction delayWhen$2(delayDurationSelector, subscriptionDelay) {\n\tif (subscriptionDelay) {\n\t\treturn new SubscriptionDelayObservable(this, subscriptionDelay)\n\t\t\t.lift(new DelayWhenOperator(delayDurationSelector));\n\t}\n\treturn this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n"], ["checkIfReserved", "\nfunction reserved(name) {\n\tif (!_.isString(name)) {\n\t\treturn false;\n\t}\n\t\n\treturn _.contains(RESERVED, name);\n}\n"], ["validateWithException", "\nfunction validateToThrow() {\n\tvar s = this;\n\tvar error = s.validate.apply(s, arguments);\n\t\n\tif (error) {\n\t\tthrow error;\n\t}\n}\n"], ["initializeSetCache", "\nfunction SetCache(values) {\n\tvar index = -1,\n\tlength = values == null ? 0 : values.length;\n\t\n\tthis.__data__ = new MapCache();\n\twhile (++index < length) {\n\t\tthis.add(values[index]);\n\t}\n}\n"], ["createSpriteMouseEvent", "\nfunction SpriteMouseEvent(metas) {\n\tthis.target = metas.target;\n\tthis.x = metas.x;\n\tthis.y = metas.y;\n\tthis.from = metas.from;\n\tthis.fromX = metas.fromX;\n\tthis.fromY = metas.fromY;\n\tthis.stage = metas.stage;\n}\n"], ["handleWriteCoil", "\nfunction _handleWriteCoil(requestBuffer, vector, unitID, callback) {\n\t<parseRequest>\n\tvar address = requestBuffer.readUInt16BE(2);\n\tvar state = requestBuffer.readUInt16BE(4);\n\t</parseRequest>\n\n\t<checkRequestBuffer>\n\tif (_errorRequestBufferLength(requestBuffer)) {\n\t\treturn;\n\t}\n\t</checkRequestBuffer>\n\n\t<prepareResponse>\n\tvar responseBuffer = Buffer.alloc(8);\n\tresponseBuffer.writeUInt16BE(address, 2);\n\tresponseBuffer.writeUInt16BE(state, 4);\n\t</prepareResponse>\n\n\t<executeWriteAndRespond>\n\tif (vector.setCoil) {\n\t\tvar callbackInvoked = false;\n\t\tvar cb = function(err) {\n\t\t\tif (err) {\n\t\t\t\tif (!callbackInvoked) {\n\t\t\t\t\tcallbackInvoked = true;\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!callbackInvoked) {\n\t\t\t\tmodbusSerialDebug({ action: \"FC5 response\", responseBuffer: responseBuffer });\n\t\t\t\t\n\t\t\t\tcallbackInvoked = true;\n\t\t\t\tcallback(null, responseBuffer);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tif (vector.setCoil.length === 4) {\n\t\t\t\tvector.setCoil(address, state === 0xff00, unitID, cb);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar promiseOrValue = vector.setCoil(address, state === 0xff00, unitID);\n\t\t\t\t_handlePromiseOrValue(promiseOrValue, cb);\n\t\t\t}\n\t\t}\n\t\tcatch(err) {\n\t\t\tcb(err);\n\t\t}\n\t}\n\t</executeWriteAndRespond>\n}\n"], "```"]