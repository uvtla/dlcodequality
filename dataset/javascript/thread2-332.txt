<Cursor>
function Cursor(bson, ns, cmd, options, topology, topologyOptions) {
  <CoreCursorApply>
  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));
  </CoreCursorApply>
  <InitialState>
  const state = Cursor.INIT;
  </InitialState>
  <StreamOptions>
  const streamOptions = {};
  </StreamOptions>
  <CursorOptions>
  const numberOfRetries = options.numberOfRetries || 5;
  const tailableRetryInterval = options.tailableRetryInterval || 500;
  const currentNumberOfRetries = numberOfRetries;
  const promiseLibrary = options.promiseLibrary || Promise;
  </CursorOptions>
  <ReadableStream>
  Readable.call(this, { objectMode: true });
  </ReadableStream>
  <CursorStateSetup>
  this.s = {
    numberOfRetries: numberOfRetries,
    tailableRetryInterval: tailableRetryInterval,
    currentNumberOfRetries: currentNumberOfRetries,
    state: state,
    streamOptions: streamOptions,
    bson: bson,
    ns: ns,
    cmd: cmd,
    options: options,
    topology: topology,
    topologyOptions: topologyOptions,
    promiseLibrary: promiseLibrary,
    currentDoc: null,
    explicitlyIgnoreSession: options.explicitlyIgnoreSession
  };
  </CursorStateSetup>
  <SessionOptions>
  if (!options.explicitlyIgnoreSession && options.session) {
    this.s.session = options.session;
  }
  if (this.s.options.noCursorTimeout === true) {
    this.addCursorFlag('noCursorTimeout', true);
  }
  </SessionOptions>
  <SortAndBatchSize>
  this.sortValue = this.s.cmd.sort;
  const batchSize =
    cmd.cursor && cmd.cursor.batchSize
      ? cmd.cursor && cmd.cursor.batchSize
      : options.cursor && options.cursor.batchSize
        ? options.cursor.batchSize
        : 1000;
  this.setCursorBatchSize(batchSize);
  </SortAndBatchSize>
}
</Cursor>

<RespondActivityTaskFailed>
function (reason, details, cb) {
  var self = this;
  <TaskToken>
  var o = {
    "taskToken": this.config.taskToken
  };
  </TaskToken>
  <ReasonAndDetails>
  if (reason) {
    o.reason = reason;
  }
  if (details) {
    o.details = stringify(details);
  }
  </ReasonAndDetails>
  <RespondFailure>
  this.swfClient.respondActivityTaskFailed(o, function (err) {
    if (self.onDone) {
      self.onDone();
    }
    if (cb) {
      cb(err);
    }
  });
  </RespondFailure>
}
</RespondActivityTaskFailed>

<ProcessDirectory>
function processDirectory(directory) {
  <CheckRejection>
  if (rejected === true) {
    return;
  }
  </CheckRejection>
  <InitiateWaiting>
  waiting++;
  </InitiateWaiting>
  <ReadDirectory>
  fs.readdir(directory, (error, fileNames) => {
    if (error) {
      return reject(error);
    }
    for (let i = 0; i < fileNames.length; i++) {
      processFilePath(directory, fileNames[i]);
    }
    done();
  });
  </ReadDirectory>
}
</ProcessDirectory>

<ReadDataSync>
function readDataSync(filePath, opts_) {
  <ParserSetup>
  var parser;
  var parserOptions;
  if (arguments.length === 2) {
    if (opts_.parser) {
      parser = getParser(opts_.parser);
      opts_ = omit(opts_, ['parser']);
      if (underscore.isEmpty(opts_)) {
        opts_ = undefined;
      }
    } else {
      parser = discernParser(filePath);
    }
    if (opts_ && opts_.parserOptions) {
      if (typeof opts_.parserOptions === 'function') {
        parserOptions = { map: opts_.parserOptions };
      } else {
        parserOptions = opts_.parserOptions;
      }
    } else if (opts_) {
      if (typeof opts_ === 'function') {
        parserOptions = { map: opts_ };
      } else {
        parserOptions = opts_;
      }
    }
  } else {
    parser = discernParser(filePath);
  }
  </ParserSetup>
  <DataLoading>
  var loader = discernLoader(filePath, { sync: true });
  return loader(filePath, parser, parserOptions);
  </DataLoading>
}
</ReadDataSync>

<GracefulShutdown>
function GracefulShutdown(server, opts) {
  <InitializeOptions>
  opts = opts || {};
  let options = Object.assign({
    signals: 'SIGINT SIGTERM',
    timeout: 30000,
    development: false
  }, opts);
  </InitializeOptions>
  <SetupSignalListeners>
  options.signals.split(' ').forEach(function (signal) {
    if (signal && signal !== '') {
      process.on(signal, function () {
        shutdown(signal);
      });
    }
  });
  </SetupSignalListeners>
  <SocketListeners>
  server.on('request', function (req, res) {
    req.socket._isIdle = false;
    res.on('finish', function () {
      req.socket._isIdle = true;
      destroy(req.socket);
    });
  });
  server.on('connection', function (socket) {
    let id = connectionCounter++;
    socket._isIdle = true;
    socket._connectionId = id;
    connections[id] = socket;
    socket.on('close', function () {
      delete connections[id];
    });
  });
  </SocketListeners>
  <ProcessExitListener>
  process.on('exit', function () {
    if (options.finally && isFunction(options.finally)) {
      options.finally();
    }
    debug('closed');
  });
  </ProcessExitListener>
  <ShutdownFunction>
  function shutdown(sig) {
    <ShutdownInit>
    let counter = 0;
    </ShutdownInit>
    <CleanupHttp>
    function cleanupHttp() {
      return new Promise((resolve, reject) => {
        Object.keys(connections).forEach(function (key) {
          counter++;
          destroy(connections[key]);
        });
        debug('Connections destroyed : ' + counter);
        debug('Connection Counter    : ' + connectionCounter);
        server.close(function (err) {
          if (err) return reject(err);
          resolve();
        });
      });
    }
    </CleanupHttp>
    <HandleShutdown>
    debug('shutdown signal - ' + sig);
    if (options.development) {
      debug('DEV-Mode - imediate forceful shutdown');
      return process.exit(0);
    }
    const finalHandler = () => {
      process.exit(failed ? 1 : 0);
    };
    const exitHandler = promise => promise
      .catch((err) => {
        const errString = (typeof err === 'string') ? err : JSON.stringify(err);
        debug(errString);
        failed = true;
      });
    </HandleShutdown>
    <ShutdownSequence>
    if (!isShuttingDown) {
      isShuttingDown = true;
      debug('shutting down');
      if (options.timeout) {
        setTimeout(function () {
          debug('Could not close connections in time (' + options.timeout + 'ms), forcefully shutting down');
          process.exit(1);
        }, options.timeout).unref();
      }
      exitHandler(cleanupHttp()).then(() => {
        if (options.onShutdown && isFunction(options.onShutdown)) {
          return exitHandler(options.onShutdown(sig));
        }
        return;
      }).then(finalHandler);
    }
    </ShutdownSequence>
  }
  </ShutdownFunction>
}
</GracefulShutdown>

<OptionsAndCommands>
function(options, parentNode) {
  <MixinOptions>
  options = options || {};
  objects.mixin(this, options);
  </MixinOptions>
  <OptionsSetup>
  this.options = options;
  this.checkOptions(this.options, ["serviceRegistry", "fileClient", "siteClient", "commandService", "statusService", "progressService"]); 
  </OptionsSetup>
  <ClientInitializations>
  this._fileClient = this.options.fileClient;
  this._siteClient = this.options.siteClient;
  this._commandService = this.options.commandService;
  this._statusService = this.options.statusService;
  this._progressService = this.options.progressService;
  </ClientInitializations>
  <CommandsContainer>
  this._commandsContainer = this.options.commandsContainer;
  </CommandsContainer>
  <LoadLocation>
  if (this.options.location) {
    this.load(this.options.location);
  }
  </LoadLocation>
  <NodeInitialization>
  this.node = parentNode || document.createElement("div");
  </NodeInitialization>
}
</OptionsAndCommands>

<AllowedForAutoActivation>
function allowedForAutoActivation(model) {
  <CheckASTRootNode>
  const rootNode = model.ast.children[0];
  return rootNode && /^[a-z]/i.test(rootNode.name);
  </CheckASTRootNode>
}
</AllowedForAutoActivation>

<RemoveChildWrapper>
function (child, node) {
  var update = this.removeChild(child, node);
  child._mountIndex = null;
  return update;
}
</RemoveChildWrapper>

<ColorMatrixInitializer>
function ColorMatrix(brightness, contrast, saturation, hue) {
  <SetColor>
  this.setColor(brightness, contrast, saturation, hue);
  </SetColor>
}
</ColorMatrixInitializer>

<SelectAllMovies>
function selectAllMovies() {
  <MovieTableReference>
  var movie = db.getSchema().table('Movie');
  </MovieTableReference>
  <SelectQueryAndHandling>
  db.select(movie.id, movie.title, movie.year).
    from(movie).exec().then(
    function(results) {
      var elapsed = Date.now() - startTime;
      $('#load_time').text(elapsed.toString() + 'ms');
      $('#master').bootstrapTable('load', results).
          on('click-row.bs.table', function(e, row, $element) {
            startTime = Date.now();
            generateDetails(row.id);
          });
    });
  </SelectQueryAndHandling>
}
</SelectAllMovies>