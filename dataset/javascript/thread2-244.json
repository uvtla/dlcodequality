[["executeCommand", "\nfunction executeCommand(parameters) {\n    <checkAndSetDefaultColors>\n    if (parameters.colors === undefined) {\n      parameters.colors = myrmex.getConfig('colors');\n    }\n    </checkAndSetDefaultColors>\n    <serializeConfig>\n    let config = JSON.stringify(myrmex.getConfig(), null, 2);\n    </serializeConfig>\n    <highlightConfig>\n    if (parameters.colors) {\n      config = icli.highlight(config, { json: true });\n    }\n    </highlightConfig>\n    <printConfig>\n    icli.print(config);\n    </printConfig>\n  }\n"], ["getRect", "\nfunction getRect(elem) {\n  <checkElement>\n  if (elem && !elem.nodeType) {\n    elem = elem[0];\n  }\n  if (!elem || 1 !== elem.nodeType) {\n    return false;\n  }\n  </checkElement>\n  <calculateBounds>\n  var bounds = elem.getBoundingClientRect();\n  </calculateBounds>\n  <returnRectObject>\n  return {\n    height: bounds.bottom - bounds.top,\n    width: bounds.right - bounds.left,\n    top: bounds.top,\n    left: bounds.left\n  };\n  </returnRectObject>\n}\n"], ["addToQueue", "\nfunction () {\n\tvar now = new Date();\n\t\n\tfor (var i = 0, l = arguments.length; i < l; i++ ) {\n\t\t<cloneAndSetTime>\n\t\tvar item = UTIL.clone(arguments[i]);\n\t\tif (item && item !== null) {\n\t\t\titem._time = now;\n\t\t\tthis[this.length] = item;\n\t\t}\n\t\telse </cloneAndSetTime> <logError>\n\t\t{\n\t\t\tLOG.error('push data is null', 'SR.Sync');\n\t\t}\n\t\t</logError>\n\t}\n\t<returnQueueLength>\n\treturn this.length;\n\t</returnQueueLength>\n}\n"], ["compareMappingsDeep", "\nfunction compareMappingsDeep(mapping1, mapping2) {\n  <deepComparison>\n  return _.isEqualWith(mapping1, mapping2, (object1, object2, prop) => {\n    let mapping1 = { [prop]: object1 }\n    let mapping2 = { [prop]: object2 }\n    <compareSpecificProperties>\n    if (prop == \"from\" || prop == \"to\") {\n      if (!_.isEqual(Object.getOwnPropertyNames(_.get(object1, prop, {})), Object.getOwnPropertyNames(_.get(object2, prop, {})))) {\n        return false\n      }\n      return _.isEqualWith(conceptsOfMapping(mapping1, prop), conceptsOfMapping(mapping2, prop), (concept1, concept2, index) => {\n        if (index != undefined) {\n          return compare(concept1, concept2)\n        }\n        return undefined\n      })\n    }\n    </compareSpecificProperties>\n    <compareSchemes>\n    if (prop == \"fromScheme\" || prop == \"toScheme\") {\n      return compare(object1, object2)\n    }\n    </compareSchemes>\n    return undefined\n  })\n  </deepComparison>\n}\n"], ["showPrompt", "\nfunction showPrompt() {\n    <constructPrompt>\n    let prompt = \"\"\n    for (i = 1; i <= 9; i++) {\n      prompt += numChar[i] + \" :\" + fruitCharacter[i] + \"  \"\n    }\n    let iprompt = interactive ? `'x' to eXit.` : \"\"\n    </constructPrompt>\n    <logPrompt>\n    log(\n      `Press a number to download a fruit (higher numbers take longer). ${iprompt}\n  ${prompt}\n      `\n    )\n    </logPrompt>\n  }\n"], ["writeHead", "\nfunction writeHead(context, statusCode, statusMessage, headers) {\n  <validateStatusCode>\n  statusCode |= 0; \n  if (statusCode < 100 || statusCode > 999) {\n    throw new RangeError(`Invalid status code: ${statusCode}`);\n  }\n  </validateStatusCode>\n  <setStatusMessage>\n  if (typeof statusMessage === \"string\") {\n    this.statusMessage = statusMessage;\n  } else {\n    this.statusMessage = statusCodes[statusCode] || \"unknown\";\n  }\n  </setStatusMessage>\n  <setHeaders>\n  if (typeof statusMessage === \"object\" && typeof headers === \"undefined\") {\n    headers = statusMessage; \n  }\n  if (this._headers) {\n    if (headers) {\n      const keys = Object.keys(headers);\n      for (let i = 0; i < keys.length; i++) {\n        const k = keys[i];\n        if (k) {\n          this.setHeader(k, headers[k]);\n        }\n      }\n    }\n    headers = this._renderHeaders(); \n  }\n  </setHeaders>\n  <applyStatusAndHeaders>\n  context.res.status = statusCode;\n  context.res.headers = headers || {};\n  </applyStatusAndHeaders>\n}\n"], ["manageCarouselItems", "\nfunction (obj) {\n    var carousel = this,\n        carouselEl = carousel._carouselEl,\n        itemsTable = carousel._itemsTable,\n        len = itemsTable.items.length,\n        sibling,\n        el,\n        j;\n\n    <locateNextSibling>\n    sibling = itemsTable.items[obj.last + 1];\n    if(!sibling && obj.last < len){\n        j = obj.first;\n        do {\n            sibling = itemsTable.items[j];\n            j++;\n        } while (j<len && !sibling);\n    }\n    </locateNextSibling>\n\n    <appendLoadingItems>\n    for (var i = obj.first; i <= obj.last; i++) {\n        if(JS.isUndefined(itemsTable.loading[i]) && JS.isUndefined(itemsTable.items[i])){\n            el = carousel._createCarouselItem({\n                className : carousel.CLASSES.ITEM_LOADING,\n                content   : carousel.STRINGS.ITEM_LOADING_CONTENT,\n                id        : Dom.generateId(),\n                pos       : i\n            });\n            if (el) {\n                if (sibling) {\n                    sibling = Dom.get(sibling.id);\n                    if (sibling) {\n                        carouselEl.insertBefore(el, sibling);\n                    } else {\n                        YAHOO.log(\"Unable to find sibling\", \"error\",\n                                WidgetName);\n                    }\n                } else {\n                    carouselEl.appendChild(el);\n                }\n            }\n            itemsTable.loading[i] = el;\n        }\n    }\n    </appendLoadingItems>\n    \n    <syncUiItems>\n    carousel._syncUiItems();\n    </syncUiItems>\n}\n"], ["calcMainfileDL", "\nfunction calcMainfileDL() {\n    <initCommonFiles>\n    var common_js = prj_conf.common_js,\n        use_common = !!common_js,\n        commoned,\n        commoned_list;\n    if (use_common) {\n        calcDependList('main/'+common_js);\n        commoned = depended;\n        commoned_list = depended_list;\n    }\n    </initCommonFiles>\n\n    <processMainFiles>\n    var main_files = [];\n    readMainFiles(prj_path+'main', main_files);\n    main_files.sort();\n\n    var main_len = main_files.length,\n        i = 0, j, len, main_file;\n    for (; i < main_len; i++) {\n        main_file = main_files[i];\n        calcing = {};\n        depended = {};\n        if (use_common) {\n            if (main_file === common_js) { \n                depended_list = commoned_list;\n                depended_list.unshift('1'); \n            } else {\n                for (j in commoned) {\n                    depended[j] = true;\n                }\n                depended_list = [];\n                calcDependList('main/'+main_file);\n            }\n        } else {\n            depended_list = ['1']; \n            calcDependList('main/'+main_file);\n        }\n\n        main_file_dl.push('\"'+main_file.slice(0, -3)+'\":\"'+\n            depended_list.join(',')+'\"');\n        all_files['main/'+main_file] +=\n            '\\r\\nrequire(\"main/'+main_file.slice(0, -3)+'\");';\n    }\n    </processMainFiles>\n}\n"], ["handleTileEvents", "\nfunction(evt) {\n    <imageTileEvents>\n    if (evt.tile instanceof OpenLayers.Tile.Image) {\n        evt.tile.events.on({\n            beforedraw: this.queueTileDraw,\n            beforeload: this.manageTileCache,\n            loadend: this.addToCache,\n            unload: this.unloadTile,\n            scope: this\n        });        \n    } </imageTileEvents>\n    else <removeNonImageLayer>\n    {\n        \n        this.removeLayer({layer: evt.tile.layer});\n    }\n    </removeNonImageLayer>\n}\n"], ["wrap", "\nfunction wrap(fn) {\n    return function() {\n        <setupUserData>\n        body.appendChild(el);\n        el.addBehavior('#default#userData');\n        el.load(sn);\n        </setupUserData>\n        <invokeFunction>\n        var ret = fn.apply(store._area, arguments);\n        </invokeFunction>\n        <cleanupUserData>\n        el.save(sn);\n        body.removeChild(el);\n        </cleanupUserData>\n        <returnFunctionResult>\n        return ret;\n        </returnFunctionResult>\n    };\n}\n"], "```"]