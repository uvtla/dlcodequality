```javascript
<getDetail>
function getDetail(command, callback) {
    <executeCommand>
    var child = exec(
        command,
        function (err, stdout, stderr) {
            if (err) return callback(err);
            callback(null, parseInt(stdout) * 1024);
        }
    );
    </executeCommand>
}
</getDetail>

<_instrumentStart>
function _instrumentStart(name, _payload) {
    <retrieveAndPopulateListeners>
    var listeners = cache[name];
    if (!listeners) {
      listeners = populateListeners(name);
    }
    if (listeners.length === 0) {
      return;
    }
    </retrieveAndPopulateListeners>

    <generatePayload>
    var payload = _payload();
    </generatePayload>

    <profileSetup>
    var STRUCTURED_PROFILE = _emberMetalCore.default.STRUCTURED_PROFILE;
    var timeName;
    if (STRUCTURED_PROFILE) {
      timeName = name + ': ' + payload.object;
      console.time(timeName);
    }
    </profileSetup>

    <listenAndRecordBeforeValues>
    var l = listeners.length;
    var beforeValues = new Array(l);
    var i, listener;
    var timestamp = time();
    for (i = 0; i < l; i++) {
      listener = listeners[i];
      beforeValues[i] = listener.before(name, timestamp, payload);
    }
    </listenAndRecordBeforeValues>

    return function _instrumentEnd() {
        <executeAfterListenersAndProfileEnd>
        var i, l, listener;
        var timestamp = time();
        for (i = 0, l = listeners.length; i < l; i++) {
            listener = listeners[i];
            if (typeof listener.after === 'function') {
                listener.after(name, timestamp, payload, beforeValues[i]);
            }
        }
        if (STRUCTURED_PROFILE) {
            console.timeEnd(timeName);
        }
        </executeAfterListenersAndProfileEnd>
    };
}
</_instrumentStart>

<getAddress>
function getAddress(addressInput) {
  var address = addressInput; 
  var result = null; 

  <validateInput>
  if (typeof(address) !== 'string') { throw new Error(`[ethjs-account] invalid address value ${JSON.stringify(address)} not a valid hex string`); }
  </validateInput>

  <normalizeAddress>
  if (address.substring(0, 2) !== '0x' &&
      address.substring(0, 2) !== 'XE') { address = `0x${address}`; }
  </normalizeAddress>

  <processAndValidateChecksumAddress>
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      throw new Error('[ethjs-account] invalid address checksum');
    }
  </processAndValidateChecksumAddress>

  <validateICAPAndIBAN>
  else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    throw new Error('[ethjs-account] ICAP and IBAN addresses, not supported yet..');
  }
  </validateICAPAndIBAN>

  <throwErrorForInvalidValue>
  else {
    throw new Error(`[ethjs-account] invalid address value ${JSON.stringify(address)} not a valid hex string`);
  }
  </throwErrorForInvalidValue>

  return result;
}
</getAddress>

<UMLMessage>
function UMLMessage() {
  <initialSetup>
  UMLDirectedRelationship.apply(this, arguments);
  this.messageSort = MS_SYNCHCALL;
  this.signature = null;
  this.connector = null;
  this["arguments"] = '';
  this.assignmentTarget = '';
  this.guard = '';
  this.iteration = '';
  this.isConcurrentIteration = false;
  </initialSetup>
}
</UMLMessage>

<resolve>
function resolve(object) {
  <resolvePromise>
  var Constructor = this;
  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }
  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
  </resolvePromise>
}
</resolve>

<decodeRangeTime>
function decodeRangeTime(map, timeStr){
  <parseAndValidateTimeRange>
  let times = timeStr.split('-');
  times[0] = Number(times[0]);
  times[1] = Number(times[1]);
  if(times[0] > times[1]){
    console.log("Error time range");
    return null;
  }
  </parseAndValidateTimeRange>

  <populateMapWithTimeRange>
  for(let i = times[0]; i <= times[1]; i++){
    map[i] = i;
  }
  </populateMapWithTimeRange>
}
</decodeRangeTime>

<middleware>
function middleware(definition, resolver, options) {
  <setupCustomExecution>
  const customExecution = options.factoryExecution !== false;
  </setupCustomExecution>

  const resolve = function(source, args, context, info) {
    <prepareExecutionContext>
    const ctx = _.isObjectLike(context) ? context : {};
    Object.assign(ctx, definition.context);
    info.definition = definition;
    </prepareExecutionContext>

    <executeResolver>
    return customExecution
      ? factoryExecute(source, args, ctx, info)
      : graphqlExecute(source, args, ctx, info);
    </executeResolver>
  };

  <assignMiddlewareFlags>
  resolve.__resolver = resolver;
  resolve.__factoryMiddleware = true;
  </assignMiddlewareFlags>

  return resolve;
}
</middleware>

<Plane>
function Plane(a, b, c, d) {
  <initializeProperties>
  this.normal = new Vector3(a, b, c);
  this.d = d;
  </initializeProperties>
}
</Plane>

<tree>
function tree(list) {
  <buildRecursiveTree>
  var n = list.length;
  if (n == 0) {
    return null;
  }
  var i = Math.floor(n / 2);
  return new Tree(list[i], tree(list.slice(0, i)), tree(list.slice(i + 1)));
  </buildRecursiveTree>
}
</tree>

<handleReject>
function handleReject(carousel) {
  <updateUiStateOnReject>
  $element.css({ 'height': carousel.getOuterHeight() + 'px' });
  vm.isLoading = false;
  vm.isSuccessful = false;
  </updateUiStateOnReject>
}
</handleReject>
```