[["deferFunction", "\nfunction defer(fn) { var args\n        args = slice.call(arguments, 1)\n        return delay.apply(this, [fn, 0].concat(args))\n}\n"], ["handleActionButtonCreation", "\nfunction (oConfig, bCollectionButton) {\n    var nButton = this._fnButtonBase(oConfig, bCollectionButton);\n\n    <actionConfiguration>\n    if (oConfig.sAction.match(/flash/)) {\n        if (!this._fnHasFlash()) {\n            return false;\n        }\n\n        this._fnFlashConfig(nButton, oConfig);\n    } else if (oConfig.sAction == \"text\") {\n        this._fnTextConfig(nButton, oConfig);\n    } else if (oConfig.sAction == \"div\") {\n        this._fnTextConfig(nButton, oConfig);\n    } else if (oConfig.sAction == \"collection\") {\n        this._fnTextConfig(nButton, oConfig);\n        this._fnCollectionConfig(nButton, oConfig);\n    }\n    </actionConfiguration>\n\n    <accessibilityAndInteraction>\n    if (this.s.dt.iTabIndex !== -1) {\n        $(nButton)\n            .attr('tabindex', this.s.dt.iTabIndex)\n            .attr('aria-controls', this.s.dt.sTableId)\n            .on('keyup.DTTT', function (e) {\n                if (e.keyCode === 13) {\n                    e.stopPropagation();\n\n                    $(this).trigger('click');\n                }\n            })\n            .on('mousedown.DTTT', function (e) {\n                if (!oConfig.sAction.match(/flash/)) {\n                    e.preventDefault();\n                }\n            });\n    }\n    </accessibilityAndInteraction>\n\n    return nButton;\n}\n"], ["generateMetaData", "\nfunction metaData() {\n    const meta = {};\n\n    <pathTypeProcessing>\n    Object.keys(schema.paths).forEach((k) => {\n        switch (schema.paths[k].type) {\n            case 'geoPoint':\n                meta.geoPointsProps = meta.geoPointsProps || [];\n                meta.geoPointsProps.push(k);\n                break;\n            case 'entityKey':\n                meta.refProps = meta.refProps || {};\n                meta.refProps[k] = true;\n                break;\n            default:\n        }\n    });\n    </pathTypeProcessing>\n\n    return meta;\n}\n"], ["SamplingRuleConstructor", "\nfunction SamplingRule(name, priority, rate, reservoirSize,\n                      host, httpMethod, urlPath, serviceName, serviceType) {\n    this.init(name, priority, rate, reservoirSize,\n              host, httpMethod, urlPath, serviceName, serviceType);\n}\n"], ["initializeSpatialHashMap", "\nfunction(cell) {\n    cellsize = cell || 64;\n    this.map = {};\n\n    this.boundsDirty = false;\n    this.coordBoundsDirty = false;\n    this.boundsHash = {\n        maxX: -Infinity,\n        maxY: -Infinity,\n        minX: Infinity,\n        minY: Infinity\n    };\n    this.boundsCoords = {\n        maxX: -Infinity,\n        maxY: -Infinity,\n        minX: Infinity,\n        minY: Infinity\n    };\n}\n"], ["TXResponseConstructor", "\nfunction TXResponse(options) {\n  if (!(this instanceof TXResponse))\n    return new TXResponse(options);\n\n  this.hash = encoding.NULL_HASH;\n  this.txs = [];\n\n  <optionHandling>\n  if (options)\n    this.fromOptions(options);\n  </optionHandling>\n}\n"], ["getAdditionalModulePaths", "\nfunction getAdditionalModulePaths(options = {}) {\n  const baseUrl = options.baseUrl;\n\n  <nonBaseUrlCase>\n  if (baseUrl == null) {\n    const nodePath = process.env.NODE_PATH || '';\n    return nodePath.split(path.delimiter).filter(Boolean);\n  }\n  </nonBaseUrlCase>\n\n  <baseUrlResolvedCase>\n  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);\n  if (path.relative(paths.appNodeModules, baseUrlResolved) === '') {\n    return null;\n  }\n  if (path.relative(paths.appSrc, baseUrlResolved) === '') {\n    return [paths.appSrc];\n  }\n  </baseUrlResolvedCase>\n  \n  <invalidBaseUrlError>\n  throw new Error(\n    chalk.red.bold(\n      \"Your project's `baseUrl` can only be set to `src` or `node_modules`.\" +\n        ' Create React App does not support other values at this time.'\n    )\n  );\n  </invalidBaseUrlError>\n}\n"], ["eventInjection", "\nfunction (event) {\n    <validateEvent>\n    if (!event || !_.isObject(event)) {\n      var err = new Error('Please inject a valid event object!');\n      debug(err);\n      throw err;\n    }\n    </validateEvent>\n\n    <defaultPayload>\n    if (!event.payload && event.payload !== '') {\n      event.payload = this.defaultEventPayload;\n    }\n    </defaultPayload>\n\n    <eventStorage>\n    if (this.events.indexOf(event) < 0) {\n      this.events.push(event);\n    }\n    </eventStorage>\n}\n"], ["computedPropertyFunction", "\nfunction computedProperty(targetObject, varName) {\n  <getterSetterDeclaration>\n  let getter = targetObject[varName]._getter;\n  let setter = targetObject[varName]._setter;\n  let dKeys = targetObject[varName]._dependentKeys;\n  </getterSetterDeclaration>\n\n  <bracketInitialization>\n  let openBracket = '';\n  let closeBracket = '';\n  if ('function' === typeOf(getter) && 'function' === typeOf(setter)) {\n    openBracket = '{\\n';\n    closeBracket = '}';\n  }\n  </bracketInitialization>\n\n  <partialPropertyDefinition>\n  let firstPart = `${varName}: ` + (dKeys && dKeys.length ? `Ember.computed(${dependedKeys(dKeys)}` : '') + `, ${openBracket}`;\n  let lastPart = closeBracket  + (dKeys && dKeys.length ? ')' : '');\n  </partialPropertyDefinition>\n\n  return firstPart + f2str(getter) + (setter ? `,\\n${f2str(setter)}\\n` : '') + lastPart;\n}\n"], ["bundleAndTranspileModules", "\nfunction(inDir, outDir){\n    <moduleOptions>\n    var name = this.bundleOptions.name;\n    var opts = this._generateEsperantoOptions(name);\n    var transpilerName = formatToFunctionName[this.format];\n    var targetExtension = this.targetExtension;\n    </moduleOptions>\n\n    <bundlingProcess>\n    return esperanto.bundle({\n      base: inDir,\n      entry: this.bundleOptions.entry\n    }).then(function(bundle) {\n      var compiledModule = bundle[transpilerName](opts);\n      var fullOutputPath = path.join(outDir, name + '.' + targetExtension);\n\n      return writeFile(fullOutputPath, compiledModule.code);\n    });\n    </bundlingProcess>\n}\n"], "```"]