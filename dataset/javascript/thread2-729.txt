Here are the SRP annotations for the provided JavaScript functions:

1st Function:
```javascript
<postRequestAndProcessResponse>
function(data) {
  return this.request({
    url: this._buildUri(this.uri),
    method: corbel.request.method.POST,
    data: data
  }).
  then(function(res) {
    return corbel.Services.getLocationId(res);
  });
}
</postRequestAndProcessResponse>
```
This function is SRP compliant. It sends a POST request and processes the response.

2nd Function:
```javascript
<disconnectEvents>
function _disconnect(context) {
  forEach(this.__events__, (bindings, event) => {
    for (let i = bindings.length - 1; i >= 0; i--) {
      if (bindings[i] && bindings[i].context === context) {
        _off.call(this, event, bindings[i].method, context)
      }
    }
  })
  return this
}
</disconnectEvents>
```
The function has a single responsibility of disconnecting events based on context.

3rd Function:
```javascript
<findInDatabase>
function _find(collection, query, opts) {
  if (Tyr.logging.trace) {
    Tyr.trace({ e: 'db', c: collection.id, m: 'find', q: query });
  }
  const cursor = collection.db.find(query, opts);
  return cursor;
}
</findInDatabase>
```
The function's responsibility is to find documents in a database.

4th Function:
```javascript
<regularizeWeights>
function regularizeL1(weights, gradientCount, stepSize) {
  const [gradient, count] = gradientCount;
  for (let i = 0; i < gradient.length; i++) {
    let grad = (gradient[i] || 0) / count;
    weights[i] = weights[i] || 0;
    weights[i] -= stepSize * grad + (weights[i] > 0 ? 1 : -1);
  }
}
</regularizeWeights>
```
This function applies L1 regularization to weights, hence it is SRP compliant.

5th Function:
```javascript
<getRotationVectors>
function() {
  return[
    vec3.fromValues(this._rotation[0], this._rotation[4], this._rotation[8]),
    vec3.fromValues(this._rotation[1], this._rotation[5], this._rotation[9]),
    vec3.fromValues(this._rotation[2], this._rotation[6], this._rotation[10])
  ];
}
</getRotationVectors>
```
The function's single responsibility is to return rotation vectors.

6th Function:
```javascript
<resolvePath>
function resolveSassPath(sassPath, loadPaths, extensions) {
  var re = new RegExp('(\.('+extensions.join('|')+'))$', 'i');
  var sassPathName = sassPath.replace(re, '');
  
  var i, j, length = loadPaths.length, scssPath, partialPath;
  for (i = 0; i < length; i++) {
    for (j = 0; j < extensions.length; j++) {
      scssPath = path.normalize(loadPaths[i] + '/' + sassPathName + '.' + extensions[j]);
      try {
        if (fs.lstatSync(scssPath).isFile()) {
          return scssPath;
        }
      } catch (e) {}
    }
    // Code repeats here for partial paths, annotations will avoid repetition.
  }
  return false;
}
</resolvePath>
```
Resolves a Sass file path. Has a single responsibility, though the code has some repetitions that could potentially be refactored into a separate function.

7th Function:
```javascript
<configureFilterNode>
function(state, options) {
  var node = this;
  _(FilterNode.optionsSchema).each(function(optionSchema, key) {
      // This is handling multiple responsibilities such as parsing options, and setting default values.
  });
}
</configureFilterNode>
```
This function violates SRP as it handles multiple responsibilities related to configuring a filter node from options and state.

8th Function:
```javascript
<validateAndInitializeRequest>
function Request(url, options) {
  if (!url) {
    throw new Error('URL must in mandatory to initialize Request object');
  }
  if (!options.method) {
    throw new Error('Cannot execute HTTP request without specifying method');
  }
  // Initialization of request object properties
  this.url = url;
  this.method = options.method;
  this.body = options.body || {};
  this.params = options.params || {};
  // More initializations
}
</validateAndInitializeRequest>
```
This function initializes a Request object with validation, which fits within a single responsibility.

9th Function:
```javascript
<createMultipleClassProxy>
function xmultipleClasses(parents) {
  function ConstructibleProxyTarget() {}
  ConstructibleProxyTarget.prototype = xmultipleObjects(parents.map(parent => parent.prototype));
  const ClassForwardingProxy = xmultipleObjects(parents, ConstructibleProxyTarget);
  return ClassForwardingProxy;
}
</createMultipleClassProxy>
```
The function creates a proxy for multiple classes, adhering to single responsibility.

10th Function:
```javascript
<removeEventAndObject>
function (event) {
  var object = event.target;
  object.traverse(function (child) {
    child.removeEventListener('remove', onObjectRemoved);
    removeObject(child);
  });
}
</removeEventAndObject>
```
Handles removal of events and objects, which in the context of event-driven programming, is considered a single cohesive responsibility related to event cleanup.