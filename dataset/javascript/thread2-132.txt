<inner>
function inner(A, B) {
    <validateInput>
    if (A.shape.length !== 1) {
        throw new Error('A is not a 1D array');
    }
    if (B.shape.length !== 1) {
        throw new Error('B is not a 1D array');
    }
    if (A.data.length > B.data.length) {
        throw new Error("A.data.length should be <= B.data.length");
    }
    </validateInput>
    var dot = 0.0;
    for (var i = 0; i < A.data.length; i++) {
        dot += A.data[i] * B.data[i];
    }
    return dot;
}
</inner>

<anonymous>
function () {
    this._paused = false;
    <initializeQueue>
    this.queue = [];
    </initializeQueue>
    this.onTimeout = function () {
        <checkPaused>
        if (this._paused)
            return;
        </checkPaused>
        <processQueue>
        if (this.queue.length == 0) {
            <showApplication>
            var app = atomApplication._element;
            if (app.style.visibility == "hidden" || $(app).css("visibility") == "hidden") {
                app.style.visibility = "visible";

                app.atomControl.updateUI();
            }
            </showApplication>
            return;
        }
        var item = this.queue.shift();
        
        item();
        </processQueue>

        <setNextTimeout>
        window.setTimeout(this._onTimeout, 1);
        </setNextTimeout>
    };

    <setupOnTimeout>
    var _this = this;
    this._onTimeout = function () {
        _this.onTimeout();
    };
    </setupOnTimeout>
}
</anonymous>

<forEach>
function forEach(stream, onData, onEnd) {

  <applyBufferToStream>
  forEachObj(stream, function (chunk) {
    onData(new Buffer(chunk));
  }, onEnd);
  </applyBufferToStream>
}
</forEach>

<anonymous>
function(url, opts) {
    var that = this;
    var buf_pos = 0;
    <orscFunction>
    var orsc = function (xhr, e, abort_reason) {
        <processReadyState>
        if (xhr.readyState === 3 || xhr.readyState === 4) {
            <handleResponse>
            try {
                var responseText = xhr.responseText;
                var status = xhr.status;
            } catch (x) {}
            if (responseText && status === 200) {
                var msgs = [];
                while (1) {
                    var buf = responseText.slice(buf_pos);
                    var p = buf.indexOf('\n');
                    if (p === -1) break;
                    buf_pos += p+1;
                    var msg = buf.slice(0, p);
                    that.dispatchEvent(
                        new SimpleEvent('message', {
                                            data: msg,
                                            readystate: xhr.readyState,
                                            responsetext: responseText
                                        }));
                }
            }
            </handleResponse>
        }
        </processReadyState>
        <handleRequestCompletion>
        if (xhr.readyState === 4 || abort_reason) {
            var reason = abort_reason ? 'user' :
                (xhr.status === 200 ? 'network' : 'permanent');
            that.xhr_close = null;
            that.dispatchEvent(new SimpleEvent('close', {reason: reason}));
        }
        </handleRequestCompletion>
    };
    </orscFunction>
    <createXhrRequest>
    var createXhr = (opts.cors && _window.XDomainRequest) ?
                                    utils.createXDR : utils.createXHR;
    that.xhr_close = createXhr('POST', url, null, orsc);
    </createXhrRequest>
}
</anonymous>

<parsePrimaryKey>
function parsePrimaryKey(attrPathList, context) {
    return attrPathList.split(',').map(attrPath => parseAttributePath(attrPath, context));
}
</parsePrimaryKey>

<anonymous>
function (nodeA, nodeB) {
    <compareTagNames>
    if (nodeA.tagName != nodeB.tagName) {
        return false;
    }
    </compareTagNames>
    <compareAttributes>
    var thisAttrs = nodeA.attributes,
        otherAttrs = nodeB.attributes;
    if (!ie && thisAttrs.length != otherAttrs.length) {
        return false;
    }
    var attrA, attrB, al = 0, bl = 0;
    for (var i = 0; attrA = thisAttrs[i++];) {
        if (attrA.nodeName == 'style') {
            if (attrA.specified) {
                al++;
            }
            if (domUtils.isSameStyle(nodeA, nodeB)) {
                continue;
            } else {
                return false;
            }
        }
        if (ie) {
            if (attrA.specified) {
                al++;
                attrB = otherAttrs.getNamedItem(attrA.nodeName);
            } else {
                continue;
            }
        } else {
            attrB = nodeB.attributes[attrA.nodeName];
        }
        if (!attrB.specified || attrA.nodeValue != attrB.nodeValue) {
            return false;
        }
    }
    
    if (ie) {
        for (i = 0; attrB = otherAttrs[i++];) {
            if (attrB.specified) {
                bl++;
            }
        }
        if (al != bl) {
            return false;
        }
    }
    </compareAttributes>
    return true;
}
</anonymous>

<localStorageTest>
function () {
    return !!storage && function() {
        <testStorage>
        var success = true
        var value = Math.random()
        try {
            storage.setItem(value, value)
        } catch (e) {
            success = false
        }
        </testStorage>
        <removeTestItem>
        storage.removeItem(value)
        </removeTestItem>
        return success
    }()
}
</localStorageTest>

<debugTreeSelection>
function () {
    var oModel = this._oDialog.getModel("view"),
        <getTreeData>
        oTreeData = oModel.getProperty("/DebugModules")[0];
        </getTreeData>

    <updateTreeData>
    this._treeHelper.recursiveSelect(oTreeData, false);
    this._updateTreeInfos();
    </updateTreeData>
}
</debugTreeSelection>

<getCall>
function getCall() {
    var result = _.trim(_.get(/\*\/\s*(?:function\s+)?([^\s(]+)\s*\(/.exec(this.entry), 1));
    if (!result) {
        result = _.trim(_.get(/\*\/\s*(.*?)[:=,]/.exec(this.entry), 1));
        result = /['"]$/.test(result)
            ? _.trim(result, '"\'')
            : result.split('.').pop().split(/^(?:const|let|var) /).pop();
    }
    var name = getValue(this, 'name') || result;
    <isFunctionCheck>
    if (!this.isFunction()) {
        return name;
    }
    </isFunctionCheck>
    var params = this.getParams();
    result = _.castArray(result);

    <combineParams>
    _.each(params, function(param) {
        var paramValue = param[1],
            parentParam = _.get(/\w+(?=\.[\w.]+)/.exec(paramValue), 0);

        var parentIndex = parentParam == null ? -1 : _.findIndex(params, function(param) {
        return _.trim(param[1], '[]').split(/\s*=/)[0] == parentParam;
        });

        if (_.get(params[parentIndex], 0) != 'Object') {
            result.push(paramValue);
        }
    });
    </combineParams>

    return name + '(' + result.slice(1).join(', ') + ')';
}
</getCall>

<compileVueToRn>
function compileVueToRn(resource) {
    const code = resource.toString();
    const cparsed = compiler.parseComponent(code, { pad: 'line' });

    <initializeOutput>
    let output = '';
    let mappings = '';
    </initializeOutput>

    <generateImports>
    output += `import ${constants.VUE}, { observer as ${
        constants.OBSERVER
        } } from 'vue-native-core'`;
    output += '\n';

    output += `import ${constants.REACT_NATIVE} from 'react-native'`;
    output += '\n';

    output += `import ${constants.PROP_TYPE} from 'prop-types'`;
    output += '\n';

    output += `import { buildNativeComponent as ${
        constants.BUILD_COMPONENT
        } } from 'vue-native-helper'`;
    output += '\n';
    </generateImports>

    <prepareTemplate>
    const template = cparsed.template;
    let templateStartIndex = code.indexOf("<");
    let tempStringBeforeStart = code.substring(0, templateStartIndex);
    let templateLineNumber = tempStringBeforeStart.split(splitRE).length - 1;
    let nodes = [];
    const templateFragments = parse5.parseFragment(cparsed.template.content, { sourceCodeLocationInfo: true });
    if (templateFragments.childNodes) {
        traverse(templateFragments, nodes);
    }
    let templateParsed = DEFAULT_OUTPUT.template;
    if (template) {
        const templateContent = template.content.replace(/\/\/\n/g, '').trim();
        if (templateContent) {
            templateParsed = parseTemplate(templateContent);
        }
    }
    output += templateParsed.import;
    output += '\n';
    </prepareTemplate>

    <prepareScript>
    const script = cparsed.script;
    let scriptParsed = DEFAULT_OUTPUT.script;
    if (script) {
        const scriptContent = script.content.replace(/\/\/\n/g, '').trim();
        scriptParsed = parseScript(scriptContent);
        mappings = generateSourceMap(code);
    }
    </prepareScript>

    <generateMappings>
    if (mappings) {
        var beforeLines = output.split(splitRE).length;
        var scriptLine = code.slice(0, cparsed.script.start).split(splitRE).length + 1;
        var exportDefaultIndex = code.indexOf('export default');
        var tempString = code.substring(0, exportDefaultIndex);
        var exportDefaultLineNumber = tempString.split('\n').length;
    }
    </generateMappings>

    <appendScriptToOutput>
    output += scriptParsed;
    output += '\n\n';
    var endLines = output.split(splitRE).length - 1;
    for (; scriptLine < endLines; scriptLine++) {
        if (scriptLine !== exportDefaultLineNumber) {
            mappings.addMapping({
                source: mappings._hashedFilename,
                generated: {
                    line: beforeLines,
                    column: 0
                },
                original: {
                    line: scriptLine,
                    column: 0
                }
            });
        }
        beforeLines++;
    }
    </appendScriptToOutput>

    <prepareRender>
    let beautifiedRender = beautify(addvm(templateParsed.render, { indent_size: 2 }));
    output += beautifiedRender;
    output += '\n\n';
    let renderEndLine = beautifiedRender.split(splitRE).length - 1;
    </prepareRender>

    <mapTemplateToJsx>
    var reactVueElementRegex = /__react__vue__createElement/;
    let foundLines = lineNumber(beautifiedRender, reactVueElementRegex);
    if (mappings) {
        foundLines.forEach((line, index) => {
            let renderJsLine = endLines + line.number;
            if (foundLines[index + 1]) {
                for (let i = line.number; i < foundLines[index + 1].number; i++) {
                    if (nodes[index]) {
                        mappings.addMapping({
                            source: mappings._hashedFilename,
                            generated: {
                                line: renderJsLine++,
                                column: 0
                            },
                            original: {
                                line: nodes[index].startTag.startLine + templateLineNumber,
                                column: 0
                            }
                        });
                    }
                }
            } else if (nodes[index] && nodes[index].startTag) {
                for (let i = line.number; i < renderEndLine; i++) {
                    mappings.addMapping({
                        source: mappings._hashedFilename,
                        generated: {
                            line: renderJsLine++,
                            column: 0
                        },
                        original: {
                            line: nodes[index].startTag.startLine + templateLineNumber,
                            column: 0
                        }
                    });
                }
            }
        });
    }
    </mapTemplateToJsx>

    <prepareStyles>
    const styles = cparsed.styles;
    let cssParsed = {};
    styles.forEach(function (v) {
        const cssAst = cssParse(v.content);
        cssParsed = Object.assign({}, cssParsed, parseCss(cssAst));
    });
    output += `const ${constants.CSS} = ${JSON.stringify(cssParsed)}`;
    output += '\n\n';
    </prepareStyles>

    <buildComponent>
    output += `const ${constants.COMPONENT_BUILDED} = ${
        constants.BUILD_COMPONENT
        }(${constants.TEMPLATE_RENDER}, ${constants.SCRIPT_OPTIONS}, {Component: ${
        constants.COMPONENT
        }, PropTypes: ${constants.PROP_TYPE}, Vue: ${constants.VUE}, ReactNative: ${
        constants.REACT_NATIVE
        }, css: ${constants.CSS}})`;
    output += '\n\n';
    </buildComponent>

    <exportObserver>
    output += `export default ${constants.OBSERVER}(${
        constants.COMPONENT_BUILDED
        })`;
    </exportObserver>

    return { output, mappings: mappings ? mappings.toJSON() : null };
}
</compileVueToRn>