[["deviceAuthenticationAndUpdate", "\nfunction EventDevAuth (device){\n<handleMMSIAssignment>\n    if (!device.mmsi)  device.mmsi = parseInt (device.devid);\n    if (isNaN (device.mmsi)) device.mmsi=String2Hash(device.devid);\n</handleMMSIAssignment>\n<adapterBroadcasting>\n    adapter.BroadcastStatic (device);\n    if (device.stamp) adapter.BroadcastPos (device);\n</adapterBroadcasting>\n}\n"], ["createCursorWithCount", "\nfunction createCursorWithCount(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {\n<optionsProcessing>\n    let includeComments = false;\n    let count = 0;\n    let countExists = false;\n    let filter = null;\n\n    if (typeof opts === \"number\") {\n        count = opts | 0;\n        countExists = true;\n    } else if (typeof opts === \"function\") {\n        filter = opts;\n    } else if (opts) {\n        includeComments = !!opts.includeComments;\n        count = opts.count | 0;\n        countExists = typeof opts.count === \"number\";\n        filter = opts.filter || null;\n    }\n    assert(count >= 0, \"options.count should be zero or a positive integer.\");\n    assert(!filter || typeof filter === \"function\", \"options.filter should be a function.\");\n</optionsProcessing>\n\n<createCursorCall>\n    return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, 0, countExists ? count : -1);\n</createCursorCall>\n}\n"], ["matchRegExp", "\nfunction(value, regExp) {\n<RegExpValidation>\n    if(regExp instanceof RegExp) {\n        return value.match(regExp);\n    }\n    var regExpParts = regExp.match($.fn.form.settings.regExp.flags),\n        flags;\n</RegExpValidation>\n<RegExpConstruction>\n    if(regExpParts) {\n        regExp = (regExpParts.length >= 2)\n          ? regExpParts[1]\n          : regExp;\n        flags = (regExpParts.length >= 3)\n          ? regExpParts[2]\n          : '';\n    }\n</RegExpConstruction>\n<matchConstructedRegExp>\n    return value.match(new RegExp(regExp, flags));\n</matchConstructedRegExp>\n}\n"], ["checkForPartOfClassBody", "\nfunction checkForPartOfClassBody(firstToken) {\n    <tokenIterationAndReport>\n            for (let token = firstToken;\n                token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token);\n                token = sourceCode.getTokenAfter(token)\n            ) {\n                if (astUtils.isSemicolonToken(token)) {\n                    report(token);\n                }\n            }\n    </tokenIterationAndReport>\n}\n"], ["mergeAndFilterObjects", "\nfunction (dest, src) {\n<copySrcToDest>\n    var prop;\n    for (prop in src) {\n        if (src.hasOwnProperty(prop)) {\n            dest[prop] = src[prop];\n        }\n    }\n</copySrcToDest>\n<removeNonexistentSrcProperties>\n    for (prop in dest) {\n        if (dest.hasOwnProperty(prop) && !src.hasOwnProperty(prop)) {\n            delete dest[prop];\n        }\n    }\n</removeNonexistentSrcProperties>\n<returnMergedObject>\n    return dest;\n</returnMergedObject>\n}\n"], ["loadUserFromToken", "\nfunction _loadUserFromToken(){\n<fetchCurrentUser>\n    return BB\n        .bind(this)\n        .then(function() {\n            return grasshopper.request(this.token).users.current();\n        })\n</fetchCurrentUser>\n<assignUserToContext>\n        .then(function(user){\n            this.user = user;\n        });\n</assignUserToContext>\n}\n"], ["configureNavigationProperties", "\nfunction (navigation) {\n<defineRootBasedOnNavigationMode>\n    \"use strict\";\n    var root = '';\n    if (navigation.mode === 'hash') {\n        root = location.pathname;\n    }\n    else if (beyond.params.local) {\n        var pathname = location.pathname.split('/');\n        root = [''];\n        if (pathname[1] === 'applications') root = root.concat(pathname.splice(1, 2));\n        if (pathname[1] === 'languages') root = root.concat(pathname.splice(1, 2));\n        root = root.join('/');\n    }\n</defineRootBasedOnNavigationMode>\n<defineNavigationProperties>\n    Object.defineProperty(navigation, 'root', {\n        'get': function () {\n            return root;\n        }\n    });\n    Object.defineProperty(navigation, 'pathname', {\n        'get': function () {\n            return navigation.mode === 'hash' ? parseHashLocation() : parsePathnameLocation();\n        }\n    });\n</defineNavigationProperties>\n<parseHashLocation>\n    function parseHashLocation() {\n        var hash = location.hash;\n        if (hash.substr(0, 1) === '#') {\n            hash = hash.substr(1);\n            var index = hash.indexOf('?');\n            if (index !== -1) {\n                hash = hash.substr(0, index);\n            }\n        }\n        return '/' + hash;\n    }\n</parseHashLocation>\n<parsePathnameLocation>\n    function parsePathnameLocation() {\n        var pathname = location.pathname.substr(root.length);\n        if (!pathname) pathname = '/';\n        else if (pathname && pathname.substr(0, 1) !== '/') pathname = '/' + pathname;\n        return pathname;\n    }\n</parsePathnameLocation>\n}\n"], ["computeElementSize", "\nfunction () {\n<determineHiddenPositionAndSize>\n    var domElement = this.domElement;\n    var browser = ariaCoreBrowser;\n    domElement.style.cssText = \"position:absolute;top:-15000px;left:-15000px;visibility:hidden;display:block;\";\n</determineHiddenPositionAndSize>\n<calculateDimensions>\n    var width = (browser.isIE9 || browser.isIE10) ? domElement.offsetWidth + 1 : domElement.offsetWidth;\n    return {\n        width : width,\n        height : domElement.offsetHeight\n    };\n</calculateDimensions>\n}\n"], ["setTextureCubeToShader", "\nfunction( gl, v, renderer ) {\n<textureSetup>\n    var unit = renderer.allocTextureUnit();\n    gl.uniform1i( this.addr, unit );\n    renderer.setTextureCube( v || emptyCubeTexture, unit );\n</textureSetup>\n}\n"], ["cleanAndCloneInstance", "\nfunction (options) {\n<initializeOptionsAndValues>\n    var ret = {};\n    options = options || {};\n</initializeOptionsAndValues>\n<processInstanceProperties>\n    for (var key in this.$) {\n        if (this.$.hasOwnProperty(key)) {\n            if (options.exclude) {\n                if (options.exclude instanceof Array) {\n                    if (_.include(options.exclude, key)) {\n                        ret[key] = this.$[key];\n                        continue;\n                    }\n                }\n            }\n            if (this.$bindings.hasOwnProperty(key) && this.factory.prototype.defaults.hasOwnProperty(key)) {\n                ret[key] = this.factory.prototype.defaults[key];\n            } else {\n                ret[key] = this._cloneAttribute(this.$[key], key);\n            }\n        }\n    }\n</processInstanceProperties>\n<createCleanInstance>\n    var b = new this.factory(ret, true);\n    b._$source = this;\n    b.$injected = this.$injected;\n    return b;\n</createCleanInstance>\n}\n"], "```"]