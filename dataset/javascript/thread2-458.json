[["sanitize", "\nfunction sanitize (msg) {\n  if (typeof msg !== 'object') return null\n  if (typeof msg.value !== 'object') return null\n  if (typeof msg.value.content !== 'object') return null\n  if (typeof msg.value.timestamp !== 'number') return null\n  if (typeof msg.value.type !== 'string') return null\n  if (typeof msg.value.content.channel !== 'string') return null\n  if (typeof msg.value.content.text !== 'string') return null\n  return msg\n}\n"], ["clearModifier", "\nfunction clearModifier(event) {\n    <handleKeyCode>\n    var key = event.keyCode, k,\n        i = index(_downKeys, key);\n    \n    if (i >= 0) {\n        _downKeys.splice(i, 1);\n    }\n\n    if(key == 93 || key == 224) key = 91;\n    </handleKeyCode>\n    <updateModifiers>\n    if(key in _mods) {\n      _mods[key] = false;\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;\n    }\n    </updateModifiers>\n}\n"], ["getKeyObject", "\nfunction (key, obj) {\n  'use strict';\n  <parseKeyPath>\n  var keysArr = key.split('.'),\n      lastKeyPart = keysArr.pop(),\n      len = keysArr.length,\n      i, k, objNext;\n  for (i = 0; i < len; i += 1) {\n      k = keysArr[i];\n      objNext = obj[k];\n      if (!isObj(objNext)) {\n          objNext = obj[k] = {};\n      }\n      obj = objNext;\n  }\n  </parseKeyPath>\n  return {\n      node: obj,\n      key: lastKeyPart\n  };\n}\n"], ["getOAuthToken", "\nfunction (scopes, tokenUrl, OAuthSchemeKey) {\n  <prepareParams>\n  var params = {\n      'client_id': clientId,\n      'client_secret': clientSecret,\n      'scope': scopes.join(' '),\n      'grant_type': 'client_credentials'\n  };\n  </prepareParams>\n  <makeAjaxRequest>\n  $.ajax({\n      url : tokenUrl,\n      type: 'POST',\n      data: params,\n      success: function (data) {\n          onOAuthComplete(data, OAuthSchemeKey);\n      },\n      error: function () {\n          onOAuthComplete('');\n      }\n  });\n  </makeAjaxRequest>\n}\n"], ["mapToObject", "\nfunction mapToObject (map, opts) {\n  const length = map.getLength();\n  const data = {};\n  <iterateMapElements>\n  for (let i = 0; i < length; i++) {\n      const key = map.getKey(i).getValue();\n      const value = getJsonValueFromSassValue(map.getValue(i), opts);\n      data[key] = value;\n  }\n  </iterateMapElements>\n  return data;\n}\n"], ["coerceQueryParamsToString", "\nfunction coerceQueryParamsToString(queryParams) {\n  <convertQueryParams>\n  for (var key in queryParams) {\n    if (typeof queryParams[key] === 'number') {\n      queryParams[key] = '' + queryParams[key];\n    } else if (isArray(queryParams[key])) {\n      for (var i = 0, l = queryParams[key].length; i < l; i++) {\n        queryParams[key][i] = '' + queryParams[key][i];\n      }\n    }\n  }\n  </convertQueryParams>\n}\n"], ["Enumerable", "\nfunction Enumerable(object) {\n  <validateEnumeratorFactory>\n  var self = this,\n      enumeratorFactory = Enumerator.enumeratorFactories[crafity.getType(object)];\n\n  if (enumeratorFactory === undefined) {\n      throw (\"There is no Enumerator for an object of type '\" + crafity.getType(object) + \"'\");\n  }\n  </validateEnumeratorFactory>\n\n  <initializeObject>\n  this.getObject = function internalGetObject() {\n      return object;\n  };\n  </initializeObject>\n  \n  <overrideBehavior>\n  this.overrideEnumerator = function overrideEnumeratorInternal(getEnumerator) {\n      self.getEnumerator = function getEnumeratorInternal() {\n          return function () {\n              return getEnumerator(self.getEnumerator());\n          };\n      };\n      return self;\n  };\n  </overrideBehavior>\n\n  <basicMethods>\n  this.getEnumerator = function getEnumeratorInternal() {\n      return enumeratorFactory.getEnumerator(self, object);\n  };\n\n  this.forEach = function forEachInternal(consumer) {\n      return crafity.Enumerable.from(consumer);\n  };\n  \n  this.selectMany = ...;\n  \n  this.recursive = ...;\n  \n  this.where = ...;\n  \n  this.take = ...;\n  \n  this.skip = ...;\n  \n  this.loop = ...;\n\n  this.aggregate = ...;\n\n  this.toArray = ...;\n\n  this.sum = ...;\n\n  this.count = ...;\n  </basicMethods>\n}\n"], ["referenceFactory", "\nfunction referenceFactory(tree, options) {\n  <getDefinitions>\n  var definitions = getDefinitions(tree, options)\n  </getDefinitions>\n\n  return <referenceReplacement>function reference(node, index, parent) {\n      <findAndReplaceReference>\n      var definition = definitions(node.identifier)\n      var replacement\n      var image\n\n      if (definition) {\n          image = node.type === 'imageReference'\n\n          replacement = {\n              type: image ? 'image' : 'link',\n              url: definition.url,\n              title: definition.title\n          }\n\n          if (image) {\n              replacement.alt = node.alt\n          } else {\n              replacement.children = node.children\n          }\n\n          parent.children[index] = replacement\n      }\n      </findAndReplaceReference>\n  }\n  </referenceReplacement>\n}\n"], ["refreshAnnotations", "\nfunction() {\n  <checkAnnotationCapabilities>\n\tif (!this._treeModel.getAnnotations) {\n\t\treturn;\n\t}\n\n\tif (this._annotationRefreshRequested) {\n\t\treturn;\n\t}\n  </checkAnnotationCapabilities>\n\n  <requestAnnotationRefresh>\n\tvar tree = this;\n\tthis._annotationRefreshRequested = true;\n\tsetTimeout(function() {\n\t\ttree._annotationRefreshRequested = false;\n\t\ttree._redrawAnnotation();\n\t}, 0);\n  </requestAnnotationRefresh>\n}\n"], ["CompileSELF", "\nfunction CompileSELF(node, clazz) {\n  return <transformTree>node.transform(new UglifyJS.TreeTransformer(function (node, descend) {\n      <replaceSelfReference>\n      if (node instanceof UglifyJS.AST_SymbolVar || node instanceof UglifyJS.AST_SymbolRef) {\n          var name = node.name;\n          if ('SELF' === name) {\n              return AccessNS(clazz, null, node);\n          }\n      }\n      </replaceSelfReference>\n  }))\n  </transformTree>\n}\n"], "```"]