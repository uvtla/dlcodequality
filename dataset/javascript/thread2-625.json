[["getStacktraceElements", "\nfunction getStacktraceElements(props, preview) {\n  <initializeStack>\n  const stack = [];\n  if (!preview.stack) {\n    return stack;\n  }\n  </initializeStack>\n\n  <processStack>\n  parseStackString(preview.stack).forEach((frame, index, frames) => {\n    let onLocationClick;\n    const {\n      filename,\n      lineNumber,\n      columnNumber,\n      functionName,\n      location\n    } = frame;\n\n    <setupLocationClick>\n    if (\n      props.onViewSourceInDebugger &&\n      !IGNORED_SOURCE_URLS.includes(filename)\n    ) {\n      onLocationClick = e => {\n        e.stopPropagation();\n        props.onViewSourceInDebugger({\n          url: filename,\n          line: lineNumber,\n          column: columnNumber\n        });\n      };\n    }\n    </setupLocationClick>\n\n    <pushFrame>\n    stack.push(\n      \"\\t\",\n      span(\n        {\n          key: `fn${index}`,\n          className: \"objectBox-stackTrace-fn\"\n        },\n        cleanFunctionName(functionName)\n      ),\n      \" \",\n      span(\n        {\n          key: `location${index}`,\n          className: \"objectBox-stackTrace-location\",\n          onClick: onLocationClick,\n          title: onLocationClick\n            ? `View source in debugger \u2192 ${location}`\n            : undefined\n        },\n        location\n      ),\n      \"\\n\"\n    );\n    </pushFrame>\n  });\n  </processStack>\n\n  <returnResult>\n  return span(\n    {\n      key: \"stack\",\n      className: \"objectBox-stackTrace-grid\"\n    },\n    stack\n  );\n  </returnResult>\n}\n"], ["filterParameters", "\nfunction filterParameters(request) {\n  <extendData>\n  const data = Object.assign({}, config);\n  Object.keys(request).forEach((key) => {\n    data[key] = request[key];\n  });\n  </extendData>\n\n  <returnData>\n  return data;\n  </returnData>\n}\n"], ["getRequestHeaderField", "\nfunction getRequestHeaderField(field){\n  <initialize>\n  var req = this.req;\n  field = field.toLowerCase();\n  </initialize>\n\n  <switchHeaderField>\n  switch (field) {\n    case 'referer':\n    case 'referrer':\n    return req.headers.referrer || req.headers.referer || '';\n    default:\n    return req.headers[field] || '';\n  }\n  </switchHeaderField>\n}\n"], ["logBlacklistError", "\nfunction logBlacklistError(err) {\n  <logDetails>\n  log.error(ansi.red('Error: failed to retrieve plugins black-list'));\n  log.error(err.message); \n  </logDetails>\n  <exitProcess>\n  exit(1);\n  </exitProcess>\n}\n"], ["funBuffer", "\nfunction funBuffer(size) {\n  <bufferCreation>\n  var buffer = new Buffer(size)\n  for (var i=0; i<size; i++) {\n    if (i%1000 == 0) buffer[i++] = 13\n    buffer[i] = 97 + (i%26)\n  }\n  </bufferCreation>\n  <returnBuffer>\n  return buffer\n  </returnBuffer>\n}\n"], ["exportToPDF", "\nfunction exportToPDF(diagrams, fullPath, options) {\n  <initializePDF>\n  var doc = new PDFDocument(options);\n  _.each(mdjson.Font.files, function (path, name) {\n    doc.registerFont(name, path);\n  });\n  doc.pipe(fs.createWriteStream(fullPath));\n  var canvas = new mdjson.PDFGraphics.Canvas(doc);\n  </initializePDF>\n\n  <drawDiagrams>\n  var i, len;\n  for (i = 0, len = diagrams.length; i < len; i++) {\n    if (i > 0) {\n      doc.addPage(options);\n    }\n    var diagram = diagrams[i],\n        box     = diagram.getBoundingBox(canvas),\n        w       = doc.page.width - PDF_MARGIN * 2,\n        h       = doc.page.height - PDF_MARGIN * 2,\n        zoom    = Math.min(w / box.x2, h / box.y2);\n\n    canvas.zoomFactor.numer = Math.min(zoom, PDF_DEFAULT_ZOOM);\n    canvas.origin.x = PDF_MARGIN;\n    canvas.origin.y = PDF_MARGIN;\n\n    _.each(diagram.ownedViews, function (v) {\n      v.setup(canvas);\n      v.update(canvas);\n      v.size(canvas);\n      v.arrange(canvas);\n    });\n\n    diagram.drawDiagram(canvas, false);\n\n    if (options.showName) {\n      doc.fontSize(10);\n      doc.font(\"Helvetica\");\n      doc.text(diagram.getPathname(), PDF_MARGIN, PDF_MARGIN-10);\n    }\n  }\n  </drawDiagrams>\n\n  <finalizePDF>\n  doc.end();\n  </finalizePDF>\n}\n"], ["runCheckTask", "\nfunction runCheckTask(logger, checkTask) {\n  <promiseHandling>\n  return new Promise((resolve, reject) => {\n    <validateCheckTask>\n    checkTask.validate(logger)\n    </validateCheckTask>\n    <afterValidation>\n    .then((checkTask) => {\n      checkTask.queued();\n      return checkApi.prepare(checkTask);\n    })\n    </afterValidation>\n    <prepareExecution>\n    .then((execData) => {\n      execData.id = uuid();\n      checkTask.execTaskId = execData.id;\n      var execTask = new ExecTask(execData);\n      return execTask.validate();\n    })\n    </prepareExecution>\n    <startExecution>\n    .then((execTask) => {\n      checkTask.started();\n      return exec(logger, execTask);\n    })\n    </startExecution>\n    <parseResults>\n    .then((execTask) => {\n      return checkApi.parse(checkTask, execTask);\n    })\n    </parseResults>\n    <analyzeResults>\n    .then((parsedResult) => {\n      checkTask.rawResult = parsedResult;\n      return checkApi.analyze(checkTask);\n    })\n    </analyzeResults>\n    <finalizeCheckTask>\n    .then((result) => {\n      checkTask.result = result;\n      checkTask.finished();\n      return checkTask.validate();\n    })\n    .then((task) => {\n      resolve(task);\n    })\n    </finalizeCheckTask>\n    <handleError>\n    .catch((error) => {\n      checkTask.result = {\n        status: 'fail',\n        message: error.message\n      };\n      error.checkTask = checkTask;\n      reject(error);\n    });\n    </handleError>\n  });\n  </promiseHandling>\n}\n"], ["eltCompare", "\nfunction eltCompare(elt1, elt2) {\n  <compareElements>\n  return (elt1.c == elt2.c && elt1.r == elt2.r);\n  </compareElements>\n}\n"], ["ImmutableAccessControl", "\nfunction ImmutableAccessControl(args) {\n  <initializeImmutableAccessControl>\n  args = requireValidOptionalObject(args)\n  if (args.global !== false && global.__immutable_access_control__) {\n    return global.__immutable_access_control__\n  }\n  else {\n    if (args.global !== false) {\n      global.__immutable_access_control__ = this\n    }\n    this.id = undefined\n    this.accessIdNames = {}\n    this.defaultRules = []\n    this.rules = {}\n    this.strict = args.strict === undefined ? true : !!args.strict\n    this.audit = undefined\n    this.auditEnabled = args.audit === false ? false : true\n  }\n  </initializeImmutableAccessControl>\n}\n"], ["findFilesToPackage", "\nfunction findFilesToPackage(dir, callback) {\n  <changeWorkingDirectory>\n  var cwd = process.cwd();\n  process.chdir(dir);\n  </changeWorkingDirectory>\n\n  <runCommands>\n  var gitls = spawn('git', ['ls-files']),\n      subls = spawn('git', ['submodule', 'foreach', 'for file in `git ls-files`; do echo \"$path/$file\"; done']),\n      modls = spawn('find', ['node_modules']);\n  </runCommands>\n\n  <collectFileList>\n  var mainFileList = '';\n  gitls.stdout.on('data', function (data) {\n    mainFileList += data;\n  });\n  gitls.on('exit', returnFileList);\n\n  var subFileList = '';\n  subls.stdout.on('data', function (data) {\n    subFileList += data;\n  });\n  subls.on('exit', returnFileList);\n  \n  var modFileList = '';\n  modls.stdout.on('data', function (data) {\n    modFileList += data;\n  });\n  modls.on('exit', returnFileList);\n  </collectFileList>\n\n  <generateFileList>\n  var lsCount = 0;\n  function returnFileList(code) {\n    lsCount++;\n    if (lsCount < 3) {\n      return;\n    }\n    process.chdir(cwd);\n    var fileList = (mainFileList.trim() + '\\n' + subFileList.trim() + '\\n' + modFileList.trim()).split('\\n').filter(function(file) {\n      <filterFiles>\n      if (file.indexOf('Entering ') === 0) {\n        return;\n      }\n      if (file.split('/').pop()[0] == '.' || file[file.length - 1] == '~') {\n        return;\n      }\n      if (fs.statSync(path.join(dir, file)).isDirectory()) {\n        return;\n      }\n      </filterFiles>\n      <returnValidFiles>\n      return file;\n      </returnValidFiles>\n    }).sort();\n    </generateFileList>\n\n    <callbackResult>\n    callback(fileList);\n    </callbackResult>\n  }\n}\n"], "```"]