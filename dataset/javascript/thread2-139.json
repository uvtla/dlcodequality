[["walkObject", "\nfunction walkObject (prefix, object, leaves) {\n  Object.keys(object).forEach((key) => {\n    const value = object[key]\n    const fullPrefix = (prefix) ? prefix + '.' + key : key\n    <walkDecision>\n    if (__.isObject(value) && !__.isArray(value)) {\n      walkObject(fullPrefix, value, leaves)\n    } else {\n      leaves[fullPrefix] = value\n    }\n    </walkDecision>\n  })\n}\n"], ["WebsocketConnection", "\nfunction WebsocketConnection(socket, url) {\n  this.socket = socket;\n  this.url = url;\n\n  this.deferreds = {};\n  this.nextRequestId = 0;\n\n  <bindMethods>\n  this.onReply = this.onReply.bind(this);\n  this.onEvent = this.onEvent.bind(this);\n  </bindMethods>\n}\n"], ["byteaddsub", "\nfunction byteaddsub(a, avlen, b, bvlen, m, reuse) {\n  \n  <variableInitialization>\n  var alength; \n  var blength; \n  var ap; \n  var bp; \n  var maxarr; \n  var reb; \n  var quickm; \n  var digit; \n  var op=0; \n  var dp90=0; \n  var newarr; \n  var i=0;\n  </variableInitialization>\n\n  \n  <arraySetup>\n  alength=a.length; \n  blength=b.length; \n  ap=avlen-1; \n  bp=bvlen-1; \n  maxarr=bp;\n  </arraySetup>\n\n  <determineMaxArrayLengthAndReuse>\n  if (maxarr<ap)\n   maxarr=ap;\n  reb=null; \n  if (reuse)\n   if ((maxarr+1)==alength)\n    reb=a; \n  if (reb==null){\n   reb=this.createArrayWithZeros(maxarr+1); \n   }\n  </determineMaxArrayLengthAndReuse>\n\n  <quickModeCheck>\n  quickm=false; \n  if (m==1)\n   quickm=true; \n  else\n   if (m==(-1))\n    quickm=true; \n  </quickModeCheck>\n\n  <digitOperation>\n  digit=0; \n  {op=maxarr;op:for(;op>=0;op--){\n   //... (rest of digitOperation code)\n  </digitOperation>\n\n  <newArrayCreationOrReuse>\n  if (digit==0)\n   return reb; \n  newarr=null;\n  if (reuse)\n   if ((maxarr+2)==a.length)\n    newarr=a; \n  if (newarr==null)\n   newarr=new Array(maxarr+2);\n  </newArrayCreationOrReuse>\n\n  <finalArrayFormation>\n  newarr[0]=digit; \n  {var $24=maxarr+1;i=0;i:for(;$24>0;$24--,i++){\n    newarr[i+1]=reb[i];\n    }\n   }\n  </finalArrayFormation>\n\n  return newarr;\n}\n"], ["ParamController", "\nfunction ParamController(model, idName, paramName, router) {\n  var modelName = model.modelName.toLowerCase();\n\n  <assignRoutersAndNames>\n  if (typeof idName === 'function') {\n    router = idName;\n    idName = modelName + 'Id';\n  }\n\n  if (typeof paramName === 'function') {\n    router = paramName;\n    paramName = modelName + 'Param';\n  }\n  </assignRoutersAndNames>\n\n  <initializeCrudController>\n  CrudController.call(this, model, idName);\n  </initializeCrudController>\n\n  <setDefaultParamName>\n  if (!paramName) {\n    paramName = modelName + 'Param';\n  }\n  </setDefaultParamName>\n\n  <setInstanceVariables>\n  this.paramName = String(paramName);\n  this.paramString = ':' + this.paramName;\n  </setInstanceVariables>\n\n  <registerRequestParameter>\n  router.param(this.paramName, this.registerRequestParameter);\n  </registerRequestParameter>\n}\n"], ["onExec", "\nfunction onExec( error ) {\n\t<errorHandling>\n\tif ( error ) {\n\t\tdebug( 'Error encountered while attempting to convert %s: %s', inFile, error.message );\n\t\treturn done( error );\n\t}\n\t</errorHandling>\n\t<successHandling>\n\tdebug( 'Successfully converted input file: %s', inFile );\n\tunlink( inFile, onRemove );\n\t</successHandling>\n}\n"], ["anonymousFunction1", "\nfunction() {\n    <validationMessagesAggregation>\n    const messages = [];\n    if (this.validationMessages && this.validationMessages.errors) {\n      const l = this.validationMessages.errors.length;\n      var i = 0;\n      for (i = 0; i < l; i++) {\n        messages.push(this.validationMessages.errors[i].message + \" from \" + this.validationMessages.errors[i].dataPath);\n      }\n    }\n    </validationMessagesAggregation>\n    return messages;\n  }\n"], ["digest", "\nfunction digest(message) {\n    return message.id || sha1(serializeNodes(message.nodes).join('') + (\"[\" + message.meaning + \"]\"));\n}\n"], ["anonymousFunction2", "\nfunction() {\n    <removeChildAndCleanup>\n    var parent = this.getParent();\n\n    if(parent && parent.children) {\n        parent.children.splice(this.index, 1);\n        parent._setChildrenIndices();\n        delete this.parent;\n    }\n\n    this._clearSelfAndDescendantCache(STAGE);\n    this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);\n    this._clearSelfAndDescendantCache(VISIBLE);\n    this._clearSelfAndDescendantCache(LISTENING);\n    this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);\n    </removeChildAndCleanup>\n\n    return this;\n}\n"], ["templateReplacer", "\nfunction (text, replacements) {\n    'use strict';\n    <replacementProcessing>\n    var keys = getKeysFromTemplate(text),\n        len = keys.length,\n        i = 0,\n        key,\n        value;\n    while (i < len) {\n        key = keys[i];\n        if (key.indexOf('.') !== -1) {\n            value = getNestedValue(replacements, key);\n        } else {\n            value = replacements[key];\n        }\n        if (value) {\n            text = text.split('{' + key + '}').join(value);\n        }\n        i += 1;\n    }\n    </replacementProcessing>\n    return text;\n}\n"], ["canContainTag", "\nfunction( tag ) {\n\t<containmentCheck>\n\tif ( tag in CKEDITOR.dtd.$block ) {\n\t\tvar inter = this.contains( CKEDITOR.dtd.$intermediate );\n\t\tholder = inter || ( this.root.equals( this.block ) && this.block ) || this.blockLimit;\n\t\treturn !!holder.getDtd()[ tag ];\n\t}\n\t</containmentCheck>\n\n\treturn true;\n}\n"], ""]