[["MobileServiceSyncContext", "\nfunction MobileServiceSyncContext(client) {\n    <ValidateClient>\n    Validate.notNull(client, 'client');\n    </ValidateClient>\n\n    var store,\n        operationTableManager,\n        pullManager,\n        pushManager,\n        purgeManager,\n        isInitialized = false,\n        syncTaskRunner = taskRunner(), \n        storeTaskRunner = taskRunner();\n\n    <Initialize>\n    this.initialize = function (localStore) {\n        ...\n    };\n    </Initialize>\n\n    <Insert>\n    this.insert = function (tableName, instance) { \n        ...\n    };\n    </Insert>\n\n    <Update>\n    this.update = function (tableName, instance) { \n        ...\n    };\n    </Update>\n\n    <Lookup>\n    this.lookup = function (tableName, id, suppressRecordNotFoundError) {\n        ...\n    };\n    </Lookup>\n\n    <Read>\n    this.read = function (query) {\n        ...\n    };\n    </Read>\n\n    <Delete>\n    this.del = function (tableName, instance) {\n        ...\n    };\n    </Delete>\n\n    <Pull>\n    this.pull = function (query, queryId, settings) {\n        ...\n    };\n    </Pull>\n\n    <Push>\n    this.push = function () {\n        ...\n    };\n    </Push>\n\n    <Purge>\n    this.purge = function (query, forcePurge) {\n        ...\n    };\n    </Purge>\n\n    <PushHandler>\n    this.pushHandler = undefined;\n    </PushHandler>\n\n    <GetOperationTableManager>\n    this._getOperationTableManager = function () {\n        return operationTableManager;\n    };\n    </GetOperationTableManager>\n    \n    <GetPurgeManager>\n    this._getPurgeManager = function() {\n        return purgeManager;\n    };\n    </GetPurgeManager>\n\n    <UpsertWithLogging>\n    function upsertWithLogging(tableName, instance, action, shouldOverwrite) {\n        ...\n    }\n    </UpsertWithLogging>\n\n    <ValidateInitialization>\n    function validateInitialization() {\n        ...\n    }\n    </ValidateInitialization>\n}\n"], ["AnonymousFunctionUndefined", "\nfunction () {\n    var hash = me.utils.getUriFragment();\n\n    <ConfigureDebug>\n    me.debug.renderHitBox   = ...\n    </ConfigureDebug>\n\n    <PatchGameUpdate>\n    me.plugin.patch(me.game, \"update\", function (dt) {\n        ...\n    });\n    </PatchGameUpdate>\n\n    <PatchGameDraw>\n    me.plugin.patch(me.game, \"draw\", function () {\n        ...\n    });\n    </PatchGameDraw>\n\n    <PatchSpriteDraw>\n    me.plugin.patch(me.Sprite, \"draw\", function (renderer) {\n        ...\n    });\n    </PatchSpriteDraw>\n\n    <PatchBitmapTextDraw>\n    me.plugin.patch(me.BitmapText, \"draw\", function (renderer) {\n        ...\n    });\n    </PatchBitmapTextDraw>\n\n    <PatchTextDraw>\n    me.plugin.patch(me.Text, \"draw\", function (renderer, text, x, y) {\n        ...\n    });\n    </PatchTextDraw>\n\n    <PatchTextDrawStroke>\n    me.plugin.patch(me.Text, \"drawStroke\", function (renderer, text, x, y) {\n        ...\n    });\n    </PatchTextDrawStroke>\n\n    <PatchEntityPostDraw>\n    me.plugin.patch(me.Entity, \"postDraw\", function (renderer) {\n        ...\n    });\n    </PatchEntityPostDraw>\n\n    <PatchContainerDraw>\n    me.plugin.patch(me.Container, \"draw\", function (renderer, rect) {\n        ...\n    });\n    </PatchContainerDraw>\n}\n"], ["StartAutoHide", "\nfunction startAutoHide() {\n    <AutoHideImplementation>\n    var autoHideTimer, cancelAutoHide = angular.noop;\n    ...\n    </AutoHideImplementation>\n\n    <SetupCancelAutoHide>\n    options.cancelAutoHide = function() {\n        ...\n    };\n    </SetupCancelAutoHide>\n}\n"], ["ResolveValues", "\nfunction resolveValues(values) {\n    <ValueTransformation>\n    if (Array.isArray(values)) {\n        ...\n    }\n    return values.split(' ')\n        ...\n    </ValueTransformation>\n}\n"], ["AnonymousFunctionUndefinedSRP", "\nfunction() {\n    var self = this;\n    <UpdateHttpServerListeners>\n    _.each(['request', 'upgrade'], function(event) {\n      ...\n    });\n    </UpdateHttpServerListeners>\n}\n"], ["AnonymousFunctionElementNode", "\nfunction() {\n    var element = this.element,\n        node = this.node;\n    <HideElementNode>\n    if (!element && !node) {\n        ...\n    }\n    ...\n    </HideElementNode>\n}\n"], ["GetOptionsInstanceDefaults", "\nfunction () {\n    <ReadFileSync>\n    var fileContent = self._readFileSync();\n    </ReadFileSync>\n\n    <GetInstanceDefaults>\n    return defaults((fileContent.instances || {})[this._id], self._options.instanceDefaults);\n    </GetInstanceDefaults>\n}\n"], ["GetListingWatcher", "\nfunction getListingWatcher(subreddit, options) {\n    <BuildStartPageUrl>\n    options.listing = options.listing || 'hot'\n    ...\n    </BuildStartPageUrl>\n\n    <LogStartPage>\n    console.log(start_page)\n    </LogStartPage>\n\n    <CreateRedditListingWatcher>\n    return new RedditListingWatcher(start_page, 'item', options)\n    </CreateRedditListingWatcher>\n}\n"], ["CreateAxis", "\nfunction(axis){\n    <DetermineAxisType>\n    var _self = this,\n      type = axis.type,\n      C,\n      name;\n    ...\n    </DetermineAxisType>\n\n    <ConfigureAxis>\n    axis.plotRange = _self.get('plotRange');\n    axis.autoPaint = false;\n    </ConfigureAxis>\n\n    <CreateAxisObject>\n    type = type || 'number';\n    name = Util.ucfirst(type);\n    C = Axis[name];\n    if(C){\n      return  _self.get('parent').addGroup(C,axis);\n    }\n    </CreateAxisObject>\n\n    <ReturnNullForInvalidAxis>\n    return null;\n    </ReturnNullForInvalidAxis>\n}\n"], ["OnClick", "\nfunction (domEvent) {\n    <ExecuteOnClickCallback>\n    if (!!this._cfg.onclick) {\n        ...\n    }\n    </ExecuteOnClickCallback>\n}\n"], "```"]