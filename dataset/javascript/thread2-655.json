[["storeXMLModifications", "\nfunction _storeXMLModifications() {\n  if (bHasLocalStorage) {\n    localStorage.setItem(\"sap-ui-support.aSupportXMLModifications/\" + document.location.href, JSON.stringify(aSupportXMLModifications));\n  }\n}\n"], ["getFirstAnchor", "\nfunction getFirstAnchor(list) {\n  var result = null;\n  forEach(list, function(element) {\n    if (!result && lowercase(element.nodeName) === 'a') result = element;\n  });\n  return result;\n}\n"], ["isTaskListItemToken", "\nfunction isTaskListItemToken(tokens, index) {\n  return tokens[index].type === 'inline'\n      && tokens[index - 1].type === 'paragraph_open'\n      && tokens[index - 2].type === 'list_item_open'\n      && (tokens[index].content.indexOf('[ ]') === 0\n          || tokens[index].content.indexOf('[x]') === 0\n          || tokens[index].content.indexOf('[X]') === 0);\n}\n"], ["submitPayment", "\nfunction submitPayment(account, payment, clientResourceID, secret,\n  urlBase, options, callback) {\n\n  <formatTransactionResponse>\n  function formatTransactionResponse(message, meta) {\n    if (meta.state === 'validated') {\n      var txJSON = message.tx_json;\n      txJSON.meta = message.metadata;\n      txJSON.validated = message.validated;\n      txJSON.ledger_index = txJSON.inLedger = message.ledger_index;\n      return formatPaymentHelper(payment.source_account, txJSON);\n    }\n\n    return {\n      client_resource_id: clientResourceID,\n      status_url: urlBase + '/v1/accounts/' + payment.source_account\n        + '/payments/' + clientResourceID\n    };\n  }\n  </formatTransactionResponse>\n\n  <prepareTransaction>\n  function prepareTransaction(_transaction, remote) {\n    validate.client_resource_id(clientResourceID);\n\n    _transaction.lastLedger(Number(options.last_ledger_sequence ||\n      (remote.getLedgerSequence() + transactions.DEFAULT_LEDGER_BUFFER)));\n\n    if (Number(options.max_fee) >= 0) {\n      _transaction.maxFee(Number(xrpToDrops(options.max_fee)));\n    }\n\n    if (Number(options.fixed_fee) >= 0) {\n      _transaction.setFixedFee(Number(xrpToDrops(options.fixed_fee)));\n    }\n\n    _transaction.clientID(clientResourceID);\n    return _transaction;\n  }\n  </prepareTransaction>\n\n  var isSubmitMode = options.submit !== false;\n  var _options = _.assign({}, options, {\n    clientResourceId: clientResourceID,\n    blockDuplicates: isSubmitMode,\n    saveTransaction: isSubmitMode\n  });\n\n  var initialTx = createPaymentTransaction(account, payment);\n  var transaction = isSubmitMode ? prepareTransaction(\n    initialTx, this.remote) : initialTx;\n  var converter = isSubmitMode ? formatTransactionResponse :\n    _.partial(TxToRestConverter.parsePaymentFromTx, account);\n  transact(transaction, this, secret, _options, converter, callback);\n}\n"], ["getNormalizedLiteral", "\nfunction getNormalizedLiteral(node) {\n  if (node.type === \"Literal\") {\n    return node;\n  }\n\n  if (looksLikeLiteral(node)) {\n    return {\n      type: \"Literal\",\n      value: -node.argument.value,\n      raw: \"-\" + node.argument.value\n    };\n  }\n\n  return null;\n}\n"], ["create", "\nfunction _create (elements, selector) {\n  return selector == null ? new Rye(elements) : new Rye(elements).filter(selector)\n}\n"], ["checkSourceInfo", "\nfunction checkSourceInfo () {\n  return new Promise((resolve, reject) => {\n    <compareToOldInfo>\n    let ok = pjson.name === oldInfo.packageName\n    ok = ok && readSync('android/app/src/main/AndroidManifest.xml').includes(`package=\"${oldInfo.packageID}\"`)\n    if (!ok) {\n      reject(new Error('The App name is already modified.'))\n      return\n    }\n    </compareToOldInfo>\n\n    <outputNewProjectParameters>\n    console.log()\n    console.log('---------------------------------------------------------')\n    console.log('New project parameters:')\n    console.log('---------------------------------------------------------')\n    console.log('App display name :', newInfo.appName)\n    console.log('Project name     :', newInfo.projectName)\n    console.log('Package name     :', newInfo.packageName)\n    console.log('Package id       :', newInfo.packageID)\n    console.log('---------------------------------------------------------')\n    </outputNewProjectParameters>\n\n    <getUserConfirmation>\n    let r = null\n    try {\n      r = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n      })\n      r.question('Is this correct?', (answer) => {\n        r.close()\n        resolve(answer)\n      })\n    } catch (e) {\n      if (r) {\n        r.close()\n      }\n      reject(e)\n    }\n    </getUserConfirmation>\n  })\n}\n"], ["destroyOverlay", "\nfunction () {\n\n  if (this.iframe) {\n    this.iframe.parentNode.removeChild(this.iframe);\n  }\n\n  this.iframe = null;\n\n  Overlay.windowResizeEvent.unsubscribe(this.doCenterOnDOMEvent, this);\n  Overlay.windowScrollEvent.unsubscribe(this.doCenterOnDOMEvent, this);\n\n  Module.textResizeEvent.unsubscribe(this._autoFillOnHeightChange);\n\n  if (this._contextTriggers) {\n    this._processTriggers(this._contextTriggers, _UNSUBSCRIBE, this._alignOnTrigger);\n  }\n\n  Overlay.superclass.destroy.call(this);\n}\n"], ["formatEntityReferences", "\nfunction(oEntity) {\n  if (oEntity.references && Array.isArray(oEntity.references)) {\n    oEntity.references = oEntity.references.map(sReference => {\n      return `<li>${sReference}</li>`;\n    });\n    if (!oEntity.description) {\n      oEntity.description = '';\n    } else {\n      oEntity.description += '<br><br>';\n    }\n    oEntity.description += `References: <ul>${oEntity.references.join(\"\")}</ul>`;\n  }\n}\n"], ["ImageLoader", "\nfunction ImageLoader (loadItem, preferXHR) {\n  this.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.IMAGE);\n  \n  this.resultFormatter = this._formatResult;\n  \n  this._tagSrcAttribute = \"src\";\n  \n  <processLoadItem>\n  if (createjs.RequestUtils.isImageTag(loadItem)) {\n    this._tag = loadItem;\n  } else if (createjs.RequestUtils.isImageTag(loadItem.src)) {\n    this._tag = loadItem.src;\n  } else if (createjs.RequestUtils.isImageTag(loadItem.tag)) {\n    this._tag = loadItem.tag;\n  }\n  </processLoadItem>\n\n  <initializeImageLoader>\n  if (this._tag != null) {\n    this._preferXHR = false;\n  } else {\n    this._tag = document.createElement(\"img\");\n  }\n\n  this.on(\"initialize\", this._updateXHR, this);\n  </initializeImageLoader>\n}\n"], "```"]