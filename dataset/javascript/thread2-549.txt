```javascript
<prepare>
function prepare(oInfo, i) {
	var fnFormatter = oInfo.formatter,
		oModel,
		sModelName = oInfo.model;

	if (oInfo.path && oInfo.path.indexOf(">") > 0) {
		sModelName = oInfo.path.slice(0, oInfo.path.indexOf(">"));
	}
	oModel = oWithControl.getModel(sModelName);

	if (fnFormatter && fnFormatter.requiresIContext === true) {
		fnFormatter = oInfo.formatter
			= fnFormatter.bind(null, createContextInterface(oWithControl, mSettings, i));
	}

	if (fnFormatter && bAsync
			&& (oModel && oModel.$$valueAsPromise || i === undefined && bValueAsPromise)) {
		oInfo.formatter = function () {
			var that = this;
			return SyncPromise.all(arguments).then(function (aArguments) {
				return fnFormatter.apply(that, aArguments);
			});
		};
		oInfo.formatter.textFragments = fnFormatter.textFragments;
	}
	oInfo.mode = BindingMode.OneTime;
	oInfo.parameters = oInfo.parameters || {};
	oInfo.parameters.scope = oScope;
	if (bAsync && oModel && oModel.$$valueAsPromise) { 
		bValueAsPromise = oInfo.parameters.$$valueAsPromise = true;
	}
}
</prepare>

<emit>
function emit(event ) {
	this._events = this._events || {};

	var list = (this._events[event] || []).slice(0);
	for(var i = 0; i < list.length; i++) {
		list[i].apply(this, Array.prototype.slice.call(arguments, 1))
	}
	return list.length > 0;
}
</emit>

<uniq>
function uniq(array, isSorted, callback, thisArg) {
	var index = -1,
		length = array ? array.length : 0,
		result = [],
		seen = result;

	if (typeof isSorted != 'boolean' && isSorted != null) {
		thisArg = callback;
		callback = isSorted;
		isSorted = false;
	}

	var isLarge = !isSorted && length >= largeArraySize;
	if (isLarge) {
		var cache = {};
	}
	if (callback != null) {
		seen = [];
		callback = lodash.createCallback(callback, thisArg);
	}
	while (++index < length) {
		var value = array[index],
			computed = callback ? callback(value, index, array) : value;

		if (isLarge) {
			var key = keyPrefix + computed;
			var inited = cache[key]
				? !(seen = cache[key])
				: (seen = cache[key] = []);
		}
		if (isSorted
				? !index || seen[seen.length - 1] !== computed
				: inited || indexOf(seen, computed) < 0
			) {
			if (callback || isLarge) {
				seen.push(computed);
			}
			result.push(value);
		}
	}
	return result;
}
</uniq>

<translate>
function translate() {
	var a = arguments, v = a[0], o, i = 1;
	if(a[1].length) { a = a[1]; i = 0; }
	for(o=a[i++]; i<a.length; i++) {
		o = o.union(a[i]);
	}
	return o.translate(v);
}
</translate>

<clone>
function clone(value) {
	return valueTypes[typeof value] && value !== null
		? (isArray(value) ? value.slice() : extend({}, value))
		: value;
}
</clone>

<_updateBlock>
function _updateBlock(w, input, output, decrypt) {
	var Nr = w.length / 4 - 1;
	var m0, m1, m2, m3, sub;
	if(decrypt) {
		m0 = imix[0];
		m1 = imix[1];
		m2 = imix[2];
		m3 = imix[3];
		sub = isbox;
	} else {
		m0 = mix[0];
		m1 = mix[1];
		m2 = mix[2];
		m3 = mix[3];
		sub = sbox;
	}
	var a, b, c, d, a2, b2, c2;
	a = input[0] ^ w[0];
	b = input[decrypt ? 3 : 1] ^ w[1];
	c = input[2] ^ w[2];
	d = input[decrypt ? 1 : 3] ^ w[3];
	var i = 3;

	for(var round = 1; round < Nr; ++round) {
		a2 =
			m0[a >>> 24] ^
			m1[b >>> 16 & 255] ^
			m2[c >>> 8 & 255] ^
			m3[d & 255] ^ w[++i];
		b2 =
			m0[b >>> 24] ^
			m1[c >>> 16 & 255] ^
			m2[d >>> 8 & 255] ^
			m3[a & 255] ^ w[++i];
		c2 =
			m0[c >>> 24] ^
			m1[d >>> 16 & 255] ^
			m2[a >>> 8 & 255] ^
			m3[b & 255] ^ w[++i];
		d =
			m0[d >>> 24] ^
			m1[a >>> 16 & 255] ^
			m2[b >>> 8 & 255] ^
			m3[c & 255] ^ w[++i];
		a = a2;
		b = b2;
		c = c2;
	}

	output[0] =
		(sub[a >>> 24] << 24) ^
		(sub[b >>> 16 & 255] << 16) ^
		(sub[c >>> 8 & 255] << 8) ^
		(sub[d & 255]) ^ w[++i];
	output[decrypt ? 3 : 1] =
		(sub[b >>> 24] << 24) ^
		(sub[c >>> 16 & 255] << 16) ^
		(sub[d >>> 8 & 255] << 8) ^
		(sub[a & 255]) ^ w[++i];
	output[2] =
		(sub[c >>> 24] << 24) ^
		(sub[d >>> 16 & 255] << 16) ^
		(sub[a >>> 8 & 255] << 8) ^
		(sub[b & 255]) ^ w[++i];
	output[decrypt ? 1 : 3] =
		(sub[d >>> 24] << 24) ^
		(sub[a >>> 16 & 255] << 16) ^
		(sub[b >>> 8 & 255] << 8) ^
		(sub[c & 255]) ^ w[++i];
}
</_updateBlock>

<getSubtitlesByFilename>
async function getSubtitlesByFilename (filename) {
	return getSubtitlesList(filename)
		.then(parseSearchResults)
		.then(getBestSearchResult(filename))
		.then(getSubtitlesPage)
		.then(parseDownloadLink)
		.then(downloadZip)
		.then(extractSrt)
}
</getSubtitlesByFilename>

<map>
function map( result ) {
	const invalid = !result || result.length < 2;
	return invalid ? null : ( result.slice( 1 ).map( normalizeRegexResult ));
}
</map>

<doAutoLinks>
function doAutoLinks(text) {
	text = text.replace(/<((https?|ftp|dict):[^'">\s]+)>/gi,"<a href=\"$1\">$1</a>");
	text = text.replace(/<(?:mailto:)?([-.\w]+\@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi, function(wholeMatch,m1) {
		return encodeEmailAddress(unescapeSpecialChars(m1));
	});

	return text;
}
</doAutoLinks>

<tableRow>
function tableRow () {
	var args = arrayify(arguments)
	var rows = args.shift()
	if (!rows) return
	var options = args.pop()
	var cols = args
	
	<retrieveData>
	if (options.data) {
		var data = handlebars.createFrame(options.data)
		cols.forEach(function (col, index) {
			var colNumber = index + 1
			data['col' + colNumber] = containsData(rows, col)
		})
	}
	</retrieveData>
	
	<generateOutput>
	var output = ''
	rows.forEach(function (row) {
		output += options.fn(row, { data: data })
	})
	return output
	</generateOutput>
}
</tableRow>
```