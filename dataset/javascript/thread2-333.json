[["createColoredCanvas", "\nfunction createColoredCanvas(color) {\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n"], ["WixActivityData", "\nfunction WixActivityData() {\n    this.createdAt = new Date().toISOString();\n    \n    this.activityLocationUrl = null;\n    \n    this.activityDetails = {summary : null, additionalInfoUrl : null};\n    \n    this.activityType = null;\n    \n    this.activityInfo = null;\n    \n    this.init = function(obj) {\n        this.activityType = { name: obj.activityType };\n        this.activityDetails = obj.activityDetails;\n        this.activityInfo = obj.activityInfo;\n        this.id = obj.id;\n        this.activityLocationUrl = obj.activityLocationUrl;\n        this.createdAt = obj.createdAt;\n        return this;\n    };\n}\n"], ["getRosEnvVar", "\nfunction getRosEnvVar(envVarName) {\n  const envVar = process.env[envVarName];\n\n  if (!envVar) {\n    throw new Error(`Unable to find required environment variable ${envVarName}`);\n  }\n\n  return envVar;\n}\n"], ["AjaxGet", "\nfunction (url, options, cb) {\n    if (isFunction(options)) {\n        const t = cb;\n        cb = options;\n        options = t;\n    }\n    if (IS_NODE && Ajax.get.node) {\n        return Ajax.get.node(url, cb, options);\n    }\n    const client = Ajax._getClient(cb);\n    client.open('GET', url, true);\n    if (options) {\n        for (const k in options.headers) {\n            client.setRequestHeader(k, options.headers[k]);\n        }\n        client.withCredentials = options.credentials === 'include';\n        if (options['responseType']) {\n            client.responseType = options['responseType'];\n        }\n    }\n    client.send(null);\n    return client;\n}\n"], ["identifyContainer", "\nfunction(c) {\n    return c.cid || c.id || c.containerName || c.containerID || c.name;\n}\n"], ["populateModel", "\nfunction populateModel(model, modelData) {\n    for(var prop in modelData) {\n        if(modelData.hasOwnProperty(prop) && typeof modelData[prop] !== 'function') {\n            if( prop != \"id\" ) {\n                if ( modelData[prop] == 'sure_this_is_true' ) {\n                    model[prop] = true;\n                } else if ( modelData[prop] == 'sure_this_is_false' ) {\n                    model[prop] = false;\n                } else {\n                    model[prop] = modelData[prop];\n                }\n            }\n        }\n    }\n}\n"], ["isTypoTypeof", "\nfunction isTypoTypeof(left, right) {\n    if (state.option.notypeof)\n      return false;\n\n    if (!left || !right)\n      return false;\n\n    var values = [\n      \"undefined\", \"object\", \"boolean\", \"number\",\n      \"string\", \"function\", \"xml\", \"object\", \"unknown\"\n    ];\n\n    if (right.type === \"(identifier)\" && right.value === \"typeof\" && left.type === \"(string)\")\n      return !_.contains(values, left.value);\n\n    return false;\n  }\n"], ["formatNodeValue", "\nfunction formatNodeValue(node, profile) {\n\tif (node.value != null && reNl.test(node.value)) {\n\t\tconst indent = profile.indent(1);\n\t\treturn splitByLines(node.value).map((line, i) => `${indent}${i ? ' ' : '|'} ${line}`).join('\\n');\n\t}\n\n\treturn node.value;\n}\n"], ["getEnvironment", "\nfunction getEnvironment() {\n  if (isSuperSandboxedIframe()) {\n    return 89;\n  } else if (isDfpInAmp()) {\n    return 5;\n  } else if (isDfp()) {\n    return 4;\n  } else if (isAmp()) {\n    return 1;\n  } else if (isDFPSafeFrame()) {\n    return 11;\n  } else if (isSafeFrame()) {\n    return 10;\n  } else if (isMraid()) {\n    return 2;\n  } else if (isCodeOnPage()) {\n    return 0;\n  } else if (isSandboxedIframe()) {\n    return 16;\n  } else {\n    return 90;\n  }\n}\n"], ["computeElementPosition", "\nfunction (obj) {\n    var parent = null,\n      box = null,\n      pos = [],\n      _sL = document.body.scrollLeft + document.documentElement.scrollLeft,\n      _sT = document.body.scrollTop + document.documentElement.scrollTop;\n\n    if (obj.parentNode === null || getStyle(obj, 'display') == 'none') return false;\n    if (obj.getBoundingClientRect) { \n      box = obj.getBoundingClientRect();\n      return [Math.round(box.left) + (document.documentElement.scrollLeft || document.body.scrollLeft), Math.round(box.top) + (document.documentElement.scrollTop || document.body.scrollTop), _sL, _sT];\n    } else if (document.getBoxObjectFor) { \n      box = document.getBoxObjectFor(obj);\n      pos = [box.x, box.y];\n    } else { \n      pos = [obj.offsetLeft, obj.offsetTop];\n      parent = obj.offsetParent;\n      if (parent != obj) {\n        while (parent) {\n          pos[0] += parent.offsetLeft;\n          pos[1] += parent.offsetTop;\n          parent = parent.offsetParent;\n        }\n      }\n      if (window.opera || (document.childNodes && !document.all && !navigator.taintEnabled && !accentColorName)) pos[1] -= document.body.offsetTop;\n    }\n    if (obj.parentNode) parent = obj.parentNode;\n    else parent = null;\n    while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') {\n      pos[0] -= parent.scrollLeft;\n      pos[1] -= parent.scrollTop;\n      if (parent.parentNode) parent = parent.parentNode;\n      else parent = null;\n    }\n    return pos.concat([_sL, _sT]);\n}\n"], ""]