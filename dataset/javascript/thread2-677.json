[["writeFile", "\nfunction writeFile(filename, content) {\n  fs.writeFileSync(filename, JSON.stringify(content, null, 2));\n}\n"], ["shallowMerge", "\nfunction shallowMerge(o1, o2) {\n    var o = {},\n        k;\n\n    for (k in o1) o[k] = o1[k];\n    for (k in o2) o[k] = o2[k];\n\n    return o;\n}\n"], ["$$core$$ToRawPrecision", "\nfunction $$core$$ToRawPrecision (x, minPrecision, maxPrecision) {\n        var\n        \n            p = maxPrecision;\n\n        \n        if (x === 0) {\n            var\n            \n                m = $$core$$arrJoin.call(Array (p + 1), '0'),\n            \n                e = 0;\n        }\n        \n        else {\n            \n            \n            \n            \n            var\n                e = $$core$$log10Floor(Math.abs(x)),\n\n                \n                f = Math.round(Math.exp((Math.abs(e - p + 1)) * Math.LN10)),\n\n            \n            \n                m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));\n        }\n\n        \n        if (e >= p)\n            \n            return m + $$core$$arrJoin.call(Array(e-p+1 + 1), '0');\n\n        \n        else if (e === p - 1)\n            \n            return m;\n\n        \n        else if (e >= 0)\n            \n            \n            m = m.slice(0, e + 1) + '.' + m.slice(e + 1);\n\n        \n        else if (e < 0)\n            \n            \n            m = '0.' + $$core$$arrJoin.call(Array (-(e+1) + 1), '0') + m;\n\n        \n        if (m.indexOf(\".\") >= 0 && maxPrecision > minPrecision) {\n            var\n            \n                cut = maxPrecision - minPrecision;\n\n            \n            while (cut > 0 && m.charAt(m.length-1) === '0') {\n                \n                m = m.slice(0, -1);\n\n                \n                cut--;\n            }\n\n            \n            if (m.charAt(m.length-1) === '.')\n                \n                m = m.slice(0, -1);\n        }\n        \n        return m;\n}\n"], ["_processPathsAndPackages", "\nfunction _processPathsAndPackages(paths, packages, options) {\n    var result = {\n        paths: {},\n        packages: []\n    };\n    _.each(paths, function (path, pathName) {\n        result.paths[pathName] = _.contains(options.notMerge, pathName) ? 'empty:' : path;\n    });\n    _.each(packages, function (pkg, i) {\n        if (_.contains(options.notMerge, pkg.name)) {\n            result.paths[pkg.name] = 'empty:';\n        } else {\n            result.packages.push(pkg);\n        }\n    });\n    return result;\n}\n"], ["parseNextToken", "\nfunction parseNextToken(template, grammar, stack) {\n    grammar.some(function(token) {\n      var capture = token.test.exec(template);\n\n      \n      if (capture && capture[0]) {\n        template = template.replace(token.test, \"\");\n        stack.push({ name: token.name, capture: capture });\n        return true;\n      }\n    });\n\n    return template;\n}\n"], ["join", "\nfunction join(args) {\n  var arg;\n  var i = 0;\n  var path = '';\n\n  if (arguments.length === 0) {\n    return utils.sep;\n  }\n\n  while ((arg = arguments[i++])) {\n    if (typeof arg !== 'string') {\n      throw new TypeError('utils.join() expects string arguments');\n    }\n\n    path += utils.sep + arg;\n  }\n\n  path = path.replace(/\\/+/g, utils.sep);\n  if (path[path.length - 1] === utils.sep) {\n    path = path.substring(0, path.length - 1);\n  }\n  return path;\n}\n"], ["getMaxOffset", "\nfunction getMaxOffset({ items, slideWidth }) {\n    if (!items.length) {\n        return 0;\n    }\n    return Math.max(items[items.length - 1].right - slideWidth, 0) || 0;\n}\n"], ["decimal", "\nfunction decimal(name) {\n  return joi.alternatives().meta({ cql: true, type: name }).try(\n    \n    joi.string().regex(/^\\-?\\d+(\\.\\d+)?$/m),\n    \n    joi.number()\n  );\n}\n"], ["setPosition", "\nfunction(value, type) {\n      type = type || \"current\";\n      var pos;\n      if(type == \"current\") {\n        pos = this.pos;\n      } else if(type == \"end\") {\n        pos = this.endPos;\n      } else if(type == \"start\") {\n        pos = this.startPos;\n      }\n      pos.set(value);\n}\n"], ["parseInput", "\nfunction(input, remoteData)\n{\n  if (input instanceof Model)\n  {\n    return input;\n  }\n\n  var discriminatedValue = isValue(input) ? input[this.discriminator] : null;\n  var model = this.discriminatorsToModel[discriminatedValue];\n\n  return model ? model.Database.parseModel(input, remoteData) : null;\n}\n"], ""]