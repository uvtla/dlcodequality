[["toPositiveInt", "\nfunction toPositiveInt(num, _default) {\n    <inputValidation>\n    if (isNumeric(num)) {\n        num = parseInt(num, 10);\n    } else {\n        return _default;\n    }\n    </inputValidation>\n    \n    <positiveIntCheck>\n    if (num < 0) {\n        return _default;\n    }\n    </positiveIntCheck>\n\n    return num;\n}\n"], ["makeApiRequest", "\nfunction(options, callback) {\n    <configureCallbackAndOptions>\n    if (!callback && utils.isFunction(options)) {\n        callback = options;\n        options = {};\n    }\n    callback = callback || function() {};\n    \n    options = options || {};\n    </configureCallbackAndOptions>\n    \n    var that = this;\n    <doApiRequest>\n    return this.get(\"\", options, function(err, response) {\n        if (err) {\n            callback(err);\n        } \n        else {\n            <loadResponseData>\n            that._load(response.data ? response.data.entry : null);\n            </loadResponseData>\n            callback(null, that);\n        }\n    });\n    </doApiRequest>\n}\n"], ["getSpecLink", "\nfunction getSpecLink(v_info,str_map,adp_map) {\n    var links = [];\n    \n    <buildSpecLinks>\n    if(v_info.dashmpd) {\n        var specurl = decodeURIComponent(v_info.dashmpd);\n        <processSpecUrl>\n        var q = specurl.replace(/https?:\\/\\/manifest.googlevideo.com\\/api\\/manifest\\/dash/\n        var sq =  q.split('/'), stp = [];\n        \n        for (var i = 0; i < sq.length; i+=2) {\n            if(sq[i]=='sig') sq[i] = \"signature\"; \n            if(sq[i]=='s'){\n                sq[i] = \"signature\";\n                sq[i + 1] = decodeURIComponent(sq[i + 1]);\n            }\n            stp.push(sq[i]+'='+sq[i + 1]);\n        }\n        q = stp.join('&');\n        if(q.toLowerCase().indexOf('ratebypass')===-1) q+='&ratebypass=yes';\n        </processSpecUrl>\n        \n        <findBaseUrl>\n        var base_url = \"\";\n        for (var i = 0; i < str_map.length; i++) {\n            var sp_url = str_map[i].url.split('?');\n            if(sp_url[0]){\n                base_url = sp_url[0];\n                break;\n            }\n        }\n        </findBaseUrl>\n        \n        <createLinks>\n        var str_fmt = [], adp_fmt = [];\n        for (var i = 0; i < str_map.length; i++) str_fmt[str_map[i].itag] = true;\n        for (var i = 0; i < adp_map.length; i++) adp_fmt[adp_map[i].itag] = true;\n        \n        if(adp_fmt[135] && str_fmt[35]=== void 0) {\n            links.push({\n                itag : 35,\n                url : base_url+\"?\"+q+\"&itag=35\"\n            });\n        }\n        if((adp_fmt[137]||adp_fmt[264]) && str_fmt[37]=== void 0) {\n            links.push({\n                itag : 37,\n                url : base_url+\"?\"+q+\"&itag=37\"\n            });\n        }\n        if(adp_fmt[138] && str_fmt[38]=== void 0) {\n            links.push({\n                itag : 38,\n                url : base_url+\"?\"+q+\"&itag=38\"\n            });\n        }\n        </createLinks>\n    }\n    </buildSpecLinks>\n    \n    return links;\n}\n"], ["setValue", "\nfunction setValue(name, stat, value, gran, timestamp, callback) {\n    <handleGranularity>\n    if(typeof gran == 'string') {\n        gran = util.getUnitDesc(gran)\n    }\n    </handleGranularity>\n\n    <constructKeyAndStoreValue>\n    var key = getGranKey(name, gran, timestamp);\n    redis.hset(key, stat, value, callback)\n    </constructKeyAndStoreValue>\n}\n"], ["addFilesToData", "\nfunction addFilesToData(IOD, IODOpts, apiType, form) {\n    <appendFilesToForm>\n    _.each(T.maybeToArray(IODOpts.files), function(file) {\n        if (apiType === IOD.TYPES.JOB) {\n            form.append(file.name, fs.createReadStream(file.path))\n        }\n        else form.append('file', fs.createReadStream(file))\n    })\n    </appendFilesToForm>\n}\n"], ["AvrYamahaNodeIn", "\nfunction AvrYamahaNodeIn(config) {\n    <initializeNode>\n    RED.nodes.createNode(this, config);\n    this.device = config.device;\n    this.deviceNode = RED.nodes.getNode(this.device);\n    this.name = config.name;\n    this.devdesc = config.devdesc;\n    </initializeNode>\n    \n    var node = this;\n    <handleDeviceNode>\n    if (this.deviceNode) {\n        <updateStatus>\n        this.status({fill:\"red\", shape:\"ring\", text:\"disconnected\"});\n        if (this.deviceNode.connected) {\n            this.status({fill:\"green\", shape:\"dot\", text:\"connected\"});\n        }\n        </updateStatus>\n        \n        <setupCommunication>\n        this.deviceNode.register(this);\n        this.deviceNode.subscribe(function(topic, payload) {\n            var msg = {topic:topic, payload:payload};\n            if (node.devdesc) {\n                msg.devDesc = node.deviceNode.devDesc;\n            }\n            node.send(msg);\n        }, this.id);\n        </setupCommunication>\n        \n        <cleanUpOnClose>\n        this.on('close', function(done) {\n            if (node.deviceNode) {\n                node.deviceNode.unsubscribe(node.id);\n                node.deviceNode.deregister(node, done);\n                node.yamaha = null;\n            }\n        });\n        </cleanUpOnClose>\n    } else {\n        <handleMissingConfig>\n        this.error(RED._(\"avr-yamaha.errors.missing-config\"));\n        </handleMissingConfig>\n    }\n    </handleDeviceNode>\n}\n"], ["mergeObjects", "\nfunction(target, source, options) {\n    <prepareSourceArray>\n    var sources = helpers.isArray(source) ? source : [source];\n    var ilen = sources.length;\n    var merge, i, keys, klen, k;\n    </prepareSourceArray>\n\n    <checkTargetObjectType>\n    if (!helpers.isObject(target)) {\n        return target;\n    }\n    </checkTargetObjectType>\n\n    <mergeSourcesIntoTarget>\n    options = options || {};\n    merge = options.merger || helpers._merger;\n    for (i = 0; i < ilen; ++i) {\n        source = sources[i];\n        if (!helpers.isObject(source)) {\n            continue;\n        }\n        keys = Object.keys(source);\n        for (k = 0, klen = keys.length; k < klen; ++k) {\n            merge(keys[k], target, source, options);\n        }\n    }\n    </mergeSourcesIntoTarget>\n\n    return target;\n}\n"], ["_String_toFloat", "\nfunction _String_toFloat(s) {\n    <validateString>\n    if (s.length === 0 || /[\\sxbo]/.test(s)) {\n        return __Maybe_Nothing;\n    }\n    </validateString>\n    \n    <convertStringToFloat>\n    var n = +s;\n    return n === n ? __Maybe_Just(n) : __Maybe_Nothing;\n    </convertStringToFloat>\n}\n"], ["addCustomFeatureProperties", "\nfunction addCustomFeatureProperties(entity) {\n    <addPropertiesLoop>\n    for (var i = 0; i < customProperties.length; i++) {\n        if (entity.propertyNames.indexOf(customProperties[i]) === -1) {\n            entity.addProperty(customProperties[i]);\n        }\n    }\n    </addPropertiesLoop>\n}\n"], ["updateLocationData", "\nfunction (result) {\n    <assertValidity>\n    assert(!result.error, result.error);\n    </assertValidity>\n    \n    <updateProperties>\n    loc.et   = result.maximum;\n    loc.flag = result.rflag;\n    </updateProperties>\n}\n"], "```"]