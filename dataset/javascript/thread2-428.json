[["checkNamespaces", "\nfunction (checkNamespaces) {\n  var i, j\n  if (!checkNamespaces)\n    return true\n  if (!this.namespaces)\n    return false\n  for (i = checkNamespaces.length; i--;) {\n    for (j = this.namespaces.length; j--;) {\n      if (checkNamespaces[i] === this.namespaces[j])\n        return true\n    }\n  }\n  return false\n}\n"], ["coverage", "\nfunction coverage(data, type) {\n  var comparisionFunc;\n  var n = 0;\n\n  <defineComparisionFunc>\n  function isCovered(val) {\n    return (val > 0);\n  }\n\n  function isMissed(val) {\n    return !isCovered(val);\n  }\n\n  if (type === 'covered') {\n    comparisionFunc = isCovered;\n  }\n  else if (type === 'missed') {\n    comparisionFunc = isMissed;\n  }\n  else {\n    throw new Error('Invalid type: ' + type);\n  }\n  </defineComparisionFunc>\n\n  var len = Object.keys(data.lines).length;\n\n  for (var i = 0; i < len; ++i) {\n    if (data.lines[i] !== null && comparisionFunc(data.lines[i])) {\n      ++n;\n    }\n  }\n\n  return n;\n}\n"], ["uploadMap", "\nfunction uploadMap(map, e) {\n    let reader = new window.FileReader();\n\n    <readFile>\n    reader.readAsText(e.target.files[0]);\n    </readFile>\n\n    <processFile>\n    reader.onload = function () {\n        let data = JSON.parse(event.target.result);\n        map.new(data);\n    };\n    </processFile>\n}\n"], ["compareCharacters", "\nfunction compareCharacters(theChar, before, after){\n  var theType = charType(theChar),\n      beforeType = charType(before),\n      afterType = charType(after);\n\n  return relevanceMatrix[theType][beforeType] +\n   0.4 * relevanceMatrix[theType][afterType];\n}\n"], ["errHandler", "\nfunction errHandler(err, req, res, next) {\n  <logError>\n  console.log(addTimestamp(\"Internal error: \" + util.inspect(err)));\n  console.error(addTimestamp(\"Internal error: \" + util.inspect(err)));\n  if (err && err.stack) {\n    console.error(err.stack);\n  }\n  </logError>\n\n  <generateErrorMessage>\n  var errorMessage = {\n    msg: 'Internal error: ' + util.inspect(err),\n    error: util.inspect(err)\n  };\n  </generateErrorMessage>\n\n  <sendResponse>\n  if (res) {\n    res.statusCode = 500;\n    res.end(JSON.stringify(errorMessage));\n  }\n  </sendResponse>\n\n  return errorMessage;\n}\n"], ["lightNg", "\nfunction lightNg(moduleName) {\n  if (!moduleName) {\n    throw 'lightNg moduleName Required';\n  }\n\n  var module = Modules[moduleName];\n\n  <moduleCheck>\n  if (module) {\n    return module;\n  } else {\n    module = new lightNgModuleConstructor();\n    Modules[moduleName] = module;\n    return module;\n  }\n  </moduleCheck>\n}\n"], ["run", "\nfunction run(element, cb) {\n  <level>\n  return function level(error, content) {\n    <debugMessage>\n    debug('Traversing children of element %s', element.name);\n    </debugMessage>\n\n    <traverserExecution>\n    if (sync) {\n      return traverser(element, content, cb)();\n    }\n\n    setImmediate(traverser(element, content, cb));\n    </traverserExecution>\n  }\n  </level>\n}\n"], ["getMeasureNames", "\nfunction() {\n  if (this._aMeasureNames) {\n    return this._aMeasureNames;\n  }\n\n  <computeMeasureNames>\n  this._aMeasureNames = [];\n\n  for ( var sName in this._oMeasureSet) {\n    this._aMeasureNames.push(this._oMeasureSet[sName].getName());\n  }\n  </computeMeasureNames>\n\n  return this._aMeasureNames;\n}\n"], ["setChecked", "\nfunction setChecked(newArr, oldArr) {\n  <beforeChangeCheck>\n  if (checklistBeforeChange && (checklistBeforeChange(scope) === false)) {\n    setValueInChecklistModel(getChecklistValue(), ngModelGetter(scope));\n    return;\n  }\n  </beforeChangeCheck>\n\n  <updateChecklistModel>\n  ngModelGetter.assign(scope, contains(newArr, getChecklistValue(), comparator));\n  </updateChecklistModel>\n}\n"], ["_hash", "\nfunction _hash() {\n  <mapArguments>\n  var set = Array.prototype.map.call(arguments, function(v) {\n      return typeof v === 'string' ? v : Object.keys(v).join(' ');\n  }).join(' ');\n  </mapArguments>\n\n  <createHash>\n  return set.split(/\\s+/)\n    .reduce(function(res, keyword) {\n        res[keyword] = true;\n        return res;\n    }, {});\n  </createHash>\n}\n"], ""]