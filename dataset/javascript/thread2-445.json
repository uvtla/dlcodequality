[["home", "\nfunction home(req, res) {\n  <mtime>\n  function mtime(key, cb) {\n    var repo = repos[key];\n    repo.mtime(function(err, date) {\n      repo.last_updated = date;\n      cb(err, repo);\n    });\n  }\n  </mtime>\n\n  <asyncMap>\n  async.map(Object.keys(repos), mtime, function(err, repos) {\n    res.render('home.jade',  { repos: repos });\n  });\n  </asyncMap>\n}\n"], ["anonymousFunction", "\nfunction() {\n  if (OpenLayers.Control.prototype.activate.apply(this, arguments)) {\n    <addLayerAndRegister>\n    this.map.addLayer(this.gratLayer);\n    this.map.events.register('moveend', this, this.update);\n    </addLayerAndRegister>\n    <update>\n    this.update();\n    </update>\n    return true;\n  } else {\n    return false;\n  }\n}\n"], ["handleEvent", "\nfunction handleEvent(cmd, context, filename, callback) {\n  <parseAndRouteEvent>\n  var event = JSON.parse(cmd)\n  eventline.route(event)\n  </parseAndRouteEvent>\n}\n"], ["deployAsync", "\nasync function (showPrompts) {\n  <loggingStep>\n  logger.step('** Deploying utilityRegistrar Contract');\n  </loggingStep>\n\n  if (showPrompts) {\n    <displayAndVerifyDetails>\n    logger.info(\"Utility Chain Deployer Address: \" + utilityDeployerAddress);\n    logger.info(\"Foundation Address: \" + foundationAddress);\n    logger.info(\"Utility Chain Registrar User Address: \" + utilityRegistrarAddress);\n    await new Promise(\n      function (onResolve, onReject) {\n        prompts.question(\"Please verify all above details. Do you want to proceed? [Y/N]\", function (intent) {\n          if ((intent === 'Y') || (intent === 'y')) {\n            logger.info('Great! Proceeding deployment.');\n            prompts.close();\n            onResolve();\n          } else {\n            logger.error('Exiting deployment scripts. Change the env vars and re-run.');\n            process.exit(1);\n          }\n        });\n      }\n    );\n    </displayAndVerifyDetails>\n  } else {\n    <promptClosure>\n    prompts.close();\n    </promptClosure>\n  }\n\n  <deployUtilityRegistrarContract>\n  const utilityRegistrarContractDeployResult = await deployHelper.perform(utilityRegistrarContractName, web3Provider,\n    utilityRegistrarContractAbi, utilityRegistrarContractBin, utilityDeployerName,\n    {gasPrice: UC_GAS_PRICE, gas: UC_GAS_LIMIT});\n  </deployUtilityRegistrarContract>\n\n  <loggerAndOperations>\n  logger.step('** Setting opsAddress of utilityRegistrar Contract to utilityRegistrar');\n  const utilityRegistrarContractAddress = utilityRegistrarContractDeployResult.contractAddress\n    , utilityRegistrar = new UtilityRegistrarKlass(utilityRegistrarContractAddress);\n  await utilityRegistrar.setOpsAddress(utilityDeployerName, utilityRegistrarAddress,\n    {gasPrice: UC_GAS_PRICE, gas: UC_GAS_LIMIT});\n  </loggerAndOperations>\n\n  <checkOpsAddress>\n  const getOpsAddressResponse = await utilityRegistrar.getOpsAddress();\n  if (!utilityRegistrarAddress.equalsIgnoreCase(getOpsAddressResponse.data.address)) {\n    logger.error('Exiting the deployment as opsAddress of utilityRegistrar Contract does not match');\n    process.exit(1);\n  }\n  </checkOpsAddress>\n\n  <initiateOwnershipTransfer>\n  logger.step('** Initiating OwnerShipTransfer of utilityRegistrar Contract to foundation');\n  await utilityRegistrar.initiateOwnerShipTransfer(utilityDeployerName, foundationAddress,\n    {gasPrice: UC_GAS_PRICE, gas: UC_GAS_LIMIT});\n  </initiateOwnershipTransfer>\n\n  <verifyOwnershipTransfer>\n  const getOwnerResponse = await utilityRegistrar.getOwner();\n  if (!foundationAddress.equalsIgnoreCase(getOwnerResponse.data.address)) {\n    logger.error('Exiting the deployment as owner of utilityRegistrar Contract does not match');\n    process.exit(1);\n  }\n  </verifyOwnershipTransfer>\n\n  <returnSuccess>\n  return Promise.resolve(responseHelper.successWithData(\n    {contract: 'utilityRegistrar', address: utilityRegistrarContractAddress}));\n  </returnSuccess>\n}\n"], ["determineAttributes", "\nfunction(options, view) {\n  <evaluatingAttributes>\n  var attrs = options.attributes;\n  if (_.isFunction(attrs)) {\n    attrs = attrs(view);\n  } else if (_.isString(attrs) && (_.isFunction(defaultAttributeLoaders[attrs]))) {\n    attrs = defaultAttributeLoaders[attrs](view);\n  }\n  if (_.isArray(attrs)) {\n    return attrs;\n  }\n  </evaluatingAttributes>\n}\n"], ["updateIndices", "\nfunction updateIndicies(modifiedElements, cachedRecords) {\n  <processModifiedElements>\n  var updatedCachedRecords = {};\n  for (var i = 0, len = modifiedElements.length; i < len; i++) {\n    var modifiedElementLookup = modifiedElements[i];\n    var cachedRecord = cachedRecords[modifiedElementLookup.oldIndex];\n    if (cachedRecord) {\n      updatedCachedRecords[modifiedElementLookup.newIndex] = cachedRecord;\n      cachedRecord.element = modifiedElementLookup.element;\n      delete cachedRecords[modifiedElementLookup.oldIndex];\n    }\n  }\n  </processModifiedElements>\n  <cleanupCachedRecords>\n  var cachedRecordKeys = Object.keys(cachedRecords);\n  for (var i = 0, len = cachedRecordKeys.length; i < len; i++) {\n    var key = cachedRecordKeys[i],\n        record = cachedRecords[key];\n    if (!record.element || existingContainers[uniqueID(record.element)]) {\n      updatedCachedRecords[key] = record;\n    }\n  }\n  </cleanupCachedRecords>\n  return updatedCachedRecords;\n}\n"], ["login", "\nfunction login(options) {\n  <promiseForFBLogin>\n  return new Promise(function (resolve, reject) {\n    FB.login(function (response) {\n      <getUserInfo>\n      _getUser(response).then(function (userResponse) {\n        if(userResponse.user) {\n          resolve(userResponse);\n        } else {\n          reject(userResponse);\n        }\n      });\n      </getUserInfo>\n    }, options);\n  });\n  </promiseForFBLogin>\n}\n"], ["normaliseDeps", "\nfunction normaliseDeps (deps) {\n  <normaliseDependencies>\n  if (Array.isArray(deps)) {\n    deps = deps.reduce(function (d, depName) {\n      d[depName] = '*'\n      return d\n    }, {})\n  }\n  </normaliseDependencies>\n  return deps\n}\n"], ["TLconstructor", "\nfunction(elem, options) {\n  <elementInitialization>\n  this._el = {\n    container: {},\n    content_container: {},\n    major: {},\n    minor: {},\n  };\n  </elementInitialization>\n  \n  <textInitialization>\n  this._text = {};\n  </textInitialization>\n\n  <stateInitialization>\n  this._state = {\n    loaded: false\n  };\n  </stateInitialization>\n\n  <dataInitialization>\n  this.data = {};\n  </dataInitialization>\n\n  <optionsInitialization>\n  this.options = {\n    duration: 1000,\n    ease: TL.Ease.easeInSpline,\n    width: 600,\n    height: 600\n  };\n  </optionsInitialization>\n\n  <stateFlags>\n  this.active = false;\n  </stateFlags>\n\n  <animatorInitialization>\n  this.animator = {};\n  </animatorInitialization>\n\n  <helperEntitiesInitialization>\n  this.axis_helper = {};\n  this.minor_ticks = [];\n  this.major_ticks = [];\n  </helperEntitiesInitialization>\n\n  <dateFormatLookupSetup>\n  this.dateformat_lookup = {\n    millisecond: 'time_milliseconds',\n    second: 'time_short',\n    minute: 'time_no_seconds_short',\n    hour: 'time_no_minutes_short',\n    day: 'full_short',\n    month: 'month_short',\n    year: 'year',\n    decade: 'year',\n    century: 'year',\n    millennium: 'year',\n    age: 'compact',\n    epoch: 'compact',\n    era: 'compact',\n    eon: 'compact',\n    eon2: 'compact'\n  }\n  </dateFormatLookupSetup>\n\n  <containerElementInitialization>\n  if (typeof elem === 'object') {\n    this._el.container = elem;\n  } else {\n    this._el.container = TL.Dom.get(elem);\n  }\n  </containerElementInitialization>\n\n  <optionSetupAndInitialization>\n  TL.Util.mergeData(this.options, options);\n  </optionSetupAndInitialization>\n\n  <initFunctionCalls>\n  this._initLayout();\n  this._initEvents();\n  </initFunctionCalls>\n}\n"], ["projectEnvironmentMapGPU", "\nfunction projectEnvironmentMapGPU(renderer, envMap) {\n  <generateSHTexture>\n  var shTexture = new Texture2D({\n    width: 9,\n    height: 1,\n    type: Texture.FLOAT\n  });\n  </generateSHTexture>\n\n  <setupPass>\n  var pass = new Pass({\n    fragment: projectEnvMapShaderCode\n  });\n  pass.material.define('fragment', 'TEXTURE_SIZE', envMap.width);\n  pass.setUniform('environmentMap', envMap);\n  </setupPass>\n\n  <framebufferSetup>\n  var framebuffer = new FrameBuffer();\n  framebuffer.attach(shTexture);\n  </framebufferSetup>\n\n  <renderPass>\n  pass.render(renderer, framebuffer);\n  </renderPass>\n\n  <readCoefficients>\n  framebuffer.bind(renderer);\n  var pixels = new vendor.Float32Array(9 * 4);\n  renderer.gl.readPixels(0, 0, 9, 1, Texture.RGBA, Texture.FLOAT, pixels);\n  </readCoefficients>\n  \n  <mapPixelsToCoeff>\n  var coeff = new vendor.Float32Array(9 * 3);\n  for (var i = 0; i < 9; i++) {\n    coeff[i * 3] = pixels[i * 4];\n    coeff[i * 3 + 1] = pixels[i * 4 + 1];\n    coeff[i * 3 + 2] = pixels[i * 4 + 2];\n  }\n  </mapPixelsToCoeff>\n  \n  <cleanupFrameBufferAndPass>\n  framebuffer.unbind(renderer);\n  framebuffer.dispose(renderer);\n  pass.dispose(renderer);\n  </cleanupFrameBufferAndPass>\n\n  return coeff;\n}\n"], "```"]