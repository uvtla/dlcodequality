[["publishChanges", "\nfunction publishChanges (eventName, stateId) {\n      var subscriptions = instanceSubscriptions[instanceId];\n\n      if(!subscriptions) return;\n\n      subscriptions.forEach(function (response) {\n        response.write('event: ' + eventName +'\\n');\n        response.write('data: ' + stateId + '\\n\\n');\n      });\n}\n"], ["FieldDescriptor", "\nfunction(json){\n    if(!(this instanceof FieldDescriptor)){\n      return new FieldDescriptor(json);\n    }\n\n    if(FieldDescriptor.isInstance(json)){\n      return json;\n    }\n\n    this.init(json);\n}\n"], ["setContent", "\nfunction(_content){\n    if(_content === undefined){\n        if(!this[0]) throw Error(\"\u5185\u90e8\u8282\u70b9\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u5b8c\u6210get\u64cd\u4f5c\");\n        return this[0].value;\n    }\n    return this._$forEach(function(_node){\n        _node.value = _content;\n    });\n    return this;\n}\n"], ["getModuleInfos", "\nfunction () {\n    var self = this,\n        runtime = self.runtime;\n    return S.map(self.getNormalizedRequires(), function (r) {\n        return Utils.createModuleInfo(runtime, r);\n    });\n}\n"], ["iScrollService", "\nfunction iScrollService($rootScope, iScrollSignals) {\n    var _state = {\n        useIScroll: defaultOptions.directive.initiallyEnabled,\n        autoDetectedUseNativeScroll: useNativeScroll\n    };\n\n    <manageIScrollState>\n    function _disable(signalOnly) {\n        if (!signalOnly) {\n            _state.useIScroll = false;\n        }       \n        $rootScope.$emit(iScrollSignals.disabled);\n    }\n\n    function _enable(signalOnly) {\n        if (!signalOnly) {\n            _state.useIScroll = true;\n        }       \n        $rootScope.$emit(iScrollSignals.enabled);\n    }\n\n    function _toggle(signalOnly) {\n        (_state.useIScroll ^ signalOnly) ?  \n            _disable(signalOnly) : _enable(signalOnly);\n    }\n    </manageIScrollState>\n\n    <emitRefreshSignal>\n    function _refresh(name) {\n        $rootScope.$emit(iScrollSignals.refresh, name);\n    }\n    </emitRefreshSignal>\n\n    return {\n        defaults: defaultOptions,\n        state: _state,\n        versionCompare: versionCompare,\n        platform: platform,\n        enable: _enable,\n        disable: _disable,\n        toggle: _toggle,\n        refresh: _refresh\n    };\n}\n"], ["parseAttr", "\nfunction parseAttr() {\n    if ( reader.eof() ) {\n        return 0;\n    }\n\n    reader.skipBlank();\n    let oPos = {};\n    oPos.start = reader.getPos();\n\n    <keyExtraction>\n    let key = '', val = '';\n    ...\n    if ( key == '' ) {\n        return 0;\n    }\n    </keyExtraction>\n\n    oPos.end = reader.getPos();\n    <createAttributeNameToken>\n    let token = { type: options.TypeAttributeName, text: unescape(key), pos: oPos };\n    tokens.push(token);\n    </createAttributeNameToken>\n\n    reader.skipBlank();\n    oPos = {};\n    oPos.start = reader.getPos();\n\n    ...\n    </keyExtraction>\n\n    <valueExtraction>\n    reader.skipBlank();\n    oPos = {};\n    oPos.start = reader.getPos();\n    ...\n    while ( /[^\\s\\/>]/.test(reader.getCurrentChar()) ) {\n        val += reader.readChar();\n    }\n    </valueExtraction>\n\n    <handleParseErrors>\n    if ( val.trim() == '' ) {\n        let text = File.read(file);\n        ...\n        throw Err.cat('missing attribute value', 'file=' + file, new Err( {text, start, end} ));\n    }\n    </handleParseErrors>\n\n    <createAttributeValueToken>\n    oPos.end = reader.getPos();\n    token = { type: options.TypeAttributeValue, text: unescape(val), pos: oPos };\n    tokens.push(token);\n    </createAttributeValueToken>\n\n    return 1;\n}\n"], ["installPackages", "\nasync function installPackages(environment) {\n    const cwdBefore = process.cwd();\n    <buildUnreleasedPackages>\n    await buildUnreleasedPackages();\n    </buildUnreleasedPackages>\n    \n    <changeAndCleanDirectory>\n    process.chdir(path.resolve(__dirname, '../environments', environment));\n    console.log('\ud83d\uddd1\ufe0f  Removing packages for ' + environment);\n    await rimrafAsync('package-lock.json');\n    await rimrafAsync('node_modules');\n    </changeAndCleanDirectory>\n\n    <installEnvironmentPackages>\n    console.log('\ud83d\udcbf  Installing packages for ' + environment);\n    await execAsync('npm install');\n    </installEnvironmentPackages>\n\n    <restoreWorkingDirectory>\n    process.chdir(cwdBefore);\n    </restoreWorkingDirectory>\n}\n"], ["outDist", "\nfunction outDist(buildDir, nowVersion, devDir) {\n    ...\n\n    <prepareStaticDirectories>\n    let distStaticDir = `${config.distDir}/${config.staticDir}/${buildDir}/${nowVersion}`,\n        staticURL     = '',\n        buildName     = path.basename(buildDir),\n        styleType     = config.styleType === 'scss' ? 'scss' : 'css';\n\n    ...\n    </prepareStaticDirectories>\n\n    <copyImages>\n    fs.readdir(`${devDir}/js`, (err) => {\n        ...\n            task.src(`${devDir}/js*.*`)\n            .pipe(printMes('image'))\n            .pipe(task.dest(`${distStaticDir}/images/`));\n    });\n    </copyImages>\n\n    ...\n    \n    <copyFontsAndCompileStyles>\n    task.src(`${devDir}/font/*.*`)\n        ...\n        fs.readdir(`${devDir}/${styleType}`, (err) => {\n            ...\n        });\n    </copyFontsAndCompileStyles>\n\n    <processHtmlAndFinalize>\n    task.src(`${devDir}/*.html`)\n        ...\n        .pipe(touch());\n    </processHtmlAndFinalize>\n}\n"], ["handleMultiSelectEvents", "\nfunction (event) {\n    this.$AutoComplete._dom_onclick.call(this, event);\n    var element = event.target;\n    if (element.className === \"closeBtn\") {\n        this._removeMultiselectValue(element, event);\n        this._textInputField.focus();\n    }\n    if (element.className.indexOf(\"xMultiAutoComplete_Option_Text\") != -1) {\n        var highlightedSuggestions = this.getHighlight();\n        var index = this._getIndexFromNode(element.parentNode);\n        if (this.controller.freeText && ariaUtilsJson.equals(highlightedSuggestions, [index])) {\n            this._editMultiselectValue(element);\n        } else {\n            this.highlightOption(index);\n        }\n    }\n    this.__resizeInput();\n}\n"], ["lookahead", "\nfunction _lookahead(expr) {\n    var state = this.bt.current_state(),\n        ans = expr.call(this);\n    this.bt.restore(state);\n    return ans\n}\n"], ""]