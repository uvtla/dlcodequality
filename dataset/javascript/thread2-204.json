[["resolvePluginPath", "\nfunction resolvePluginPath(config, file, mdirs) {\n  if (_lodash2.default.size(config.plugins)) {\n    config.plugins = _lodash2.default.reduce(config.plugins, (res, p, k) => {\n      if (!_path2.default.isAbsolute(p)) {\n        if (p[0] === '.') {\n          p = _path2.default.join(file, p);\n        } else {\n          for (let dir of mdirs) {\n            p = _path2.default.join(dir, p);\n            if ((0, _utils.isDirectory)(p)) {\n              break;\n            }\n          }\n        }\n      }\n      res[k] = p;\n      return res;\n    }, {});\n  }\n}\n"], ["getConstructor", "\nfunction getConstructor(type, strict) {\n  var result = register.classes[type.qualifiedType] || register.abstracts[type.qualifiedType] ||\n    register.classes[type.type] || register.abstracts[type.type] ||\n    register.classes[type] || register.abstracts[type];\n  if (result) return result;\n\n  if (type.hierarchy != undefined) {\n    for (var i = 0; i <= type.hierarchy.length - 1; i++) {\n      var result = register.classes[type.hierarchy[i]] || register.abstracts[type.hierarchy[i]];\n      if (result) return result;\n    };\n  }\n  if (strict) {\n    var error = new SyntaxError(\"Unknown type '\" + type + \"'\")\n    error.type = type\n\n    throw error\n  }\n\n  console.warn(\"Unknown type '\", type, \"', using MediaObject instead\");\n  return register.abstracts.MediaObject;\n}\n"], ["processArcXMLResponse", "\nfunction processArcXMLResponse(data) {\n  <parseData>\n  if (typeof data == \"string\") {\n    var newData = new OpenLayers.Format.XML();\n    data = newData.read(data);\n  }\n  </parseData>\n  var response = new OpenLayers.Format.ArcXML.Response();\n\n  <parseErrorNode>\n  var errorNode = data.getElementsByTagName(\"ERROR\");\n\n  if (errorNode != null && errorNode.length > 0) {\n    response.error = this.getChildValue(errorNode, \"Unknown error.\");\n  } \n  </parseErrorNode>\n  else {\n    <parseResponseNode>\n    var responseNode = data.getElementsByTagName(\"RESPONSE\");\n    \n    if (responseNode == null || responseNode.length == 0) {\n      response.error = \"No RESPONSE tag found in ArcXML response.\";\n      return response;\n    }\n    \n    var rtype = responseNode[0].firstChild.nodeName;\n    if (rtype == \"#text\") {\n      rtype = responseNode[0].firstChild.nextSibling.nodeName;\n    }\n    </parseResponseNode>\n    \n    <parseBasedOnResponseType>\n    if (rtype == \"IMAGE\") {\n      <parseImageResponse>\n      var envelopeNode = data.getElementsByTagName(\"ENVELOPE\");\n      var outputNode = data.getElementsByTagName(\"OUTPUT\");\n      \n      if (envelopeNode == null || envelopeNode.length == 0) {\n        response.error = \"No ENVELOPE tag found in ArcXML response.\";\n      } else if (outputNode == null || outputNode.length == 0) {\n        response.error = \"No OUTPUT tag found in ArcXML response.\";\n      } else {\n        var envAttr = this.parseAttributes(envelopeNode[0]);\n        var outputAttr = this.parseAttributes(outputNode[0]);\n\n        if (typeof outputAttr.type == \"string\") {\n          response.image = {\n            envelope: envAttr,\n            output: {\n              type: outputAttr.type,\n              data: this.getChildValue(outputNode[0])\n            }\n          };\n        } else {\n          response.image = { envelope: envAttr, output: outputAttr };\n        }\n      }\n      </parseImageResponse>\n    } else if (rtype == \"FEATURES\") {\n      <parseFeaturesResponse>\n      var features = responseNode[0].getElementsByTagName(\"FEATURES\");\n  \n      var featureCount = features[0].getElementsByTagName(\"FEATURECOUNT\");\n      response.features.featurecount = featureCount[0].getAttribute(\"count\");\n  \n      if (response.features.featurecount > 0) {\n        var envelope = features[0].getElementsByTagName(\"ENVELOPE\");\n        response.features.envelope = this.parseAttributes(envelope[0], typeof(0));\n        \n        var featureList = features[0].getElementsByTagName(\"FEATURE\");\n        for (var fn = 0; fn < featureList.length; fn++) {\n          var feature = new OpenLayers.Feature.Vector();\n          var fields = featureList[fn].getElementsByTagName(\"FIELD\");\n\n          for (var fdn = 0; fdn < fields.length; fdn++) {\n            var fieldName = fields[fdn].getAttribute(\"name\");\n            var fieldValue = fields[fdn].getAttribute(\"value\");\n            feature.attributes[fieldName] = fieldValue;\n          }\n\n          var geom = featureList[fn].getElementsByTagName(\"POLYGON\");\n\n          if (geom.length > 0) {\n            var ring = geom[0].getElementsByTagName(\"RING\");\n\n            var polys = [];\n            for (var rn = 0; rn < ring.length; rn++) {\n              var linearRings = [];\n              linearRings.push(this.parsePointGeometry(ring[rn]));\n\n              var holes = ring[rn].getElementsByTagName(\"HOLE\");\n              for (var hn = 0; hn < holes.length; hn++) {\n                linearRings.push(this.parsePointGeometry(holes[hn]));\n              }\n              holes = null;\n              polys.push(new OpenLayers.Geometry.Polygon(linearRings));\n              linearRings = null;\n            }\n            ring = null;\n\n            if (polys.length == 1) {\n              feature.geometry = polys[0];\n            } else {\n              feature.geometry = new OpenLayers.Geometry.MultiPolygon(polys);\n            }\n          }\n\n          response.features.feature.push(feature);\n        }\n      }\n      </parseFeaturesResponse>\n    } else {\n      response.error = \"Unidentified response type.\";\n    }\n    </parseBasedOnResponseType>\n  }\n  return response;\n}\n"], ["reformatFormIdAndName", "\nfunction reformatFormIdAndName(submission) {\n  var formName = \"Unknown\";\n  <determineFormName>\n  if (submission && submission.formId && submission.formId.name) {\n    formName = submission.formId.name;\n  }\n\n  if (submission && submission.formSubmittedAgainst) {\n    formName = submission.formSubmittedAgainst.name;\n  }\n  </determineFormName>\n\n  <finalizeSubmission>\n  submission.formName = formName;\n  submission.formId = submission.formId.toString();\n  </finalizeSubmission>\n  \n  return submission;\n}\n"], ["initialize", "\nfunction initialize() {\n  <parseScriptArguments>\n  var scripts = document.getElementsByTagName('script');\n  var src = (scripts[scripts.length - 1] || {}).src || '';\n  var arg = src.indexOf('?') !== -1 ? src.split('?').pop() : '';\n  arg.replace(/(\\w+)(?:=([^&]*))?/g, function(a, key, value) {\n    settings[key] = (value || '').replace(/^(0|false)$/, '');\n  });\n  </parseScriptArguments>\n\n  <addEventListeners>\n  addEvent(eventNamePrefix + 'hashchange', onHashChange, false);\n  </addEventListeners>\n\n  <configureAPI>\n  var data = [locationDescriptors, locationObject, eventsDescriptors, global, historyDescriptors, historyObject];\n\n  if (isSupportStateObjectInHistory) {\n    delete historyDescriptors['state'];\n  }\n  \n  for(var i = 0; i < data.length; i += 2) {\n    for(var prop in data[i]) {\n      if (data[i].hasOwnProperty(prop)) {\n        if (typeof data[i][prop] !== 'object') {\n          data[i + 1][prop] = data[i][prop];\n        } else {\n          var descriptor = prepareDescriptorsForObject(data[i], prop, data[i][prop]);\n          if (!redefineProperty(data[i + 1], prop, descriptor, function(n, o) {\n            if (o === historyObject) {\n              global.history = historyObject = data[i + 1] = n;\n            }\n          })) {\n            removeEvent(eventNamePrefix + 'hashchange', onHashChange, false);\n            return false;\n          }\n\n          if (data[i + 1] === global) {\n            eventsList[prop] = eventsList[prop.substr(2)] = [];\n          }\n        }\n      }\n    }\n  }\n\n  historyObject['setup']();\n\n  if (settings['redirect']) {\n    historyObject['redirect']();\n  }\n\n  if (settings[\"init\"]) {\n    isUsedHistoryLocationFlag = 1;\n  }\n  </configureAPI>\n\n  <handleUnsupportedHistoryAPI>\n  if (!isSupportStateObjectInHistory && JSON) {\n    storageInitialize();\n  }\n\n  if (!isSupportHistoryAPI) {\n    document[addEventListenerName](eventNamePrefix + \"click\", onAnchorClick, false);\n  }\n  </handleUnsupportedHistoryAPI>\n\n  <finalizeInitialization>\n  if (document.readyState === 'complete') {\n    onLoad(true);\n  } else {\n    if (!isSupportHistoryAPI && parseURL()._relative !== settings[\"basepath\"]) {\n      isFireInitialState = true;\n    }\n    addEvent(eventNamePrefix + 'load', onLoad, false);\n  }\n  </finalizeInitialization>\n\n  return true;\n}\n"], ["jsonInit", "\nfunction jsonInit() {\n  this.jsonInit({\n    \"message0\": Blockly.Msg.LOOKS_GOTOFRONTBACK,\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"FRONT_BACK\",\n        \"options\": [\n          [Blockly.Msg.LOOKS_GOTOFRONTBACK_FRONT, 'front'],\n          [Blockly.Msg.LOOKS_GOTOFRONTBACK_BACK, 'back']\n        ]\n      }\n    ],\n    \"category\": Blockly.Categories.looks,\n    \"extensions\": [\"colours_looks\", \"shape_statement\"]\n  });\n}\n"], ["bytes2base64", "\nfunction bytes2base64(buffer) {\n  var str = '';\n  var length;\n  var i;\n  <convertBufferToString>\n  if (buffer instanceof ArrayBuffer) {\n    length = buffer.byteLength;\n    var view = new DataView(buffer, 0, length);\n    for (i = 0; i < length; i++) {\n      str += String.fromCharCode(view.getUint8(i, false));\n    }\n  }\n  else if (buffer.length) {\n    length = buffer.length;\n    for (i = 0; i < length; i++) {\n      str += String.fromCharCode(buffer[i]);\n    }\n  }\n  </convertBufferToString>\n  return btoa(str);\n}\n"], ["createWrappedRange", "\nfunction createWrappedRange(bookmark, paras) {\n  var so = bookmark.s.offset;\n  var eo = bookmark.e.offset;\n  var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);\n  var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);\n\n  return new WrappedRange(sc, so, ec, eo);\n}\n"], ["processNewMessage", "\nfunction processNewMessage(msg, mailMessage) {\n  <assignMailMessageData>\n  msg.payload = mailMessage.text;\n  msg.topic = mailMessage.subject;\n  msg.date = mailMessage.date;\n  msg.header = mailMessage.headers;\n  if (mailMessage.html) {\n    msg.html = mailMessage.html;\n  }\n  </assignMailMessageData>\n  <assignRecipientInfo>\n  if (mailMessage.to && mailMessage.to.length > 0) {\n    msg.to = mailMessage.to;\n  }\n  if (mailMessage.cc && mailMessage.cc.length > 0) {\n    msg.cc = mailMessage.cc;\n  }\n  if (mailMessage.bcc && mailMessage.bcc.length > 0) {\n    msg.bcc = mailMessage.bcc;\n  }\n  </assignRecipientInfo>\n  <assignSenderInfo>\n  if (mailMessage.from && mailMessage.from.length > 0) {\n    msg.from = mailMessage.from[0].address;\n  }\n  </assignSenderInfo>\n  <handleAttachments>\n  if (mailMessage.attachments) {\n    msg.attachments = mailMessage.attachments;\n  } else {\n    msg.attachments = [];\n  }\n  </handleAttachments>\n  n.send(msg); \n}\n"], ["AppConstructor", "\nfunction App(options) {\n  if (!(this instanceof App)) {\n    return new App(options);\n  }\n\n  <validateOptions>\n  if (options.host === undefined || options.port === undefined) {\n    var err = new Error('host and port are required to connect');\n    err.code = constants.InvalidRequest;\n    throw err;\n  }\n  </validateOptions>\n\n  <setImmutableProperties>\n  this.sdkVersion = '1.0.1';\n  Object.defineProperty(this, \"sdkVersion\", { writable: false });\n\n  this.host = options.host;\n  Object.defineProperty(this, \"host\", { writable: false });\n\n  this.port = options.port;\n  Object.defineProperty(this, \"port\", { writable: false });\n  </setImmutableProperties>\n\n  <initializeProperties>\n  this.authData = null;\n\n  this.acls = null;\n\n  this.lastCts = 0;\n\n  this.operationQueue = [];\n  this.queueDraining = false;\n\n  this.listeners = [];\n\n  this.advanceScheduled = {};\n\n  this.rvtsDict = {};\n\n  this.memoryDB = {};\n  this.vtsIndex = {};\n  </initializeProperties>\n\n  <initializeTransport>\n  this.transport = new Transport(this, this.host, this.port);\n  this.transport.token = options.token || null;\n  if (options.useSSL === false) {\n    this.transport.useSSL = false;\n  }\n  </initializeTransport>\n}\n"], "```"]