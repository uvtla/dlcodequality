[["qsort", "\nfunction qsort(array, l, r, func) {\n    if(l < r) {\n        var i = l, j = r;\n        var x = array[l];\n\n        while(i < j) {\n            while(i < j && func(x, array[j])) j--;\n            array[i] = array[j];\n            while(i < j && func(array[i], x)) i++;\n            array[j] = array[i];\n        }\n        array[i] = x;\n\n        qsort(array, l, i - 1, func);\n        qsort(array, i + 1, r, func);\n    }\n}\n"], ["deserializeConstructor", "\nfunction(key, value, getTypeId, getConstructor) {\n    var typeId = getTypeId(value);\n    if (typeId) {\n        var ctor = getConstructor(typeId);\n        if (ctor) {\n            if (ctor.fromJSON) {\n                return ctor.fromJSON(value);\n            }\n\n            return new ctor(value);\n        }\n    }\n\n    return value;\n}\n"], ["generateSidebar", "\nfunction generateSidebar(statusMap, nextPipelineId, rootElement) {\n  var currentElement = null;\n\n  if (nextPipelineId) {\n    currentElement = $('<li>');\n    currentElement.attr('id', 'item-pipeline-' + nextPipelineId);\n  } else {\n    currentElement = rootElement;\n    nextPipelineId = statusMap.rootPipelineId;\n  }\n\n  var parentInfoMap = statusMap.pipelines[nextPipelineId];\n  currentElement.append(\n      constructStageNode(nextPipelineId, parentInfoMap, true));\n\n  if (statusMap.pipelines[nextPipelineId]) {\n    var children = statusMap.pipelines[nextPipelineId].children;\n    if (children.length > 0) {\n      var treeElement = null;\n      if (rootElement) {\n        treeElement =\n            $('<ul id=\"pipeline-tree\" class=\"treeview-black treeview\">');\n      } else {\n        treeElement = $('<ul>');\n      }\n\n      $.each(children, function(index, childPipelineId) {\n        var childElement = generateSidebar(statusMap, childPipelineId);\n        treeElement.append(childElement);\n      });\n      currentElement.append(treeElement);\n    }\n  }\n  return currentElement;\n}\n"], ["JsonParserToMinifiy", "\nfunction JsonParserToMinifiy() {\n    Parser.call(this, allTokens)\n    var $ = this\n\n    this.RULE(\"json\", function() {\n        $.OR([\n            {ALT: function() {$.SUBRULE($.object)}},\n            {ALT: function() {$.SUBRULE($.array)}}\n        ])\n    })\n\n    this.RULE(\"object\", function() {\n        $.CONSUME(LCurly)\n        $.OPTION(function() {\n            $.SUBRULE($.objectItem)\n            $.MANY(function() {\n                $.CONSUME(Comma)\n                $.SUBRULE2($.objectItem)\n            })\n        })\n        $.CONSUME(RCurly)\n    })\n\n    this.RULE(\"objectItem\", function() {\n        $.CONSUME(StringLiteral)\n        $.CONSUME(Colon)\n        $.SUBRULE($.value)\n    })\n\n    this.RULE(\"array\", function() {\n        $.CONSUME(LSquare)\n        $.OPTION(function() {\n            $.SUBRULE($.value)\n            $.MANY(function() {\n                $.CONSUME(Comma)\n                $.SUBRULE2($.value)\n            })\n        })\n        $.CONSUME(RSquare)\n    })\n\n    this.RULE(\"value\", function() {\n        $.OR([\n            {ALT: function() {$.CONSUME(StringLiteral)}},\n            {ALT: function() {$.CONSUME(NumberLiteral)}},\n            {ALT: function() {$.SUBRULE($.object)}},\n            {ALT: function() {$.SUBRULE($.array)}},\n            {ALT: function() {$.CONSUME(True)}},\n            {ALT: function() {$.CONSUME(False)}},\n            {ALT: function() {$.CONSUME(Null)}}\n        ])\n    })\n\n    this.performSelfAnalysis()\n}\n"], ["encodeSysexEvent", "\nfunction encodeSysexEvent(event) {\n    var cursor, length;\n\n    length = encodeVarInt(event.data.length);\n    cursor = new BufferCursor(new buffer.Buffer(\n        1 + length.length + event.data.length\n    ));\n\n    cursor.writeUInt8(0xF0 | event.type);\n    cursor.copy(length);\n    cursor.copy(event.data);\n\n    return cursor.buffer;\n}\n"], ["_getPadding", "\nfunction _getPadding (source, char, len) {\n    if (!isNil(source) && type(source) !== \"String\") {\n        source = String(source);\n    }\n\n    return _repeat(String(char)[0] || \"\", Math.ceil(len - source.length));\n}\n"], ["manageMarkerSelection", "\nfunction(evt) {\n    var sameMarkerClicked = (this == this.layer.selectedFeature);\n    this.layer.selectedFeature = (!sameMarkerClicked) ? this : null;\n    for(var i=0, len=this.layer.map.popups.length; i<len; i++) {\n        this.layer.map.removePopup(this.layer.map.popups[i]);\n    }\n    if (!sameMarkerClicked) {\n        this.layer.map.addPopup(this.createPopup()); \n    }\n    OpenLayers.Event.stop(evt);\n}\n"], ["resolveType", "\nfunction resolveType(o) {\n    var FNType;\n    if (typeof o.type === \"string\" ) {\n        if ( o.type[0] === \".\" ) {\n            FNType = ObjectPath.get(o.type.slice(1), oEnv.oContext);\n        } else {\n            FNType = ObjectPath.get(o.type);\n        }\n        \n        if (typeof FNType === \"function\") {\n            o.type = new FNType(o.formatOptions, o.constraints);\n        } else {\n            o.type = FNType;\n        }\n        \n        delete o.formatOptions;\n        delete o.constraints;\n    }\n}\n"], ["ADXL345", "\nfunction ADXL345(board) {\n    Module.call(this);\n    this._board = board;\n    this._baseAxis = 'z';\n    this._sensitive = 10;\n    this._detectTime = 50;\n    this._messageHandler = onMessage.bind(this);\n    this._init = false;\n    this._info = {\n      x: 0,\n      y: 0,\n      z: 0,\n      fXg: 0,\n      fYg: 0,\n      fZg: 0\n    };\n    this._callback = function () {};\n    this._board.send([0xf0, 0x04, 0x0b, 0x00, 0xf7]);\n}\n"], ["knFetchAll", "\nfunction knFetchAll(args, callback)\n{\n    var sources;\n\n    sources = args['sources'];\n    knValidateSources(sources);\n\n    <fetchAll>\n    knFetchSnapshots(sources, args['clientOptions'] || {},\n        function (err, snapshots) {\n            if (snapshots)\n                snapshots = knMergeSnapshots(snapshots);\n            callback(err, snapshots);\n        });\n    </fetchAll>\n}\n"], ""]