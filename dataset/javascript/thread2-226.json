[["watchFileEvent", "\nfunction(file, event, callback) {\n    <searchFileInWatchList>\n    for(var i = 0; i < watchList.length; i++) {\n        if(watchList[i].file === file) {\n            watchers[i].on(event, wrapCallback(callback, watchList[i].expression));\n            watchList[i].callback[event] = callback;\n            return;\n        }\n    }\n    </searchFileInWatchList>\n    throw new Error(file + \" was not being watched previously\");\n}\n"], ["generateSchemaForValidation", "\nfunction _generate(schemaName) {\n  var schema = generateSchema(schemaName, this._instructions, this._macros, this._opts.strict);\n  this.ajv.removeSchema(schema.id);\n  return schema;\n}\n"], ["handleVersionMismatch", "\nfunction sendVersionMiss() {\n    var adapter = requireModule('ember-debug/adapters/' + currentAdapter)['default'].create();\n    <listenForVersionCheck>\n    adapter.onMessageReceived(function(message) {\n      if (message.type === 'check-version') {\n        sendVersionMismatch();\n      }\n    });\n    </listenForVersionCheck>\n    sendVersionMismatch();\n\n    <sendVersionMismatchNotification>\n    function sendVersionMismatch() {\n      adapter.sendMessage({\n        name: 'version-mismatch',\n        version: Ember.VERSION,\n        from: 'inspectedWindow'\n      });\n    }\n    </sendVersionMismatchNotification>\n  }\n"], ["checkPrimitiveOrDate", "\nfunction __isPrimitive(obj) {\n  if (obj == null) return false;\n  \n  if (obj != Object(obj)) return true;\n  return __isDate(obj);\n}\n"], ["initialiseWebSocketServer", "\nfunction (server) {\n    <loadHandler>\n    if (handler) {\n        handler = require(require('path').resolve() + '/' + handler);\n    } else {\n        console.log('No handler defined for websocket server, not starting websocket.');\n        return;\n    }\n    </loadHandler>\n    \n    <createWebSocketServer>\n    var WebSocketServer = require('websocket').server;\n    var wsServer = new WebSocketServer({\n        httpServer: server\n    });\n    </createWebSocketServer>\n    \n    <attachRequestHandler>\n    wsServer.on('request', handler);\n    </attachRequestHandler>\n}\n"], ["performVectorProjection", "\nfunction project (out, vec, m) {\n  <assignVariables>\n  var x = vec[0],\n    y = vec[1],\n    z = vec[2],\n    a00 = m[0], a01 = m[1], a02 = m[2], a03 = m[3],\n    a10 = m[4], a11 = m[5], a12 = m[6], a13 = m[7],\n    a20 = m[8], a21 = m[9], a22 = m[10], a23 = m[11],\n    a30 = m[12], a31 = m[13], a32 = m[14], a33 = m[15]\n  </assignVariables>\n\n  <calculateProjectedVector>\n  var lw = 1 / (x * a03 + y * a13 + z * a23 + a33)\n\n  out[0] = (x * a00 + y * a10 + z * a20 + a30) * lw\n  out[1] = (x * a01 + y * a11 + z * a21 + a31) * lw\n  out[2] = (x * a02 + y * a12 + z * a22 + a32) * lw\n  </calculateProjectedVector>\n\n  return out\n}\n"], ["constructorDiscoveredBridge", "\nfunction DiscoveredBridge (ip, port) {\n  <handleWithoutNew>\n  if (!(this instanceof DiscoveredBridge)) {\n    return new DiscoveredBridge(ip, port);\n  }\n  </handleWithoutNew>\n\n  this.ip = ip;\n  this.port = port;\n}\n"], ["createChatDialog", "\nfunction(params, callback) {\n    <prepareOccupantsIds>\n    if (params && params.occupants_ids && Utils.isArray(params.occupants_ids)) {\n        params.occupants_ids = params.occupants_ids.join(', ');\n    }\n    </prepareOccupantsIds>\n\n    <sendChatDialogRequest>\n    this.service.ajax({\n        url: Utils.getUrl(DIALOGS_API_URL),\n        type: 'POST',\n        data: params\n    }, callback);\n    </sendChatDialogRequest>\n}\n"], ["getSiblingElements", "\nfunction getSiblings(el) {\n    <gatherAllSiblings>\n    const allSiblings = getPreviousSiblings(el).concat(getNextSiblings(el));\n    </gatherAllSiblings>\n\n    <filterSiblings>\n    return allSiblings.filter(filterSibling);\n    </filterSiblings>\n}\n"], ["showHintForStep", "\nfunction _showHint(stepId) {\n    <findAndModifyHintElement>\n    var hint = this._targetElement.querySelector('.introjs-hint[data-step=\"' + stepId + '\"]');\n\n    if (hint) {\n        hint.className = hint.className.replace(/introjs\\-hidehint/g, '');\n    }\n    </findAndModifyHintElement>\n}\n"], "```"]