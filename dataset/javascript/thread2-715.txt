```javascript
<funnelPiece>
function FunnelPiece(data, idx) {

    graphic.Group.call(this);

    var polygon = new graphic.Polygon();
    var labelLine = new graphic.Polyline();
    var text = new graphic.Text();
    this.add(polygon);
    this.add(labelLine);
    this.add(text);

    this.highDownOnUpdate = function (fromState, toState) {
        if (toState === 'emphasis') {
            labelLine.ignore = labelLine.hoverIgnore;
            text.ignore = text.hoverIgnore;
        }
        else {
            labelLine.ignore = labelLine.normalIgnore;
            text.ignore = text.normalIgnore;
        }
    };

    this.updateData(data, idx, true);
}
</funnelPiece>

<computedProperty>
function ComputedProperty(config, opts) {
    this.isDescriptor = true;
    <handleFunctionConfig>
    if (typeof config === 'function') {
      this._getter = config;
    } else {
      _emberMetalDebug.assert('Ember.computed expects a function or an object as last argument.', typeof config === 'object' && !Array.isArray(config));
      _emberMetalDebug.assert('Config object pased to a Ember.computed can only contain `get` or `set` keys.', (function () {
        var keys = Object.keys(config);
        for (var i = 0; i < keys.length; i++) {
          if (keys[i] !== 'get' && keys[i] !== 'set') {
            return false;
          }
        }
        return true;
      })());
      this._getter = config.get;
      this._setter = config.set;
    }
    _emberMetalDebug.assert('Computed properties must receive a getter or a setter, you passed none.', !!this._getter || !!this._setter);
    </handleFunctionConfig>
    this._dependentKeys = undefined;
    this._suspended = undefined;
    this._meta = undefined;
    this._volatile = false;
    this._dependentKeys = opts && opts.dependentKeys;
    this._readOnly = false;
  }
</computedProperty>

<trimTrailingBr>
function trimTrailingBr(rootNode) {
      var brNode1, brNode2;

      <isBrFunction>
      function isBr(node) {
        return node && node.name === 'br';
      }
      </isBrFunction>

      brNode1 = rootNode.lastChild;
      if (isBr(brNode1)) {
        brNode2 = brNode1.prev;

        if (isBr(brNode2)) {
          brNode1.remove();
          brNode2.remove();
        }
      }
    }
</trimTrailingBr>

<calcMinimalDistance>
function (line, p) {
        var minDist = Infinity;
        var minX, minY, minI, minT;

<calculateDistances>
        for (var i = 0; i < line.length - 1; i++) {

            var x = line[i][0];
            var y = line[i][1];
            var dx = (line[i + 1][0] - x) * this.kx;
            var dy = (line[i + 1][1] - y) * this.ky;

            if (dx !== 0 || dy !== 0) {

                var t = ((p[0] - x) * this.kx * dx + (p[1] - y) * this.ky * dy) / (dx * dx + dy * dy);

                if (t > 1) {
                    x = line[i + 1][0];
                    y = line[i + 1][1];

                } else if (t > 0) {
                    x += (dx / this.kx) * t;
                    y += (dy / this.ky) * t;
                }
            }

            dx = (p[0] - x) * this.kx;
            dy = (p[1] - y) * this.ky;

            var sqDist = dx * dx + dy * dy;
            if (sqDist < minDist) {
                minDist = sqDist;
                minX = x;
                minY = y;
                minI = i;
                minT = t;
            }
        }
</calculateDistances>

        return {
            point: [minX, minY],
            index: minI,
            t: Math.max(0, Math.min(1, minT))
        };
    }
</calcMinimalDistance>

<tokensToFunction>
function tokensToFunction (tokens) {
  
<initializeMatches>
  var matches = new Array(tokens.length);
</initializeMatches>

<compileRegex>
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }
</compileRegex>

<returnPathFunction>
  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

<generatePath>
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (index$1(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }
</generatePath>

    return path
  }
</returnPathFunction>
</tokensToFunction>

<checkDomain>
function checkDomain(result) {
  
<returnDomainFunction>
  return function(domain, options, callback) {
    result.domain = domain;
    return callback(null, true);
  };
</returnDomainFunction>
</checkDomain>

<findTopdocComments>
function _findTopdocComments(css, regex, includeNodes) {
<initializeComponents>
  const components = [];
</initializeComponents>
  let currentComponentIndex;

<iterateCSS>
  css.walk((node) => {
    if (node.type === 'comment' && node.text.match(regex)) {
      components.push(_parseTopdocComment(node, regex, includeNodes));
      currentComponentIndex = components.length - 1;
      debug(`Started adding ${components[currentComponentIndex].name}`);
    } else if (components.length && node.type !== 'decl') {
      if (includeNodes) components[currentComponentIndex].nodes.push(node);
      components[currentComponentIndex].css += node.toString();
      debug(`Added ${node.type} to ${components[currentComponentIndex].name}`);
    }
  });
</iterateCSS>

  return components;
}
</findTopdocComments>

<handleFragments>
function ( fragment ) {
  		if ( !batch ) return;

  		var b = batch;
  		<locateBaseBatch>
  		while ( b.previousBatch ) {
  			b = b.previousBatch;
  		}
  		</locateBaseBatch>

  		<addFragmentToArray>
  		addToArray( b.fragments, fragment );
  		</addFragmentToArray>
  	}
</handleFragments>

<isZeitWorld>
function isZeitWorld(ns) {
  <returnFalseIfEmpty>
  if (!ns.length) {
    return false;
  }
  </returnFalseIfEmpty>
  
  <checkEachHost>
  return ns.every(host => host.endsWith('.zeit.world'));
  </checkEachHost>
}
</isZeitWorld>

<renderAttrs>
function renderAttrs (node) {
  var attrs = node.data.attrs;
  var res = '';

<inheritAttributes>
  var opts = node.parent && node.parent.componentOptions;
  if (isUndef(opts) || opts.Ctor.options.inheritAttrs !== false) {
    var parent = node.parent;
    while (isDef(parent)) {
      if (isDef(parent.data) && isDef(parent.data.attrs)) {
        attrs = extend(extend({}, attrs), parent.data.attrs);
      }
      parent = parent.parent;
    }
  }
</inheritAttributes>

<checkUndefAttrs>
  if (isUndef(attrs)) {
    return res
  }
</checkUndefAttrs>

<constructAttributeString>
  for (var key in attrs) {
    if (isSSRUnsafeAttr(key)) {
      continue
    }
    if (key === 'style') {
      
      continue
    }
    res += renderAttr(key, attrs[key]);
  }
</constructAttributeString>
  
  return res
}
</renderAttrs>
```

Each function is annotated with tags indicating its compliance or violation of the Single Responsibility Principle (SRP). Functions that contain nested tags hold distinct responsibilities, which might be considered a breach of SRP. Functions without such nested tags are more likely to comply with SRP as they have a single cohesive responsibility.