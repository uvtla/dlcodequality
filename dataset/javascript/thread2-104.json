[["encoding", "\nfunction encoding(req, res) {\n  <findRawKey>\n  var obj = req.db.getRawKey(req.args[0], req);\n  </findRawKey>\n  <returnNullOnUndefined>\n  if(obj === undefined) return res.send(null, null);\n  </returnNullOnUndefined>\n  <sendEncodingResponse>\n  res.send(null, getEncoding(\n    req.db.getType(req.args[0]), obj.v, this.state.conf));\n  </sendEncodingResponse>\n}\n"], ["shareFile", "\nfunction shareFile(metadata) {\n  <createSharedLinkWithSettings>\n  return dropbox.sharingCreateSharedLinkWithSettings({\n    path: metadata.path_display || metadata.path_lower\n  }).then(\n  </createSharedLinkWithSettings>\n  <processDropboxResult>\n    result => ({\n      ...result,\n      folder_link: KEPLER_DROPBOX_FOLDER_LINK,\n      url: overrideUrl(result.url)\n    })\n  </processDropboxResult>\n  );\n}\n"], ["modifyUIOnError", "\nfunction() {\n    <configureHtmlBridge>\n    var htmlBridge = _getHtmlBridge(_flashState.bridge);\n    if (htmlBridge) {\n      htmlBridge.removeAttribute(\"title\");\n      htmlBridge.style.left = \"0px\";\n      htmlBridge.style.top = \"-9999px\";\n      htmlBridge.style.width = \"1px\";\n      htmlBridge.style.height = \"1px\";\n    }\n    </configureHtmlBridge>\n    <resetCurrentElementClasses>\n    if (_currentElement) {\n      _removeClass(_currentElement, _globalConfig.hoverClass);\n      _removeClass(_currentElement, _globalConfig.activeClass);\n      _currentElement = null;\n    }\n    </resetCurrentElementClasses>\n}\n"], ["wnBuild", "\nfunction wnBuild(classes,parent)\n{\n  <preliminaryChecks>\n  self=this;\n\n  if (!parent.getModulePath || !parent.getClassName || !parent.npmPath)\n    { return false; }\n  </preliminaryChecks>\n\n  <initialization>\n  buildStart=+new Date;\n\n  \n  this.parent = parent;\n\n  \n  this.classesPath = {};\n  \n  this.classesCode = {};\n  \n  this.classesBuild = {};\n  \n  this.classesObject = {};\n  \n  this.classesCompiler = {};\n  \n  this.classes = {};\n  \n  this.paramTypes = {};\n\n  \n  this.prototypeSource = {};\n  \n  this.compiledProtoSource = {};\n  \n  this.vmProtoScript = {};\n\n  \n  this.modulePath = parent.getModulePath() || '.';\n  this.npmPath = parent.npmPath || [];\n  this.moduleClass = parent.getClassName() || 'WNS';\n  </initialization>\n\n  <manageSourcesAndLoadModules>\n  this.loadedModules = {\n    q: q,\n    lodash: lodash\n  };\n\n  for (c in classes)\n  {\n    if (_.isString(classes[c]))\n      this.addSource(c,classes[c],true);\n    else if (_.isArray(classes[c]))\n    {\n      for (l in classes[c])\n        this.addSource(c,classes[c][l],true);\n    }\n  }\n\n  this.load();\n  </manageSourcesAndLoadModules>\n}\n"], ["handlePatterns", "\nfunction(language, patterns, bypass) {\n  <adjustParameters>\n  if (arguments.length == 1) {\n      patterns = language;\n      language = DEFAULT_LANGUAGE;\n  }\n  </adjustParameters>\n  \n  <setPatternsAndBypass>\n  bypass_defaults[language] = bypass;\n  language_patterns[language] = patterns.concat(language_patterns[language] || []);\n  </setPatternsAndBypass>\n}\n"], ["castDuration", "\nfunction castDuration(format, value) {\n  <validateAndTransform>\n  if (!moment.isDuration(value)) {\n    if (!isString(value)) {\n      return ERROR\n    }\n    try {\n      if (!value.startsWith('P')) {\n        return ERROR\n      }\n      value = moment.duration(value)\n      if (!value.as('milliseconds')) {\n        return ERROR\n      }\n    } catch (error) {\n      return ERROR\n    }\n  }\n  </validateAndTransform>\n  <returnValidValue>\n  return value\n  </returnValidValue>\n}\n"], ["directiveSetup", "\nfunction() {\n  return {\n    restrict: 'A',\n    require: '?ngModel',\n    <linkFunction>\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n\n      var maxlength = -1;\n      <observeMaxLength>\n      attr.$observe('maxlength', function(value) {\n        var intVal = toInt(value);\n        maxlength = isNaN(intVal) ? -1 : intVal;\n        ctrl.$validate();\n      });\n      </observeMaxLength>\n      <validators>\n      ctrl.$validators.maxlength = function(modelValue, viewValue) {\n        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);\n      };\n      </validators>\n    }\n    </linkFunction>\n  };\n}\n"], ["completeTask", "\nfunction (result, cb) {\n  <initializeSelf>\n  var self = this;\n  </initializeSelf>\n  <respondActivityTaskCompleted>\n  this.swfClient.respondActivityTaskCompleted({\n      result: stringify(result),\n      taskToken: this.config.taskToken\n  }, function (err) {\n      <onDoneCallback>\n      if (self.onDone) {\n          self.onDone();\n      }\n      </onDoneCallback>\n      <callCallback>\n      if (cb) {\n          cb(err);\n      }\n      </callCallback>\n\n  });\n  </respondActivityTaskCompleted>\n}\n"], ["granularity", "\nfunction granularity(granularity) {\n  <validationAndReturnObject>\n  if (utils.isObject(granularity)) {\n    return granularity\n  }\n  </validationAndReturnObject>\n  <validationAndReturnString>\n  else if (typeof granularity === 'string' && ~GRANULARITIES.indexOf(granularity)) {\n    return granularity\n  }\n  </validationAndReturnString>\n\n  <errorHandling>\n  if (!formatters.hasOwnProperty(granularity)) {\n    throw new FieldError('Bad granularity type: ' + granularity)\n  }\n  </errorHandling>\n\n  <applyFormatters>\n  var args = utils.args(arguments, 1)\n    , spec = {\n      type: granularity\n    }\n\n  formatters[granularity].apply(spec, args)\n  </applyFormatters>\n\n  <returnSpec>\n  return spec\n  </returnSpec>\n}\n"], ["Client", "\nfunction Client(token, options) {\n  <initializeProperties>\n  this.token = token;\n  this.options = options;\n  </initializeProperties>\n\n  <setupRequestDefaults>\n  this.requestOptions = this.options && this.options.requestOptions || {};\n  this.request = this.options && this.options.request || request;\n  this.promise = this.options && this.options.promise || Promise;\n  this.decamelizeKeys = this.options ? this.options.decamelizeKeys : true;\n\n  var version = require('../../package.json').version;\n  this.requestDefaults = {\n    headers: {\n      'User-Agent': 'digitalocean-node/' + version,\n      'Content-Type': 'application/json'\n    }\n  };\n  </setupRequestDefaults>\n\n  <initializeAPIs>\n  this.version = 'v2';\n  this.host = 'api.digitalocean.com';\n\n  this.account = new Account(this);\n  this.actions = new Action(this);\n  this.volumes = new Volume(this);\n  this.certificates = new Certificate(this);\n  this.domains = new Domain(this);\n  this.droplets = new Droplet(this);\n  this.floatingIps = new FloatingIp(this);\n  this.firewalls = new Firewall(this);\n  this.images = new Image(this);\n  this.loadBalancers = new LoadBalancer(this);\n  this.regions = new Region(this);\n  this.sizes = new Size(this);\n  this.snapshots = new Snapshot(this);\n  this.tags = new Tag(this);\n  </initializeAPIs>\n}\n"], "```"]