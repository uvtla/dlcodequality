[["getYearsList", "\nfunction getYearsList() {\n  var yearsList = [];\n  for (var i = 2005; i <= moment().year(); i++) {\n    yearsList.push(i);\n  }\n  return yearsList;\n}\n"], ["handleDocumentQueryRender", "\nfunction () {\n  \n  let fn = function handleDocumentQueryRender (opts = {}, callback) {\n    let { extname, viewname, themefileext, viewfileext, responseData } = opts;\n    let themename = this.theme;\n    let fileext = (typeof themefileext === 'string') ? themefileext : viewfileext;\n    return <generateRender>\n    this._utility_responder.render(responseData || {}, Object.assign(opts, { themename, fileext, skip_response: true }))\n    </generateRender>\n      .then(result => {\n        <respondToClient>\n        this.protocol.respond(opts.req, opts.res, {\n          responder_override: result\n        });\n        </respondToClient>\n        if (typeof callback === 'function') callback(null, result);\n        else return Promisie.resolve(result);\n      })\n      .catch(e => {\n        <handleError>\n        this.protocol.error(opts.req, opts.res, { err: e });\n        </handleError>\n        if (typeof callback === 'function') callback(e);\n        else return Promisie.reject(e);\n      });\n  };\n  let message = 'CoreController.handleDocumentQueryRender: Use CoreController.responder.render with an HTML adapter or CoreController._utility_responder.render instead';\n  return <issueDeprecationWarning>\n  wrapWithDeprecationWarning.call(this, fn, message);\n  </issueDeprecationWarning>\n}\n"], ["getBackgroundPosition", "\nfunction getBackgroundPosition(image) {\n  var logicValue = image.isSVG ? 1 : -1;\n  var x = logicValue * (image.ratio > 1 ? image.coordinates.x / image.ratio : image.coordinates.x);\n  var y = logicValue * (image.ratio > 1 ? image.coordinates.y / image.ratio : image.coordinates.y);\n  <generateCssTemplate>\n  var template = _.template('<%= (x ? x + \"px\" : x) %> <%= (y ? y + \"px\" : y) %>');\n  return template({x: x, y: y});\n  </generateCssTemplate>\n}\n"], ["chainListeners", "\nfunction (listeners, context) {\n  if (listeners.type) {\n    <setupKeydownListener>\n    this._chainListener(listeners, \"keydown\", {\n      fn : keyDownToType,\n      scope : this,\n      args : ariaUtilsType.isArray(listeners.type) ? listeners.type : [listeners.type]\n    });\n    </setupKeydownListener>\n    <cleanupListeners>\n    delete listeners.type;\n    </cleanupListeners>\n  }\n}\n"], ["complexRequestHandler", "\nfunction (transport, method, path, plain, header, session, callback){\n  var self = this,\n      err;\n  if (transport === 'http' || transport === 'ws') {\n    log.debug('%s perform a %s request', app.name, (transport === 'ws' ? 'websocket' : 'http'));\n    \n    <composeRequest>\n    this.composeRequest(header, path, method, transport);\n    </composeRequest>\n    \n    this.request.end(function(err, res) {\n      <logAndHandleResponse>\n      logResponse(err, res);\n      </logAndHandleResponse>\n      if (err) {\n        callback(err, res);\n\n      } else if (path === my.config.logoutPath) {\n        \n        <destroySession>\n        sessionStore.destroy.call(sessionStore, my.config.urlBase);\n        </destroySession>\n        \n        callback(null, res);\n      } else {\n        <processHeader>\n        my.processHeader(res, function(procErr, result) {\n        </processHeader>\n          \n          if (!procErr) {\n            \n            <saveSessionToken>\n            session.token = result.parsedHeader.content.token;\n            </saveSessionToken>\n            <saveSession>\n            sessionStore.save(my.config.urlBase, session, function(saveErr) {\n            </saveSession>\n              if (!saveErr) {\n                log.debug('%s saved session', app.name);\n                log.debug(session);\n                if (!(plain || self._noAuthHeader || path === my.config.logoutPath)) {\n                  \n                  <decryptResponseBody>\n                  res.body = my.decryptBody(result, header);\n                  </decryptResponseBody>\n                }\n                callback(err, result);\n              } else {\n                err = 'save session error';\n                log.error('%s %s', app.name, err);\n                callback(err);\n              }\n            });\n          } else {\n            callback(procErr);\n          }\n        });\n      }\n    });\n  } else {\n    err = 'unknown transport';\n    log.error('%s %s %s', app.name, err, transport);\n    callback(err);\n  }\n}\n"], ["updateSiblingsGraphics", "\nfunction ($oneSibling, siblingCount, existingSibligCount) {\n  var lines = '';\n  for (var i = 0; i < existingSibligCount; i++) {\n    lines += '<td class=\"leftLine topLine\"></td><td class=\"rightLine topLine\"></td>';\n  }\n  <updateDOM>\n  $oneSibling.parent().prevAll('tr:gt(0)').children().attr('colspan', siblingCount * 2)\n    .end().next().children(':first').after(lines);\n  </updateDOM>\n}\n"], ["computeDGammaFunction", "\nfunction dgamma(a, s, logp) {\n  logp = logp === true;\n\n  return <calculateDGamma>\n  function(x) {\n     return logp ? dgammaLog(a, s)(x) : Math.exp(dgammaLog(a, s)(x));\n  };\n  </calculateDGamma>\n}\n"], ["setPositionCorners", "\nfunction(obj, o, v){\n  if('string' === typeof v) {\n    <setCornerValue>\n    this.position[o] = obj[o] = new CORNER(v, o === 'at');\n    </setCornerValue>\n  }\n}\n"], ["enumerateValues", "\nfunction enumerate(object, kind) {\n\n  if (typeof object === 'string') {\n    return <enumeratingStringValues>\n    StringIterators[kind || KIND_VALUES](object);\n    </enumeratingStringValues>\n  } else if (Array.isArray(object)) {\n    return <enumeratingArrayValues>\n    ArrayIterators[kind || KIND_VALUES](object);\n    </enumeratingArrayValues>\n\n  } else if (object[Symbol.iterator]) {\n    return <enumeratingIterableObject>\n    object[Symbol.iterator]();\n    </enumeratingIterableObject>\n\n  } else {\n    return <enumeratingGenericValues>\n    GenericIterators[kind || KIND_ENTRIES](object);\n    </enumeratingGenericValues>\n  }\n}\n"], ["writeCommentExtFunction", "\nfunction writeCommentExt() {\n    <writeStartOfExtensionBlock>\n    out.writeByte(0x21); \n    out.writeByte(0xfe); \n    </writeStartOfExtensionBlock>\n    <writeCommentLength>\n    out.writeByte(comment.length); \n    </writeCommentLength>\n    <writeCommentBody>\n    out.writeUTFBytes(comment);\n    </writeCommentBody>\n    <writeEndOfExtensionBlock>\n    out.writeByte(0); \n    </writeEndOfExtensionBlock>\n}\n"], ""]