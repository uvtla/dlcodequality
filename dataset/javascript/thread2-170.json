[["sendFrame", "\nfunction sendFrame(socket, _frame) {\n  <prepareFrame>\n  var frame = _frame;\n  if (!_frame.hasOwnProperty('toString')) {\n    frame = new Frame({\n      'command': _frame.command,\n      'headers': _frame.headers,\n      'body': _frame.body\n    });\n  }\n  </prepareFrame>\n  \n  socket.send(frame.toStringOrBuffer());\n  return true;\n}\n"], ["DHT", "\nfunction DHT (seeds, onConnect, onUpdate) {\n  var l_map = {};\n  var l_dht = undefined;\n\n  <initializeDHTNetwork>\n  if (seeds instanceof Array) {\n    l_dht = kademlia({\n      address: '127.0.0.1',\n      port: 65535,\n      seeds: seeds,\n      storage: levelup('./store/dht_db')\n    });\n    l_dht.on('connect', function () {\n      LOG.warn('DHT connected...', 'SR.DHT');\n      UTIL.safeCall(onConnect);\n    });\n  }\n  else\n    UTIL.safeCall(onConnect);\n  </initializeDHTNetwork>\n  \n  <setKeyValue>\n  this.set = function (key, value, onDone) {\n    if (!l_dht) {\n      l_map[key] = value;\n      return UTIL.safeCall(onDone, true);\n    }\n\n    l_dht.put(key, value, function (err) {\n      if (err) {\n        LOG.error(err, 'SR.DHT');\n        UTIL.safeCall(onDone, false);\n      }\n      else\n        UTIL.safeCall(onDone, true);\n    });\n  };\n  </setKeyValue>\n\n  <getKeyValue>\n  this.get = function (key, onDone) {\n    if (!l_dht) {\n      if (l_map.hasOwnProperty(key))\n        UTIL.safeCall(onDone, l_map[key]);\n      else\n        UTIL.safeCall(onDone);\n      return;\n    }\n\n    l_dht.get(key, function (err, value) {\n      if (err) {\n        LOG.error(err, 'SR.DHT');\n        UTIL.safeCall(onDone);        \n      }\n      else {\n        if (value === 'DELETED') {\n          delete l_map[key];\n          return UTIL.safeCall(onDone);\n        }\n        l_map[key] = value;\n        UTIL.safeCall(onDone, value);\n      }\n    });\n  };\n  </getKeyValue>\n\n  <deleteKeyValue>\n  this.delete = function (key, onDone) {\n    if (!l_dht) {\n      if (l_map.hasOwnProperty(key)) {\n        delete l_map[key];\n        UTIL.safeCall(onDone, true);\n      }\n      else {\n        UTIL.safeCall(onDone, false);\n      }\n      return;\n    }\n\n    l_dht.put(key, 'DELETED', function (err) {\n      if (err) {\n        LOG.error(err, 'SR.DHT');\n        UTIL.safeCall(onDone, false);\n      }\n      else\n        UTIL.safeCall(onDone, true);\n    });\n  }\n  </deleteKeyValue>\n}\n"], ["populatePropertyFor", "\nfunction populatePropertyFor (documents, next) {\n  <populateDocuments>\n  if (this._mongooseOptions.lean) {\n    asArray(documents).forEach(function(doc) {\n      paths.forEach(function(path) {\n        try {\n          const splitted = path.path.split('.');\n          const key      = splitted.shift();\n          const insert   = { values: path.enumValues };\n          const value    = doc[key];\n\n          insert.value = determineValue(splitted, value);\n          doc[key]     = nest(splitted, insert);\n        } catch (error) { return next(error); }\n      });\n    });\n  }\n  </populateDocuments>\n\n  next();\n}\n"], ["runExec", "\nfunction runExec(container) {\n  <setupExecOptions>\n  var options = {\n    Cmd: ['bash', '-c', 'echo test $VAR'],\n    Env: ['VAR=ttslkfjsdalkfj'],\n    AttachStdout: true,\n    AttachStderr: true\n  };\n  </setupExecOptions>\n\n  <executeCommand>\n  container.exec(options, function(err, exec) {\n    if (err) return;\n    exec.start(function(err, stream) {\n      if (err) return;\n      <streamOutput>\n      container.modem.demuxStream(stream, process.stdout, process.stderr);\n      </streamOutput>\n\n      <inspectExec>\n      exec.inspect(function(err, data) {\n        if (err) return;\n        console.log(data);\n      });\n      </inspectExec>\n    });\n  });\n  </executeCommand>\n}\n"], ["existing", "\nfunction(existing) {\n  <setupInstance>\n  var self = this;\n  var relationKey = this._name + 'Relation';\n  var methods = this._captureOverrides();\n  </setupInstance>\n  \n  return _.transform(methods, function(result, method, key) {\n    <configureMethod>\n    var name = self.template(key);\n    var include = !method.optional || !existing[name];\n    if (include) {\n      result[name] = method(relationKey);\n    }\n    </configureMethod>\n  }, <initializeCommonMethods>this._commonInstanceMethods()</initializeCommonMethods>);\n}\n"], ["copyFilesToOutputDirectory", "\nfunction(cfg, callback) {\n  <setupPaths>\n  var files = cfg.input_files;\n  var outputPath = cfg.output_dir;\n  </setupPaths>\n\n  <processFiles>\n  if (files.length > 0) {\n    new gear.Queue({registry: taskRegistry})\n    .log(formatLog('Copying files:', files))\n    .copyFiles({input: files, output: outputPath}, callback)\n    .log(formatLog('Copied files to: ', outputPath))\n    .run(callback);\n  } else {\n    callback();\n  }\n  </processFiles>\n}\n"], ["initMeScroll", "\nfunction initMeScroll(mescrollId, options) {\n  <setupScrollMessages>\n  var htmlContent = '<p class=\"downwarp-tip\">\u2193 \u4e0b\u62c9\u5237\u65b0 \u2193</p>';\n  htmlContent += '<img class=\"downwarp-progress\" src=\"option/mescroll-progress.png\"/>';\n  htmlContent += '<img class=\"downwarp-slogan\" src=\"option/mescroll-slogan.png\"/>';\n  var htmlLoading = '<img class=\"upwarp-progress mescroll-rotate\" src=\"option/mescroll-progress.png\"/><img class=\"upwarp-slogan\" src=\"option/mescroll-slogan.png\"/>';\n  var htmlNodata = '<img class=\"upwarp-nodata\" src=\"option/mescroll-nodata.png\"/>';\n  </setupScrollMessages>\n\n  <configureOptions>\n  var myOption={\n    down:{\n      htmlContent: htmlContent, \n      inOffset: function(mescroll) { mescroll.downTipDom.innerHTML = \"\u2193 \u4e0b\u62c9\u5237\u65b0 \u2193\"; mescroll.downProgressDom.classList.remove(\"mescroll-rotate\"); },\n      outOffset: function(mescroll) { mescroll.downTipDom.innerHTML = \"\u2191 \u91ca\u653e\u66f4\u65b0 \u2191\"; },\n    },\n    up:{\n      htmlLoading: htmlLoading, \n      htmlNodata: htmlNodata, \n      empty: { icon: \"option/mescroll-empty.png\", tip: \"\u4eb2,\u6682\u65e0\u76f8\u5173\u5546\u54c1~\", btntext: \"\u53bb\u901b\u901b >\", btnClick: function(){ alert(\"\u70b9\u51fb\u4e86\u6309\u94ae,\u5177\u4f53\u903b\u8f91\u81ea\u884c\u5b9e\u73b0\"); } },\n      toTop: { src: \"option/mescroll-totop.png\" }\n    }\n  }\n  options=MeScroll.extend(options,myOption);\n  </configureOptions>\n\n  <createMeScrollInstance>\n  return new MeScroll(mescrollId,options);\n  </createMeScrollInstance>\n}\n"], ["forumPost", "\nfunction forumPost (jar, args, res) {\n  <handleRedirect>\n  if (res.statusCode === 302) {\n    var redirect = res.headers.location;\n    if (redirect.indexOf('/Forum/ShowPost.aspx') === 0) {\n      var post = parseInt(redirect.match(/\\d+$/)[0], 10);\n      if (args.postId && post === parseInt(args.postId, 10)) {\n        throw new Error('Post is locked');\n      } else {\n        return post;\n      }\n    } else {\n      throw getForumError({location: redirect, append: 'Forum post failed'});\n    }\n  }\n  </handleRedirect>\n  <handleSuccess>\n  else if (res.statusCode === 200) {\n    var $ = parser.load(res.body);\n    var found = $('.validationWarningSmall');\n    var errors = [];\n    for (var i = 0; i < found.length; i++) {\n      var warning = $(found[i]);\n      if (warning.css('display') !== 'none') {\n        errors.push(warning.text());\n      }\n    }\n    throw new Error('Forum post failed, known issues: ' + JSON.stringify(errors));\n  }\n  </handleSuccess>\n  <handleFailure>\n  else {\n    throw new Error('Forum post failed, verify that you are allowed to make posts and the message and subject are permitted');\n  }\n  </handleFailure>\n}\n"], ["setGlobalEval", "\nfunction setGlobalEval( elems, refElements ) {\n  <processElements>\n  var elem,\n    i = 0;\n  for ( ; (elem = elems[i]) != null; i++ ) {\n    jQuery._data( elem, \"globalEval\", !refElements || jQuery._data( refElements[i], \"globalEval\" ) );\n  }\n  </processElements>\n}\n"], ["triggerOrSetProperty", "\nfunction(struct, prop, value) {\n  <invokeOrAssign>\n  if (gui.Type.isFunction(struct[prop])) {\n    if (this.spirit.life.ready) {\n      struct[prop](value);\n    } else {\n      this.spirit.life.add(gui.LIFE_READY, this);\n      this._onready = this._onready || [];\n      this._onready.push(function() {\n        struct[prop](value);\n      });\n    }\n  } else {\n    struct[prop] = value;\n  }\n  </invokeOrAssign>\n}\n"], ""]