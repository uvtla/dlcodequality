[["mix", "\nfunction mix(\n  weight: number | string,\n  color: string,\n  otherColor: string,\n): string {\n  <handleTransparency>\n  if (color === 'transparent') return otherColor\n  if (otherColor === 'transparent') return color\n  </handleTransparency>\n  \n  <parseColors>\n  const parsedColor1 = parseToRgb(color)\n  const color1 = {\n    ...parsedColor1,\n    alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1,\n  }\n\n  const parsedColor2 = parseToRgb(otherColor)\n  const color2 = {\n    ...parsedColor2,\n    alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1,\n  }\n  </parseColors>\n\n  <computeMixedColor>\n  const alphaDelta = color1.alpha - color2.alpha\n  const x = parseFloat(weight) * 2 - 1\n  const y = x * alphaDelta === -1 ? x : x + alphaDelta\n  const z = 1 + x * alphaDelta\n  const weight1 = (y / z + 1) / 2.0\n  const weight2 = 1 - weight1\n\n  const mixedColor = {\n    red: Math.floor(color1.red * weight1 + color2.red * weight2),\n    green: Math.floor(color1.green * weight1 + color2.green * weight2),\n    blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),\n    alpha:\n      color1.alpha + (color2.alpha - color1.alpha) * (parseFloat(weight) / 1.0),\n  }\n  </computeMixedColor>\n\n  return rgba(mixedColor)\n}\n"], ["ignoredForGoodReason", "\n"], ["readNumericString", "\nfunction readNumericString(s, minValue) {\n  <computeLength>\n  var length = readLength(s);\n  length = (length + minValue + 1) / 2;\n  </computeLength>\n  \n  <modifyString>\n  s.readPadding(length);\n  </modifyString>\n}\n"], ["setValueAtCoordinates", "\nfunction(x, y, value) {\n  <validateCoordinates>\n  if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n    return;\n  }\n  </validateCoordinates>\n  \n  <updateValue>\n  this.data[x][y] = value;\n  </updateValue>\n}\n"], ["Msg", "\nfunction Msg() {\n  <EventEmitterSetup>\n  events.EventEmitter.call(this);\n  </EventEmitterSetup>\n\n  <configureArguments>\n  this.args = [\n    // Array with configuration arguments for Msg\n  ];\n  </configureArguments>\n\n  <initializeProperties>\n  this.config = {};\n  this.dependency = {};\n  this.team = {};\n  this.shutdownTimeout = 1000;\n  this.modules = [];\n  </initializeProperties>\n}\n"], ["setTextureFilter", "\nfunction(enabled) {\n  <selectTextureFilter>\n  var gl = this.context;\n  if (enabled) {\n    this.texture_filter = gl.NEAREST;\n  } else {\n    this.texture_filter = gl.LINEAR;\n  }\n  </selectTextureFilter>\n}\n"], ["shiftCellXls", "\nfunction shift_cell_xls(cell, tgt, opts) {\n  <shiftCell>\n  var out = dup(cell);\n  if(tgt.s) {\n    if(out.cRel) out.c += tgt.s.c;\n    if(out.rRel) out.r += tgt.s.r;\n  } else {\n    out.c += tgt.c;\n    out.r += tgt.r;\n  }\n  </shiftCell>\n\n  <normalizeCellAddress>\n  if(!opts || opts.biff < 12) {\n    while(out.c >= 0x100) out.c -= 0x100;\n    while(out.r >= 0x10000) out.r -= 0x10000;\n  }\n  </normalizeCellAddress>\n\n  return out;\n}\n"], ["rearrangeElements", "\nfunction (collection, elements, settings, index) {\n  <swapAndFind>\n  for (var i = index + 1; i < elements.length; i++) {\n    elements = swapElements(collection, elements, i - 1, i);\n  }\n  return collection.find(settings.elements_selector);\n  </swapAndFind>\n}\n"], ["toWireValue", "\nasync function toWireValue(obj) {\n  <resolvePromise>\n  let value = await Promise.resolve(obj);\n  </resolvePromise>\n\n  <checkNullOrUndefined>\n  if (value === void 0 || value === null) {\n    return value;\n  }\n  </checkNullOrUndefined>\n\n  <processPrimitive>\n  if (typeof value === 'boolean'\n      || typeof value === 'number'\n      || typeof value === 'string') {\n    return value;\n  }\n  </processPrimitive>\n\n  <processArray>\n  if (Array.isArray(value)) {\n    return convertKeys(value);\n  }\n  </processArray>\n\n  <processFunction>\n  if (typeof value === 'function') {\n    return '' + value;\n  }\n  </processFunction>\n\n  <serializeOrToJson>\n  if (typeof value[Symbols.serialize] === 'function') {\n    return toWireValue(value[Symbols.serialize]());\n  } else if (typeof value.toJSON === 'function') {\n    return toWireValue(value.toJSON());\n  }\n  </serializeOrToJson>\n\n  <convertKeys>\n  return convertKeys(value);\n  </convertKeys>\n}\n"], ["pointsFromGroupedResponse", "\nfunction points_from_grouped_response(response, info) {\n  <initializePoints>\n  var points = [];\n  </initializePoints>\n  \n  <checkDateHistogram>\n  var is_date_histogram = _is_date_histogram(response.aggregations);\n  </checkDateHistogram>\n\n  <definePointsFromGroup>\n  function points_from_group(aggregation, fields, point_base) {\n    // Function to recursively parse and add points based on bucket\n  }\n  </definePointsFromGroup>\n\n  <processAggregations>\n  var grouping = _.clone(info.grouping);\n  if (is_date_histogram) {\n    grouping.push('time');\n  }\n  points_from_group(response.aggregations, grouping, {});\n  </processAggregations>\n\n  <sortPoints>\n  return _time_sort(points);\n  </sortPoints>\n}\n"], ""]