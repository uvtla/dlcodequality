[["startApp", "\nasync function startApp(config = {}) {\n  <appInitialization>\n  const {\n    databaseURL = DEFAULT_MONGO,\n    port = DEFAULT_PORT,\n    host = DEFAULT_HOST,\n    autoConnect = true\n  } = config;</appInitialization>\n\n  <processSetup>\n  process.once('SIGUSR2', async () => {\n    await app.destroy();\n    process.kill(process.pid, 'SIGUSR2');\n  });</processSetup>\n\n  <databaseSetup>\n  const db = new _database.default();</databaseSetup>\n\n  <appCreation>\n  const appMeta = await (0, _createApp.default)(config, db);\n  const {\n    app\n  } = appMeta;</appCreation>\n\n  <serverSetup>\n  const server = await listen(app, port, host);</serverSetup>\n\n  <serverTeardownHandler>\n  (0, _serverDestroy.default)(server);</serverTeardownHandler>\n\n  <appDestroyMethod>\n  app.destroy = async () => {\n    await Promise.all([disconnectFromDatabase(db), destroy(server)]);\n  };</appDestroyMethod>\n\n  <serverInitialization>\n  const {\n    port: serverPort\n  } = server.address();\n  const url = `http://${host}:${serverPort}`;\n  const router = (0, _koaRouter.default)();</serverInitialization>\n\n  <databaseConnection>\n  const connect = async () => {\n    await db.connect(databaseURL);\n  };\n\n  if (autoConnect) {\n    await connect();\n  }</databaseConnection>\n\n  <returnStatement>\n  return { ...appMeta,\n    router,\n    url,\n    ...(autoConnect ? {} : {\n      connect\n    })\n  };</returnStatement>\n}\n"], ["unnamedFunction", "\nfunction(options) {\n        <setCallback>\n        this.describe({\n            callback: function() {\n                <setDescription>\n                var description = this.description,\n                    inputs = options.inputs,\n                    input, i, ii;\n                for (i=0, ii=description.dataInputs.length; i<ii; ++i) {\n                    input = description.dataInputs[i];\n                    this.setInputData(input, inputs[input.identifier]);\n                }</setDescription>\n                if (options.callback) {\n                    <invokeCallback>\n                    options.callback.call(options.scope);</invokeCallback>\n                }\n            },\n            scope: this\n        });</setCallback>\n        <returnThis>\n        return this;</returnThis>\n}\n"], ["XMLHttpRequestEvent", "\nfunction XMLHttpRequestEvent(xhr, type) {\n  <eventInitialization>\n  this.type = type;\n  this.bubbles = false;\n  this.cancelable = false;\n  this.timeStamp = now();\n\n  this.isTrusted = false;\n  this.defaultPrevented = false;\n\n  this.eventPhase = 2;\n\n  this.target = xhr;\n  this.currentTarget = xhr;</eventInitialization>\n}\n"], ["checkSC", "\nfunction checkSC(i) {\n  <scanWhitespaceAndComments>\n  if (i >= tokensLength) return 0;\n\n  let l;\n  let lsc = 0;\n\n  while (i < tokensLength) {\n    if (l = checkS(i)) tokens[i].sc_child = 1;\n    else if (l = checkCommentML(i)) tokens[i].sc_child = 2;\n    else if (l = checkCommentSL(i)) tokens[i].sc_child = 3;\n    else break;\n\n    i += l;\n    lsc += l;\n  }</scanWhitespaceAndComments>\n\n  return lsc || 0;\n}\n"], ["functionWithBodyRN", "\nfunction(body, r, n)\n{\n    <calculate>\n    var rcn = vcross(r, n);\n    return body.m_inv + body.i_inv*rcn*rcn;</calculate>\n}\n"], ["setStyles", "\nfunction setStyles(element, styles) {\n  <applyStyles>\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    \n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });</applyStyles>\n}\n"], ["Module", "\nfunction Module(options) {\n  <handleOptions>\n  options = options || {};\n\n  if (types.isString(options)) {\n    options = {\n      name: options\n    };\n  }</handleOptions>\n\n  <validateModule>\n  if (!types.isString(options.name) && !types.isString(options.source)) {\n    throw new TypeError(\"Must provide a name or source for the module\");\n  }</validateModule>\n\n  <setupModule>\n  this.deps = options.deps ? options.deps.slice(0) : [];\n  this.type = options.type || Type.UNKNOWN;</setupModule>\n\n  <mergeModule>\n  return this.merge(options);</mergeModule>\n}\n"], ["formValidation", "\nfunction (event) {\n            <initialize>\n            var self = this;</initialize>\n            \n            <preventDefaultOnInvalid>\n            if (this.invalidElements.length > 0)\n                event.preventDefault();</preventDefaultOnInvalid>\n            \n            <performValidation>\n            for (var validationType in self.validate) {\n                var invalidFields = self.getElementsByPattern(self.validate[validationType], self.patterns[validationType], validationType);\n                if (invalidFields.length > 0) {\n                    <handleInvalidFields>\n                    this.invalidElements = invalidFields;\n                    event.preventDefault();\n                    \n                    self.publicInterface.onInvalidation(invalidFields, this.legends[validationType]);</handleInvalidFields>\n                }\n            }</performValidation>\n        }"], ["parseCommand", "\nfunction(command) {\n        <preparePlaceholders>\n        var patt = /(\"[^\"]*\")/,\n            quotedStringPlaceholder = \"__QUOTEDSTR__\",\n            escapedQuotePlaceholder = \"__ESCAPED_QUOTE__\",\n            matches = [],\n            match;\n\n        command = command.replace(/\\\\\\\"/g, escapedQuotePlaceholder);</preparePlaceholders>\n\n        <extractQuotedStrings>\n        while ((match = patt.exec(command))) {\n            var matched = match[0];\n            <replaceQuotedString>\n            command =\n                command.substr(0, match.index) + quotedStringPlaceholder + command.substr(match.index + matched.length);\n            matches.push(matched.substring(1, matched.length - 1));</replaceQuotedString>\n        }</extractQuotedStrings>\n\n        <splitCommand>\n        var parts = command.split(\" \");\n        parts = parts.map(function(part) {\n            var item = part.trim();\n            <replacePlaceholders>\n            if (item === quotedStringPlaceholder) {\n                item = matches.shift();\n            }\n            item = item.replace(new RegExp(escapedQuotePlaceholder, \"g\"), '\"');</replacePlaceholders>\n            return item;\n        });</splitCommand>\n\n        <returnCommandParts>\n        return parts;</returnCommandParts>\n    }"], ["putKeyValue", "\nfunction put(obj, key, val, immutable) {\n    <handleImmutable>\n    if (immutable)\n        return _put(assign({}, obj), key, val);</handleImmutable>\n    <performPut>\n    return _put(obj, key, val);</performPut>\n}"], "```"]