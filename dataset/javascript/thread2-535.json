[["getDetail", "\nfunction getDetail(command, callback) {\n    <executeCommand>\n    var child = exec(\n        command,\n        function (err, stdout, stderr) {\n            if (err) return callback(err);\n            callback(null, parseInt(stdout) * 1024);\n        }\n    );\n    </executeCommand>\n}\n"], ["_instrumentStart", "\nfunction _instrumentStart(name, _payload) {\n    <retrieveAndPopulateListeners>\n    var listeners = cache[name];\n    if (!listeners) {\n      listeners = populateListeners(name);\n    }\n    if (listeners.length === 0) {\n      return;\n    }\n    </retrieveAndPopulateListeners>\n\n    <generatePayload>\n    var payload = _payload();\n    </generatePayload>\n\n    <profileSetup>\n    var STRUCTURED_PROFILE = _emberMetalCore.default.STRUCTURED_PROFILE;\n    var timeName;\n    if (STRUCTURED_PROFILE) {\n      timeName = name + ': ' + payload.object;\n      console.time(timeName);\n    }\n    </profileSetup>\n\n    <listenAndRecordBeforeValues>\n    var l = listeners.length;\n    var beforeValues = new Array(l);\n    var i, listener;\n    var timestamp = time();\n    for (i = 0; i < l; i++) {\n      listener = listeners[i];\n      beforeValues[i] = listener.before(name, timestamp, payload);\n    }\n    </listenAndRecordBeforeValues>\n\n    return function _instrumentEnd() {\n        <executeAfterListenersAndProfileEnd>\n        var i, l, listener;\n        var timestamp = time();\n        for (i = 0, l = listeners.length; i < l; i++) {\n            listener = listeners[i];\n            if (typeof listener.after === 'function') {\n                listener.after(name, timestamp, payload, beforeValues[i]);\n            }\n        }\n        if (STRUCTURED_PROFILE) {\n            console.timeEnd(timeName);\n        }\n        </executeAfterListenersAndProfileEnd>\n    };\n}\n"], ["getAddress", "\nfunction getAddress(addressInput) {\n  var address = addressInput; \n  var result = null; \n\n  <validateInput>\n  if (typeof(address) !== 'string') { throw new Error(`[ethjs-account] invalid address value ${JSON.stringify(address)} not a valid hex string`); }\n  </validateInput>\n\n  <normalizeAddress>\n  if (address.substring(0, 2) !== '0x' &&\n      address.substring(0, 2) !== 'XE') { address = `0x${address}`; }\n  </normalizeAddress>\n\n  <processAndValidateChecksumAddress>\n  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n    result = getChecksumAddress(address);\n    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n      throw new Error('[ethjs-account] invalid address checksum');\n    }\n  </processAndValidateChecksumAddress>\n\n  <validateICAPAndIBAN>\n  else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n    throw new Error('[ethjs-account] ICAP and IBAN addresses, not supported yet..');\n  }\n  </validateICAPAndIBAN>\n\n  <throwErrorForInvalidValue>\n  else {\n    throw new Error(`[ethjs-account] invalid address value ${JSON.stringify(address)} not a valid hex string`);\n  }\n  </throwErrorForInvalidValue>\n\n  return result;\n}\n"], ["UMLMessage", "\nfunction UMLMessage() {\n  <initialSetup>\n  UMLDirectedRelationship.apply(this, arguments);\n  this.messageSort = MS_SYNCHCALL;\n  this.signature = null;\n  this.connector = null;\n  this[\"arguments\"] = '';\n  this.assignmentTarget = '';\n  this.guard = '';\n  this.iteration = '';\n  this.isConcurrentIteration = false;\n  </initialSetup>\n}\n"], ["resolve", "\nfunction resolve(object) {\n  <resolvePromise>\n  var Constructor = this;\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n  </resolvePromise>\n}\n"], ["decodeRangeTime", "\nfunction decodeRangeTime(map, timeStr){\n  <parseAndValidateTimeRange>\n  let times = timeStr.split('-');\n  times[0] = Number(times[0]);\n  times[1] = Number(times[1]);\n  if(times[0] > times[1]){\n    console.log(\"Error time range\");\n    return null;\n  }\n  </parseAndValidateTimeRange>\n\n  <populateMapWithTimeRange>\n  for(let i = times[0]; i <= times[1]; i++){\n    map[i] = i;\n  }\n  </populateMapWithTimeRange>\n}\n"], ["middleware", "\nfunction middleware(definition, resolver, options) {\n  <setupCustomExecution>\n  const customExecution = options.factoryExecution !== false;\n  </setupCustomExecution>\n\n  const resolve = function(source, args, context, info) {\n    <prepareExecutionContext>\n    const ctx = _.isObjectLike(context) ? context : {};\n    Object.assign(ctx, definition.context);\n    info.definition = definition;\n    </prepareExecutionContext>\n\n    <executeResolver>\n    return customExecution\n      ? factoryExecute(source, args, ctx, info)\n      : graphqlExecute(source, args, ctx, info);\n    </executeResolver>\n  };\n\n  <assignMiddlewareFlags>\n  resolve.__resolver = resolver;\n  resolve.__factoryMiddleware = true;\n  </assignMiddlewareFlags>\n\n  return resolve;\n}\n"], ["Plane", "\nfunction Plane(a, b, c, d) {\n  <initializeProperties>\n  this.normal = new Vector3(a, b, c);\n  this.d = d;\n  </initializeProperties>\n}\n"], ["tree", "\nfunction tree(list) {\n  <buildRecursiveTree>\n  var n = list.length;\n  if (n == 0) {\n    return null;\n  }\n  var i = Math.floor(n / 2);\n  return new Tree(list[i], tree(list.slice(0, i)), tree(list.slice(i + 1)));\n  </buildRecursiveTree>\n}\n"], ["handleReject", "\nfunction handleReject(carousel) {\n  <updateUiStateOnReject>\n  $element.css({ 'height': carousel.getOuterHeight() + 'px' });\n  vm.isLoading = false;\n  vm.isSuccessful = false;\n  </updateUiStateOnReject>\n}\n"], "```"]