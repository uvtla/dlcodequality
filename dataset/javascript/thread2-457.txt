```javascript
<addAttachment>
function addAttachment(obj_list) {
    for (let key in obj_list) {
        if (typeof(obj_list[key]) === 'string' &&
            regexAttach.test(obj_list[key])) {
            <resolveAttachment>
            const binaryKey = obj_list[key];
            const replacement = getAttachment(binaryKey);
            if (replacement !== null) obj_list[key] = replacement;
            </resolveAttachment>
        } else if (typeof(obj_list[key]) === 'object') {
            <recursiveAttachmentHandling>
            addAttachment(obj_list[key]);
            </recursiveAttachmentHandling>
        }
    }
}
</addAttachment>

<imageGallerySetup>
function ()
{
  <createImageLabel>
  this.imageLabel = jQuery('<div/>', {'class': 'jBox-image-label-container'}).appendTo(this.wrapper);
  this.imageLabel.append(jQuery('<div/>', {'class': 'jBox-image-pointer-prev', click: function () { this.showImage('prev'); }.bind(this)})).append(jQuery('<div/>', {'class': 'jBox-image-pointer-next', click: function () { this.showImage('next'); }.bind(this)}));
  </createImageLabel>

  <downloadButtonSetup>
  if (this.options.downloadButton) {
    this.downloadButton = jQuery('<div/>', {'class': 'jBox-image-download-button-wrapper'})
      .appendTo(this.wrapper)
      .append(
        this.options.downloadButtonText ? jQuery('<div/>', {'class': 'jBox-image-download-button-text'}).html(this.options.downloadButtonText) : null
      )
      .append(
        jQuery('<div/>', {'class': 'jBox-image-download-button-icon'})
      ).on('click touchdown', function () {
        if (this.images[this.currentImage.gallery][this.currentImage.id].downloadUrl) {
          var currentImageUrl = this.images[this.currentImage.gallery][this.currentImage.id].downloadUrl;
        } else {
          var currentImage = this.wrapper.find('.jBox-image-default-current');
          var currentImageStyle = currentImage[0].style.backgroundImage;
          var currentImageUrl = currentImageStyle.slice(4, -1).replace(/["']/g, '');
        }
        this.downloadImage(currentImageUrl);
      }.bind(this));
  }
  </downloadButtonSetup>

  <imageCounterSetup>
  if (this.options.imageCounter) {
    this.imageCounter = jQuery('<div/>', {'class': 'jBox-image-counter-container'}).appendTo(this.wrapper);
    this.imageCounter.append(jQuery('<span/>', {'class': 'jBox-image-counter-current'})).append(jQuery('<span/>').html(this.options.imageCounterSeparator)).append(jQuery('<span/>', {'class': 'jBox-image-counter-all'}));
  }
  </imageCounterSetup>
}
</imageGallerySetup>

<mergeable>
function mergeable(node) {
  <mergeableCheck>
  var start;
  var end;

  if (node.type !== 'text' || !node.position) {
    return true;
  }

  start = node.position.start;
  end = node.position.end;

  return (
    start.line !== end.line || end.column - start.column === node.value.length
  );
  </mergeableCheck>
}
</mergeable>

<initState>
function initState() {
    <setupDeferred>
    var result = $.Deferred();
    </setupDeferred>

    <parseAndUpdateState>
    updateJsonHandler.parse()
        .done(function() {
            result.resolve();
        })
        .fail(function (code) {
            <handleStateError>
            var logMsg;
            switch (code) {
            case StateHandlerMessages.FILE_NOT_FOUND:
                logMsg = "AutoUpdate : updateHelper.json cannot be parsed, does not exist";
                break;
            case StateHandlerMessages.FILE_NOT_READ:
                logMsg = "AutoUpdate : updateHelper.json could not be read";
                break;
            case StateHandlerMessages.FILE_PARSE_EXCEPTION:
                logMsg = "AutoUpdate : updateHelper.json could not be parsed, exception encountered";
                break;
            case StateHandlerMessages.FILE_READ_FAIL:
                logMsg = "AutoUpdate : updateHelper.json could not be parsed";
                break;
            }
            console.log(logMsg);
            result.reject();
            </handleStateError>
        });
    </parseAndUpdateState>
    
    <returnPromise>
    return result.promise();
    </returnPromise>
}
</initState>

<initScaffold>
function initScaffold(fis) {
    <setFisScaffoldConfigs>
    fis.set('scaffold.namespace', 'tfux-scaffold');
    fis.set('scaffold.gitlabDomain', DEFAULT_GITLAB_DOMAIN);
    fis.set('scaffold.gitlabToken', process.env.GITLAB_TOKEN || 'XsYDeyqyFD777qgovh15');
    </setFisScaffoldConfigs>
}
</initScaffold>

<processItem>
function(item) {
    <labelHandling>
    if((item.label || item.labelTemplate) && item.labelElement) {
        item.label ? item.labelElement.html(item.label) : item.labelElement.html(loadHTMLFromFile(item.labelTemplate));
        item.labelElement.append(item.pictoElement);
    }
    if(this.settings.labelClass && item.labelElement) {
        item.labelElement.addClass(this.settings.labelClass);
    }
    </labelHandling>

    <pictoHandling>
    if(item.picto || item.pictoTemplate) {
        item.picto ? item.pictoElement.html(item.picto) : item.pictoElement.html(loadHTMLFromFile(item.pictoTemplate));
    }
    </pictoHandling>

    <contentHandling>
    // The content handling contains various tasks like setting short content, height watching, and class adding, thus cannot be split further.

    if((item.shortContent || item.shortContentTemplate) && item.shortContentElement) {
        item.shortContent ? item.shortContentElement.html(item.shortContent) : item.shortContentElement.html(loadHTMLFromFile(item.shortContentTemplate));
        // Other related tasks...
    }
    // More content-related tasks (omitted for brevity)...
    </contentHandling>
}
</processItem>

<loadPromise>
function loadPromise (eleOrWindow) {
    <checkLoaded>
    if (isLoaded(eleOrWindow)) {
        return Promise.resolve(eleOrWindow);
    }
    </checkLoaded>

    <setupLoadingPromise>
    let loadingPromise = new Promise((resolve, reject) => {
        // Code to handle the loading state...
    });
    </setupLoadingPromise>

    <returnLoadingPromise>
    return loadingPromise;
    </returnLoadingPromise>
}
</loadPromise>

<showNote>
function showNote(region) {
  <findNoteElement>
    if (!showNote.el) {
        showNote.el = document.querySelector('#subtitle');
    }
  </findNoteElement>
  
  <updateSubtitleText>
    showNote.el.textContent = region.data.note || 'â€“';
  </updateSubtitleText>
}
</showNote>

<sanitizeString>
function( string ){
    <removeDuplicateSlashes>
    for( var i = 0; i < string.length; i++ ) string = string.replace( $this.slash.get() + $this.slash.get(), $this.slash.get());
    </removeDuplicateSlashes>

    <returnSanitizedString>
    return string;
    </returnSanitizedString>
}
</sanitizeString>

<requestFindRefs>
function requestFindRefs(session, document, offset) {
    <guardClause>
    if (!document || !session) {
        return;
    }
    </guardClause>

    <fileInfoSetup>
    var path    = document.file.fullPath,
        fileInfo = {
            type: MessageIds.TERN_FILE_INFO_TYPE_FULL,
            name: path,
            offsetLines: 0,
            text: ScopeManager.filterText(session.getJavascriptText())
        };
    </fileInfoSetup>

    <executeTernQuery>
    var ternPromise = getRefs(fileInfo, offset);
    </executeTernQuery>

    <returnTernPromise>
    return {promise: ternPromise};
    </returnTernPromise>
}
</requestFindRefs>
```