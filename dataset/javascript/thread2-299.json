[["emitLine", "\nfunction emitLine(line) {\n  var c = line[0];\n  ++linenum;\n  if (c === '=') {\n    \n  } else if (c === '@') {\n    <matchLine>\n    var match = line.match(line_regex);\n    if (!match) {\n      return console.log('regex fail on line ' + linenum + ': \"' + line + '\"');\n    }\n    </matchLine>\n    var module = match[1];\n    var symbol = match[2]; \n    var symbol_offs = h2i(match[3]); \n    var site_addr = h2i(match[4]); \n    var op = match[5]; \n    var ptr_addr = h2i(match[6]); \n    var size = h2i(match[7]); \n\n    if (op === '-' || op === '<') {\n      <processDeallocation>\n      var alloc_data = mem[ptr_addr];\n      if (alloc_data) {\n        var site_data = addr[alloc_data.site_addr]\n        --site_data.count;\n        ++site_data.traffic_count;\n        site_data.total_size -= alloc_data.size;\n        site_data.traffic_size += alloc_data.size;\n        delete mem[ptr_addr];\n      } else {\n        \n      }\n      </processDeallocation>\n    } else if (op === '+' || op === '>') {\n      <processAllocation>\n      mem[ptr_addr] = { size: size, site_addr: site_addr };\n      var site_data = addr[site_addr];\n      if (!site_data) {\n        addr[site_addr] = site_data = { module: module, symbol: symbol, symbol_offs: symbol_offs, count: 0, total_size: 0, traffic_count: 0, traffic_size: 0 };\n      }\n      ++site_data.count;\n      ++site_data.traffic_count;\n      site_data.total_size += size;\n      site_data.traffic_size += size;\n      </processAllocation>\n    }\n  } else {\n    console.log('unrecognized type on line ' + linenum + ': \"' + line + '\"');\n  }\n}\n"], ["start", "\nfunction start() {\n    <displayVersions>\n    console.log(\n      'Using ts-node version',\n      tsNodeVersion + ', typescript version',\n      tsVersion\n    )\n    </displayVersions>\n    var cmd = nodeArgs.concat(wrapper, script, scriptArgs)\n    var childHookPath = compiler.getChildHookPath()\n    cmd = ['-r', childHookPath].concat(cmd)\n    <logStart>\n    log.debug('Starting child process %s', cmd.join(' '))\n    </logStart>\n    <spawnChildProcess>\n    child = fork(cmd[0], cmd.slice(1), {\n      cwd: process.cwd(),\n      env: process.env\n    })\n    </spawnChildProcess>\n    starting = false\n    var compileReqWatcher = filewatcher({ forcePolling: opts.poll })\n    var currentCompilePath\n    <setupCompileReqWatcher>\n    fs.writeFileSync(compiler.getCompileReqFilePath(), '')\n    compileReqWatcher.add(compiler.getCompileReqFilePath())\n    compileReqWatcher.on('change', function(file) {\n      fs.readFile(file, 'utf-8', function(err, data) {\n        if (err) {\n          log.error('Error reading compile request file', err)\n          return\n        }\n        var split = data.split('\\n')\n        var compile = split[0]\n        var compiledPath = split[1]\n        if (currentCompilePath == compiledPath) return\n        currentCompilePath = compiledPath\n        \n        if (compiledPath) {\n          compiler.compile({\n            compile: compile,\n            compiledPath: compiledPath\n          })\n        }\n      })\n    })\n    </setupCompileReqWatcher>\n    <setupChildProcessListeners>\n    child.on('message', function(message) {\n      if (!message.compiledPath || currentCompilePath === message.compiledPath)\n        return\n      currentCompilePath = message.compiledPath\n      compiler.compile(message)\n    })\n\n    child.on('exit', function(code) {\n      log.debug('Child exited with code %s', code)\n      if (!child) return\n      if (!child.respawn) process.exit(code)\n      child = undefined\n    })\n    </setupChildProcessListeners>\n\n    if (cfg.respawn) {\n      child.respawn = true\n    }\n\n    if (compiler.tsConfigPath) {\n      watcher.add(compiler.tsConfigPath)\n    }\n\n    \n    <setupIpc>\n    ipc.on(child, 'required', function(m) {\n      var isIgnored =\n        cfg.ignore.some(isPrefixOf(m.required)) ||\n        cfg.ignore.some(isRegExpMatch(m.required))\n\n      if (!isIgnored && (cfg.deps === -1 || getLevel(m.required) <= cfg.deps)) {\n        watcher.add(m.required)\n      }\n    })\n\n    \n    ipc.on(child, 'error', function(m) {\n      notify(m.error, m.message, 'error')\n      stop(m.willTerminate)\n    })\n    </setupIpc>\n    <writeReadyFile>\n    compiler.writeReadyFile()\n    </writeReadyFile>\n  }\n"], ["createInstance", "\nfunction (name, params) {\n    <instantiateObject>\n    var newInstance = Object.create(BABYLON.Tools.Instantiate(\"BABYLON.\" + name).prototype);\n    newInstance.constructor.apply(newInstance, params);\n    </instantiateObject>\n    return newInstance;\n}\n"], ["parseRelationships", "\nfunction ( relationships, deformerNodes ) {\n    <processRelationships>\n    var rawBones = [];\n\n    relationships.children.forEach( function ( child ) {\n\n      var boneNode = deformerNodes[ child.ID ];\n\n      if ( boneNode.attrType !== 'Cluster' ) return;\n\n      var rawBone = {\n\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n        transformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n        linkMode: boneNode.Mode,\n\n      };\n\n      if ( 'Indexes' in boneNode ) {\n\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n\n      }\n\n      rawBones.push( rawBone );\n\n    } );\n    </processRelationships>\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n}\n"], ["generatePerson", "\nfunction() {\n    <randomPersonAttributes>\n    var firstName = Math.round((firstNames.length - 1) * randomFunc());\n    var lastName = Math.round((lastNames.length - 1) * randomFunc());\n    var pets = Math.round(10 * randomFunc());\n    var birthyear = 1900 + Math.round(randomFunc() * 114);\n    var birthmonth = Math.round(randomFunc() * 11);\n    var birthday = Math.round(randomFunc() * 29);\n    var birthstate = Math.round(randomFunc() * 49);\n    var residencestate = Math.round(randomFunc() * 49);\n    var travel = randomFunc() * 1000;\n    var income = randomFunc() * 100000;\n    var employed = Math.round(randomFunc());\n    </randomPersonAttributes>\n    <createPersonObject>\n    var person = {\n        last_name: lastNames[lastName],\n        \n        first_name: firstNames[firstName],\n        \n        pets: pets,\n        birthDate: birthyear + '-' + months[birthmonth] + '-' + days[birthday],\n        birthState: states[birthstate],\n        residenceState: states[residencestate],\n        employed: employed === 1,\n        income: income,\n        travel: travel\n    };\n    </createPersonObject>\n    return person;\n}\n"], ["expandSmartyPathAttr", "\nfunction expandSmartyPathAttr(content, tagName, attrName, file) {\n    var attrReg = new RegExp('((?:^|\\\\s)' +\n    her.util.pregQuote(attrName) +\n    '\\\\s*=\\\\s*)(([\\\"\\']).*?\\\\3)', 'ig');\n\n    <filterAndUpdateAttributes>\n    content = tagFilter.filterTag(content,\n      tagName, smarty_left_delimiter, smarty_right_delimiter,\n      function (outter, attr) {\n\n        attr = attr.replace(attrReg,\n          function (all, preCodeHolder, valueCodeHolder) {\n            var info = her.util.stringQuote(valueCodeHolder);\n            var path = info.rest;\n            var ret = info.quote + her.uri.getId(path, file.dirname).id + info.quote;\n            return preCodeHolder + ret;\n          });\n\n        outter = smarty_left_delimiter +\n        tagName + attr +\n        smarty_right_delimiter;\n\n        return outter;\n      });\n    </filterAndUpdateAttributes>\n\n    return content;\n  }\n"], ["initializeTestEnvironment", "\nfunction (done) {\n      \n      app = connect();\n      app = routify(app);\n      \n      <setupMiddleware>\n      app.use(function (req, res, next) {\n\n        req.is = function() {\n          console.warn('Note: req.is() doesn\\'t actually work in our routification shim.  (It always returns false.)');\n          return false;\n        };\n        res.send = function (body) {\n          if (body !== undefined) {\n            res.write(body);\n          }\n          res.end();\n        };\n        res.json = function (body){\n          body = JSON.stringify(body);\n          return res.send(body);\n        };\n        next();\n      });\n      </setupMiddleware>\n      \n      app.use(skipper());\n\n      <startServer>\n      server = app.listen(PORT, done);\n      </startServer>\n\n      <setupGlobalEnvironment>\n      global['_'] = _;\n      global['assert'] = assert;\n      global['request'] = request;\n      global['fsx'] = fsx;\n\n      global['server'] = server;\n      global['app'] = app;\n\n      global['baseurl'] = 'http://<your-domain>:<your-port>';\n      global['domain'] = 'localhost';\n      global['port'] = PORT;\n      </setupGlobalEnvironment>\n\n      <prepareFileFixtures>\n      fileFixtures = [];\n\n      \n      outputDir = new Temporary.Dir();\n\n      \n      for (var bytes=10; bytes <= 100000; bytes*=10) {\n        GENERATE_NONSENSE_FILE(bytes);\n      }\n      \n      for (bytes=10; bytes <= 100000; bytes*=10) {\n        GENERATE_NONSENSE_FILE(bytes);\n      }\n      </prepareFileFixtures>\n\n      global['fixtures'] = {\n        files: fileFixtures,\n        dir: outputDir\n      };\n}\n"], ["DevicesResponse", "\nfunction DevicesResponse(jsonAnswer) {\n    <parseJson>\n    var data = JSON.parse(jsonAnswer);\n    data = data.result.devices;\n    </parseJson>\n\n    <createDevicesArray>\n    var devices = [];\n    if (Array.isArray(data)) {\n        data.forEach(function (value) {\n            devices.push(createDevice(value.key, value.name, value.children));\n        });\n    }\n    </createDevicesArray>\n\n    this.devices = devices;\n}\n"], ["arrayFromObjectValues", "\nfunction(obj){\n    <extractValues>\n    var arr = [];\n    shapeReflections.each(obj, function(value){\n        arr.push(value);\n    });\n    </extractValues>\n    return arr;\n}\n"], ["getFileFromReq", "\nfunction getFileFromReq(req, res) {\n    <validateAndRetrieveFile>\n    var file;\n    file = req.params[0];\n    if ('' === file || 'undefined' === typeof file) {\n        res.status(404).send('No file specified.');\n        return false;\n    }\n    else if (file.lastIndexOf('\\/') === (file.length - 1)) {\n        \n        \n        file = file.substring(0, file.length - 1);\n    }\n    </validateAndRetrieveFile>\n    return file;\n}\n"], ""]