[["f_eposta_to_db_kullanici_id", "\nfunction f_eposta_to_db_kullanici_id(_eposta) {\n    return result.dbQ.hget(result.kp.kullanici.hsetLocalKullanicilari, _eposta);\n}\n"], ["anonymous", "\nfunction() {\n    var canApply = true;\n    <check_layers_cache>\n    for (var i=0, len=this.layers.length; i<len; i++) {\n        if(!this.wfsCache[this.layers[i].id]) {\n            canApply = false;\n            break;\n        }\n    }\n    </check_layers_cache>\n    <execute_queue>\n    canApply && this._queue.call(this);\n    </execute_queue>\n}\n"], ["anonymous", "\nfunction(e) {\n    var E = YAHOO.util.Event,\n        KEYS = YAHOO.util.KeyListener.KEY;\n    <handle_tab_navigation>\n    if (E.getCharCode(e) == KEYS.TAB && !e.shiftKey) {\n        try {\n            E.preventDefault(e);\n            this.firstCtrl.focus();\n        } catch (err) {\n            \n        }\n    }\n    </handle_tab_navigation>\n}\n"], ["getNativeScrollbarWidth", "\nfunction getNativeScrollbarWidth() {\n    var container = document.body;\n    var box = document.createElement(\"div\");\n    var cev = document.createElement(\"div\");\n\n    <create_measure_elements>\n    box.className = HideNativeBarClass;\n    box.style.position = \"absolute\";\n    box.style.pointerEvents = \"none\";\n    box.style.bottom = \"0\";\n    box.style.right = \"0\";\n    box.style.width = \"100px\";\n    box.style.height = \"100px\";\n    box.style.overflow = \"hidden\";\n\n    cev.style.width = \"100%\";\n    cev.style.height = \"100%\";\n    </create_measure_elements>\n\n    <append_measure_elements>\n    box.appendChild(cev);\n    container.appendChild(box);\n    </append_measure_elements>\n\n    var fullWidth = cev.offsetWidth;\n    var fullHeight = cev.offsetHeight;\n\n    <measure_scrollbar>\n    box.style.overflow = \"scroll\";\n\n    var v = fullWidth - cev.offsetWidth;\n    var h = fullHeight - cev.offsetHeight;\n    </measure_scrollbar>\n\n    <cleanup>\n    container.removeChild(box);\n    </cleanup>\n\n    return {\n        v: v,\n        h: h\n    };\n}\n"], ["handleRefresh", "\nfunction handleRefresh (refresh, e) {\n    refresh.node.style.height = refresh.clamp + 'px'\n    refresh.dispatchEvent('refresh')\n    refresh.isRefreshing = true\n}\n"], ["readPreferences", "\nfunction readPreferences(cordovaContext) {\n  \n  <read_config_xml>\n  var configXml = new ConfigXmlHelper(cordovaContext).read();\n  if (configXml == null) {\n    console.warn('config.xml not found! Please, check that it exist\\'s in your project\\'s root directory.');\n    return null;\n  }\n  </read_config_xml>\n\n  \n  <check_universal_links_settings>\n  var ulXmlPreferences = configXml.widget['universal-links'];\n  if (ulXmlPreferences == null || ulXmlPreferences.length == 0) {\n    console.warn('<universal-links> tag is not set in the config.xml. Universal Links plugin is not going to work.');\n    return null;\n  }\n  </check_universal_links_settings>\n\n  var xmlPreferences = ulXmlPreferences[0];\n\n  \n  <construct_hosts_from_preferences>\n  var hosts = constructHostsList(xmlPreferences);\n  </construct_hosts_from_preferences>\n\n  \n  <retrieve_ios_team_id>\n  var iosTeamId = getTeamIdPreference(xmlPreferences);\n  </retrieve_ios_team_id>\n\n  return {\n    'hosts': hosts,\n    'iosTeamId': iosTeamId\n  };\n}\n"], ["anonymous", "\nfunction (data) {\n    var zoomMode = this.state.zoomState.zoomMode;\n    this.state.viewportDimensions = data;\n    <update_zoom>\n    this.updateZoomLevels();\n    this.setZoom(zoomMode);\n    </update_zoom>\n}\n"], ["filename_resolution", "\nfunction(filename){\n    \n    <resolve_symlinks>\n    for (var from in this.symlinks)\n      if (filename.indexOf(from) === 0 && (filename === from || filename[from.length] === '/'))\n        return this.symlinks[from] + filename.substr(from.length);\n    </resolve_symlinks>\n\n    <resolve_path>\n    return path.resolve(this.fsBaseURI, filename.replace(/^[\\\\\\/]/, ''));\n    </resolve_path>\n}\n"], ["deploy_code", "\nfunction(site, env) {\n\n    <log_status>\n    app.status('Pulling code.');\n    </log_status>\n\n    \n    if (firstTime()) {\n\n      \n      <initialize_repository>\n      return terminus.connectionInfo(site, env)\n      </initialize_repository>\n\n      \n      \n      .then(function(bindings) {\n\n        \n        return commands.git(['clone', bindings.git_url, './'])\n\n        \n        .then(function() {\n          if (env !== 'dev') {\n            return commands.git(['fetch', 'origin']);\n          }\n        })\n\n        \n        .then(function() {\n          if (env !== 'dev') {\n            return commands.git(['checkout', env]);\n          }\n        });\n\n      });\n    }\n\n    \n    else {\n      var branch = (env === 'dev') ? 'master' : env;\n      <update_repository>\n      return commands.git(['pull', '-Xtheirs', '--no-edit', 'origin', branch]);\n      </update_repository>\n    }\n\n  }\n"], ["challengeCreateFn", "\nasync function challengeCreateFn(authz, challenge, keyAuthorization) {\n    <log_entry>\n    log('Triggered challengeCreateFn()');\n    </log_entry>\n\n    \n    if (challenge.type === 'http-01') {\n        <handle_http_challenge>\n        const filePath = `/var/www/html/.well-known/acme-challenge/${challenge.token}`;\n        const fileContents = keyAuthorization;\n\n        log(`Creating challenge response for ${authz.identifier.value} at path: ${filePath}`);\n\n        \n        log(`Would write \"${fileContents}\" to path \"${filePath}\"`);\n        </handle_http_challenge>\n    }\n\n    \n    else if (challenge.type === 'dns-01') {\n        <handle_dns_challenge>\n        const dnsRecord = `_acme-challenge.${authz.identifier.value}`;\n        const recordValue = keyAuthorization;\n\n        log(`Creating TXT record for ${authz.identifier.value}: ${dnsRecord}`);\n\n        \n        log(`Would create TXT record \"${dnsRecord}\" with value \"${recordValue}\"`);\n        </handle_dns_challenge>\n    }\n}\n"], "```"]