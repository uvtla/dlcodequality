```javascript
<full>
function full(source) {
        <generatePermutations>
        for (var i = 0, item; i < source.length; i++) {
          item = source.splice(i, 1)[0];
          seen.push(item);

          if (source.length === 0) permutations.push(seen.slice());
          full(source);

          source.splice(i, 0, item);
          seen.pop();
        }
        </generatePermutations>

        return permutations;
      }
</full>

<renameClassName>
function renameClassName(ast, oldName, newName) {
  <findClassDeclaration>
  let defNode = null;

  traverse(ast, {
    ClassDeclaration(path) {
      if (path.node.id && path.node.id.name === oldName) {
        defNode = path.node.id;
      }
    }
  });
  </findClassDeclaration>

  <renameIdentifier>
  if (defNode) {
    return identifier.renameIdentifier(ast, oldName, newName, defNode);
  }
  </renameIdentifier>
  return [];
}
</renameClassName>

<parse_PtgRefErr>
function parse_PtgRefErr(blob, length, opts) {
	var type = (blob.read_shift(1) >>> 5) & 0x03;
	blob.l += 4;
	if(opts.biff == 12) blob.l += 2;
	return [type];
}
</parse_PtgRefErr>

<getScrollParent>
function getScrollParent(parent, child) {
  <calculateScrollOffset>
  let element = child;
  let scrollTop = 0;

  while (element && element !== parent) {
    element = element.parentNode;
    scrollTop += element.scrollTop;
  }
  </calculateScrollOffset>
  return scrollTop;
}
</getScrollParent>

<anonymousConfigureEngine>
function(opt) {
        <logEngineConfiguration>
        console.log("\n\n############ENGINE CONFIGURATION OPTIONS############\n");
        console.dir(opt);
        console.log("\n####################################################\n");
        </logEngineConfiguration>

        <validateEngineOptions>
        if (!opt.hasOwnProperty('engine')) throw ("Please specify a scheduler engine");
        if (opt.engine === "sge")
            engine = sgeLib;
        else if (opt.engine === "slurm")
            engine = slurmLib;
        else if (opt.engine === "emulator") {
            engine = emulatorLib;
            emulator = true;
        }
        if (opt.engine != "emulator") {
            if (!opt.hasOwnProperty('binaries')) throw "You must specify scheduler engine binaries";
        }
        </validateEngineOptions>

        <configureEngine>
        engine.configure(opt.binaries, jobsArray);
        console.log("Engine configured is " + engine.type());
        </configureEngine>
    }
</anonymousConfigureEngine>

<detectType>
function detectType(media, options, src) {
	var mediaFiles = [];
	var i;
	var n;
	var isCanPlay;

	<populateMediaFiles>
	if (options.type) {
		if (typeof options.type == 'string') {
			mediaFiles.push({
				type: options.type,
				url: src
			});
		} else {
			for (i = 0; i < options.type.length; i++) {
				mediaFiles.push({
					type: options.type[i],
					url: src
				});
			}
		}
	} else if (src !== null) {
		mediaFiles.push({
			type: getType(src, media.getAttribute('type')),
			url: src
		});
	} else {
		for (i = 0; i < media.children.length; i++) {
			n = media.children[i];
			if (n.nodeType == 1 && n.tagName.toLowerCase() == 'source') {
				src = n.getAttribute('src');
				mediaFiles.push({
					type: getType(src, n.getAttribute('type')),
					url: src
				});
			}
		}
	}
	</populateMediaFiles>

	<adjustCanPlayTypeFunctionBasedOnEnvironment>
	if (zyMedia.features.isBustedAndroid) {
		media.canPlayType = function(type) {
			return /video\/(mp4|m4v)/i.test(type) ? 'maybe' : ''
		};
	}
	if (zyMedia.features.isChromium) {
		media.canPlayType = function(type) {
			return /video\/(webm|ogv|ogg)/i.test(type) ? 'maybe' : ''
		};
	}
	</adjustCanPlayTypeFunctionBasedOnEnvironment>

	<evaluateMediaFilePlayability>
	if (zyMedia.features.supportsCanPlayType) {
		for (i = 0; i < mediaFiles.length; i++) {
			if (
				mediaFiles[i].type == "video/m3u8" ||
				media.canPlayType(mediaFiles[i].type).replace(/no/, '') !== '' ||
				media.canPlayType(mediaFiles[i].type.replace(/mp3/, 'mpeg')).replace(/no/, '') !== '' ||
				media.canPlayType(mediaFiles[i].type.replace(/m4a/, 'mp4')).replace(/no/, '') !== '') {
				isCanPlay = true;
				break
			}
		}
	}
	</evaluateMediaFilePlayability>

	return isCanPlay
}
</detectType>

<registerHelpers>
function registerHelpers(helpers) {
    var s = this;

    <registerEachHelper>
    var names = Object.keys(helpers || {});
    for (var i = 0, len = names.length; i < len; i++) {
      var name = names[i];
      s.registerHelper(name, helpers[name]);
    }
    </registerEachHelper>

    return s;
  }
</registerHelpers>

<unnamedInsertScale>
function (index, scaleId) {
    scales.splice(index, 0, scale.create(chord.root, scaleId));
  }
</unnamedInsertScale>

<getRelative>
function getRelative(filename) {
    <parseAndJoinFilePath>
    var parsed = chek_1.isString(filename) ? getParsed(filename) : filename;
    return path_1.relative(exports.cwd, path_1.join(parsed.dir, parsed.base || ''));
    </parseAndJoinFilePath>
}
</getRelative>

<formatNumber>
function(nr, dec, decPoint, thousandSep){
		decPoint||(decPoint = '.');
		thousandSep||(thousandSep = ',');
		dec = isNaN(dec = Math.abs(dec)) ? 2 : dec;
		var sign = (nr < 0) ? '-' : '',
		<calculateFormattedNumber>
			i = parseInt(nr = Math.abs(+nr || 0).toFixed(dec), 10) + '',
			j = (j = i.length) > 3 ? j % 3 : 0;
		return sign + (j ? i.substr(0, j) + thousandSep : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + thousandSep) + (dec ? decPoint + Math.abs(nr - i).toFixed(dec).slice(2) : '');
		</calculateFormattedNumber>
	}
</formatNumber>
```