[["initializeHashPartitioner", "\nfunction (partitions) {\n        var jvmObject = new org.apache.spark.HashPartitioner(partitions);\n        JavaWrapper.call(this, jvmObject);\n}\n"], ["initializeCustomElement", "\nfunction () {\n    this.setClass();\n    baseType.init.call(this);\n    var self = this;\n    <bindSelectEvent>\n    var e = this._element;\n    if (/select/i.test(e.tagName)) {\n        this.set_allowSelectFirst(true);\n        this.bindEvent(e, 'change', function () {\n            AtomBinder.setValue(self, 'selectedIndex', e.selectedIndex);\n        });\n    }\n    </bindSelectEvent>\n\n    \n    <defineCommands>\n    this.selectCommand = function () {\n        self.onSelectItem.apply(self, arguments);\n    };\n    this.selectAllCommand = function () {\n        self.set_selectAll(true);\n    };\n    this.clearSelectionCommand = function () {\n        self.set_selectedIndex(-1);\n    };\n    </defineCommands>\n}\n"], ["getNormalizedItem", "\nfunction(argname){\n    var names = this.getNormalizedName(argname), name = names.name;\n    var item = this.list[name];\n    if(!item){ return null;}\n    if(!!item.variety){\n        var pid = (names.pid!==void 0 ? names.pid : this.puzzle.pid);\n        if(item.variety[pid]!==void 0){ return item.variety[pid];}\n    }\n    return item.val;\n}\n"], ["recursiveCopy", "\nasync function copy(src, dist) {\n    <checkSource>\n    let stats = await stat(src);\n    </checkSource>\n    \n    <handleFileCopy>\n    if (!stats.isDirectory()) {\n        return await copyFile(src, dist);\n    }\n    </handleFileCopy>\n\n    <createDestinationDirectory>\n    if (!await stat(dist)) {\n        await local.mkdir(dist);\n    }\n    </createDestinationDirectory>\n\n    <listSourceDirectory>\n    files = await local.readdir(src);\n    </listSourceDirectory>\n\n    <copyRemainingFiles>\n    await Promise.all(files.map(file => (\n        file === 'node_modules' ? Promise.resolve() : copy(path.resolve(src, file), path.resolve(dist, file))\n    )));\n    </copyRemainingFiles>\n}\n"], ["propagateSyntaxToDescendants", "\nfunction propagateSyntax(parent) {\n    if (parent['messages']) {\n        parent['messages'].forEach(function(child) {\n            child[\"syntax\"] = parent[\"syntax\"];\n            propagateSyntax(child);\n        });\n    }\n    if (parent['enums']) {\n        parent['enums'].forEach(function(child) {\n            child[\"syntax\"] = parent[\"syntax\"];\n        });\n    }\n}\n"], ["retrieveUserConfig", "\nfunction getUserConfig(propNames) {\n  \n  <loadAndParseConfig>\n  const config = JSON.parse(utils.loadPackageJson())['eslint-teamcity'] || {};\n  </loadAndParseConfig>\n\n  <determineReporter>\n  const reporter =\n    propNames.reporter || config.reporter || process.env.ESLINT_TEAMCITY_REPORTER || 'errors';\n  </determineReporter>\n\n  <determineReportName>\n  const reportName =\n    propNames.reportName ||\n    config['report-name'] ||\n    process.env.ESLINT_TEAMCITY_REPORT_NAME ||\n    'ESLint Violations';\n  </determineReportName>\n\n  <determineErrorStatisticsName>\n  const errorStatisticsName =\n    propNames.errorStatisticsName ||\n    config['error-statistics-name'] ||\n    process.env.ESLINT_TEAMCITY_ERROR_STATISTICS_NAME ||\n    'ESLint Error Count';\n  </determineErrorStatisticsName>\n\n  <determineWarningStatisticsName>\n  const warningStatisticsName =\n    propNames.warningStatisticsName ||\n    config['warning-statistics-name'] ||\n    process.env.ESLINT_TEAMCITY_WARNING_STATISTICS_NAME ||\n    'ESLint Warning Count';\n  </determineWarningStatisticsName>\n\n  <returnConfigObject>\n  return {\n    reporter,\n    reportName: utils.escapeTeamCityString(reportName),\n    errorStatisticsName: utils.escapeTeamCityString(errorStatisticsName),\n    warningStatisticsName: utils.escapeTeamCityString(warningStatisticsName)\n  };\n  </returnConfigObject>\n}\n"], ["attachView", "\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    <manageEmbeddedViewArray>\n    var embeddedViews = ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, ((viewIndex)), view);\n    </manageEmbeddedViewArray>\n\n    <manageProjectedViews>\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData && dvcElementData !== elementData) {\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (!projectedViews) {\n            projectedViews = dvcElementData.template._projectedViews = [];\n        }\n        projectedViews.push(view);\n    }\n    </manageProjectedViews>\n\n    <updateQueriesAndRender>\n    Services.dirtyParentQueries(view);\n    var prevView = ((viewIndex)) > 0 ? embeddedViews[((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    </updateQueriesAndRender>\n}\n"], ["startServer", "\nfunction listen(port = 4000) {\n    <listenToPort>\n    server.listen(process.env.PORT || config.port || port, () => {\n        <logServerStart>\n        app.drivers.logger.success('Express', `App listening on port ${config.port}`)\n        </logServerStart>\n    })\n    </listenToPort>\n}\n"], ["addControlToMap", "\nfunction (Map, options) {\n    <handleModuleEnvironment>\n    if (typeof module !== 'undefined' && module.exports) {\n        Map.addControl(require('./L.Marker.Pin.Control')(options));\n    }\n    </handleModuleEnvironment>\n    <handleGlobalEnvironment>\n    else {\n        Map.addControl(L.marker.pin.control(options));\n    }\n    </handleGlobalEnvironment>\n}\n"], ["initializeWebGlRenderer", "\nfunction WebGlEquirectRenderer(gl) {\n    this.gl = gl;\n\n    <initializeMatrices>\n    this.invProjMatrix = mat4.create();\n    this.viewportMatrix = mat4.create();\n    </initializeMatrices>\n\n    <createConstantBuffers>\n    this.constantBuffers = createConstantBuffers(gl, vertexIndices, vertexPositions, textureCoords);\n    </createConstantBuffers>\n\n    <createShaderProgram>\n    this.shaderProgram = createShaderProgram(gl, vertexSrc, fragmentSrc, attribList, uniformList);\n    </createShaderProgram>\n}\n"], "```"]