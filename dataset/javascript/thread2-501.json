[["launchPlayground", "\nfunction launchPlayground(){\n    \n    <initializePlayground>\n    $('.playground-item').playground();\n    </initializePlayground>\n\n    \n    <setupEyedropperClickHandler>\n    $('.cp_eyedropper').on('click', function() {\n      if ($(this).next('.cp_grid').hasClass('visuallyhidden')) {\n        $(\".cp_grid\").addClass('visuallyhidden');\n        $(this).next(\".cp_grid\").removeClass('visuallyhidden');\n      } else {\n        $(this).next(\".cp_grid\").addClass('visuallyhidden');\n      }\n    })\n    </setupEyedropperClickHandler>\n    \n    <setupDocumentClickHandler>\n    $(document).on('click', function(event) {\n      if (!$(event.target).closest('.cp_eyedropper').length && !$(event.target).hasClass('playground-list_item')) {\n        $(\".cp_grid\").addClass('visuallyhidden');\n      }\n    });\n    </setupDocumentClickHandler>\n\n    \n    <setupPlaygroundUpdateHandler>\n    $('body').on('playgroundUpdated', '.playground-item', function(){\n      <updatePlaygroundContent>\n      var $input = $(this),\n          base = $input.data('playground'),\n          $playground = $input.closest('.playground'),\n          $codeEl, targetHtmlStr;\n\n      if ( !$playground.length ) $playground = $input.closest('article');\n      $codeEl = $playground.find('.exampleWithCode code');\n\n      if ( $playground.find('.copyable').length ) {\n        targetHtmlStr = $playground.find('.copyable')[0].outerHTML;\n      } else if ( $playground.find('.copyable-inner').length ) {\n        targetHtmlStr = $playground.find('.copyable-inner').html();\n      } else {\n        targetHtmlStr = base.$targetEl[0].outerHTML;\n      }\n\n      $codeEl.html(escapeHtml(targetHtmlStr));\n      </updatePlaygroundContent>\n      <highlightPlaygroundCode>\n      Prism.highlightElement($codeEl[0]);\n      </highlightPlaygroundCode>\n\n    });\n    </setupPlaygroundUpdateHandler>\n    \n    <triggerPlaygroundInputEvent>\n    $('.playground-item').trigger('input');\n    </triggerPlaygroundInputEvent>\n}\n"], ["getArgs", "\nfunction getArgs (uriMappers, location) {\n    var args = null;\n\n    uriMappers.some(mapper => {\n      if (mapper.expression.test(location.path)) {\n        args = mapper.argsMap(location) || Object.create(null);\n        return true;\n      }\n      return false;\n    });\n\n    return args;\n}\n"], ["displayActiveDom", "\nfunction displayActiveDom(ifControlPanel, ifverifySignupLong, ifresetPwdLong) {\n  controlPanelEl.style.display = ifControlPanel ? 'block' : 'none';\n  verifySignupLongEl.style.display = ifverifySignupLong ? 'block' : 'none';\n  resetPwdLongEl.style.display = ifresetPwdLong ? 'block' : 'none';\n}\n"], ["getTimings", "\nfunction getTimings (eventTimes) {\n  return {\n\n      <calculateTimings>\n      dnsLookup: getHrTimeDurationInMs(\n          eventTimes.startAt,\n          eventTimes.dnsLookupAt\n      ),\n      tcpConnection: getHrTimeDurationInMs(\n          eventTimes.dnsLookupAt || eventTimes.startAt,\n          eventTimes.tcpConnectionAt\n      ),\n      \n      tlsHandshake: getHrTimeDurationInMs(\n          eventTimes.tcpConnectionAt,\n          eventTimes.tlsHandshakeAt\n      ),\n      firstByte: getHrTimeDurationInMs((\n          \n          eventTimes.tlsHandshakeAt || eventTimes.tcpConnectionAt ||\n              eventTimes.startAt),\n          eventTimes.firstByteAt\n      ),\n      contentTransfer: getHrTimeDurationInMs(\n          eventTimes.firstByteAt,\n          eventTimes.endAt\n      ),\n      total: getHrTimeDurationInMs(eventTimes.startAt, eventTimes.endAt)\n      </calculateTimings>\n  };\n}\n"], ["createRuleSetMethod", "\nfunction createRuleSetMethod(methodName){\n    return function(){\n      for (var i = 0, rule; rule = this.rules[i]; i++)\n        rule[methodName].apply(rule, arguments);\n    };\n}\n"], ["pongIOrenderButton", "\nfunction pongIOrenderButton( divId, ctx, def, dta ) {\n    \n    <logButtonRenderStart>\n\tlog( \"pong-io\", \"pongIOrenderButton '\"+def.id+\"': \"+JSON.stringify(dta) );\n    </logButtonRenderStart>\n\t\n    <validateButtonPosition>\n\tif ( ! def.pos || ! def.pos.x || ! def.pos.y ) { log( \"pong-ioX\", \"pos.x or pos.y  not set\"); return; }\n    </validateButtonPosition>\n\n    <drawButton>\n\tvar x = parseInt( def.pos.x );\n\tvar y = parseInt( def.pos.y );\n\tvar w = 50;\n\tvar h = 25;\n\tif ( def.width  ) {  w = parseInt( def.width ); }\n\tif ( def.height ) {  h = parseInt( def.height ); }\n\tctx.beginPath();\n\tctx.lineWidth   = \"2\";\n\tctx.strokeStyle = \"#00F\";\n\tctx.fillStyle   = \"#DDD\";\n\tif ( def.lineCol ) { ctx.strokeStyle = def.lineCol; }\n\tif ( def.fillCol ) { ctx.fillStyle   = def.fillCol; }\n\tctx.rect( x, y, w, h );\n\tctx.stroke();\n\tctx.fill();\n    </drawButton>  \n\n    <setupButtonSensing>\n\tioSense[ divId ][ def.id ] = new Object();\n\tioSense[ divId ][ def.id ].x1 = x;\n\tioSense[ divId ][ def.id ].x2 = x + w;\n\tioSense[ divId ][ def.id ].y1 = y;\n\tioSense[ divId ][ def.id ].y2 = y + h;\n    </setupButtonSensing>\n\n    <configureButtonLED>\n\tif ( def.values  &&  def.values.length  ) {\n\t\t\n\t\tvar ledDef = new Object;\n\t\tif ( def.led ) {\n\t\t\tledDef = def.led;\n\t\t} else {\n\t\t\tledDef.id = def.id+\"LED\";\n\t\t\tledDef.pos = new Object();\n\t\t\tledDef.pos.x = x + 2;\n\t\t\tledDef.pos.y = y + 2;\n\t\t\tledDef.ledHeight = 3;\n\t\t}\n\t\tvar ledDta = new Object();\n\t\tledDta.value = 0;\n\t\tif ( dta && dta.value ) {\n\t\t\tfor ( var i = 0; i < def.values.length; i++ ) {\n\t\t\t\tvar btVal = def.values[ i ];\n\t\t\t\t\n\t\t\t\tif ( btVal.buttonState == dta.value ) { \n\t\t\t\t\tledDta.value = btVal.led; \n\t\t\t\t\t\n\t\t\t\t}\t\t\t\t    \n\t\t\t}\n\t\t}\n\t\tpongIOrenderLED( divId, ctx, ledDef, ledDta );\t\n\t\t\n\t}\n    </configureButtonLED>\n\n    <setLabel>\n\tif ( def.label ) {\n\t\tvar xx = x + w/2, yy = y + h/2; \n\t\tctx.textAlign = \"center\"; \n\t\tctx.textBaseline = \"middle\"; \n\t\ttextOut( divId, def, ctx, def.label, xx, yy, { strokeStyle:\"#DDD\" } );\n\t}\n    </setLabel>\n\n    <logButtonRenderEnd>\n\tlog( \"pong-io\", \"pongIOrenderButton end.\");\n    </logButtonRenderEnd>\n}\n"], ["placeholderHandling", "\nfunction () {\n    <retrievePlaceholder>\n    var placeholder = this.getPlaceholder();\n    </retrievePlaceholder>\n\n    <adjustSearchBoxPlaceholder>\n    if (placeholder !== undefined  && this.getVal().length === 0 && this.search.hasClass(\"select2-focused\") === false) {\n        this.search.val(placeholder).addClass(\"select2-default\");\n        \n        this.resizeSearch();\n    } else {\n        \n        this.search.val(\" \").width(10);\n    }\n    </adjustSearchBoxPlaceholder>\n}\n"], ["_applyFilters", "\nfunction _applyFilters(rawdata, filterOptions) {\n    \n    <cloneData>\n    var dataToWorkOn = (JSON.parse(JSON.stringify(rawdata)));\n    </cloneData>\n\n    <calculateWidth>\n    var containerWidth = document.querySelector('#sapUiSupportPerfHeaderTimeline').offsetWidth - document.querySelector('#sapUiSupportPerfHeaderTimelineBarInfoWrapper').offsetWidth;\n    var scrollWidth = 20;\n    </calculateWidth>\n    <initializeFilteredTime>\n    var filteredTime = 1;\n    </initializeFilteredTime>\n\n    <applyTimeFilter>\n    dataToWorkOn = _filterByTime(filterOptions.filterByTime, dataToWorkOn);\n    </applyTimeFilter>\n    <applySorting>\n    dataToWorkOn = _sortBy(filterOptions.orderByValue, dataToWorkOn);\n    </applySorting>\n    <applyMinValueFilter>\n    dataToWorkOn = _filterMinValue(filterOptions.minValue, dataToWorkOn);\n    </applyMinValueFilter>\n\n    <computeWidthSingleUnit>\n    if (dataToWorkOn.length) {\n        filteredTime = filterOptions.filterByTime.end - filterOptions.filterByTime.start;\n    }\n\n    _widthSingleUnit = ((containerWidth - scrollWidth) / filteredTime); \n    </computeWidthSingleUnit>\n\n    return dataToWorkOn;\n}\n"], ["getParent", "\nfunction getParent(model, path) {\n    \n    <invokeGetParent>\n    var getParentMethod = inner(model).getParent;\n    return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    </invokeGetParent>\n}\n"], ["checkExec", "\nfunction checkExec (mode, callback) {\n    \n    <verifyExercisePassed>\n    if (!exercise.passed)\n        return callback(null, true) \n    </verifyExercisePassed>\n\n    <firstExec>\n    execWith(copyTempDir, 'testing', function (err, pass) {\n        if (err)\n            return callback(err)\n        if (!pass) {\n            exercise.emit('fail', 'JavaScript code loads addon, invokes `length(str)` method and prints the return value')\n            return callback(null, false)\n        }\n    </firstExec>\n\n    <secondExec>\n        execWith(copyTempDir, 'this is a longer test string, with spaces in it', function (err, pass) {\n            if (err)\n                return callback(err)\n\n            exercise.emit(pass ? 'pass' : 'fail', 'Add-on receives string, calculates length and returns value')\n            callback(null, pass)\n        })\n    </secondExec>\n}\n"], "```"]