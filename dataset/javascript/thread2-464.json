[["getValueText", "\nfunction getValueText(data) {\n    let value = data[valueLabel];\n    let valueText;\n\n    if (data.missingValue) {\n        valueText = '-';\n    } else {\n        <getFormattedValueToString>\n        valueText = getFormattedValue(value).toString();\n        </getFormattedValueToString>\n    }\n\n    return valueText;\n}\n"], ["svgnode2contours", "\nfunction svgnode2contours(xmlNodes) {\n    var i;\n    var length;\n    var j;\n    var jlength;\n    var segment;\n    var parsedSegments = [];\n\n    <parseXmlNodes>\n    if (xmlNodes.length) {\n        for (i = 0, length = xmlNodes.length; i < length; i++) {\n            var node = xmlNodes[i];\n            var name = node.tagName;\n            if (support[name]) {\n                var supportParams = support[name].params;\n                var params = [];\n                for (j = 0, jlength = supportParams.length; j < jlength; j++) {\n                    params.push(node.getAttribute(supportParams[j]));\n                }\n\n                segment = {\n                    name: name,\n                    params: params,\n                    transform: parseTransform(node.getAttribute('transform'))\n                };\n\n                if (node.parentNode) {\n                    var curNode = node.parentNode;\n                    var transforms = segment.transform || [];\n                    var transAttr;\n                    var iterator = function (t) {\n                        transforms.unshift(t);\n                    };\n                    while (curNode !== null && curNode.tagName !== 'svg') {\n                        transAttr = curNode.getAttribute('transform');\n                        if (transAttr) {\n                            parseTransform(transAttr).reverse().forEach(iterator);\n                        }\n                        curNode = curNode.parentNode;\n                    }\n\n                    segment.transform = transforms.length ? transforms : null;\n                }\n                parsedSegments.push(segment);\n            }\n        }\n    }\n    </parseXmlNodes>\n\n    <generateContours>\n    if (parsedSegments.length) {\n        var result = [];\n        for (i = 0, length = parsedSegments.length; i < length; i++) {\n            segment = parsedSegments[i];\n            var parser = support[segment.name];\n            var contour = parser.parse.apply(null, segment.params);\n            if (contour && contour.length) {\n                var contours = parser.contours ? contour : [contour];\n\n                if (segment.transform) {\n                    contours = contoursTransform(contours, segment.transform);\n                }\n\n                for (j = 0, jlength = contours.length; j < jlength; j++) {\n                    result.push(contours[j]);\n                }\n            }\n        }\n        return result;\n    }\n    </generateContours>\n\n    return false;\n}\n"], ["max", "\nfunction max(x) {\n    var value;\n    <findMaxValue>\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] > value || value === undefined) value = x[i];\n    }\n    </findMaxValue>\n    return value;\n}\n"], ["PlainOverlay", "\nfunction PlainOverlay(target, options) {\n    _classCallCheck(this, PlainOverlay);\n\n    <getTarget>\n    function getTarget(target) {\n        // ... Code that processes the target ...\n    }\n    </getTarget>\n\n    <initProps>\n    var props = {\n        // ... Code that initializes properties ...\n    };\n    </initProps>\n\n    <processOptions>\n    if (arguments.length === 1) {\n        // ... Code that processes the options if there's only one argument ...\n    } else {\n        // ... Code that processes the options if there are multiple arguments ...\n    }\n    if (!options) {\n        // ... Code that assigns default options if none provided ...\n    }\n    </processOptions>\n\n    <handleDOMStructure>\n    // ... Code that sets up the DOM structure and styles for the overlay ...\n    </handleDOMStructure>\n\n    <defineTransition>\n    // ... Code that defines transitions for the overlay ...\n    </defineTransition>\n\n    <addEventListeners>\n    // ... Code that adds various event listeners ...\n    </addEventListeners>\n\n    <handleResize>\n    // ... Code that handles resize events ...\n    </handleResize>\n\n    <initOptions>\n    if (!options.hasOwnProperty('face')) {\n        options.face = null;\n    }\n\n    _setOptions(props, options);\n    </initOptions>\n}\n"], ["handleWheelEvent", "\nfunction (WheelEvent) {\n    var PinsElement = document.getElementById('PinControl-Pins');\n    if (WheelEvent.deltaY) {\n        PinsElement.scrollTop = PinsElement.scrollTop + WheelEvent.deltaY * 10;\n    }\n    WheelEvent.stopPropagation();\n}\n"], ["createRecordConfiguration", "\nfunction (attributes, record) {\n    var configuration = {};\n    configuration.name = attributes.values.name || attributes.values.Name || attributes.values.NAME;\n\n    <checkPointType>\n    if (record.isPointType()) {\n        // ... Code configuring point type entities ...\n    }\n    </checkPointType>\n\n    <checkPolygonType>\n    else if (record.isPolygonType()) {\n        // ... Code configuring polygon type entities ...\n    }\n    </checkPolygonType>\n\n    return configuration;\n}\n"], ["TouchHandlerValidation", "\nfunction (e) {\n    var allow = true;\n\n    <preventDefaultOnTouch>\n    if (\n      TouchHandler.touches &&\n      [\n        'mousedown',\n        'mouseup',\n        'mousemove',\n        'click',\n        'mouseover',\n        'mouseout',\n        'mouseenter',\n        'mouseleave',\n      ].indexOf(e.type) > -1\n    ) {\n        allow = false;\n    }\n    </preventDefaultOnTouch>\n\n    return allow;\n}\n"], ["getBundleIdentifier", "\nfunction getBundleIdentifier(projectObject) {\n    <processPackageName>\n    var packageName = projectObject.getPackageName();\n    var bundleIdentifier = packageName;\n\n    var variables = packageName.match(/\\$\\((\\w+)\\)/);\n    if (variables && variables.length >= 2) {\n        bundleIdentifier = projectObject.xcode.getBuildProperty(variables[1]);\n    }\n    </processPackageName>\n\n    return bundleIdentifier;\n}\n"], ["makeErr", "\nfunction makeErr(linter, result, context = {}) {\n    <checkErrorStatus>\n    context.hasErrors = true\n    const { stdout, stderr, killed, signal } = result\n    if (killed || (signal && signal !== '')) {\n        return throwError(\n            `${symbols.warning} ${chalk.yellow(`${linter} was terminated with ${signal}`)}`\n        )\n    }\n    return throwError(dedent`${symbols.error} ${chalk.redBright(\n        `${linter} found some errors. Please fix them and try committing again.`\n    )}\n    ${stdout}\n    ${stderr}\n    `)\n    </checkErrorStatus>\n}\n"], ["getAdditionalParams", "\nfunction getAdditionalParams() {\n    <buildReturnValues>\n    var retval = {};\n    var installDir = FileUtils.getNativeBracketsDirectoryPath();\n\n    if (installDir) {\n        // ... Code that determines the app path and name ...\n        retval = {\n            installDir: installDir,\n            appName: appName,\n            updateDir: updateDir\n        };\n    }\n    </buildReturnValues>\n    return retval;\n}\n"], "```"]