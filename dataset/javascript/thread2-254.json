[["flattenTree", "\nfunction (tree) {\n    var todo = tree.slice();\n    var done = [];\n    var current;\n    while (todo.length) {\n      current = todo.pop();\n      if (current.nodes) {\n        todo = todo.concat(current.nodes);\n      } else if (current.leaf) {\n        done.push(current);\n      }\n    }\n    return done;\n}\n"], ["markForRemoval", "\nfunction markForRemoval(id, mark) {\n        if (mark) {\n            _idsToRemove[id] = true;\n        } else {\n            delete _idsToRemove[id];\n        }\n        exports.trigger(\"statusChange\", id);\n}\n"], ["initializeSlideshow", "\nfunction() {\n    // Setup slideshow classes and wrappers\n    pgwSlideshow.plugin.removeClass('pgwSlideshow').removeClass(pgwSlideshow.config.mainClassName);\n    pgwSlideshow.plugin.wrap('<div class=\"ps-list\"></div>');\n    pgwSlideshow.plugin = pgwSlideshow.plugin.parent();\n    pgwSlideshow.plugin.wrap('<div class=\"' + pgwSlideshow.config.mainClassName + '\"></div>');\n    pgwSlideshow.plugin = pgwSlideshow.plugin.parent();\n    pgwSlideshow.plugin.prepend('<div class=\"ps-current\"><ul></ul><span class=\"ps-caption\"></span></div>');\n    pgwSlideshow.slideCount = pgwSlideshow.plugin.find('.ps-list > ul > li').length;\n\n    // Verify slides exist\n    if (pgwSlideshow.slideCount == 0) {\n        throw new Error('pgwSlideshow - No slider item has been found');\n        return false;\n    }\n\n    // Setup controls if needed\n    if (pgwSlideshow.slideCount > 1) {\n        // Add navigation controls\n        <addNavigationControls>\n        if (pgwSlideshow.config.displayControls) {\n            pgwSlideshow.plugin.find('.ps-current').prepend('<span class=\"ps-prev\"><span class=\"ps-prevIcon\"></span></span>');\n            pgwSlideshow.plugin.find('.ps-current').append('<span class=\"ps-next\"><span class=\"ps-nextIcon\"></span></span>');\n            pgwSlideshow.plugin.find('.ps-current .ps-prev').click(function() {\n                pgwSlideshow.previousSlide();\n            });\n            pgwSlideshow.plugin.find('.ps-current .ps-next').click(function() {\n                pgwSlideshow.nextSlide();\n            });\n        }\n        </addNavigationControls>\n\n        // Add touch controls\n        <addTouchControls>\n        if (pgwSlideshow.config.touchControls) {\n            pgwSlideshow.plugin.find('.ps-current').on('touchstart', function(e) {\n                // touchstart logic\n            });\n            pgwSlideshow.plugin.find('.ps-current').on('touchmove', function(e) {\n                // touchmove logic\n            });\n            pgwSlideshow.plugin.find('.ps-current').on('touchend', function(e) {\n                pgwSlideshow.touchFirstPosition = null;\n            });\n        }\n        </addTouchControls>\n    }\n    \n    // Populate slides\n    <populateSlides>\n    var elementId = 1;\n    pgwSlideshow.plugin.find('.ps-list > ul > li').each(function() {\n        // Element creation logic\n    });\n    </populateSlides>\n\n    // Display list and set List width\n    <displayListAndSetWidth>\n    if (pgwSlideshow.config.displayList) {\n        // Display list logic\n    } else {\n        pgwSlideshow.plugin.find('.ps-list').hide();\n    }\n    </displayListAndSetWidth>\n\n    // Setup autoSlide interval\n    <setupAutoSlide>\n    if (pgwSlideshow.config.autoSlide) {\n        // autoSlide logic\n    }\n    </setupAutoSlide>\n\n    // Hide all slides initially\n    pgwSlideshow.plugin.find('.ps-current > ul > li').hide();\n\n    // Display the first element\n    displayElement(1);\n\n    // Load image and set size\n    <loadImageAndSetSize>\n    pgwSlideshow.plugin.find('.ps-current > ul > li.elt_1 img').on('load', function() {\n        setSizeClass();\n        // height calculation logic\n    });\n    </loadImageAndSetSize>\n\n    // Set initial size class and show plugin\n    setSizeClass();\n    pgwSlideshow.plugin.show();\n\n    return true;\n}\n"], ["reportAccessingEval", "\nfunction reportAccessingEval(globalScope) {\n            const variable = astUtils.getVariableByName(globalScope, \"eval\");\n\n            if (!variable) {\n                return;\n            }\n\n            const references = variable.references;\n\n            for (let i = 0; i < references.length; ++i) {\n                const reference = references[i];\n                const id = reference.identifier;\n\n                if (id.name === \"eval\" && !astUtils.isCallee(id)) {\n                    report(id);\n                }\n            }\n}\n"], ["encodeQueryMap", "\nfunction encodeQueryMap(map) {\n  var params = [];\n  for (var key in map) {\n    var value = map[key];\n    params.push(key + '=' + urlEncode_(value));\n  }\n  return params.join('&');\n}\n"], ["treeDFS", "\nfunction treeDFS(tree, callback) {\n  for (let it of tree.slice()) {\n    callback(it, tree);\n    if (typeof it === 'object') {\n      treeDFS(it.children, callback);\n    }\n  }\n}\n"], ["usePlugins", "\nfunction usePlugins(core) {\n  var installedPlugins = [];\n  \n  // Plugin installation logic\n  core.use = function(plugin, pluginOptions) {\n    if ( pluginOptions === void 0 ) pluginOptions = {};\n\n    if (!(installedPlugins.indexOf(plugin) > -1)) {\n      plugin(core, pluginOptions);\n      installedPlugins.push(plugin);\n    }\n  };\n\n  core.installedPlugins = installedPlugins;\n\n  return core;\n}\n"], ["eventHandlingWithRetry", "\nfunction() {\n    // Cleanup and interval handling\n    if (onAvailStack.length === 0) {\n        retryCount = 0;\n        if (this._interval) {\n            // Interval cancellation logic\n        } \n        return;\n    }\n\n    // Locking mechanism\n    if (this.locked) {\n        return;\n    }\n\n    // Browser-specific adjustments\n    if (this.isIE) {\n        // IE adjustment logic\n    }\n\n    this.locked = true;\n\n    // Execution with retry logic\n    var tryAgain = !loadComplete;\n    if (!tryAgain) {\n        tryAgain = (retryCount > 0 && onAvailStack.length > 0);\n    }\n\n    var notAvail = [];\n    var executeItem = function (el, item) {\n        // executeItem logic\n    };\n\n    // Event execution logic\n    var i, len, item, el, ready=[];\n    for (i=0, len=onAvailStack.length; i<len; i++) {\n        // Execution attempt and marking unavailable elements\n    }\n    for (i=0, len=ready.length; i<len; i++) {\n        // Execution of ready items\n    }\n\n    // Retry count management and interval handling\n    if (tryAgain) {\n        // Retry logic\n    } else {\n        // Interval cancellation logic\n    }\n\n    this.locked = false;\n}\n"], ["setupSlideshowEventListeners", "\nfunction _setup() {\n    slidesDOMEl.addEventListener(TRANSITION_END, onTransitionEnd)\n    containerDOMEl.addEventListener('touchstart', onTouchstart, EVENT_OPTIONS)\n    containerDOMEl.addEventListener('touchmove', onTouchmove, EVENT_OPTIONS)\n    containerDOMEl.addEventListener('touchend', onTouchend, EVENT_OPTIONS)\n\n    if (index !== 0) {\n      _translate(0)\n    }\n}\n"], ["getValidEnlargeable", "\nfunction getValidEnlargeable( enlargeable ) {\n\treturn enlargeable && enlargeable.type == CKEDITOR.NODE_ELEMENT && enlargeable.hasAttribute( 'contenteditable' ) ?\n\t\tnull : enlargeable;\n}\n"], ""]