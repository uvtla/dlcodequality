[["Naivebayes", "\nfunction Naivebayes(options) {\n  \n  <HandleOptions>\n  this.options = {};\n  if (typeof options !== 'undefined') {\n    if (!options || typeof options !== 'object' || Array.isArray(options)) {\n      throw TypeError(\n        `NaiveBayes got invalid 'options': ${options}'. Pass in an object.`\n      );\n    }\n    this.options = options;\n  }\n  </HandleOptions>\n\n  <InitializeProperties>\n  this.tokenizer = this.options.tokenizer || defaultTokenizer;\n  this.alpha = this.options.alpha || DEFAULT_ALPHA;\n  this.fitPrior = this.options.fitPrior === undefined ? DEFAULT_FIT_PRIOR : this.options.fitPrior;\n  this.vocabulary = {};\n  this.vocabularySize = 0;\n  this.totalDocuments = 0;\n  this.docCount = {};\n  this.wordCount = {};\n  this.wordFrequencyCount = {};\n  this.categories = {};\n  </InitializeProperties>\n}\n"], ["handleHashChange", "\nfunction handleHashChange() {\n  var prefix = '#pipeline-';\n  var hash = location.hash;\n\n  <ExtractPipelineId>\n  var pieces = hash.split(';', 2);\n  var pipelineId = null;\n  if (pieces[0].indexOf(prefix) == 0) {\n    pipelineId = pieces[0].substr(prefix.length);\n  } else {\n    location.hash = '';\n    return;\n  }\n  </ExtractPipelineId>\n\n  <DefaultPipelineId>\n  if (!pipelineId) {\n    pipelineId = STATUS_MAP.rootPipelineId;\n  }\n  </DefaultPipelineId>\n  \n  <ValidatePipeline>\n  var rootMap = STATUS_MAP.pipelines[STATUS_MAP.rootPipelineId];\n  var infoMap = STATUS_MAP.pipelines[pipelineId];\n  if (!rootMap || !infoMap) {\n    return;\n  }\n  </ValidatePipeline>\n\n  <UpdateUI>\n  <UnselectLinks>\n  $('.selected-link').removeClass('selected-link');\n  </UnselectLinks>\n  <UpdateStatusConsoleAndSelectLink>\n  if (pieces[1]) {\n    var statusLink = $(getTreePipelineElementId(pipelineId)).find('.status-links>a:contains(\"' + pieces[1] + '\")');\n    if (statusLink.size() > 0) {\n      var selectedLink = $(statusLink[0]);\n      selectedLink.addClass('selected-link');\n      $('#status-console').attr('src', selectedLink.attr('href'));\n      $('#status-console').show();\n    } else {\n      $('#status-console').hide();\n    }\n  } else {\n    var consoleLink = $(getTreePipelineElementId(pipelineId)).find('a.status-console');\n    if (consoleLink.size() > 0) {\n      var selectedLink = $(consoleLink[0]);\n      selectedLink.addClass('selected-link');\n      $('#status-console').attr('src', selectedLink.attr('href'));\n      $('#status-console').show();\n    } else {\n      $('#status-console').hide();\n    }\n  }\n  </UpdateStatusConsoleAndSelectLink>\n  <SelectAndHighlightPipeline>\n  var selected = $('#link-pipeline-' + pipelineId);\n  selected.addClass('selected-link');\n  selected.parents('.status-box').addClass('selected-link');\n  </SelectAndHighlightPipeline>\n  <UpdateDocumentTitle>\n  document.title = rootMap.classPath + ' - ID #' + STATUS_MAP.rootPipelineId;\n  </UpdateDocumentTitle>\n  <CreateAndInjectStageNode>\n  var stageNode = constructStageNode(pipelineId, infoMap, false);\n  $('#overview').remove();\n  stageNode.attr('id', 'overview');\n  $('#detail').append(stageNode);\n  </CreateAndInjectStageNode>\n  <AdjustStatusConsole>\n  adjustStatusConsole();\n  </AdjustStatusConsole>\n  </UpdateUI>\n}\n"], ["LGraphFXVigneting", "\nfunction LGraphFXVigneting() {\n  <InitializeNode>\n  this.addInput(\"Tex.\", \"Texture\");\n  this.addInput(\"intensity\", \"number\");\n  this.addOutput(\"Texture\", \"Texture\");\n  this.properties = {\n    intensity: 1,\n    invert: false,\n    precision: LGraphTexture.DEFAULT\n  };\n  </InitializeNode>\n\n  <CompileShader>\n  if (!LGraphFXVigneting._shader) {\n    LGraphFXVigneting._shader = new GL.Shader(\n      Shader.SCREEN_VERTEX_SHADER,\n      LGraphFXVigneting.pixel_shader\n    );\n  }\n  </CompileShader>\n}\n"], ["ParseHtml", "\nfunction(){\n  <InitializeParser>\n  this._domParser = modules.domUtils.getDOMParser();\n  </InitializeParser>\n  <SetHtmlString>\n  this._html = '<base id=\"base\" href=\"\"></base><a id=\"link\" href=\"\"></a>';\n  </SetHtmlString>\n  <ParseHtmlString>\n  this._nodes = this._domParser.parseFromString( this._html, 'text/html' );\n  this._baseNode =  modules.domUtils.getElementById(this._nodes,'base');\n  this._linkNode =  modules.domUtils.getElementById(this._nodes,'link');\n  </ParseHtmlString>\n}\n"], ["wrap", "\nfunction wrap (rule) {\n  return ($) => {\n    let value = rule($)\n\n    <ValidateValue>\n    if (typeof value !== 'string') return\n    if (isUrl(value)) return\n    if (value.indexOf('www.') === 0) return\n    if (value.includes('|')) return\n    </ValidateValue>\n\n    <PrepareValue>\n    value = value.replace(/\\s+/g, ' ')\n    value = value.trim()\n    value = value.replace(/^[\\s\\n]*by[\\s\\n]*/im, '')\n    value = toTitleCase(value)\n    </PrepareValue>\n\n    return value\n  }\n}\n"], ["ModifiedDateParser", "\nfunction (module, exports, __webpack_require__) {\n  <RequireDependencies>\n  var $parseInt = __webpack_require__(2).parseInt\n    , $trim = __webpack_require__(81).trim\n    , ws = __webpack_require__(82)\n    , hex = /^[\\-+]?0[xX]/;\n  </RequireDependencies>\n\n  <ExportParser>\n  module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n    var string = $trim(String(str), 3);\n    return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n  } : $parseInt;\n  </ExportParser>\n}\n"], ["isTypeOfKind", "\nfunction isTypeOfKind(type, kind) {\n  <CheckType>\n  if (type.flags & kind) {\n    return true;\n  }\n  </CheckType>\n  <CheckUnionType>\n  if (type.flags & 524288 ) {\n    var types = type.types;\n    for (var _i = 0, types_14 = types; _i < types_14.length; _i++) {\n      var t = types_14[_i];\n      if (!isTypeOfKind(t, kind)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  </CheckUnionType>\n  <CheckIntersectionType>\n  if (type.flags & 1048576 ) {\n    var types = type.types;\n    for (var _a = 0, types_15 = types; _a < types_15.length; _a++) {\n      var t = types_15[_a];\n      if (isTypeOfKind(t, kind)) {\n        return true;\n      }\n    }\n  }\n  </CheckIntersectionType>\n  return false;\n}\n"], ["ParseDateStrings", "\nfunction(sDates) {\n  <InitializeArray>\n  var aReturn = [],\n    aDates = sDates.split(this.Locale.DATE_DELIMITER);\n  </InitializeArray>\n  \n  <ProcessDateStrings>\n  for (var d=0;d<aDates.length;++d) {\n    var sDate = aDates[d];\n  \n    <HandleDateRange>\n    if (sDate.indexOf(this.Locale.DATE_RANGE_DELIMITER) != -1) {\n      var aRange = sDate.split(this.Locale.DATE_RANGE_DELIMITER),\n        dateStart = this._parseDate(aRange[0]),\n        dateEnd = this._parseDate(aRange[1]),\n        fullRange = this._parseRange(dateStart, dateEnd);\n      aReturn = aReturn.concat(fullRange);\n    } \n    </HandleDateRange>\n    <HandleSingleDate>\n    else {\n      var aDate = this._parseDate(sDate);\n      aReturn.push(aDate);\n    }\n    </HandleSingleDate>\n  }\n  </ProcessDateStrings>\n  \n  return aReturn;\n}\n"], ["verifyModifier", "\nfunction verifyModifier(predicate, defaultMessage) {\n  return function () {\n    <ValidatePredicate>\n    var message;\n    if (predicate.apply(null, arguments) === false) {\n      message = arguments[arguments.length - 1];\n      throw new Error(check.unemptyString(message) ? message : defaultMessage);\n    }\n    </ValidatePredicate>\n  };\n}\n"], ["Dictionary", "\nfunction Dictionary(obj) {\n  <ValidateInput>\n  common.arg({ name: 'obj', value: obj, type: Object, required: false });\n  </ValidateInput>\n\n  <InitializeProperties>\n  var self = this,\n    innerDictionary = {};\n  this.onItemAdded = new Event();\n  this.onItemRemoved = new Event();\n  this.onItemChanged = new Event();\n  this.count = 0;\n  this.hasAny = false;\n  </InitializeProperties>\n\n  <DictionaryMethods>\n  <GetItem>\n  this.get = function (key) {\n    common.arg({ name: 'key', value: key, type: String, required: true });\n    return innerDictionary[key];\n  };\n  </GetItem>\n  <DictionaryToObject>\n  this.toObject = function () {\n    return objects.clone(innerDictionary);\n  };\n  </DictionaryToObject>\n  <ForEachItem>\n  this.forEach = function (fn) {\n    objects.forEach(innerDictionary, function (value, key, innerDict) {\n      fn(value, key);\n    });\n    return self;\n  };\n  </ForEachItem>\n  <ClearDictionary>\n  this.clear = function () {\n    self.forEach(function (item, key) {\n      self.remove(key, item);\n    });\n    return self;\n  };\n  </ClearDictionary>\n  <GetKeys>\n  this.getKeys = function () {\n    return Object.keys(innerDictionary);\n  };\n  </GetKeys>\n  <CheckKeyExistence>\n  this.containsKey = function (key) {\n    common.arg({ name: 'key', value: key, type: String, required: true });\n    return arrays.contains(self.getKeys(), key);\n  };\n  </CheckKeyExistence>\n  <RemoveItem>\n  this.remove = function (key) {\n    common.arg({ name: 'key', value: key, type: String, required: true });\n    var item;\n    if (self.containsKey(key)) {\n      item = self.get(key);\n      delete innerDictionary[key];\n      self.count -= 1;\n      self.hasAny = self.count > 0;\n      self.onItemRemoved.raise(item, key);\n    }\n    return self;\n  };\n  </RemoveItem>\n  <SetItem>\n  this.set = function (key, value) {\n    common.arg({ name: 'key', value: key, type: String, required: true });\n    common.arg({ name: 'value', value: value, required: true });\n    if (!self.containsKey(key)) {\n      throw new common.Exception(\"Key '\" + key + \"' does not exist\");\n    }\n    innerDictionary[key] = value;\n    self.onItemChanged.raise(value, key);\n    return self;\n  };\n  </SetItem>\n  <AddItem>\n  this.add = function (key, value) {\n    common.arg({ name: 'key', value: key, type: String, required: true });\n    common.arg({ name: 'value', value: value });\n    if (self.containsKey(key)) {\n      throw new common.Exception(\"Key '\" + key + \"' already exists\");\n    }\n    innerDictionary[key] = value;\n    self.count += 1;\n    self.hasAny = true;\n    self.onItemAdded.raise(value, key);\n    return self;\n  };\n  </AddItem>\n  <AddManyItems>\n  this.addMany = function (obj) {\n    common.arg({ name: 'obj', value: obj, type: Object, required: true });\n    self.clear();\n    objects.forEach(obj, function (item, key) {\n      self.add(key, item);\n    });\n    return self;\n  };\n  </AddManyItems>\n  </DictionaryMethods>\n\n  <InitializeWithObject>\n  if (obj) {\n    self.addMany(obj);\n  }\n  </InitializeWithObject>\n}\n"], "```"]