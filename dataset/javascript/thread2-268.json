[["field", "\nfunction field() {\n  var args = mlutil.asArray.apply(null, arguments);\n  switch(args.length) {\n  case 0:\n    throw new Error('missing field name');\n  case 1:\n    return new FieldDef(new FieldNameDef(args[0]));\n  case 2:\n    return new FieldDef(new FieldNameDef(args[0], args[1]));\n  default:\n    throw new Error('too many arguments for field identifier: '+args.length);\n }\n}\n"], ["resizeChart", "\nfunction (width, height, animation) {\n  var chart = this,\n    chartWidth,\n    chartHeight,\n    fireEndResize;\n\n  chart.isResizing += 1;\n  fireEndResize = function () {\n    if (chart) {\n      fireEvent(chart, 'endResize', null, function () {\n        chart.isResizing -= 1;\n      });\n    }\n  };\n\n  setAnimation(animation, chart);\n\n  chart.oldChartHeight = chart.chartHeight;\n  chart.oldChartWidth = chart.chartWidth;\n  if (defined(width)) {\n    chart.chartWidth = chartWidth = mathMax(0, mathRound(width));\n    chart.hasUserSize = !!chartWidth;\n  }\n  if (defined(height)) {\n    chart.chartHeight = chartHeight = mathMax(0, mathRound(height));\n  }\n\n  (globalAnimation ? animate : css)(chart.container, {\n    width: chartWidth + PX,\n    height: chartHeight + PX\n  }, globalAnimation);\n\n  chart.setChartSize(true);\n  chart.renderer.setSize(chartWidth, chartHeight, animation);\n\n  chart.maxTicks = null;\n  each(chart.axes, function (axis) {\n    axis.isDirty = true;\n    axis.setScale();\n  });\n\n  each(chart.series, function (serie) {\n    serie.isDirty = true;\n  });\n\n  chart.isDirtyLegend = true; \n  chart.isDirtyBox = true; \n\n  chart.layOutTitles(); \n  chart.getMargins();\n\n  chart.redraw(animation);\n\n  chart.oldChartHeight = null;\n  fireEvent(chart, 'resize');\n\n  if (globalAnimation === false) {\n    fireEndResize();\n  } else { \n    setTimeout(fireEndResize, (globalAnimation && globalAnimation.duration) || 500);\n  }\n}\n"], ["createPluginConfig", "\nfunction(name, data) {\n  return {\n    name: null,\n    task: null,\n    weight: 0,\n    inquire: null,\n    conf: {\n      type: 'pluginconfig',\n      key: data.option.name || null,\n      plugin: name\n    }\n  };\n}\n"], ["runTestSuite", "\nfunction run(config) {\n  var specCollector = require('./specCollector'),\n      resultCollector = require('./resultCollector'),\n      inspector = require('./inspector'),\n      spitterOuter = require('./spitterOuter'),\n      summariser = require('./summariser'),\n      XmlWriter = require('./junitXmlWriter'),\n      fs = require('fs'),\n      prepareNodeData = require('./visualiser/prepareNodeData'),\n      allSpecs;\n\n  <outputFileComparison>\n  function outputFileComparison(specs, results) {\n    var files = [specs, results];\n    \n    try {\n      results = inspector(files, config);\n      var writer = new XmlWriter(config);\n      writer.writeResults(results);\n      var output = spitterOuter(results, config);\n      output.forEach(function(line) {\n        console.log(line);\n      });\n      if (config.outputSummary) {\n        var summary = summariser(results);\n        summary.forEach(function(summaryItem) {\n          console.log(summaryItem);\n        });\n      }\n      prepareNodeData(config, files);\n    } catch (e) {\n      if (config.watch) {\n        console.log(\"Still watching... carry on BDD'ing!\");\n      }\n    }\n  }\n  </outputFileComparison>\n\n  <collectResults>\n  function collectResults(specs) {\n    allSpecs = specs;\n    return resultCollector(config.results);\n  }\n  </collectResults>\n\n  <compareOutputFiles>\n  function compareOutputFiles(results) {\n    outputFileComparison(allSpecs, results);\n  }\n  </compareOutputFiles>\n\n  specCollector(config.specs, config.tags)\n    .then(collectResults)\n    .then(compareOutputFiles);\n}\n"], ["colorToRgb", "\nfunction(color) {\n  var rgb;\n  \n  if (color in COLORS) {\n    rgb = COLORS[color];\n    return {\n      r: rgb[0],\n      g: rgb[1],\n      b: rgb[2]\n    };\n  }\n  \n  else if (color[0] === HASH) {\n    return this._hexToRgb(color.substring(1));\n  }\n  \n  else if (color.substr(0, 4) === RGB_PAREN) {\n    rgb = RGB_REGEX.exec(color.replace(/ /g,''));\n    return {\n      r: parseInt(rgb[1], 10),\n      g: parseInt(rgb[2], 10),\n      b: parseInt(rgb[3], 10)\n    };\n  }\n  \n  else {\n    return {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n  }\n}\n"], ["inetLatency", "\nfunction inetLatency(host, callback) {\n  <normalizeArguments>\n  if (util.isFunction(host) && !callback) {\n    callback = host;\n    host = '';\n  }\n  \n  host = host || '8.8.8.8';\n  </normalizeArguments>\n\n  <measureLatency>\n  return new Promise((resolve) => {\n    process.nextTick(() => {\n      let cmd;\n      if (_linux || _freebsd || _openbsd || _darwin) {\n        if (_linux) {\n          cmd = 'ping -c 2 -w 3 ' + host + ' | grep rtt';\n        }\n        if (_freebsd || _openbsd) {\n          cmd = 'ping -c 2 -t 3 ' + host + ' | grep round-trip';\n        }\n        if (_darwin) {\n          cmd = 'ping -c 2 -t 3 ' + host + ' | grep avg';\n        }\n        \n        exec(cmd, function (error, stdout) {\n          <calculateAndReturnResult>\n          let result = -1;\n          if (!error) {\n            const line = stdout.toString().split('=');\n            if (line.length > 1) {\n              const parts = line[1].split('/');\n              if (parts.length > 1) {\n                result = parseFloat(parts[1]);\n              }\n            }\n          }\n          if (callback) { callback(result); }\n          resolve(result);\n          </calculateAndReturnResult>\n        });\n      }\n      \n      if (_sunos) { /* ... similar structure as above */ }\n      \n      if (_windows) { /* ... similar structure as above */ }\n    });\n  });\n  </measureLatency>\n}\n"], ["convertPatternProperties", "\nfunction convertPatternProperties (data) {\n  Object.keys(data.properties).map(function (key) {\n    if (/^\\/.*\\/$/.test(key)) {\n      data.patternProperties = data.patternProperties || {}\n      const stringRegex = key.slice(1, -1)\n      data.patternProperties[stringRegex] = data.properties[key]\n      delete data.properties[key]\n    }\n  })\n  return data\n}\n"], ["ApiDox", "\nfunction ApiDox() {\n  this.settings = {\n    input: '',\n    inputText: null,\n    inputTitle: '',\n    output: '',\n    fullSourceDescription: false\n  };\n  this.anchors = {};\n  this.comments = [];\n  this.curSection = null;\n  this.fileComment = {};\n  this.lines = [];\n  this.params = {};\n  this.returns = {};\n  this.sees = [];\n  this.toc = [];\n  this.throws = [];\n}\n"], ["applyMask", "\nfunction applyMask(mask) {\n  var x, y, r3x, r3y;\n  \n  switch (mask) {\n    /* ... mask application code with nested loops ... */\n  }\n}\n"], ["createFolder", "\nfunction(url, projectName, serverPath, create) {\n  var d = new orion.Deferred();\n  this.createFolder(url, projectName).then(function(project) {\n    project.ContentLocation = project.Location;\n    d.resolve(project);\n  }, d.reject);\n  return d;\n}\n"], ""]