[["updateStateWithEvent", "\nfunction (state, ev) {\n    if(state.dirtyTs + 200 < ev.ts && state.queue) {\n      state.cleanTs = ev.ts\n      state.writing = true\n      state.dirty = false\n      return {state: state, effects: {type: 'write'}}\n    }\n    return state\n}\n"], ["parseUrlAndUpdateWithLinks", "\nfunction parseUrl (text) {\n  \n  var urls = url_regex; \n\n  text = text ? String(text).replace(/<[^>]+>/gm, '') : '';  \n  \n  if (text.match(urls)) {\n    text = text.replace(urls, \"<a href=\\\"$1\\\" target=\\\"_blank\\\">$1</a>\")  \n  }\n\n  return text.replace(/\\n\\r?/g, '<br />');\n\n}\n"], ["generateStylesXML", "\nfunction write_sty_xlml(wb, opts) {\n  var styles = ['<Style ss:ID=\"Default\" ss:Name=\"Normal\"><NumberFormat/></Style>'];\n  opts.cellXfs.forEach(function(xf, id) {\n    var payload = [];\n    payload.push(writextag('NumberFormat', null, {\"ss:Format\": escapexml(SSF._table[xf.numFmtId])}));\n    styles.push(writextag('Style', payload.join(\"\"), {\"ss:ID\": \"s\" + (21+id)}));\n  });\n  return writextag(\"Styles\", styles.join(\"\"));\n}\n"], ["checkAndFireCallback", "\nfunction maybeFireCallback() {\n  \n  if (callbackFired) return;\n  \n  if (stdoutReady && stderrReady && wantCallback && !callbackFired) {\n    callbackFired = true;\n    callback(callbackErr, stdout);\n  }\n}\n"], ["persistData", "\nfunction(newData) {\n  \n  var def = $wilddogUtils.defer();\n  this.$ref().set($wilddogUtils.toJSON(newData), $wilddogUtils.makeNodeResolver(def));\n  return def.promise;\n}\n"], ["filterCommands", "\nfunction filter(unparsed) {\n  var cmds = this.commands()\n    , alias = this.finder.getCommandByName;\n  var i, l = unparsed.length;\n  for(i = 0;i < l;i++) {\n    \n    if(alias(unparsed[i], cmds)) {\n      unparsed.splice(i, 1);\n      i--;\n      l--;\n    }\n  }\n  \n  return unparsed;\n}\n"], ["takeScreenshotAndRestart", "\nfunction() {\n  var that = this;\n  \n  if ($$logging.get('screenshots').enabled) {\n    \n    <captureScreenshot>\n    var filename = $$logging.get('screenshots').filename.replace('{date}', moment().format('YYYYMMDDhhmmss'));\n    logger.info('Saving screenshot to ' + filename);\n\n    var winCmd = path.join(__dirname, '../tools', 'nircmd.exe');\n    var winArgs = ['savescreenshotfull', filename];\n    \n    var macCmd = '/usr/sbin/screencapture';\n    var macArgs = ['-x', '-t', 'jpg', '-C', filename];\n\n    var cmd = process.platform === 'win32' ? winCmd : macCmd;\n    var args = process.platform === 'win32' ? winArgs : macArgs;\n\n    var screenshot = child_process.spawn(cmd, args);\n    screenshot.on('close', function(code, signal) {\n      logger.info('Screenshot saved, restarting.');\n      restart();\n    });\n    </captureScreenshot>\n\n  } else {\n    restart();\n  }\n\n  <restartProcess>\n  function restart() {\n    var restartCount = that.get('restartCount');\n    restartCount++;\n    \n    var logList = 'App went away: ' + restartCount + ' times\\n\\n';\n    _.each($$logging.get('logCache'), function(log) {\n      logList += log.time + ' ' + log.level + ': ' + log.msg + '\\n';\n    });\n    logger.error(logList);\n\n    that.trigger('crash');\n\n    if (restartCount >= that.get('restartMachineAfter')) {\n      logger.info('Already restarted app ' + that.get('restartMachineAfter') + ' times, rebooting machine.');\n      that.restartMachine();\n      return;\n    }\n\n    that.set('restartCount', restartCount);\n    that._isStartingUp = false;\n    that._isShuttingDown = false;\n    that.restartApp();\n  }\n  </restartProcess>\n}\n"], ["transpileAndSave", "\nfunction transpile (opts) {\n  const babelOptions = Object.assign({}, BABEL_CONFIG, opts.babelOptions);\n  return new Promise((resolve, reject) => {\n    babel.transformFile(opts.file, babelOptions, (err, result) => {\n      if (err) return reject(err);\n\n      <writeTransformedFile>\n      const destFile = opts.file.replace(opts.src, opts.dest);\n      const destDir = path.dirname(destFile);\n\n      fs.ensureDir(destDir, (err) => {\n        if (err) return reject(err);\n        fs.writeFile(destFile, result.code, (err) => {\n          if (err) return reject(err)\n          resolve(destFile);\n        });\n      });\n      </writeTransformedFile>\n    });\n  });\n}\n"], ["convertColorToLab", "\nfunction getLab(color) {\n  var xyz = getXYZ(color);\n\n  var white = [ 95.047, 100.000, 108.883 ]; \n\n  var x = fromXYZValueToLabValue(xyz[0], white[0]);\n  var y = fromXYZValueToLabValue(xyz[1], white[1]);\n  var z = fromXYZValueToLabValue(xyz[2], white[2]);\n\n  return [\n      116 * y - 16,\n      500 * (x - y),\n      200 * (y - z)\n  ]\n}\n"], ["removeResourceAndDependencies", "\nfunction destroy (req, res, next) {\n  var resource = db.get(name).removeById(utils.toNative(req.params.id)).value()\n\n  <removeDependentData>\n  var removable = db._.getRemovable(db.getState())\n\n  _.each(removable, function (item) {\n    db.get(item.name).removeById(item.id).value()\n  })\n  </removeDependentData>\n\n  if (resource) {\n    res.locals.data = {}\n  }\n\n  next()\n}\n"], "```"]