[["createRoot", "\nfunction createRoot(tail) {\n\tlet list = [tail];\n\tlist.height = 1;\n\tlist.sizes = [tail.length];\n\treturn list;\n}\n"], ["handleClick", "\nfunction handleClick(event) {\n        <findTarget>\n        var targetEl = browser.ie ? event.target.parentNode : event.target,\n            $link = $(targetEl),\n            data = $link.data('link');\n        </findTarget>\n\n        <broadcastEvent>\n        if (data) {\n            scope.broadcast('linkclick', data);\n        }\n        </broadcastEvent>\n\n        <preventDefaultAction>\n        event.preventDefault();\n        </preventDefaultAction>\n    }\n"], ["keyMirror", "\nfunction(obj) {\n  <checkType>\n  var ret = {};\n  var key;\n  invariant(\n    obj instanceof Object && !Array.isArray(obj),\n    'keyMirror(...): Argument must be an object.'\n  );\n  </checkType>\n\n  <mirrorKeys>\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  </mirrorKeys>\n  \n  return ret;\n}\n"], ["prepareRules", "\nfunction prepareRules(options, rules, defaultDir) {\n  <findRules>\n  rules = u.findRules(options, rules, defaultDir);\n  </findRules>\n  \n  var anyStartRules = [];\n  var anyEndRules = [];\n  var typeToRules = {'': anyStartRules, 'end': anyEndRules};\n\n  <classifyRules>\n  rules.forEach(function (rule) {\n    var ruleTypes = rule.type || [];\n    ruleTypes = Array.isArray(ruleTypes) ? ruleTypes : [ruleTypes];\n    if (ruleTypes.length === 0) {\n      ruleTypes.push('');\n    }\n    \n    ruleTypes.forEach(function (ruleType) {\n      <addRulesToCorrespondingTypes>\n      if (ruleType === '') {\n        anyStartRules.push(rule);\n        \n        Object.keys(typeToRules).forEach(function (key) {\n          if (key !== '' && key !== 'end' && key.substring(0,4) !== 'end-') {\n            typeToRules[key].push(rule);\n          }\n        });\n      } else if (ruleType === 'end') {\n        anyEndRules.push(rule);\n        \n        Object.keys(typeToRules).forEach(function (key) {\n          if (key !== '' && key.substring(0,4) === 'end-') {\n            typeToRules[key].push(rule);\n          }\n        });\n      } else {\n        if (!(ruleType in typeToRules)) {\n          typeToRules[ruleType] = [];\n          if (ruleType.substring(0,4) !== 'end-') {\n            \n            typeToRules[ruleType] = [].concat(anyStartRules);\n          } else {\n            \n            typeToRules[ruleType] = [].concat(anyEndRules);\n          }\n        }\n        \n        typeToRules[ruleType].push(rule);\n      }\n      </addRulesToCorrespondingTypes>  \n    });\n  });\n  </classifyRules>\n\n  return typeToRules;\n}\n"], ["unnamedFunction1", "\nfunction (res, args) {\n            var tplcfg = this._tplcfg;\n            if (!tplcfg) {\n                <autoDisposeCheck>\n                if (args.autoDispose) {\n                    res.moduleCtrlPrivate.$dispose();\n                }\n                </autoDisposeCheck>\n                return;\n            }\n\n            <initializeTemplateConfiguration>\n            var tplDiv = this._subTplDiv; \n\n            tplcfg.tplDiv = tplDiv;\n\n            tplcfg.data = this._cfg.data;\n\n            \n            if (res.moduleCtrl) {\n                tplcfg.moduleCtrl = res.moduleCtrl;\n            } else {\n                tplcfg.context = this._context;\n            }\n            if (args.autoDispose) {\n                if (tplcfg.toDispose == null) {\n                    tplcfg.toDispose = [res.moduleCtrlPrivate];\n                } else {\n                    tplcfg.toDispose.push(res.moduleCtrlPrivate);\n                }\n            }\n            \n            var tplCtxt = this.subTplCtxt;\n            tplCtxt.parent = this._context;\n\n            res = tplCtxt.initTemplate(tplcfg);\n            this._initCtxDone = true;\n            </initializeTemplateConfiguration>\n\n            <processTemplateResult>\n            if (res) {\n                tplCtxt.dataReady(); \n                \n                if (tplDiv && tplCtxt._cfg) {\n                    tplDiv.className = tplDiv.className + \" \" + tplCtxt.getCSSClassNames(true);\n                    tplCtxt.$onOnce({\n                        \"Ready\" : this.__innerTplReadyCb,\n                        scope : this\n                    });\n                    tplCtxt.$refresh();\n                }\n                \n                this.tplcfg = null;\n\n            } else {\n                tplCtxt.$dispose();\n                this.subTplCtxt = null;\n            }\n\n            tplDiv = null;\n            </processTemplateResult>\n        }\n"], ["addScopes", "\nfunction(scopes) {\n                <logOperation>\n                console.log('iamInterface.group.addScopes', scopes);\n                </logOperation>\n                \n                <validateScopeId>\n                corbel.validate.value('id', this.id);\n                </validateScopeId>\n                \n                <makeRequest>\n                return this.request({\n                    url: this._buildUriWithDomain(this.uri, this.id) + '/scope',\n                    method: corbel.request.method.PUT,\n                    data: scopes,\n                    withAuth: true\n                });\n                </makeRequest>\n            }\n"], ["interpolate", "\nfunction interpolate(table, skey, sval, tkey) {\n\t<lookupRange>\n\tvar range = lookup(table, skey, sval);\n\t</lookupRange>\n\n\t<computeInterpolation>\n\tvar prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n\tvar next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n\n\tvar span = next[skey] - prev[skey];\n\tvar ratio = span ? (sval - prev[skey]) / span : 0;\n\tvar offset = (next[tkey] - prev[tkey]) * ratio;\n\t</computeInterpolation>\n\n\treturn prev[tkey] + offset;\n}\n"], ["setSamplerParameters", "\nfunction setSamplerParameters(gl, sampler, options) {\n  <setTextureSamplerParameters>\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n  </setTextureSamplerParameters>\n}\n"], ["unnamedFunction2", "\nfunction(association, rel, expanded, fn, thisArg) {\n    var assoc = association.split('.');\n    var index = assoc.length - 1;\n    var sourceRelation = _.last(expanded);\n    var expandedAssoc = assoc.slice(1);\n\n    <iterateExpandedRelations>\n    expanded.forEach(function(rel) {\n      expandedAssoc.push(rel.expansionName);\n      fn.call(thisArg, expandedAssoc.join('.'), rel, {\n        through: rel,\n        expanded: true,\n        source: (rel === sourceRelation),\n        index: -1,\n      });\n    });\n    </iterateExpandedRelations>\n\n    <callFinalFunction>\n    fn.call(thisArg, assoc.join('.'), sourceRelation, {\n      through: rel,\n      expanded: false,\n      source: true,\n      index: index,\n    });\n    </callFinalFunction>\n  }\n"], ["OrderConstructor", "\nfunction Order(properties) {\n                        if (properties)\n                            <setProperties>\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                            </setProperties>\n                    }\n"], "```"]