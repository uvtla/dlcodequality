[["setOptions", "\nfunction(options) {\n      inputEx.CombineField.superclass.setOptions.call(this, options);\n\n      <classNameOption>\n      this.options.className = options.className ? options.className : 'inputEx-CombineField';\n      </classNameOption>\n\n      <separatorsOption>\n      this.options.separators = options.separators;\n      </separatorsOption>\n   }\n"], ["constructor", "\nfunction Activity(activityDate, activityType, affectingFund, affectingActor, balancePrimary) {\n  this.activityDate = activityDate;\n  this.activityType = activityType;\n  this.affectingFund = affectingFund;\n  this.affectingActor = affectingActor;\n  this.renderedBalancePrimary = balancePrimary;\n  this.renderedBalanceSecondary = null;\n}\n"], ["compareFunction", "\nfunction (a, b) {\n  if (!b.pos || !a.pos) {\n      return (a.pos ? -Infinity : Infinity);\n  }\n  <positionComparison>\n  var result = b.pos.z - a.pos.z;\n  return (result ? result : (b.pos.y - a.pos.y));\n  </positionComparison>\n}\n"], ["flatten", "\nfunction flatten (options) {\n  <setFlattenOption>\n  this.options.flatten = is.bool(options) ? options : true;\n  </setFlattenOption>\n  \n  <setColourOption>\n  if (is.object(options)) {\n    this._setColourOption('flattenBackground', options.background);\n  }\n  </setColourOption>\n  \n  return this;\n}\n"], ["zoomFunction", "\nfunction (zoomLevel, redraw) {\n  this._zoomLevel = zoomLevel / 100;\n\n  <centeringImage>\n  if (this._keepCenter) {\n      this.centerImage(false);\n  }\n  </centeringImage>\n\n  <redrawingImage>\n  if (redraw === true) {\n      this.redraw();\n  }\n  </redrawingImage>\n}\n"], ["constructor", "\nfunction Notification(name, object, info) {\n  this.name = name;\n  this.object = object;\n  this.info = info;\n}\n"], ["maybeProxy", "\nfunction maybeProxy(jolokiaUrl, url) {\n  <applyProxyToJolokiaURL>\n  if (jolokiaUrl && _.startsWith(jolokiaUrl, 'proxy/')) {\n      log.debug(\"Jolokia URL is proxied, applying proxy to: \", url);\n      return join('proxy', url);\n  }\n  </applyProxyToJolokiaURL>\n\n  var origin = window.location['origin'];\n\n  <applyProxyToExternalURL>\n  if (url && (_.startsWith(url, 'http') && !_.startsWith(url, origin))) {\n      log.debug(\"Url doesn't match page origin: \", origin, \" applying proxy to: \", url);\n      return join('proxy', url);\n  }\n  </applyProxyToExternalURL>\n\n  <noProxyNeeded>\n  log.debug(\"No need to proxy: \", url);\n  return url;\n  </noProxyNeeded>\n}\n"], ["smembersFunction", "\nfunction smembers(key, req) {\n  var val = this.getKey(key, req);\n  if(val === undefined) return [];\n  \n  <returnData>\n  return val.data;\n  </returnData>\n}\n"], ["cleanup", "\nfunction () {\n  <unlinkDebugFile>\n  this._fsUnlink(path.join(this.base, DEBUG_File));\n  </unlinkDebugFile>\n\n  <removeCacheDirectory>\n  if (!this.options.combo) {\n      this._fsRmdir(path.join(this.output, CACHE_DIR));\n  }\n  </removeCacheDirectory>\n}\n"], ["createRunner", "\nfunction createRunner(builderInstance) {\n    var runnerInstance={\n        name:builderInstance.name,\n        builder:builderInstance,\n        \n        <runnerRunMethod>\n        run: function (input,callback) {\n            var context =\n                createContext(null, (input==null) ? {} : input);\n\n            exec(builderInstance.root, context, function(err,result){\n                if (callback){\n                    callback(err,result);\n                }\n            });\n        },\n        </runnerRunMethod>\n    };\n    \n    return runnerInstance;\n}\n"], ""]