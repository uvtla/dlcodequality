<drawSelectionRange>
function drawSelectionRange(cm,range$$1,output){
    <variables_initialization>
    var display=cm.display,doc=cm.doc;
    var fragment=document.createDocumentFragment();
    var padding=paddingH(cm.display),leftSide=padding.left;
    var rightSide=Math.max(display.sizerWidth,displayWidth(cm)-display.sizer.offsetLeft)-padding.right;
    var docLTR=doc.direction=="ltr";
    </variables_initialization>
    <add_function>
    function add(left,top,width,bottom){
        if(top<0){top=0;}
        top=Math.round(top);bottom=Math.round(bottom);
        fragment.appendChild(elt("div",null,"CodeMirror-selected","position: absolute; left: "+left+"px;\n                             top: "+top+"px; width: "+(width==null?rightSide-left:width)+"px;\n                             height: "+(bottom-top)+"px"));
    }
    </add_function>
    <drawForLine_function>
    function drawForLine(line,fromArg,toArg){
        var lineObj=getLine(doc,line);
        var lineLen=lineObj.text.length;
        var start,end;
        <coords_function>
        function coords(ch,bias){return _charCoords(cm,Pos(line,ch),"div",lineObj,bias);}
        </coords_function>
        <wrapX_function>
        function wrapX(pos,dir,side){
            var extent=wrappedLineExtentChar(cm,lineObj,null,pos);
            var prop=dir=="ltr"==(side=="after")?"left":"right";
            var ch=side=="after"?extent.begin:extent.end-(/\s/.test(lineObj.text.charAt(extent.end-1))?2:1);
            return coords(ch,prop)[prop];
        }
        </wrapX_function>
        var order=getOrder(lineObj,doc.direction);
        iterateBidiSections(order,fromArg||0,toArg==null?lineLen:toArg,function(from,to,dir,i){
            var ltr=dir=="ltr";
            var fromPos=coords(from,ltr?"left":"right");
            var toPos=coords(to-1,ltr?"right":"left");
            var openStart=fromArg==null&&from==0,openEnd=toArg==null&&to==lineLen;
            var first=i==0,last=!order||i==order.length-1;
            if(toPos.top-fromPos.top<=3){
                var openLeft=(docLTR?openStart:openEnd)&&first;
                var openRight=(docLTR?openEnd:openStart)&&last;
                var left=openLeft?leftSide:(ltr?fromPos:toPos).left;
                var right=openRight?rightSide:(ltr?toPos:fromPos).right;
                add(left,fromPos.top,right-left,fromPos.bottom);
            }else{
                <multiline_selection_logic>
                var topLeft,topRight,botLeft,botRight;
                if(ltr){
                    topLeft=docLTR&&openStart&&first?leftSide:fromPos.left;
                    topRight=docLTR?rightSide:wrapX(from,dir,"before");
                    botLeft=docLTR?leftSide:wrapX(to,dir,"after");
                    botRight=docLTR&&openEnd&&last?rightSide:toPos.right;
                }else{
                    topLeft=!docLTR?leftSide:wrapX(from,dir,"before");
                    topRight=!docLTR&&openStart&&first?rightSide:fromPos.right;
                    botLeft=!docLTR&&openEnd&&last?leftSide:toPos.left;
                    botRight=!docLTR?rightSide:wrapX(to,dir,"after");
                }
                add(topLeft,fromPos.top,topRight-topLeft,fromPos.bottom);
                if(fromPos.bottom<toPos.top){add(leftSide,fromPos.bottom,null,toPos.top);}
                add(botLeft,toPos.top,botRight-botLeft,toPos.bottom);
                </multiline_selection_logic>
            }
            if(!start||cmpCoords(fromPos,start)<0){start=fromPos;}
            if(cmpCoords(toPos,start)<0){start=toPos;}
            if(!end||cmpCoords(fromPos,end)<0){end=fromPos;}
            if(cmpCoords(toPos,end)<0){end=toPos;}
        });
        return{start:start,end:end};
    }
    </drawForLine_function>
    var sFrom=range$$1.from(),sTo=range$$1.to();
    if(sFrom.line==sTo.line){drawForLine(sFrom.line,sFrom.ch,sTo.ch);}else{
        <multi_line_selection>
        var fromLine=getLine(doc,sFrom.line),toLine=getLine(doc,sTo.line);
        var singleVLine=visualLine(fromLine)==visualLine(toLine);
        var leftEnd=drawForLine(sFrom.line,sFrom.ch,singleVLine?fromLine.text.length+1:null).end;
        var rightStart=drawForLine(sTo.line,singleVLine?0:null,sTo.ch).start;
        if(singleVLine){
            if(leftEnd.top<rightStart.top-2){
                add(leftEnd.right,leftEnd.top,null,leftEnd.bottom);
                add(leftSide,rightStart.top,rightStart.left,rightStart.bottom);
            }else{
                add(leftEnd.right,leftEnd.top,rightStart.left-leftEnd.right,leftEnd.bottom);
            }
        }
        if(leftEnd.bottom<rightStart.top){add(leftSide,leftEnd.bottom,null,rightStart.top);}
        </multi_line_selection>
    }
    output.appendChild(fragment);
}
</drawSelectionRange>

<convolve>
function convolve(src, kernel, tgt) {
    <validate_input>
    if (!src.length || !kernel.length) return src;
    </validate_input>

    <initialize_target>
    var i = 0, 
        j = 0, 
        a = 0, 
        b = 0, 
        w = src.length, 
        l = src[0].length, 
        m = kernel.length, 
        n = kernel[0].length; 
    
    if (typeof tgt === 'undefined') {
        tgt = new Array(w);
        for (i = 0; i < w; i++) {
            tgt[i] = new Float64Array(l);
        }
    }
    </initialize_target>
    
    <perform_convolution>
    for (i = 0; i < w; i++) {
        for (j = 0; j < l; j++) {
            var last = 0;
            tgt[i][j] = 0;
            
            for (a = 0; a < m; a++) {
                for (b = 0; b < n; b++) {
                    <check_source_boundary>
                    if (typeof src[i+a] !== 'undefined' &&
                        typeof src[i+a][j+b] !== 'undefined') {
                        last = src[i+a][j+b];
                    }
                    </check_source_boundary>
                    
                    <calculate_convolution>
                    tgt[i][j] += last * kernel[a][b];
                    </calculate_convolution>
                }
            }
        }
    }
    </perform_convolution>

    return tgt;
}
</convolve>

<ejs_renderFile_wrapper>
function () {
    <render_and_handle_error>
    return ejs.renderFile(file, data, options, function (error, content) {
        if (error) {
            self.emit("error", error);
            return callback(-2);
        }
        
        return callback({
            "data": new Buffer(content), 
            "mimeType": "text/html"
        });
    });
    </render_and_handle_error>
}
</ejs_renderFile_wrapper>

<getSignerClass>
function getSignerClass(request) {
    var version;
    <retrieve_operation_data>
    var operation = null;
    var authtype = '';
    if (request) {
      var operations = request.service.api.operations || {};
      operation = operations[request.operation] || null;
      authtype = operation ? operation.authtype : '';
    }
    </retrieve_operation_data>
    
    <decide_version>
    if (this.config.signatureVersion) {
      version = this.config.signatureVersion;
    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {
      version = 'v4';
    } else {
      version = this.api.signatureVersion;
    }
    </decide_version>
    
    <get_signer>
    return AWS.Signers.RequestSigner.getVersion(version);
    </get_signer>
  }
</getSignerClass>

<process_entry>
function(entry) {
    <check_entry>
    if (entry) {
        if (successCallback) {
            <create_result>
            var result = (entry.isDirectory) ? new (require('./DirectoryEntry'))(entry.name, entry.fullPath, entry.filesystem) : new (require('org.apache.cordova.file.FileEntry'))(entry.name, entry.fullPath, entry.filesystem);
            </create_result>
            <success_callback_invocation>
            successCallback(result);
            </success_callback_invocation>
        }
    }
    </check_entry>
    else {
        <handle_failure>
        fail && fail(FileError.NOT_FOUND_ERR);
        </handle_failure>
    }
}
</process_entry>

<getCommits>
function getCommits(repo, branchName) {
    <retrieve_commits>
  return caller.call(repo, repo.commits, branchName)
    </retrieve_commits>
    <map_commits>
  .then(function (commits) {
    return commits.map(function (commitObj) {
      return {
        id: commitObj.id,
        message: commitObj.message,
        committed_date: commitObj.committed_date
      }
    })
  })
  </map_commits>
}
</getCommits>

<ApiError_constructor>
function ApiError(response, client) {
  <set_properties>
  this.name = "heap.ApiError";
  this.response = response;
  this.client = client;
  this.message = this.toString();
  </set_properties>
  <capture_error_stack>
  Error.captureStackTrace(this, ApiError);
  </capture_error_stack>
}
</ApiError_constructor>

<evaluate_tree_function>
function (env) {
    <eval_args>
    var args = this.args.map(function (a) { return a.eval(env) });
    </eval_args>
    <invoke_tree_function>
    if (this.name in tree.functions) { 
        try {
            return tree.functions[this.name].apply(tree.functions, args);
        } catch (e) {
            throw { type: e.type || "Runtime",
                    message: "error evaluating function `" + this.name + "`" +
                             (e.message ? ': ' + e.message : ''),
                    index: this.index, filename: this.filename };
        }
    </invoke_tree_function>
    else { 
        <create_anonymous_tree_instance>
        return new(tree.Anonymous)(this.name +
               "(" + args.map(function (a) { return a.toCSS(env) }).join(', ') + ")");
        </create_anonymous_tree_instance>
    }
}
</evaluate_tree_function>

<isSatisfiable>
function isSatisfiable (comparators, options) {
  <evaluate_satisfiability>
  var result = true
  var remainingComparators = comparators.slice()
  var testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every(function (otherComparator) {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }
  </evaluate_satisfiability>

  return result
}
</isSatisfiable>

<parse_arguments>
function(args, optNames) {
		<process_args>
		var opt = {"_": []}; 
		for (var i = 0; i < args.length; i++) {
			var arg = new String(args[i]);
			var name;
			var value;
			if (arg.charAt(0) == "-") {
				if (arg.charAt(1) == "-") { 
					arg = arg.substring(2);
					var m = arg.split("=");
					name = m.shift();
					value = m.shift();
					if (typeof value == "undefined") value = true;
					
					for (var n in optNames) { 
						if (name == optNames[n]) {
							name = n;
						}
					}
				}
				else { 
					arg = arg.substring(1);
					var m = arg.split("=");
					name = m.shift();
					value = m.shift();
					if (typeof value == "undefined") value = true;
					
					for (var n in optNames) { 
						if (name == n || name+'[]' == n) {
							name = n;
							break;
						}
					}
				}
				if (name.match(/(.+)\[\]$/)) { 
					name = RegExp.$1;
					if (!opt[name]) opt[name] = [];
				}
				
				if (opt[name] && opt[name].push) {
					opt[name].push(value);
				}
				else {
					opt[name] = value;
				}
			}
			else { 
				opt._.push(args[i]);
			}
		}
		</process_args>
		return opt;
	}
</parse_arguments>