[["solveIntersection", "\nfunction solveIntersection (a, b, c, d) {\n  var ba = rvSub(b, a)\n  var dc = rvSub(d, c)\n\n  var baXdc = ratPerp(ba, dc)\n\n  if (ratSign(baXdc) === 0) {\n    return null\n  }\n\n  var ac = rvSub(a, c)\n  var dcXac = ratPerp(dc, ac)\n\n  var t = ratDiv(dcXac, baXdc)\n  var s = rvMuls(ba, t)\n  var r = rvAdd(a, s)\n\n  return r\n}\n"], ["defineGlobalObject", "\nfunction(module, exports) {\n  (function(global) {\"use strict\";\n  <determineRootObject>\n  var objectTypes = {\n      'boolean': false,\n      'function': true,\n      'object': true,\n      'number': false,\n      'string': false,\n      'undefined': false\n  };\n  exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n  var freeGlobal = objectTypes[typeof global] && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n      exports.root = freeGlobal;\n  }\n  </determineRootObject>\n  \n  }.call(exports, (function() { return this; }())))\n}\n"], ["loadProviders", "\nfunction loadProviders (store, cid, callback) {\n  pull(\n    store.query({ prefix: makeProviderKey(cid) }),\n    pull.map((entry) => {\n      const parts = entry.key.toString().split('/')\n      const lastPart = parts[parts.length - 1]\n      const rawPeerId = utils.decodeBase32(lastPart)\n      return [new PeerId(rawPeerId), readTime(entry.value)]\n    }),\n    pull.collect((err, res) => {\n      if (err) {\n        return callback(err)\n      }\n\n      return callback(null, new Map(res))\n    })\n  )\n}\n"], ["getFromAttribute", "\nfunction getFromAttribute(component, propertyName, source) {\n  var value;\n  var mappings = source.mappings || {};\n  var route = component.name + '.' + propertyName;\n  var primitiveAttribute = <findPrimitiveAttribute>findAttribute(mappings, route);</findPrimitiveAttribute>\n  if (primitiveAttribute && source.hasAttribute(primitiveAttribute)) {\n    value = source.getAttribute(primitiveAttribute);\n  }\n  return value;\n\n  function findAttribute(mappings, route) {\n    var attributes = Object.keys(mappings);\n    for (var i = 0, l = attributes.length; i < l; i++) {\n      var attribute = attributes[i];\n      if (mappings[attribute] === route) {\n        return attribute;\n      }\n    }\n    return undefined;\n  }\n}\n"], ["removeClass", "\nfunction removeClass(element, name) {\n    var oldList = <classListExtraction>classList(element),</classListExtraction>\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    \n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    \n    element.className = newList.substring(1, newList.length - 1);\n}\n"], ["createFieldRequest", "\nfunction createFieldRequest(columnName, position) {\n\n    if (util.isNaN(position) || position <= 0) {\n        throw new TypeError('Position should be a number which is higher than one!');\n    }\n\n    var xw = createXMLWriter();\n\n    xw = xw.startElement('gs:cell')\n        .writeAttribute('row', 1)\n        .writeAttribute('col', position)\n        .writeAttribute('inputValue', columnName)\n        .endElement();\n\n    return xw.endElement().toString();\n}\n"], ["parseQueryMap", "\nfunction parseQueryMap(query) {\n  var map = {};\n  parseQueryString(query, function(key, value) {\n    map[key] = value;\n  });\n  return map;\n}\n"], ["customizeMethods", "\nfunction customizeMethods(custom) {\n  _.each(custom, function(classMethods, className) {\n    _.extend(xml2js.CLASSES[className].methods, _.pick(classMethods, function(methodSpec, methodName) {\n      return isValidMethodSpec(methodSpec, className + '.' + methodName);\n    }));\n  });\n}\n"], ["getClass", "\nfunction getClass(value) {\n      if (value == null) {\n        return value === null ? <identifyNullType>'Null'</identifyNullType> : <identifyUndefinedType>'Undefined'</identifyUndefinedType>;\n      }\n      try {\n        var result = <extractClassName>_.result(/^\\[object (.*?)\\]$/.exec(toString.call(value)), 1);</extractClassName>\n      } catch(e) {}\n\n      return result || '';\n}\n"], ["defaultConfiguration", "\nfunction defaultConfiguration(config) {\n  config = _.defaults({}, config, {\n    <setDefaultValues>\n    name: 'Sparky',\n    endpoint: '/relay',\n    convos: [],\n    sending_address: config.address,\n    inbound_address: config.address,\n    transport: 'sparkpost',\n    restrict_inbound: true,\n    logger: 'verbose',\n    size_limit: '50mb'\n    </setDefaultValues>\n  });\n\n  config.address = <cleanAddresses>\n  cleanAddress(config.address);\n  config.sending_address = cleanAddress(config.sending_address);\n  config.inbound_address = cleanAddress(config.inbound_address);\n  </cleanAddresses>\n\n  config.logger = <setupLogger>\n  _.isString(config.logger) ? require('./logger')(config.logger) : config.logger;\n  </setupLogger>\n\n  return config;\n}\n"], ""]