[["_setCollectionFrom", "\nfunction _setCollectionFrom(COLLECTION) {\n  _export(_export.S, COLLECTION, { from: function from(source ) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    _aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) _aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = _ctx(mapFn, arguments[2], 2);\n      _forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      _forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n}\n"], ["DataProtocol", "\nfunction DataProtocol (id, socket) {\n  this.id = id;\n  this._socket = socket;\n  this._buffer = new Buffer(0);\n  this._debug = utils.debug('protocol:' + id);\n  var me = this;\n\n  <assignDataListener>\n  socket.on('data', function (data) {\n    me._onData(data);\n  });\n  </assignDataListener>\n\n  this._midCounter = 0;\n  this._msgCallback = {};\n\n  this._debug('create');\n}\n"], ["modifyStyle", "\nfunction(name, value, cancel_sync) {\n  \n  if (value == null) {\n    <removeStyle>\n    this.removeStyle(name, cancel_sync);\n    </removeStyle>\n  } else {\n    this._static_styles[name] = value;\n    if (this._is_inDOM && !cancel_sync) \n      <setDOMStyle>\n      Firestorm.Element.setStyle(this.getDOMElement(), name, value);\n      </setDOMStyle>\n  }\n}\n"], ["needMoreData", "\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n"], ["lookup", "\nfunction lookup(locale, format, obj) {\n  if (!locale) throw new Error('missing required \"locale\" parameter');\n  locale = locale.toLowerCase().replace('-', '_');\n  format = format || 'cardinal';\n\n  <prepareLocale>\n  var p = obj[format];\n  if (!p) throw new Error('unsupported format \"' + format + '\"');\n  var fn = p[locale] || p[locale.split('_')[0]];\n  if (fn) return fn;\n  </prepareLocale>\n\n  throw new Error('unsupported locale \"' + locale + '\"');\n}\n"], ["normalizeCaps", "\nfunction normalizeCaps(settings) {\n  var features = settings.required_features, caps = {};\n  \n  <resolveFeatureMapping>\n  function resolve(feature, value, strict) {\n    \n    var map = { ... };\n    \n    if (map[feature]) {\n      caps[map[feature]] = value;\n    } else if (!strict) {\n      caps[feature] = value;\n    }\n  }\n  </resolveFeatureMapping>\n  \n  <handleFeatureSettings>\n  if (typeof(features) === 'string') {\n    plupload.each(features.split(/\\s*,\\s*/), function(feature) {\n      resolve(feature, true);\n    });\n  } else if (typeof(features) === 'object') {\n    plupload.each(features, function(value, feature) {\n      resolve(feature, value);\n    });\n  } else if (features === true) {\n    // Several statements handling special cases \n  }\n  \n  return caps;\n}\n"], ["mergeMultiSelectEvents", "\nfunction mergeMultiSelectEvents ( queue ) {\n  var multiSelectCollections = {};  \n  _.each( queue, function ( event, index ) {\n    // Code block to process individual events\n  });\n  \n  // Code block to process multiSelectCollections\n}\n"], ["resolveDocumentConstraint", "\nfunction resolveDocumentConstraint(constraintDefinition) {\n  if (typeof constraintDefinition === 'function') {\n    var dbName = userContext ? userContext.db : null;\n    return constraintDefinition(newDoc, oldDoc, dbName);\n  } else {\n    return constraintDefinition;\n  }\n}\n"], ["toSnakeCase", "\nfunction (s) {\n  return s.replace(strColons, '/')\n          .replace(strWords, '$1_$2')\n          .replace(strLowUp, '$1_$2')\n          .replace(strDash, '_')\n          .toLowerCase();\n}\n"], ["adoptChildNodes", "\nfunction() {\n  return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n    return SVG.adopt(node)\n  });\n}\n"], "```\nThe entire function complies with SRP as it solely performs the adoption of child nodes into the SVG context."]