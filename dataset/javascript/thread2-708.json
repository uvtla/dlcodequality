[["bindBtn", "\nfunction bindBtn () {\n  <addEventListenerPreBtn>\n  ele.querySelector('.mip-carousel-preBtn').addEventListener('click', function (event) {\n    \n    if (!btnLock.stop) {\n      return\n    }\n\n    btnLock.stop = 0\n\n    imgIndex = imgIndex - 1\n\n    clearInterval(moveInterval)\n    move(wrapBox, imgIndex + 1, imgIndex)\n    if (isAutoPlay) {\n      autoPlay()\n    }\n  }, false)\n  </addEventListenerPreBtn>\n\n  <addEventListenerNextBtn>\n  ele.querySelector('.mip-carousel-nextBtn').addEventListener('click', function (event) {\n    \n    if (!btnLock.stop) {\n      return\n    }\n\n    btnLock.stop = 0\n\n    imgIndex = imgIndex + 1\n    clearInterval(moveInterval)\n    move(wrapBox, imgIndex - 1, imgIndex)\n    if (isAutoPlay) {\n      autoPlay()\n    }\n  }, false)\n  </addEventListenerNextBtn>\n}\n"], ["fetchAll", "\nasync function fetchAll(connection, query, params){\n\n  <executeQuery>\n  const [result] = await _query(connection, query, params);\n  </executeQuery>\n\n  \n  return result || [];\n}\n"], ["anonymousFunction1", "\nfunction (oEvent) {\n  var bShowRuleProperties = true,\n    oSelectedRule = this.model.getProperty(\"/selectedRule\"),\n    bAdditionalRulesetsTab = oEvent.getParameter(\"selectedKey\") === \"additionalRulesets\";\n\n  <decideVisibility>\n  if (bAdditionalRulesetsTab || !oSelectedRule) {\n    bShowRuleProperties = false;\n  }\n  </decideVisibility>\n\n  \n  \n  <loadAdditionalRulesets>\n  if (!this.bAdditionalRulesetsLoaded && bAdditionalRulesetsTab) {\n    this.rulesViewContainer.setBusyIndicatorDelay(0);\n    this.rulesViewContainer.setBusy(true);\n    CommunicationBus.publish(channelNames.GET_NON_LOADED_RULE_SETS, {\n      loadedRulesets: this._getLoadedRulesets()\n    });\n  }\n  </loadAdditionalRulesets>\n\n  this.getView().getModel().setProperty(\"/showRuleProperties\", bShowRuleProperties);\n}\n"], ["_fnAjaxUpdateDraw", "\nfunction _fnAjaxUpdateDraw ( settings, json )\n{\n  \n  \n  <handleCompatibility>\n  var compat = function ( old, modern ) {\n    return json[old] !== undefined ? json[old] : json[modern];\n  };\n  \n  var draw            = compat( 'sEcho',                'draw' );\n  var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n  var rocordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n  </handleCompatibility>\n\n  <checkDrawValid>\n  if ( draw ) {\n    \n    if ( draw*1 < settings.iDraw ) {\n      return;\n    }\n    settings.iDraw = draw * 1;\n  }\n  </checkDrawValid>\n\n  <updateTableData>\n  _fnClearTable( settings );\n  settings._iRecordsTotal   = parseInt(recordsTotal, 10);\n  settings._iRecordsDisplay = parseInt(rocordsFiltered, 10);\n  \n  var data = _fnAjaxDataSrc( settings, json );\n  for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n    _fnAddData( settings, data[i] );\n  }\n  settings.aiDisplay = settings.aiDisplayMaster.slice();\n  \n  settings.bAjaxDataGet = false;\n  _fnDraw( settings );\n  \n  if ( ! settings._bInitComplete ) {\n    _fnInitComplete( settings, json );\n  }\n  \n  settings.bAjaxDataGet = true;\n  _fnProcessingDisplay( settings, false );\n  </updateTableData>\n}\n"], ["anonymousFunction2", "\nfunction (array) {\n  var self = this,\n    deferred = new Deferred(),\n    fulfilled = false,\n    index, length,\n    <defineSuccessHandler>\n    onSuccess = function (value) {\n      if (!fulfilled) {\n        fulfilled = true;\n        deferred.emitSuccess(value);\n      }\n    },\n    </defineSuccessHandler>\n    <defineErrorHandler>\n    onError = function (error) {\n      if (!fulfilled) {\n        fulfilled = true;\n        deferred.emitSuccess(error);\n      }\n    };\n    </defineErrorHandler>\n\n  <handlePromises>\n  if (!isArray(array)) {\n    array = slice.call(arguments);\n  }\n  for (index = 0, length = array.length; index < length; index += 1) {\n    this.when(array[index], onSuccess, onError);\n  }\n  </handlePromises>\n  \n  return deferred.getPromise();\n}\n"], ["getResOutput", "\nfunction getResOutput(res) {\n  if (res.$ && res.$.data && res.$.data.output) {\n    return res.$.data.output;\n  }\n}\n"], ["anonymousFunction3", "\nfunction(oEvent) {\n  var oTouch;\n\n  <eventHandling>\n  if (bHandleEvent) {\n    oTouch = oEvent.touches[0];\n\n    \n    if (Math.abs(oTouch.clientX - iStartX) > 10 || Math.abs(oTouch.clientY - iStartY) > 10) {\n      bIsMoved = true;\n    }\n\n    if (bIsMoved) {\n\n      \n      fireMouseEvent(\"mousemove\", oEvent);\n    }\n  }\n  </eventHandling>\n}\n"], ["initCasperCli", "\nfunction initCasperCli(casperArgs) {\n  var baseTestsPath = fs.pathJoin(phantom.casperPath, 'tests');\n\n  <handleVersion>\n  if (!!casperArgs.options.version) {\n    return __terminate(phantom.casperVersion.toString())\n  } \n  </handleVersion>\n  <handleTestArgument>\n  else if (casperArgs.get(0) === \"test\") {\n    phantom.casperScript = fs.absolute(fs.pathJoin(baseTestsPath, 'run.js'));\n    phantom.casperTest = true;\n    casperArgs.drop(\"test\");\n    phantom.casperScriptBaseDir = fs.dirname(casperArgs.get(0));\n  } \n  </handleTestArgument>\n  <handleSelftestArgument>\n  else if (casperArgs.get(0) === \"selftest\") {\n    phantom.casperScript = fs.absolute(fs.pathJoin(baseTestsPath, 'run.js'));\n    phantom.casperSelfTest = phantom.casperTest = true;\n    casperArgs.options.includes = fs.pathJoin(baseTestsPath, 'selftest.js');\n    if (casperArgs.args.length <= 1) {\n        casperArgs.args.push(fs.pathJoin(baseTestsPath, 'suites'));\n    }\n    casperArgs.drop(\"selftest\");\n    phantom.casperScriptBaseDir = fs.dirname(casperArgs.get(1) || fs.dirname(phantom.casperScript));\n  } \n  </handleSelftestArgument>\n  <handleHelpArgument>\n  else if (casperArgs.args.length === 0 || !!casperArgs.options.help) {\n    return printHelp();\n  }\n  </handleHelpArgument>\n\n  <setScriptPath>\n  if (!phantom.casperScript) {\n    phantom.casperScript = casperArgs.get(0);\n  }\n  </setScriptPath>\n\n  <verifyScriptPath>\n  if (!fs.isFile(phantom.casperScript)) {\n    return __die('Unable to open file: ' + phantom.casperScript);\n  }\n  </verifyScriptPath>\n\n  <setScriptBaseDir>\n  if (!phantom.casperScriptBaseDir) {\n    var scriptDir = fs.dirname(phantom.casperScript);\n    if (scriptDir === phantom.casperScript) {\n      scriptDir = '.';\n    }\n    phantom.casperScriptBaseDir = fs.absolute(scriptDir);\n  }\n  </setScriptBaseDir>\n\n  \n  casperArgs.drop(phantom.casperScript);\n}\n"], ["argFolderFunction", "\nfunction(arg) {\n  <checkArgument>\n  if (!arg) {\n    return this;\n  }\n  </checkArgument>\n\n  <handleRegExp>\n  if (arg instanceof RegExp) {\n    return this.filter(function(relativePath, file) {\n      return file.options.dir && arg.test(relativePath);\n    });\n  }\n  </handleRegExp>\n\n  \n  <resolveName>\n  var name = this.root + arg;\n  var newFolder = folderAdd.call(this, name);\n  </resolveName>\n\n  \n  <returnNewInstance>\n  var ret = this.clone();\n  ret.root = newFolder.name;\n  return ret;\n  </returnNewInstance>\n}\n"], ["_resolvePackagePathSync", "\nfunction _resolvePackagePathSync(base, relativePath) {\n  var originalBase = base;\n  <checkCache>\n  if (!(base in packagePathCache)) {\n    packagePathCache[base] = {};\n  }\n  </checkCache>\n\n  <useCache>\n  var cache = packagePathCache[base];\n  if (relativePath in cache) {\n    return cache[relativePath];\n  }\n  </useCache>\n\n  <determinePackagePath>\n  var packagePath;\n  if (relativePath[0] === '.' || relativePath[0] === '/') {\n    packagePath = resolve(base, relativePath);\n    if (existsSync(packagePath)) {\n      packagePath = realpathSync(packagePath);\n      cache[relativePath] = packagePath;\n      return packagePath;\n    }\n  } else {\n    var newBase;\n    while (base) {\n      packagePath = resolve(base, 'node_modules', relativePath);\n      if (existsSync(packagePath)) {\n        packagePath = realpathSync(packagePath);\n        cache[relativePath] = packagePath;\n        return packagePath;\n      }\n      newBase = resolve(base, '..');\n      if (base === newBase) {\n        break;\n      }\n      base = newBase;\n    }\n  }\n  </determinePackagePath>\n\n  <handleError>\n  var err = new Error('Can\\'t find \"' + relativePath + '\" relative to \"' + originalBase + '\"');\n  err.code = 'ENOENT';\n  throw err;\n  </handleError>\n}\n"], ""]