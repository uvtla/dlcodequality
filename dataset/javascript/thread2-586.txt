<buildMap>
function buildMap(map, part) {
    <makeName>
    var name = makeName(part.fileName);
    </makeName>

    <updateMap>
    if (map[name]) {
        map[name].parts.push(part);
    } else {
        map[name] = {
            name: name,
            parts: [part],
        };
    }
    </updateMap>

    return map;
}
</buildMap>

<buildPaths>
function buildPaths(initialPaths, optionPaths) {
    <initializePaths>
    const paths = Array.isArray(initialPaths) ? initialPaths : [initialPaths]
    </initializePaths>

    <concatenatePaths>
    if (_.isString(optionPaths)) {
        paths.push(optionPaths)
    } else if (Array.isArray(optionPaths)) {
        paths.push(...optionPaths)
    }
    </concatenatePaths>

    return paths
}
</buildPaths>

<init>
function init() {
    <domManipulation>
    <computeScrollProperties>
    if ($el.hasClass('horizontal')) {
        scrollDirection = 'horiz';
        scrollOffsetAttr = 'scrollLeft';
        sizeAttr = 'width';
        offsetAttr = 'left';
    }
    </computeScrollProperties>

    <insertScrollbar>
    $el.prepend('<div class="tse-scrollbar"><div class="drag-handle"></div></div>');
    $scrollbarEl = $el.find('.tse-scrollbar');
    $dragHandleEl = $el.find('.drag-handle');
    </insertScrollbar>

    <wrapContent>
    if (options.wrapContent) {
        $contentEl.wrap('<div class="tse-scroll-content" />');
    }
    $scrollContentEl = $el.find('.tse-scroll-content');
    </wrapContent>
    
    resizeScrollContent();
    </domManipulation>

    <eventHandlers>
    if (options.autoHide) {
        $el.on('mouseenter', flashScrollbar);
    }

    $dragHandleEl.on('mousedown', startDrag);
    $scrollbarEl.on('mousedown', jumpScroll);
    $scrollContentEl.on('scroll', onScrolled);
    </eventHandlers>

    resizeScrollbar();

    <windowResizeHandler>
    $(window).on('resize', function() {
        recalculate();
    });
    </windowResizeHandler>

    <scrollbarVisibility>
    if (!options.autoHide) {
        showScrollbar();
    }
    </scrollbarVisibility>
}
</init>

<unknownFunction>
function(state, node) {
</unknownFunction>  <---- This function is missing its name and proper closure, making annotation difficult and potentially inaccurate.

<decompressOutput>
function decompressOutput(output, br) {
    output.value = br.readVarint();
    <decompressScriptWrapper>
    decompressScript(output.script, br);
    </decompressScriptWrapper>
    return output;
}
</decompressOutput>

<modifyConfig>
function(o) {
</modifyConfig>  <---- This function is missing its name, making annotation difficult and potentially inaccurate.

<removeListeners>
function(type, checks) {
    var handler = checks[0],
        global = checks[1];
    if (global) {
        this.removeGlobal(type, handler);
    } else {
        this.remove(type, handler);
    }
}
</removeListeners>

<write>
function write(arr, str, range) {
    const offset = range[0];
    arr[offset] = str;
    for (let i = offset + 1; i < range[1]; i++) {
        arr[i] = undefined;
    }
}
</write>

<enforce>
function enforce(opts = {}) {
    var optional = opts.optional || false
    var range = opts.range
    var whichExec = opts.which
    var packageName = opts.packageName || opts.which
    var versionCommand = opts.versionCommand
    var installMessage = opts.installMessage
    var versionMatcher = opts.versionMatcher || defaultVersionMatcher

    <printNotMetMessage>
    function printNotMetMessage(installedVersion) {
        console.log('Ignite CLI requires ' + packageName + ' ' + range + ' to be installed.')
        if (installedVersion) {
            console.log('')
            console.log('You currently have ' + installedVersion + ' installed.')
        }
        console.log('')
        console.log(installMessage)
    }
    </printNotMetMessage>

    <getVersion>
    function getVersion() {
        try {
            var resolvedPath = which.sync(whichExec)
            var result = shell.exec(`"${resolvedPath}" ${versionCommand}`, { silent: true })
            var rawOut = ramda.trim(result.stdout || '')
            var rawErr = ramda.trim(result.stderr || '') 
            var raw = rawOut
            if (ramda.isEmpty(raw)) {
                raw = rawErr
            }
            if (ramda.isEmpty(raw)) {
                raw = null
            }
            return versionMatcher(raw)
        } catch (err) {
            return null
        }
    }
    </getVersion>

    <checkInstallation>
    var isInstalled = Boolean(shell.which(whichExec))

    if (!isInstalled) {
        if (optional) {
            return true
        } else {
            printNotMetMessage()
            return false
        }
    }
    </checkInstallation>

    <validateVersion>
    try {
        var installedVersion = getVersion()
        var isMet = semver.satisfies(installedVersion, range)
        if (isMet) return true
    } catch (err) {
        printNotMetMessage(installedVersion)
        return false
    }
    </validateVersion>
}
</enforce>

<selectorToken>
function() {
</selectorToken>  <---- This function is missing its name and proper closure, making annotation difficult and potentially inaccurate.