[["processArray", "\nfunction processArray(req, res, nextarray) {\n    <argumentValidation>\n    if (!nextarray || !nextarray.length)\n        return;\n    </argumentValidation>\n    <recursiveProcessing>\n    var proc = nextarray.shift();\n    proc(req, res, function () {\n        processArray(req, res, nextarray);\n    });\n    </recursiveProcessing>\n}\n"], ["buildLineContent", "\nfunction buildLineContent(cm, lineView) {\n    <elementCreation>\n    var content = elt(\"span\", null, null, webkit ? \"padding-right: .1px\" : null);\n    var builder = {pre: elt(\"pre\", [content]), content: content, col: 0, pos: 0, cm: cm};\n    lineView.measure = {};\n    </elementCreation>\n\n    <lineStyling>\n    for (var i = 0; i <= (lineView.rest ? lineView.rest.length : 0); i++) {\n        var line = i ? lineView.rest[i - 1] : lineView.line, order;\n        builder.pos = 0;\n        builder.addToken = buildToken;\n        </lineStyling>\n\n        <browserSpecificAdjustments>\n        if ((ie || webkit) && cm.getOption(\"lineWrapping\"))\n            builder.addToken = buildTokenSplitSpaces(builder.addToken);\n        if (hasBadBidiRects(cm.display.measure) && (order = getOrder(line)))\n            builder.addToken = buildTokenBadBidi(builder.addToken, order);\n        </browserSpecificAdjustments>\n        \n        <lineContentInsertion>\n        builder.map = [];\n        var allowFrontierUpdate = lineView != cm.display.externalMeasured && lineNo(line);\n        insertLineContent(line, builder, getLineStyles(cm, line, allowFrontierUpdate));\n        </lineContentInsertion>\n\n        <styleClassesApplication>\n        if (line.styleClasses) {\n            if (line.styleClasses.bgClass)\n                builder.bgClass = joinClasses(line.styleClasses.bgClass, builder.bgClass || \"\");\n            if (line.styleClasses.textClass)\n                builder.textClass = joinClasses(line.styleClasses.textClass, builder.textClass || \"\");\n        }\n        </styleClassesApplication>\n\n        <mapAndCacheManagement>\n        if (builder.map.length == 0)\n            builder.map.push(0, 0, builder.content.appendChild(zeroWidthElement(cm.display.measure)));\n\n        if (i == 0) {\n            lineView.measure.map = builder.map;\n            lineView.measure.cache = {};\n        } else {\n            (lineView.measure.maps || (lineView.measure.maps = [])).push(builder.map);\n            (lineView.measure.caches || (lineView.measure.caches = [])).push({});\n        }\n        </mapAndCacheManagement>\n    }\n\n    <webkitAdjustment>\n    if (webkit && /\\bcm-tab\\b/.test(builder.content.lastChild.className))\n        builder.content.className = \"cm-tab-wrap-hack\";\n    </webkitAdjustment>\n\n    <eventTriggering>\n    signal(cm, \"renderLine\", cm, lineView.line, builder.pre);\n    if (builder.pre.className)\n        builder.textClass = joinClasses(builder.pre.className, builder.textClass || \"\");\n    </eventTriggering>\n\n    return builder;\n}\n"], ["convertCodePoints", "\nfunction convertCodePoints(regexp) {\n\t\treturn regexp.replace(/\\\\x\\{([0-9a-fA-F]+)\\}/g, function(m, chars) {\n\t\t\t<paddingZeros>\n\t\t\twhile (chars.length < 4) {\n\t\t\t\tchars = '0' + chars;\n\t\t\t}\n\t\t\t</paddingZeros>\n\t\t\t<transformToUnicode>\n\t\t\treturn '\\\\u' + chars;\n\t\t\t</transformToUnicode>\n\t\t});\n\t}\n"], ["pushOutBoundPeersToExplorer", "\nfunction pushOutBoundPeersToExplorer(){\n\t<checkConditions>\n\tif(!conf.IF_BYZANTINE)\n\t\treturn;\n\tif (conf.bLight )\n\t\treturn;\n\t</checkConditions>\n\t<fineOutboundPeerOrConnect>\n\tfindOutboundPeerOrConnect\n\t(\n\t\texplorerUrl,\n\t\t(err, oWsByExplorerUrl) =>\n\t\t{\n\t\t\t<onValidPeer>\n\t\t\tif ( ! err )\n\t\t\t{\n\t\t\t\t<createOutboudPeerUrlsArray>\n\t\t\t\tlet arrOutboundPeerUrls = arrOutboundPeers.map(function (ws) {\n\t\t\t\t\treturn ws.peer;\n\t\t\t\t});\n\t\t\t\t</createOutboudPeerUrlsArray>\n\t\t\t\t<sendPeersToExplorer>\n\t\t\t\tsendJustsaying( oWsByExplorerUrl, 'push_outbound_peers', arrOutboundPeerUrls );\n\t\t\t\t</sendPeersToExplorer>\n\t\t\t}\n\t\t\t</onValidPeer>\n\t\t}\n\t);\n\t</fineOutboundPeerOrConnect>\n}\n"], ["setError", "\nfunction (field, error) {\n\t<fieldsObjectCheck>\n    if (field instanceof Object) {\n        this.$errors.set(field);\n    }\n\t</fieldsObjectCheck>\n\t<elseCase>\n    else {\n        this.$errors.set(field, error);\n    }\n\t</elseCase>\n\n    <triggerEvent>\n    this.trigger('isValidChanged');\n    </triggerEvent>\n}\n"], ["compressFile", "\nfunction (file, compression) {\n      var result = new JSZip.CompressedObject(), content;\n\n      <handlePreCompressedObject>\n      if (file._data instanceof JSZip.CompressedObject) {\n         result.uncompressedSize = file._data.uncompressedSize;\n         result.crc32 = file._data.crc32;\n         </handlePreCompressedObject>\n\n         <specialCaseCompression>\n         if (result.uncompressedSize === 0 || file.options.dir) {\n            compression = JSZip.compressions['STORE'];\n            result.compressedContent = \"\";\n            result.crc32 = 0;\n         } else if (file._data.compressionMethod === compression.magic) {\n            result.compressedContent = file._data.getCompressedContent();\n         } else {\n            content = file._data.getContent()\n        \t<compressContent>\n            result.compressedContent = compression.compress(JSZip.utils.transformTo(compression.compressInputType, content));\n       \t\t</compressContent>\n         }\n         <specialCaseCompression>\n      } else {\n         <getContent>\n         content = getBinaryData(file);\n         if (!content || content.length === 0 || file.options.dir) {\n            compression = JSZip.compressions['STORE'];\n            content = \"\";\n         }\n         result.uncompressedSize = content.length;\n         result.crc32 = this.crc32(content);\n         </getContent>\n         <compressContent>\n         result.compressedContent = compression.compress(JSZip.utils.transformTo(compression.compressInputType, content));\n         </compressContent>\n      }\n\n      <finalizeCompressionResult>\n      result.compressedSize = result.compressedContent.length;\n      result.compressionMethod = compression.magic;\n      </finalizeCompressionResult>\n\n      return result;\n   }\n"], ["checkTypeRegistered", "\nfunction(Type) {\n\t<nullCheck>\n\tif (Type) {\n\t\t<registrationCheck>\n\t\tif (this._map) {\n\t\t\tvar classid = Type.$classid;\n\t\t\tvar typeobj = this._map[classid];\n\t\t\treturn typeobj ? true : false;\n\t\t}\n\t\t</registrationCheck>\n\t\treturn false;\n\t} else {\n\t\t<exception>\n\t\tthrow new Error(\"Something is undefined\");\n\t\t</exception>\n\t}\n</nullCheck>\n"], ["parseChildInputpaths", "\nfunction parseChildInputpaths(build) {\n  <recursiveParseDefinition>\n  function parse(build) {\n    let inputpaths = [];\n\n    <buildIteration>\n    build.forEach(build => {\n      inputpaths = inputpaths.concat(build.inputpaths, build.builds ? parse(build.builds) : []);\n    });\n    </buildIteration>\n\n    return inputpaths;\n  }\n  </recursiveParseDefinition>\n\n  <assignChildInputpaths>\n  build.childInputpaths = parse(build.builds);\n  </assignChildInputpaths>\n}\n"], ["insertImageWYSIWYG", "\nfunction(wysiwygeditor)\n        {\n            \n            <insertImageFunction>\n            var insert_image_wysiwyg = function( url, filename )\n            {\n                <createImageHTML>\n                var html = '<img id=\"wysiwyg-insert-image\" src=\"\" alt=\"\"' + (filename ? ' title=\"'+html_encode(filename)+'\"' : '') + '>';\n                wysiwygeditor.insertHTML( html ).closePopup().collapseSelection();\n                var $image = $('#wysiwyg-insert-image').removeAttr('id');\n                if( max_imagesize )\n                {\n                    $image.css({maxWidth: max_imagesize[0]+'px',\n                                maxHeight: max_imagesize[1]+'px'})\n                    <imageResize>\n                          .load( function() {\n                                $image.css({maxWidth: '',\n                                            maxHeight: ''});\n                                var image_width = $image.width(),\n                                    image_height = $image.height();\n                                if( image_width > max_imagesize[0] || image_height > max_imagesize[1] )\n                                {\n                                    if( (image_width/image_height) > (max_imagesize[0]/max_imagesize[1]) )\n                                    {\n                                        image_height = parseInt(image_height / image_width * max_imagesize[0]);\n                                        image_width = max_imagesize[0];\n                                    }\n                                    else\n                                    {\n                                        image_width = parseInt(image_width / image_height * max_imagesize[1]);\n                                        image_height = max_imagesize[1];\n                                    }\n                                    $image.prop('width',image_width)\n                                          .prop('height',image_height);\n                                }\n                            });\n                    </imageResize>\n                }\n                $image.prop('src', url);\n                </createImageHTML>\n            };\n            </insertImageFunction>\n\n            <uiCreation>\n            var $content = $('<div/>').addClass('wysiwyg-toolbar-form')\n                                      .prop('unselectable','on');\n            </uiCreation>\n\n            <fileUploaderSetup>\n            var $fileuploader = null,\n                $fileuploader_input = $('<input type=\"file\">')\n                                        .css({position: 'absolute',\n                                              left: 0,\n                                              top: 0,\n                                              width: '100%',\n                                              height: '100%',\n                                              opacity: 0,\n                                              cursor: 'pointer'});\n            if( ! force_imageupload && window.File && window.FileReader && window.FileList )\n            {\n                <loadImageFromFileFunction>\n                var loadImageFromFile = function( file )\n                {\n                    <imageTypeFilter>\n                    if( typeof(filter_imageType) === 'function' && ! filter_imageType(file) )\n                        return;\n                    else if( ! file.type.match(filter_imageType) )\n                        return;\n                    </imageTypeFilter>\n                    var reader = new FileReader();\n                    reader.onload = function(event) {\n                        var dataurl = event.target.result;\n                        insert_image_wysiwyg( dataurl, file.name );\n                    };\n                    <readImage>\n                    reader.readAsDataURL( file );\n                    </readImage>\n                };\n                </loadImageFromFileFunction>\n                $fileuploader = $fileuploader_input\n                                    .prop('draggable','true')\n                                    <fileUploaderEvents>\n                                    .change(function(event){\n                                        var files = event.target.files; \n                                        for(var i=0; i < files.length; ++i)\n                                            loadImageFromFile( files[i] );\n                                    })\n                                    .on('dragover',function(event){\n                                        event.originalEvent.dataTransfer.dropEffect = 'copy'; \n                                        event.stopPropagation();\n                                        event.preventDefault();\n                                        return false;\n                                    })\n                                    .on('drop', function(event){\n                                        var files = event.originalEvent.dataTransfer.files; \n                                        for(var i=0; i < files.length; ++i)\n                                            loadImageFromFile( files[i] );\n                                        event.stopPropagation();\n                                        event.preventDefault();\n                                        return false;\n                                    });\n                                    </fileUploaderEvents>\n            }\n            else if( on_imageupload )\n            {\n                <externalImageUploadFunction>\n                var $input = $fileuploader_input\n                                    .change(function(event){\n                                        on_imageupload.call( this, insert_image_wysiwyg );\n                                    });\n                $fileuploader = $('<form/>').append($input);\n                </externalImageUploadFunction>\n            }\n            if( $fileuploader )\n            <fileUploaderUi>\n                $('<div/>').addClass( 'wysiwyg-browse' )\n                           .html( label_selectImage )\n                           .append( $fileuploader )\n                           .appendTo( $content );\n            </fileUploaderUi>\n            </fileUploaderSetup>\n\n            <urlInputAndSubmit>\n            var $inputurl = $('<input type=\"text\" value=\"\">').addClass('wysiwyg-input')\n                                .keypress(function(event){\n                                    if( event.which == 10 || event.which == 13 )\n                                        insert_image_wysiwyg( $inputurl.val() );\n                                });\n            if( placeholder_url )\n                $inputurl.prop( 'placeholder', placeholder_url );\n            var $okaybutton = $();\n            if( toolbar_submit )\n                $okaybutton = toolbar_button(toolbar_submit).click(function(event){\n                                    insert_image_wysiwyg( $inputurl.val() );\n                                    event.stopPropagation();\n                                    event.preventDefault();\n                                    return false;\n                                });\n            $content.append( $('<div/>').append($inputurl).append($okaybutton) );\n            </urlInputAndSubmit>\n            return $content;\n        }\n"], ["startServer", "\nfunction start() {\n      <startListening>\n      app.listen(hrsConfigs.port, function (err) {\n        <errorHandling>\n        if (err) {\n          info(err);\n        }\n        </errorHandling>\n        <logStartup>\n        info('Running on http://localhost:' + hrsConfigs.port);\n        </logStartup>\n      });\n      </startListening>\n    }\n"], ""]