[["determineGetMapURL", "\nfunction determineGetMapURL(json, version) {\n  <extractURL>\n  var url = '';\n  // Code specific to each version is omitted for brevity; please assume it follows similar patterns\n  // and includes structured conditional logic tailored to extract a URL based on the version.\n  return url;\n  </extractURL>\n}\n"], ["pushPart", "\nfunction pushPart (parts, file) {\n<getFileExtension>\n  let ext = getExtname(file.path)\n</getFileExtension>\n<findTypeAndGroupFile>\n  let type = Object.keys(EXT_TYPES).find(key => {\n    return EXT_TYPES[key].includes(ext)\n  })\n  parts[type.toLowerCase()].push(file)\n</findTypeAndGroupFile>\n}\n"], ["S3getObjectConfiguration", "\nfunction(next) {\n  S3.getObject({\n    Bucket: S3Handler.options.S3BucketName, \n    Key: S3Handler.options.mboxName + S3Handler.options.S3MessageListKeySuffix\n  }, \n    next\n  );\n}\n"], ["Template", "\nfunction Template(style, fields, opts) {\n<validateStyle>\n  if (passFields.STYLES.indexOf(style) === -1) {\n    throw new Error('Incorrect passbook style ' + style)\n  }\n</validateStyle>\n<initializeTemplate>\n  this.style  = style\n  this.opts   = opts   || {}\n  this.fields = fields || {}\n</initializeTemplate>\n<setDefaultField>\n  this.fields.formatVersion = 1\n</setDefaultField>\n}\n"], ["SelectBoxControllerConstructor", "\nfunction (cfg, ctxt, lineNumber) {\n<initializeController>\n  var controller = new ariaWidgetsControllersSelectBoxController();\n  this.$DropDownTextInput.constructor.call(this, cfg, ctxt, lineNumber, controller);\n</initializeController>\n<configureController>\n  this.controller.setListOptions(this._cfg.options);\n</configureController>\n<setAdditionalProperties>\n  this._freePopupWidth = false;\n  this._waiSuggestionsChangedListener = null;\n</setAdditionalProperties>\n}\n"], ["dynamicStateRetriever", "\nfunction(name) {\n<initialize>\n  name = name || '';\n  var state = null;\n</initialize>\n<validateStateName>\n  if(!_validateStateName(name)) {\n    return null;\n  }\n</validateStateName>\n<retrieveCachedState>\n  else if(_stateCache[name]) {\n    return _stateCache[name];\n  }\n</retrieveCachedState>\n<assembleStateChain>\n  var nameChain = _getNameChain(name);\n  var stateChain = nameChain\n    .map(function(name, i) {\n      var item = angular.copy(_stateLibrary[name]);\n      return item;\n    })\n    .filter(function(parent) {\n      return !!parent;\n    });\n</assembleStateChain>\n<mergeStateChain>\n  for(var i=stateChain.length-1; i>=0; i--) {\n    if(stateChain[i]) {\n      var nextState = stateChain[i];\n      state = angular.merge(nextState, state || {});\n    }\n    if(state && state.inherit === false) break;\n  }\n</mergeStateChain>\n<cacheState>\n  _stateCache[name] = state;\n</cacheState>\n<returnState>\n  return state;\n</returnState>\n}\n"], ["reportIncorrectPlucking", "\nfunction reportIncorrectPlucking( ast, session ) {\n  session.buildVisitor( {\n    action( node ) {\n\n      this.visit( node.expression, true );\n\n    },\n    labeled( node, action ) {\n      if ( node.pick !== true ) return void 0;\n      if ( action === true )\n        session.error( `\"@\" cannot be used with an action block.`, node.location );\n      if ( isSemanticPredicate( node ) )\n        session.error( `\"@\" cannot be used on a semantic predicate.`, node.location );\n\n      this.visit( node.expression );\n    },\n  } )( ast );\n}\n"], ["MapZoomPluginConstructor", "\nfunction (container, options) {\n  var self = this;\n<initializePlugin>\n  self.container = container;\n  self.$container = $(container);\n  self.options = self.extendDefaultOptions(options);\n  self.zoomTO = 0;\n  self.zoomCenterX = 0;\n  self.zoomCenterY = 0;\n  self.previousPinchDist = 0;\n  self.zoomData = {\n    zoomLevel: 0,\n    zoomX: 0,\n    zoomY: 0,\n    panX: 0,\n    panY: 0\n  };\n  self.currentViewBox = {\n    x: 0, y: 0, w: 0, h: 0\n  };\n  self.panning = false;\n  self.zoomAnimID = null; \n  self.zoomAnimStartTime = null; \n  self.zoomAnimCVBTarget = null;\n</initializePlugin>\n<setDOMElements>\n  self.$map = $(\".\" + self.options.map.cssClass, self.container);\n  self.initialMapHTMLContent = self.$map.html();\n  self.$tooltip = {};\n</setDOMElements>\n<createGraphics>\n  self.paper = {};\n</createGraphics>\n<initializeCollections>\n  self.areas = {};\n  self.plots = {};\n  self.links = {};\n  self.legends = {};\n</initializeCollections>\n<storeMapConf>\n  self.mapConf = {};\n</storeMapConf>\n<initializeEventHandlers>\n  self.customEventHandlers = {};\n</initializeEventHandlers>\n<invokeInit>\n  self.init();\n</invokeInit>\n}\n"], ["mixinFn", "\nfunction mixinFn(target, mixin, config){\n<handleArguments>\n  if (arguments.length == 1){\n    mixin = target\n    target = {}\n  }\n</handleArguments>\n<validateMixin>\n  if (!mixin){\n    return target\n  }\n</validateMixin>\n<configureMixin>\n  config = config || {}\n</configureMixin>\n<getClassForMixin>\n  var MixinClass      = getClass(mixin)\n</getClassForMixin>\n<prepareMixinIdentifier>\n  var mixinIdentifier = config.mixinIdentifier || mixin\n</prepareMixinIdentifier>\n<copyMixinClassPrototype>\n  if (MixinClass){\n    if (typeof mixin == 'string'){\n      mixin = { alias: mixin }\n    }\n    if (mixin == MixinClass){\n      mixin = MixinClass.prototype\n    } else {\n      copyIf(MixinClass.prototype, mixin)\n    }\n    copyMetaFrom(mixin)\n    mixinIdentifier = mixin.alias\n  }\n</copyMixinClassPrototype>\n<mergeStaticsToTarget>\n  if ( target.$ownClass && !config.skipStatics) {\n    var mixinStatics = MixinClass?\n      copyMetaFrom(MixinClass, {}):\n      mixin.statics\n    if ( mixinStatics && mixinMeta.some(function(when){ return !! mixinStatics[when] }) ) {\n      config.skipWarning = true\n      var staticsMixinIdentifier = 'statics.' + mixinIdentifier\n      mixinFn(target.$ownClass, mixinStatics, { skipStatics: true, mixinIdentifier: staticsMixinIdentifier})\n    }\n  }\n</mergeStaticsToTarget>\n<applyMixin>\n  doMixin(target, mixin, mixinIdentifier, config)\n</applyMixin>\n<returnTarget>\n  return target\n</returnTarget>\n}\n"], ["mayanYearConverter", "\nfunction(years) {\n  years = years.split('.');\n<validateYearComponents>\n  if (years.length < 3) {\n    throw 'Invalid Mayan year';\n  }\n</validateYearComponents>\n<convertYearComponentsToNumber>\n  var year = 0;\n  for (var i = 0; i < years.length; i++) {\n    var y = parseInt(years[i], 10);\n    if (Math.abs(y) > 19 || (i > 0 && y < 0)) {\n      throw 'Invalid Mayan year';\n    }\n    year = year * 20 + y;\n  }\n</convertYearComponentsToNumber>\n<returnYear>\n  return year;\n</returnYear>\n}\n"], "```"]