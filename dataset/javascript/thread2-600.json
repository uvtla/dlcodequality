[["lstatFiles", "\nasync function lstatFiles(dirPath, dirContent) {\n    <resolveAndLstat>\n    const readFiles = dirContent.map(async (relativePath) => {\n        const path = resolve(dirPath, relativePath)\n        const lstat = await makePromise(fs.lstat, path)\n        return {\n            lstat,\n            path,\n            relativePath,\n        }\n    })\n    </resolveAndLstat>\n    return Promise.all(readFiles)\n}\n"], ["anonymousFunction", "\nfunction(edata, ename) {\n    <debugLog>\n    try {\n        BOOMR.debug(\"Called done with \" + BOOMR.utils.objectToString(edata, undefined, 1) + \", \" + ename, \"rt\");\n    }\n    catch(err) {\n        BOOMR.debug(\"Called done with \" + err + \", \" + ename, \"rt\");\n    }\n    </debugLog>\n    \n    <initVariables>\n    var t_start, t_done, t_now=BOOMR.now(),\n        subresource = false;\n\n    impl.complete = false;\n    </initVariables>\n\n    <validateLoadTimestamp>\n    t_done = impl.validateLoadTimestamp(t_now, edata);\n    </validateLoadTimestamp>\n\n    <setPageLoadTimers>\n    if(ename===\"load\" || ename===\"visible\" || ename===\"xhr\") {\n        if (!impl.setPageLoadTimers(ename, t_done, edata)) {\n            return this;\n        }\n    }\n    </setPageLoadTimers>\n\n    <determineTStart>\n    t_start = impl.determineTStart(ename, edata);\n    </determineTStart>\n\n    <prepareEventData>\n    if(edata && edata.data) {\n        edata = edata.data;\n    }\n    if(ename === \"xhr\" && edata) {\n        subresource = edata.subresource;\n    }\n    </prepareEventData>\n\n    <endTimer>\n    this.endTimer(\"t_done\", t_done);\n    </endTimer>\n\n    <removeVariables>\n    BOOMR.removeVar(\n        \"t_done\", \"t_page\", \"t_resp\", \"t_postrender\", \"t_prerender\", \"t_load\", \"t_other\",\n        \"r\", \"r2\", \"rt.tstart\", \"rt.cstart\", \"rt.bstart\", \"rt.end\", \"rt.subres\", \"rt.abld\",\n        \"http.errno\", \"http.method\", \"xhr.sync\"\n    );\n    </removeVariables>\n\n    <setSupportingTimestamps>\n    impl.setSupportingTimestamps(t_start);\n    </setSupportingTimestamps>\n\n    <addTimersToBeacon>\n    this.addTimersToBeacon();\n    </addTimersToBeacon>\n\n    <addVars>\n    BOOMR.addVar(\"r\", BOOMR.utils.cleanupURL(impl.r));\n\n    if(impl.r2 !== impl.r) {\n        BOOMR.addVar(\"r2\", BOOMR.utils.cleanupURL(impl.r2));\n    }\n    </addVars>\n\n    <handleXHRData>\n    if(ename === \"xhr\" && edata) {\n        <additionalProcessing>\n        if(edata && edata.data) {\n            edata = edata.data;\n        }\n        </additionalProcessing>\n\n        <updateSubresource>\n        subresource = edata.subresource;\n        </updateSubresource>\n\n        <addVarsForXHR>\n        if(edata.url) {\n            BOOMR.addVar(\"u\", BOOMR.utils.cleanupURL(edata.url.replace(/#.*/, \"\")));\n            impl.addedVars.push(\"u\");\n        }\n\n        if(edata.status && (edata.status < -1 || edata.status >= 400)) {\n            BOOMR.addVar(\"http.errno\", edata.status);\n        }\n\n        if(edata.method && edata.method !== \"GET\") {\n            BOOMR.addVar(\"http.method\", edata.method);\n        }\n\n        if(edata.headers) {\n            BOOMR.addVar(\"http.hdr\", edata.headers);\n        }\n\n        if(edata.synchronous) {\n            BOOMR.addVar(\"xhr.sync\", 1);\n        }\n\n        if(edata.initiator) {\n            BOOMR.addVar(\"http.initiator\", edata.initiator);\n        }\n        </addVarsForXHR>\n        \n        <pushAddedVars>\n        impl.addedVars.push(\"http.errno\", \"http.method\", \"http.hdr\", \"xhr.sync\", \"http.initiator\");\n        </pushAddedVars>\n    }\n    </handleXHRData>\n\n    <handleSubresource>\n    if(subresource) {\n        BOOMR.addVar(\"rt.subres\", 1);\n        impl.addedVars.push(\"rt.subres\");\n    }\n    </handleSubresource>\n    \n    <updateCookie>\n    impl.updateCookie();\n    </updateCookie>\n\n    <handleUnload>\n    if(ename===\"unload\") {\n        BOOMR.addVar(\"rt.quit\", \"\");\n\n        if(!impl.onloadfired) {\n            BOOMR.addVar(\"rt.abld\", \"\");\n        }\n\n        if(!impl.visiblefired) {\n            BOOMR.addVar(\"rt.ntvu\", \"\");\n        }\n    }\n    </handleUnload>\n\n    <completeFunction>\n    impl.complete = true;\n    </completeFunction>\n\n    <sendBeacon>\n    BOOMR.sendBeacon();\n    </sendBeacon>\n\n    return this;\n}\n"], ["getExtraTasks", "\nasync function getExtraTasks() {\n  <configInitialization>\n  config = config || (await getConfig());\n  </configInitialization>\n  \n  <configureExtraTasks>\n  switch (config.env) {\n    case 'pl':\n      extraTasks.patternLab = require('./pattern-lab-tasks');\n      break;\n    case 'static':\n      extraTasks.static = require('./static-tasks');\n      break;\n    case 'pwa':\n      <clearCache>\n      delete require.cache[require.resolve('./api-tasks')];\n      </clearCache>\n      extraTasks.api = require('./api-tasks');\n      extraTasks.patternLab = require('./pattern-lab-tasks');\n      extraTasks.static = require('./static-tasks');\n      break;\n  }\n  </configureExtraTasks>\n  \n  <conditionalServerTasks>\n  if (config.wwwDir) {\n    extraTasks.server = require('./server-tasks');\n  }\n  </conditionalServerTasks>\n  \n  return extraTasks;\n}\n"], ["getEnvironment", "\nfunction getEnvironment(opts) {\n  if (opts.app) {\n    <mergeEnvironments>\n    var processEnv = _.cloneDeep(process.env);\n    var appEnv = opts.app.env.getEnv();\n    return _.merge(processEnv, appEnv);\n    </mergeEnvironments>\n  } else {\n    <returnGlobalEnv>\n    return process.env;\n    </returnGlobalEnv>\n  }\n}\n"], ["createCrudState", "\nfunction createCrudState (appname, masterSpec, moduleName, state, parentStateName, moduleUrl, agents) {\n  <initializePaths>\n  var controllerPath = path.join(appname, 'generated', 'crud', parentStateName, 'controllers'),\n    partialPath = path.join(appname, 'generated', 'partials', 'crud', parentStateName),\n    crudType\n  </initializePaths>\n\n  <determineCrudType>\n  if (moduleName == 'POST' || moduleName == 'PUT') {\n    crudType = 'postPut'\n  }\n  if (moduleName == 'FIND') {\n    crudType = 'find'\n  }\n  if (moduleName == 'GET' || moduleName == 'DELETE') {\n    crudType = 'get'\n  }\n  </determineCrudType>\n\n  <prepareSpecModel>\n  var specModel = {\n    parentStateName: parentStateName,\n    moduleName: moduleName,\n    state: state,\n    agents: agents,\n    agentSpec: masterSpec.agents,\n    crudAgent: crudAgent\n  }\n  var crudAgent = getUnrenderedTemplateContents(path.join('generated', 'crud', 'crudAgents.js'))\n  </prepareSpecModel>\n\n  <mergeContents>\n  var contents = getUnrenderedTemplateContents(path.join('generated', 'crud', crudType + 'Controller.js'))\n  var controllerContents = mergeTemplateAndModel(contents, specModel)\n  var agentControllerContents = mergeTemplateAndModel(crudAgent, specModel)\n  </mergeContents>\n\n  <generateCrudControllerTemplate>\n  createTemplate(appname, path.join('generated', 'crud', 'crudController.js'), {\n    parentStateName: parentStateName,\n    moduleName: moduleName,\n    state: state,\n    agents: agents,\n    agentSpec: masterSpec.agents,\n    crudControllerContents: controllerContents\n  })\n  </generateCrudControllerTemplate>\n\n  <renameCrudController>\n  var oldControllerPath = path.join(appname, 'generated', 'crud', 'crudController.js'),\n    newControllerPath = path.join(controllerPath, moduleName + '.js')\n  fs.renameSync(oldControllerPath, newControllerPath)\n  </renameCrudController>\n\n  <handleAgentIfExists>\n  if (agents.length) {\n    <generateCrudAgentControllerTemplate>\n    createTemplate(appname, path.join('generated', 'crud', 'crudAgentController.js'), {\n      parentStateName: parentStateName,\n      moduleName: moduleName,\n      state: state,\n      agents: agents,\n      agentSpec: masterSpec.agents,\n      crudControllerContents: agentControllerContents\n    })\n    </generateCrudAgentControllerTemplate>\n\n    <renameCrudAgentController>\n    var oldAgentControllerPath = path.join(appname, 'generated', 'crud', 'crudAgentController.js'),\n      newAgentControllerPath = path.join(controllerPath, parentStateName + 'AgentController.js')\n    fs.renameSync(oldAgentControllerPath, newAgentControllerPath)\n    </renameCrudAgentController>\n  }\n  </handleAgentIfExists>\n\n  <generateHtmlTemplate>\n  createTemplate(appname, path.join('generated', 'crud', crudType + '.html'), {\n    moduleName: moduleName,\n    parentStateName: parentStateName,\n    state: state,\n    moduleUrl: moduleUrl,\n    agents: agents,\n    agentSpec: masterSpec.agents \n  })\n  </generateHtmlTemplate>\n\n  <renameHtml>\n  var oldHtmlPath = path.join(appname, 'generated', 'crud', crudType + '.html'),\n    newHtmlPath = path.join(partialPath, moduleName + '.html')\n  fs.renameSync(oldHtmlPath, newHtmlPath)\n  </renameHtml>\n}\n"], ["addToCollectionByForeignKey", "\nfunction(record, foreign_key) {\n    <updateCollectionsByForeignKey>\n    if (foreign_key in this._collections_by_foreign_id) {\n        this._collections_by_foreign_id[foreign_key].push(record);\n    } else {\n        this._collections_by_foreign_id[foreign_key] = [record];\n    }\n    </updateCollectionsByForeignKey>\n}\n"], ["capitalizeFirstCharacter", "\nfunction (str) {\n    if (str.length > 0) {\n        <performCapitalization>\n        var first = str.substr(0, 1).toUpperCase();\n        var spare = str.substr(1, str.length);\n        return first + spare;\n        </performCapitalization>\n    }\n}\n"], ["readWith1ArgumentCb", "\nfunction readWith1ArgumentCb(opts, cb) {\n  <readAndExtractSingleValue>\n  return read(opts, function(err, a, b) {\n    cb(err, a);\n  });\n  </readAndExtractSingleValue>\n}\n"], ["watchFile", "\nfunction watchFile(file) {\n    <validateInput>\n    if (!file || '' === file) {\n        return\n    }\n    </validateInput>\n\n    <convertToStringAndCheckWatchers>\n    file = file.toString()\n    if (watchers.hasOwnProperty(file)) {\n        return\n    }\n    </convertToStringAndCheckWatchers>\n\n    <initializeWatcher>\n    watchers[file] = chokidar.watch(file, { ignored: /[\\/\\\\]\\./, persistent: true })\n    </initializeWatcher>\n\n    <attachEventHandlers>\n    var that = this\n    watchers[file]\n    .on('unlink', function(path) {\n        <handleOnUnlink>\n        that.opts.storageMethod.remove(path, function(err) {\n            if (err && that.opts.logging) {\n                console.log(err);\n            }\n        });\n        </handleOnUnlink>\n    })\n    .on('change', function(path) {\n        <addToMainQueue>\n        mainQueue.add(function(mainDone) {\n            <readFileAndStoreContents>\n            fs.readFile(path, function(err, fileContents) {\n                mainDone();\n                if (err && that.opts.logging) {\n                    console.log(err);\n                    return;\n                }\n                var parsed = LocalJson.TryParse.call(that, JSON.parse, fileContents);\n                that.opts.storageMethod.set(path, parsed, function(err) {\n                    if (err && that.opts.logging) {\n                        console.log(err);\n                    }\n                });\n            </readFileAndStoreContents>\n        });\n        </addToMainQueue>\n    });\n    </attachEventHandlers>\n}\n"], ["removeContainer", "\nfunction(container) {\n    <removeSpecifiedContainer>\n    var index = WireIt.indexOf(container, this.containers);\n    if(index != -1) {\n        container.remove();\n        this.containers[index] = null;\n        this.containers = WireIt.compact(this.containers);\n        this.eventRemoveContainer.fire(container);\n        this.eventChanged.fire(this);\n    }\n    </removeSpecifiedContainer>\n}\n"], "```"]