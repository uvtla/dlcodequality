[["bnToBuffer", "\nfunction bnToBuffer(bn) {\n  <hexConversion>\n  var hex = bn.toString(16)\n  hex = hex.length % 2 === 1 ? '0' + hex : hex\n  </hexConversion>\n  return Buffer.from(hex, 'hex')\n}\n"], ["anonymousDatabaseDeletion", "\nfunction (source, args, context, info) {\n  <logActivity>\n  console.log('Type Config', this.utils.getTypeConfig(info))\n  </logActivity>\n  return r.db(tables.User.db).table(tables.User.table).delete().run().then(function () {\n    return 200\n  }).catch(function (err) {\n    return 500\n  })\n}\n"], ["removeListener", "\nfunction (element, event, callback) {\n  \n  <normalizeTargetAndEvent>\n  var normalized = this._normalizeTargetAndEvent(element, event);\n  element = normalized.element;\n  event = normalized.event;\n\n  event = this._getType(event);\n  </normalizeTargetAndEvent>\n  \n  <handleElementIdentification>\n  if (this.typesUtil.isString(element)) {\n    element = Aria.$window.document.getElementById(element);\n    if (!element) {\n      return false;\n    }\n  } else if (this._isValidCollection(element)) {\n    \n\n    var ok = true;\n    for (i = element.length - 1; i > -1; i--) {\n      ok = (this.removeListener(element[i], event, callback) && ok);\n    }\n    return ok;\n  }\n  </handleElementIdentification>\n\n  <purgeOnNoCallback>\n  if (!callback || !(callback.call || callback.fn)) {\n    \n    return this.purgeElement(element, false, event);\n  }\n  </purgeOnNoCallback>\n\n  <handleUnloadEventSpecialCase>\n  if (\"unload\" == event) {\n    if (unloadListeners) {\n      \n      ...\n      \n      return true;\n    }\n    return false;\n  }\n  </handleUnloadEventSpecialCase>\n\n  <removeCacheItem>\n  var cacheItem = null;\n  var index = arguments[3];\n  if (\"undefined\" === typeof index) {\n    index = this._getCacheIndex(listeners, element, event, callback);\n  }\n  if (index >= 0) {\n    cacheItem = listeners[index];\n  }\n  if (!element || !cacheItem) {\n    return false;\n  }\n  var bCapture = cacheItem[CAPTURE] === true ? true : false;\n  try {\n    this._simpleRemove(element, event, cacheItem[WFN], bCapture);\n  } catch (ex) {\n    lastError = ex;\n    return false;\n  }\n  delete listeners[index][WFN];\n  if (listeners[index][FN] != listeners[index][CB]) {\n    listeners[index][CB].$dispose();\n  }\n  listeners[index][CLEANCB]();\n  delete listeners[index][CLEANCB];\n  \n  listeners.splice(index, 1);\n  </removeCacheItem>\n\n  return true;\n}\n"], ["discoverServicesAndCharacteristics", "\nfunction discoverServicesAndCharacteristics(error) {\n  if (error) { return reject(error); }\n  peripheral.discoverSomeServicesAndCharacteristics(\n    ALL_SERVICES,\n    ALL_CHARACTERISTICS,\n    setupEmitter\n  );\n}\n"], ["_gpfAddEventListener", "\nfunction _gpfAddEventListener(event, eventsHandler) {\n  \n  var listeners = _gpfAllocateEventDispatcherListeners(this);\n  if (undefined === listeners[event]) {\n    listeners[event] = [];\n  }\n  listeners[event].push(eventsHandler);\n  return this;\n}\n"], ["parseTemplate", "\nfunction (attrs) {\n  var result = null;\n\n  if (HTML.isArray(attrs)) {\n    <handleArrayAttrs>\n    var nondynamicAttrs = parseAttrs(attrs[0]);\n    if (nondynamicAttrs) {\n      result = (result || []);\n      result.push(nondynamicAttrs);\n    }\n    for (var i = 1; i < attrs.length; i++) {\n      var token = attrs[i];\n      if (token.t !== 'TemplateTag')\n        throw new Error(\"Expected TemplateTag token\");\n      result = (result || []);\n      result.push(token.v);\n    }\n    </handleArrayAttrs>\n    return result;\n  }\n\n  <handleObjectAttrs>\n  for (var k in attrs) {\n    if (!result)\n      result = {};\n\n    var inValue = attrs[k];\n    var outParts = [];\n    for (var i = 0; i < inValue.length; i++) {\n      var token = inValue[i];\n      if (token.t === 'CharRef') {\n        outParts.push(convertCharRef(token));\n      } else if (token.t === 'TemplateTag') {\n        outParts.push(token.v);\n      } else if (token.t === 'Chars') {\n        pushOrAppendString(outParts, token.v);\n      }\n    }\n\n    var outValue = (inValue.length === 0 ? '' :\n                    (outParts.length === 1 ? outParts[0] : outParts));\n    var properKey = HTMLTools.properCaseAttributeName(k);\n    result[properKey] = outValue;\n  }\n  </handleObjectAttrs>\n\n  return result;\n}\n"], ["ihaleSil", "\nfunction f_cop_ihale_sil(_tahta_id, _ihale_id, _kullanici_id) {\n  <ihaleControl>\n  var ihale = require('./db_ihale');\n  return ihale.f_db_ihale_genel_kontrol(_ihale_id)\n    .then(function (_iGenel) {\n      if (_iGenel == 1) {\n        \n        throw new exception.Istisna(\"\u0130hale Silinemedi!\",\n          \"Silinmek istenen ihale GENEL ihaleler i\u00e7erisinde kay\u0131tl\u0131 oldu\u011fu i\u00e7in i\u015flem tamamlanamad\u0131!\");\n      } else {\n        return ihale.f_db_ihale_teklifleri(_tahta_id, _ihale_id)\n        ...\n        </ihaleControl>\n        \n        <tekliflerControl>\n        .then(function (_teklifler) {\n          if (_teklifler != null && _teklifler.length > 0) {\n            throw new exception.Istisna(\"\u0130hale silinemez!\",\n              \"Silinmek istenen ihaleye ba\u011fl\u0131 teklifler kay\u0131tl\u0131 oldu\u011fu i\u00e7in i\u015flem ger\u00e7ekle\u015ftirilemez!\");\n          } else {\n            \n            return ihale.f_db_tahta_ihale_sil(_ihale_id, _tahta_id, _kullanici_id);\n          }\n        });\n        </tekliflerControl>\n      }\n    });\n}\n"], ["NIfTIToNRRD", "\nfunction NIfTIToNRRD(niftiHeader) {\n  var ret = {}\n  ret.dimension = niftiHeader.dim[0]\n  ret.type = niftiHeader.datatype \n  ret.encoding = 'raw'\n  ret.endian = niftiHeader.littleEndian ? 'little' : 'big'\n  ret.sizes = niftiHeader.dim.slice(1)\n  ret.thicknesses = niftiHeader.pixdim.slice(1);\n\n  <handlePresentationUnits>\n  if (niftiHeader.xyzt_units !== undefined) {\n    ret.spaceUnits = niftiHeader.xyzt_units\n    while (ret.spaceUnits.length < ret.dimension) {\n      ret.spaceUnits.push(\"\")\n    }\n    ret.spaceUnits.length = ret.dimension\n  }\n  </handlePresentationUnits>\n  \n  <handleOrientation>\n  if (niftiHeader.qform_code === 0) {\n    ret.spacings = niftiHeader.pixdim.slice(1)\n    while (ret.spacings.length < ret.dimension) {\n      ret.spacings.push(NaN)\n    }\n    ret.spaceDimension = Math.min(ret.dimension, 3)\n  } else if (niftiHeader.qform_code > 0) {\n    \n    ret.space = \"right-anterior-superior\"\n    \n    ...\n    \n    ret.spaceDirections = [\n      ...\n    ]\n    ret.spaceOrigin = [niftiHeader.qoffset_x, niftiHeader.qoffset_y, niftiHeader.qoffset_z]\n  } else {\n    console.warn(\"Invalid qform_code: \" + niftiHeader.qform_code + \", orientation is probably messed up.\")\n  }\n  \n  if (niftiHeader.sform_code > 0) {\n    console.warn(\"sform transformation are currently ignored.\")\n  }\n  </handleOrientation>\n  \n  return ret\n}\n"], ["routeHandler", "\nfunction routeHandler(route, opts) {\n  <handlerPresentation>\n  const handler = stripIndent(`   ${route.handler.toString()}`);\n  const code = m('pre', { style: { border: 0, margin: 0 } }, handler);\n\n  const panelOptions = { collapsed: opts.routeHandlers !== 'expanded' };\n  </handlerPresentation>\n  \n  return collapsablePanel('Handler', panelOptions, code);\n}\n"], ["stringSubstitution", "\nfunction (str, variables) {\n  \n  <validateInput>\n  if (!(str && _.isString(str))) { return str; }\n  </validateInput>\n  \n  <substitutionProcess>\n  !Substitutor.isInstance(variables) && !_.isArray(variables) && (variables = _.tail(arguments));\n  return Substitutor.box(variables, Substitutor.DEFAULT_VARS).parse(str).toString();\n  </substitutionProcess>\n}\n"], "```"]