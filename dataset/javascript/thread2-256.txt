1. Merge Table Cells Function:
```javascript
<mergeTableCells>
function (cell) {
  <getCellInformation>
  var cellInfo = this.getCellInfo(cell),
      rightColIndex = cellInfo.colIndex + cellInfo.colSpan,
      rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex],
      rightCell = this.getCell(rightCellInfo.rowIndex, rightCellInfo.cellIndex);
  </getCellInformation>

  <adjustCellColSpan>
  cell.colSpan = cellInfo.colSpan + rightCellInfo.colSpan;
  </adjustCellColSpan>

  <removeAttribute>
  cell.removeAttribute("width");
  </removeAttribute>

  <contentManipulation>
  this.moveContent(cell, rightCell);
  </contentManipulation>

  <deleteAndUpdate>
  this.deleteCell(rightCell, rightCellInfo.rowIndex);
  this.update();
  </deleteAndUpdate>
}
</mergeTableCells>
```

2. Clipping Path Function:
```javascript
<calculateClipping>
function () {
  var bounds = this._renderer._bounds;

  <initializeParts>
  this._parts = [];
  </initializeParts>

  <checkBounds>
  if (!this._pxBounds || !this._pxBounds.intersects(bounds)) {
    return;
  }
  </checkBounds>

  <noClipOption>
  if (this.options.noClip) {
    this._parts = this._rings;
    return;
  }
  </noClipOption>

  <clipShapes>
  var parts = this._parts,
      i, j, k, len, len2, segment, points;

  for (i = 0, k = 0, len = this._rings.length; i < len; i++) {
    points = this._rings[i];

    for (j = 0, len2 = points.length; j < len2 - 1; j++) {
      segment = L.LineUtil.clipSegment(points[j], points[j + 1], bounds, j, true);

      if (!segment) { continue; }

      parts[k] = parts[k] || [];
      parts[k].push(segment[0]);

      if ((segment[1] !== points[j + 1]) || (j === len2 - 2)) {
        parts[k].push(segment[1]);
        k++;
      }
    }
  }
  </clipShapes>
}
</calculateClipping>
```

3. Scan Spans Function:
```javascript
<scanSpans>
function scanSpans(e0, e1, ymin, ymax, scanLine) {
  <initializeScanLines>
  var y0 = Math.max(ymin, Math.floor(e1.y0)),
      y1 = Math.min(ymax, Math.ceil(e1.y1));
  </initializeScanLines>

  <sortEdges>
  if ((e0.x0 == e1.x0 && e0.y0 == e1.y0)
      ? (e0.x0 + e1.dy / e0.dy * e0.dx < e1.x1)
      : (e0.x1 - e1.dy / e0.dy * e0.dx < e1.x0)) {
    var t = e0; e0 = e1; e1 = t;
  }
  </sortEdges>

  <calculateSpans>
  var m0 = e0.dx / e0.dy,
      m1 = e1.dx / e1.dy,
      d0 = e0.dx > 0, 
      d1 = e1.dx < 0; 
  for (var y = y0; y < y1; y++) {
    var x0 = m0 * Math.max(0, Math.min(e0.dy, y + d0 - e0.y0)) + e0.x0,
        x1 = m1 * Math.max(0, Math.min(e1.dy, y + d1 - e1.y0)) + e1.x0;
    scanLine(Math.floor(x1), Math.ceil(x0), y);
  }
  </calculateSpans>
}
</scanSpans>
```

4. Recursive Search Function:
```javascript
<findEntriesRecursive>
function findEntriesByCheck(groups, compareFn) {
  var foundEntries = [],
      newEntries;
  <recursiveSearch>
  groups.forEach(function(group) {
    newEntries = group.getEntries().filter(compareFn);
    if (newEntries.length > 0) {
        foundEntries = foundEntries.concat(newEntries);
    }
    newEntries = findEntriesByCheck(group.getGroups(), compareFn);
    if (newEntries.length > 0) {
        foundEntries = foundEntries.concat(newEntries);
    }
  });
  </recursiveSearch>
  return foundEntries;
}
</findEntriesRecursive>
```

5. Component Comparison Function:
```javascript
<compareComponents>
function(other) {
  var comps = ["a", "b", "c", "d"],
      i, len;

  for (i=0, len=comps.length; i < len; i++) {
    if (this[comps[i]] < other[comps[i]]) {
        return -1;
    } else if (this[comps[i]] > other[comps[i]]) {
        return 1;
    }
  }

  return 0;
}
</compareComponents>
```

6. Method Lookup Function:
```javascript
<getMethod>
function(name, property) {
  <checkMethodExistence>
  if (!(name in this._methods)) {
      throw new Error('Method "' + name + '" does not exist!');
  }
  </checkMethodExistence>
  <retrieveMethod>
  var method = this._methods[name](property);
  </retrieveMethod>

  <methodFormatting>
  if (_.isFunction(method)) {
      method = {
          name: this.getMethodName(property, name),
          body: method
      }
  }
  </methodFormatting>
  return method;
}
</getMethod>
```

7. Decoding Function:
```javascript
<decodeIntegers>
function(encoded) {
  <decodeUnsignedIntegers>
  var numbers = this.decodeUnsignedIntegers(encoded);
  </decodeUnsignedIntegers>

  <flipBits>
  var numbersLength = numbers.length;
  for (var i = 0; i < numbersLength; ++i) {
    var num = numbers[i];
    numbers[i] = (num & 1) ? ~(num >> 1) : (num >> 1);
  }
  </flipBits>

  return numbers;
}
</decodeIntegers>
```

8. Numeric Downscale Encoding Function:
```javascript
<encodeNumericDownscale>
function encodeArray_NUM_DWS( encoder, data, n_from, n_to ) {
  <determineDwsType>
  var n_dws_type = downscaleType( n_from, n_to );
  </determineDwsType>

  <logging>
  encoder.counters.arr_dws+=1;
  encoder.log(LOG.ARR, "array.numeric.downscaled, len="+data.length+
    ", from="+_NUMTYPE[n_from]+", to="+_NUMTYPE[n_to]+
    ", type="+_NUMTYPE_DOWNSCALE_DWS[n_dws_type]+" ("+n_dws_type+")");
  </logging>

  <conditionalHeaderWriting>
  if (data.length < UINT16_MAX) {
    encoder.stream8.write( pack1b( ARR_OP.NUM_DWS | NUMTYPE_LN.UINT16 | (n_dws_type << 1) ) );
    encoder.stream16.write( pack2b( data.length, false ) );
    encoder.counters.arr_hdr+=3;
  } else {
    encoder.stream8.write( pack1b( ARR_OP.NUM_DWS | NUMTYPE_LN.UINT32 | (n_dws_type << 1) ) );
    encoder.stream32.write( pack4b( data.length, false ) );
    encoder.counters.arr_hdr+=5;
  }
  </conditionalHeaderWriting>

  <writeEncodedData>
  pickStream( encoder, n_to )
    .write( packTypedArray( convertArray( data, n_to ) ) );
  </writeEncodedData>
}
</encodeNumericDownscale>
```

9. Time Retrieval Function:
```javascript
<retrieveTimeData>
function time() {
  <parseDate>
  let t = new Date().toString().split(' ');
  </parseDate>

  <constructTimeObject>
  return {
    current: Date.now(),
    uptime: os.uptime(),
    timezone: (t.length >= 7) ? t[5] : '',
    timezoneName: (t.length >= 7) ? t.slice(6).join(' ').replace(/\(/g, '').replace(/\)/g, '') : ''
  };
  </constructTimeObject>
}
</retrieveTimeData>
```

10. Audit Time Function (Non-compliant SRP example for reference):
```javascript
<auditTimeFunction>
function auditTime(duration, scheduler) {
  if (scheduler === void 0) { scheduler = async_1.async; }
  <liftOperator>
  return this.lift(new AuditTimeOperator(duration, scheduler));
  </liftOperator>
}
</auditTimeFunction>
```