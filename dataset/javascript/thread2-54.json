[["dateLastPaymentWasReceived", "\nfunction dateLastPaymentWasReceived(loan, cb) {\n    var d = Q.defer();\n    var last;\n    if (!loan) {\n      d.reject('required parameters for dateLastPaymentWasReceived not provided');\n    }\n\n    <filterTransactions>\n    var paymentTxs = loan.transactions.filter(function (tx) {\n      return tx.type !== 'Late Fee';\n    });\n    </filterTransactions>\n\n    <findLastTransaction>\n    last = _.max(paymentTxs, function (rec) {\n      return rec.txDate;\n    });\n    </findLastTransaction>\n\n    <setDateLastPayment>\n    loan.dateLastPaymentWasReceived = last.txDate || loan.closingDate;\n    d.resolve(loan);\n    </setDateLastPayment>\n\n    if (cb) return cb(loan);\n    return d.promise;\n}\n"], ["createSequencialCommandExecutor", "\nfunction createSequencialCommandExecutor (commands, workingDir, envVars, watchMode, host) {\n    const source = Observable.from([{\n        cwd: workingDir,\n        env: envVars,\n        exitCode: 0\n    }]);\n\n    return commands.reduce((prev, command) =>\n        createCommandExecutor(command, prev, watchMode, host), source);\n}\n"], ["unload", "\nfunction unload() {\n        _reset();\n        Inspector.Page.off(\".ScriptAgent\");\n        DOMAgent.off(\".ScriptAgent\");\n        Inspector.Debugger.off(\".ScriptAgent\");\n        Inspector.DOM.off(\".ScriptAgent\");\n    }\n"], ["toggleElements", "\nfunction toggleElements() {\n        \n        var args = Array.prototype.slice.call(arguments);\n        args.forEach(function(buttonId) {\n            var buttonEl = document.getElementById(buttonId);\n            <toggleDisplayStyle>\n            if (buttonEl) {\n                var curDisplayStyle = buttonEl.style.display;\n                buttonEl.style.display = curDisplayStyle === 'none' ? 'block' : 'none';\n            }\n            </toggleDisplayStyle>\n        });\n    }\n"], ["setHeaderAttributes", "\nfunction ( that ) {\n        that = that || this;\n        <canClose>\n        var can = that.contentItems.length - that._isDocked() > 1;\n        </canClose>\n        <setAttributes>\n        for (var i = 0; i < that.contentItems.length; ++i )\n            if ( that.contentItems[ i ] instanceof lm.items.Stack ) {\n                that.contentItems[ i ].header._setDockable( that._isDocked( i ) || can );\n                that.contentItems[ i ].header._$setClosable( can );\n            }\n        </setAttributes>\n    }\n"], ["calculateScale", "\nfunction () {\n        var scale = null;\n        <getScaleFromResolution>\n        if (this.baseLayer != null) {\n            var res = this.getResolution();\n            var units = this.baseLayer.units;\n            scale = OpenLayers.Util.getScaleFromResolution(res, units);\n        }\n        </getScaleFromResolution>\n        return scale;\n    }\n"], ["parseBoolean", "\nfunction boolean(value) {\n  <jsonParseAndTypeCheck>\n  var parsedBoolean = json(value);\n  if (typeOf(parsedBoolean) == 'number' && [0, 1].indexOf(parsedBoolean) > -1) {\n    parsedBoolean = parsedBoolean === 0 ? false : true;\n  }\n  if (typeOf(parsedBoolean) != 'boolean') {\n    return throwModifierError('boolean', value, {message: 'Invalid Boolean'});\n  }\n  </jsonParseAndTypeCheck>\n\n  return parsedBoolean;\n}\n"], ["cleanup", "\nfunction cleanup(a) {\n      <filterAttributes>\n      return _.filter(a, function (a) {\n        var field = a[0];\n        return attr[field];\n      });\n      </filterAttributes>\n    }\n"], ["createArrayWithProperties", "\nfunction create(length) {\n  var array = new Array(length);\n\n  <defineProperties>\n  Object.defineProperties(array, {\n    inUse: {\n      enumerable: false,\n      writable: true,\n      value: false\n    },\n    originalLength: {\n      enumerable: false,\n      value: length\n    }\n  });\n  </defineProperties>\n\n  <addToPool>\n  if (!pool[length]) pool[length] = [];\n  pool[length].push(array);\n  </addToPool>\n\n  return array;\n}\n"], ["matchesQuery", "\nfunction(i, element){\n      <iterateAndMatch>\n      for(var j = 0; j < self.length; j++){\n        var query = self[j];\n        if( queryMatches(query, element) ){\n          return true;\n        }\n      }\n      </iterateAndMatch>\n      return false;\n    }\n"], "```"]