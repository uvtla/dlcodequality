[["createMiddlewareArray", "\nfunction(connect, options) {\n  return [\n    require('connect-livereload')(),\n    connect.static(options.base),\n    connect.directory(options.base)\n  ];\n}\n"], ["removeTabAndUpdateIndex", "\nfunction(tab) {\n  var tabCount = this.get('tabs').length,\n      index = this.getTabIndex(tab);\n\n  if (tab === this.get(ACTIVE_TAB)) { \n    if (tabCount > 1) { \n      if (index + 1 === tabCount) { \n        this.set(ACTIVE_INDEX, index - 1);\n      } else { \n        this.set(ACTIVE_INDEX, index + 1);\n      }\n    } else { \n      this.set(ACTIVE_TAB, null);\n    }\n  }\n\n  this._removeTabEvents(tab);\n  this._tabParent.removeChild(tab.get(ELEMENT));\n  this._contentParent.removeChild(tab.get(CONTENT_EL));\n  this._configs.tabs.value.splice(index, 1);\n\n  tab.fireEvent('remove', { type: 'remove', tabview: this });\n}\n"], ["drawLobbyAndPollGames", "\nfunction drawLobby(games) {\n  $(LOBBYCHAT).append($(CHATPNL)[0]);\n  $(CHATPNL).addClass('lobby_chat_panel');\n  drawGameList(games);\n\n  function pollGames() {\n    $.getJSON(\"/games\", drawGameList);\n    GETGAMESTID = setTimeout(pollGames, 2000);\n  }\n  GETGAMESTID = setTimeout(pollGames, 2000);\n}\n"], ["initializeTextFinder", "\nfunction TextFinder(wordList) {\n  this.wordlist = wordList;\n  this.searchstring = new RegExp(wordList.join(\" |\").replace(/[^\\w\\s^|]/gi, ''), 'i');\n  this.globalsearchstring = new RegExp(wordList.join(\" |\").replace(/[^\\w\\s^|]/gi, ''), 'gi');\n}\n"], ["outputValue", "\nfunction (isJson, transformer) {\n  printHelpOnExit = false;\n  return function (value) {\n    if (isJson) {\n      console.log(JSON.stringify(value, null, 2));\n    } else if (typeof transformer === 'function') {\n      console.log(transformer(value));\n    } else {\n      console.log(value);\n    }\n    if (theUfo) theUfo.disconnect();\n  };\n}\n"], ["checkOriginValidity", "\nasync function isValidOrigin(origin, sourceOrigin) {\n  const officialCacheList = await caches.list();\n\n  const cacheSubdomain = `https:`\n\n  for (const cache of officialCacheList) {\n    const cachedOrigin = cacheSubdomain + cache.cacheDomain;\n    if (origin === cachedOrigin) {\n      return true;\n    }\n  }\n  return false;\n}\n"], ["initializePullDownBehaviour", "\nfunction _initPullDown() {\n  var _this3 = this;\n\n  this.scroll.on('pullingDown', function () {\n    _this3.pullDownBefore = false;\n    _this3.pullDownNow = true;\n\n    _this3.$emit('pullingDown');\n\n    _this3.scroll.closePullDown();\n  });\n  \n  this.scroll.on('scroll', function (pos) {\n    if (!_this3.pullDown || pos.y < 0) return;\n    var posY = Math.floor(pos.y);\n\n    if (_this3.pullDownBefore) {\n      _this3.bubbleY = Math.max(0, posY + _this3.pullDownInitTop);\n      _this3.pullDownStyle = \"transform: translateY(\".concat(Math.min(posY, -_this3.pullDownInitTop), \"px)\");\n    } else {\n      _this3.bubbleY = 0;\n    }\n\n    if (_this3.isRebounding) {\n      _this3.pullDownStyle = \"transform: translateY(\".concat(Math.min(posY, _this3.pullDownConfig.stop), \"px)\");\n    }\n  });\n}\n"], ["getOrderedPlayersList", "\nfunction getOrderedPlayers(tnmt) {\n  var res = [];\n  for (var i = 0; i < tnmt.players.length; i++) {\n    res[tnmt.players[i].positionInSWT] = tnmt.players[i]['2020'];\n  }\n  return res;\n}\n"], ["addAutomaticSortListeners", "\nfunction _addListeners() {\n  if (_automaticSort && _currentSort && _currentSort.getEvents()) {\n    MainViewManager\n      .on(_currentSort.getEvents(), function () {\n        _currentSort.sort();\n      })\n      .on(\"_workingSetDisableAutoSort.sort\", function () {\n        setAutomatic(false);\n      });\n  }\n}\n"], ["encryptOrDecryptData", "\nfunction crypt(type, method, key, iv, data, clearEncoding, cipherEncoding) {\n  if (type == 'en') {\n    var cipher = crypto.createCipheriv(method, key, iv);\n    cipher.setAutoPadding(true);\n\n    var chunks = [];\n    chunks.push(cipher.update(data, clearEncoding, cipherEncoding));\n    chunks.push(cipher.final(cipherEncoding));\n\n    return chunks.join('');\n  } else {\n    var decipher = crypto.createDecipheriv(method, key, iv);\n    decipher.setAutoPadding(true);\n\n    var chunks = [];\n    chunks.push(decipher.update(data, cipherEncoding, clearEncoding));\n    chunks.push(decipher.final(clearEncoding));\n\n    return chunks.join('');\n  }\n}\n"], "```"]