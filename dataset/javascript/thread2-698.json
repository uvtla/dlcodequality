[["makeCo", "\nfunction makeCo(Sequelize) {\n\tconst co = Sequelize.Promise.coroutine;\n\t\n\tfunction coAll(obj) {\n\t\t_.forIn(obj, (value, key) => {\n\t\t\tif (isGeneratorFunction(value)) obj[key] = co(value);\n\t\t});\n\t\treturn obj;\n\t}\n\t\n\treturn {co, coAll};\n}\n"], ["drawLines", "\nfunction drawLines(){\n\tlet lines,\n\t\ttopicLine;\n\n\ttopicLine = d3Shape.line()\n\t\t.curve(curveMap[lineCurve])\n\t\t.x(({date}) => xScale(date))\n\t\t.y(({value}) => yScale(value));\n\n\tlines = svg.select('.chart-group').selectAll('.line')\n\t\t.data(dataByTopic, getTopic);\n\n\tpaths = lines.enter()\n\t  .append('g')\n\t\t.attr('class', 'topic')\n\t  .append('path')\n\t\t.attr('class', 'line')\n\t\t.merge(lines)\n\t\t.attr('id', ({topic}) => topic)\n\t\t.attr('d', ({dates}) => topicLine(dates))\n\t\t.style('stroke', (d) => (\n\t\t\tdataByTopic.length === 1 ? `url(#${lineGradientId})` : getLineColor(d)\n\t\t));\n\n\tlines\n\t\t.exit()\n\t\t.remove();\n}\n"], ["createTask", "\nfunction createTask() {\n\tvar taskRunner = util.require('grunt');\n\n\ttaskRunner.registerTask('picky', function () {\n\t\tvar done = this.async();\n\t\tvar suite = Picky.createSuite(this.options());\n\n\t\tsuite.run(function (err) {\n\t\t\tif (err) {\n\t\t\t\ttaskRunner.log.error('error', err);\n\t\t\t}\n\t\t\tdone();\n\t\t});\n\t});\n}\n"], ["count", "\nfunction count(req, res) {\n  req.session.count = (req.session.count || 0) + 1\n  res.send('viewed ' + req.session.count + ' times\\n')\n}\n"], ["findLastMatch", "\nfunction (match) {\n\tassertType(match, Function);\n\n\tvar len = this.length;\n\twhile (len-- > 0) {\n\t\tif (match(this[len]) === true) {\n\t\t\treturn this[len];\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"], ["getInversionOf", "\nfunction getInversionOf(comparator) {\n\tfunction inversion(a, b) {\n\t\treturn -comparator(a, b);\n\t}\n\n\tinversion.original = comparator;\n\n\treturn inversion;\n}\n"], ["getUrl", "\nfunction getUrl (url) {\n  var opt = {\n    url: url\n  , timeout: 10000 \n  }\n  return new Promise(function(resolve, reject){\n    request(opt, function(err, res, body){\n      if (err) { return reject(err); }\n      resolve(body)\n    });\n  });\n}\n"], ["configureLogger", "\nfunction(options)\n{\n\tvar localIncludeTimestamp;\n\tvar localBufferMaxLength;\n\tvar localMessageMaxLength;\n\tvar localLevel;\n\n\tif (Util.exists(options))\n\t{\n\t\tErrors.assertInternal(Util.isObject(options));\n\n\t\tlocalIncludeTimestamp = options.includeTimestamp;\n\t\tlocalBufferMaxLength = options.bufferMaxLength;\n\t\tlocalMessageMaxLength = options.messageMaxLength;\n\t\tlocalLevel = options.level;\n\t}\n\n\tif (Util.exists(localIncludeTimestamp))\n\t{\n\t\tincludeTimestamp = !!localIncludeTimestamp;\n\t}\n\telse if (!Util.exists(includeTimestamp))\n\t{\n\t\tincludeTimestamp = true;\n\t}\n\n\tif (Util.exists(localBufferMaxLength))\n\t{\n\t\tErrors.assertInternal(\n\t\t\tUtil.number.isPositiveInteger(localBufferMaxLength));\n\t\tbufferMaxLength = localBufferMaxLength;\n\t}\n\telse if (!Util.exists(bufferMaxLength))\n\t{\n\t\tbufferMaxLength = DEFAULT_BUFFER_MAX_LENGTH;\n\t}\n\n\tif (Util.exists(localMessageMaxLength))\n\t{\n\t\tErrors.assertInternal(\n\t\t\tUtil.number.isPositiveInteger(localMessageMaxLength));\n\t\tmessageMaxLength = localMessageMaxLength;\n\t}\n\telse if (!Util.exists(messageMaxLength))\n\t{\n\t\tmessageMaxLength = DEFAULT_MESSAGE_MAX_LENGTH;\n\t}\n\n\tif (Util.exists(localLevel))\n\t{\n\t\tErrors.assertInternal(\n\t\t\tMAP_LOG_LEVEL_TO_OBJECT.hasOwnProperty(localLevel));\n\t\tcurrlevelObject = MAP_LOG_LEVEL_TO_OBJECT[localLevel];\n\t}\n\telse if (!Util.exists(currlevelObject))\n\t{\n\t\tcurrlevelObject = DEFAULT_LEVEL;\n\t}\n}\n"], ["makeWorker", "\nfunction makeWorker(content, contentType) {\n\tif ((typeof(content) === 'string') && content.match(/^blob:/)) {\n\t  return new Worker(content);\n\t} else {\n\t  return new Worker(makeURL(content, contentType));\n\t}\n}\n"], ["configureDeepDirRedirection", "\nfunction (urlpath, dirs) {\n\tdirs.forEach(function (val, idx) {\n\t\tredirectTo(urlpath, false);\n\t\taddDeepDir(urlpath, val);\n\t});\n}\n"], ""]