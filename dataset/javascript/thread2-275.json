[["concatLimit", "\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n        return callback(err, result);\n    });\n}\n"], ["anonParseExpression", "\nfunction(_exps,_out){\n    if (!_exps||!_exps.length) return;\n    if (_exps.length==1){\n        var _var = _exps.pop();\n        _doParseVars(_var);\n        _out.push(_var==''?'\"\"':_var);\n        return;\n    }\n    var _exp = _exps.pop().split(':');\n    _out.push('__MDF[\\''+_exp.shift()+'\\'](');\n    _doParseExpression(_exps,_out);\n    if (_exp.length>0){\n        var _args = _exp.join(':');\n        _doParseVars(_args);\n        _out.push(','+_args);\n    }\n    _out.push(')');\n}\n"], ["ctrlAPI", "\nfunction ctrlAPI(stop, newCbk) {\n    if (stopped) return false;\n\n    if (\"boolean\" != typeof stop) {\n        newCbk = stop;\n        stop = undefined;\n    };\n\n    if (newCbk !== undefined) {\n        messageCbk = (\"function\" == typeof newCbk)\n            ? newCbk\n            : ()=>newCbk\n        ;\n        if (! is_tty) {\n            if (stop !== undefined) {\n                stop || process.stdout.write(\"\\n\");\n            } else {\n                console.log(symbols.arrow + ' ' + messageCbk(false));\n            };\n        };\n    };\n\n    if (stop !== undefined) {\n        clearInterval(next);\n        stopped = true;\n\n        let s = symbols[stop ? \"ok\" : \"error\"];\n        logUpdate(s + ' ' + messageCbk(true));\n\n        if (is_tty) process.stdout.write(\"\\n\");\n    }\n\n    return true; \n}\n"], ["anonEventHandler", "\nfunction ( e ){\n    if ( scope_Target.hasAttribute('disabled') ) {\n        return false;\n    }\n\n    if ( hasClass(scope_Target, options.cssClasses.tap) ) {\n        return false;\n    }\n\n    e = fixEvent(e, data.pageOffset);\n\n    if ( !e ) {\n        return false;\n    }\n\n    if ( events === actions.start && e.buttons !== undefined && e.buttons > 1 ) {\n        return false;\n    }\n\n    if ( data.hover && e.buttons ) {\n        return false;\n    }\n\n    e.calcPoint = e.points[ options.ort ];\n\n    callback ( e, data );\n}\n"], ["dbSetupMethodsTable", "\nfunction(db) {\n    var methods_uuid = uuid();\n    debug.assert(methods_uuid).is('uuid');\n    // Minimized for brevity\n    return db.query('CREATE SEQUENCE methods_seq')\n        // ... several other SQL queries ...\n        .query('CREATE TRIGGER methods_only_one_active_row'+\n            // ... SQL trigger creation ...\n        );\n}\n"], ["FilterConstructor", "\nfunction Filter(operation, filter) {\n    Filter.super_.call(this, 'Filter');\n    this.set('Operation', operation);\n    this.set('Filter', filter);\n}\n"], ["hasLeadingSpace", "\nfunction hasLeadingSpace(token) {\n    const tokenBefore = sourceCode.getTokenBefore(token);\n    return tokenBefore && astUtils.isTokenOnSameLine(tokenBefore, token) && sourceCode.isSpaceBetweenTokens(tokenBefore, token);\n}\n"], ["unifiedPushAdminClient", "\nfunction unifiedPushAdminClient (baseUrl, settings) {\n    settings = settings || {};\n    const data = {};\n    const client = {\n        applications: {},\n        variants: {},\n        installations: {}\n    };\n    for (let func in applications) {\n        client.applications[func] = applications[func](client);\n    }\n    for (let func in variants) {\n        client.variants[func] = variants[func](client);\n    }\n    for (let func in installations) {\n        client.installations[func] = installations[func](client);\n    }\n    client.DEVICE_TYPES = deviceTypes;\n    client.health = health(client);\n    client.baseUrl = baseUrl;\n    privateMap.set(client, data);\n    return authenticate(client, settings);\n}\n"], ["getCommentSL", "\nfunction getCommentSL() {\n    const type = NodeType.CommentSLType;\n    const token = tokens[pos];\n    const line = token.ln;\n    const column = token.col;\n    const content = tokens[pos++].value.substring(2);\n    const end = !content ? [line, column + 1]\n        : getLastPosition(content, line, column + 2);\n    return newNode(type, content, line, column, end);\n}\n"], ["setupYahooWidgetColumns", "\nfunction(nodeList, parent) {\n    nodeDepth++;\n    if(!tree[nodeDepth]) {\n        tree[nodeDepth] = [];\n    }\n    for(var j=0; j<nodeList.length; j++) {\n        var currentNode = nodeList[j];\n        var oColumn = new YAHOO.widget.Column(currentNode);\n        currentNode.yuiColumnId = oColumn._sId;\n        flat.push(oColumn);\n        if(parent) {\n            oColumn._oParent = parent;\n        }\n        if(YAHOO.lang.isArray(currentNode.children)) {\n            oColumn.children = currentNode.children;\n            var terminalChildNodes = 0;\n            var countTerminalChildNodes = function(ancestor) {\n                // Minimized for brevity\n            };\n            countTerminalChildNodes(currentNode);\n            oColumn._nColspan = terminalChildNodes;\n            var currentChildren = currentNode.children;\n            for(var k=0; k<currentChildren.length; k++) {\n                var child = currentChildren[k];\n                // Copying properties from parent columns to children, minimized for brevity\n            }\n            if(!tree[nodeDepth+1]) {\n                tree[nodeDepth+1] = [];\n            }\n            parseColumns(currentChildren, oColumn);\n        }\n        else {\n            oColumn._nKeyIndex = keys.length;\n            oColumn._nColspan = 1;\n            keys.push(oColumn);\n        }\n        tree[nodeDepth].push(oColumn);\n    }\n    nodeDepth--;\n}\n"], "```\nThe function for setting up column structures in a `YAHOO.widget` is SRP compliant, focused on creating and organizing columns for a widget, iterating through nodes in a tree structure, and assigning relationships and properties accordingly."]