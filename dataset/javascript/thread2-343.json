[["initNode", "\nfunction initNode(initObj) {\n        <nodeDomainInitialization>\n        var resetUpdateProgres = false;\n        if (!isNodeDomainInitialized) {\n            MessageIds = initObj.messageIds;\n            updateDir = path.resolve(initObj.updateDir);\n            logFilePath = path.resolve(updateDir, logFile);\n            installStatusFilePath = path.resolve(updateDir, installStatusFile);\n            registerNodeFunctions();\n            isNodeDomainInitialized = true;\n            resetUpdateProgres = true;\n        }\n        </nodeDomainInitialization>\n        <sendingMessages>\n        postMessageToBrackets(MessageIds.NODE_DOMAIN_INITIALIZED, initObj.requester.toString(), resetUpdateProgres);\n        requesters[initObj.requester.toString()] = true;\n        postMessageToBrackets(MessageIds.REGISTER_BRACKETS_FUNCTIONS, initObj.requester.toString());\n        </sendingMessages>\n    }\n"], ["formatString", "\nfunction (formatted, args) {\n        \"use strict\";\n        for (var prop in args) {\n            if (args.hasOwnProperty(prop)) {\n                var regexp = new RegExp(\"\\\\{\" + prop + \"\\\\}\", \"gi\");\n                formatted = formatted.replace(regexp, args[prop]);\n            }\n        }\n        return formatted;\n    }\n"], ["createFilterChoices", "\nfunction(filter, choice) {\n      var choices = [];\n      for (var i = 0; i < filter.choices.length; i++) {\n        choices.push({\n          label: filter.choices[i].label,\n          action: filter.name,\n          value: filterValueToChoiceValue(filter.choices[i].value, choice),\n          default: filter.choices[i].value === filter.def\n        });\n      };\n      return choices;\n    }\n"], ["applyTransform", "\nfunction applyTransform(data, headers, status, fns) {\n        if (typeof fns === 'function') {\n            data = fns(data, headers, status);\n        } else {\n            for (var i = 0; i < fns.length; i++) {\n                data = fns[i](data, headers, status);\n            }\n        }\n        return data;\n    }\n"], ["Mutant", "\nfunction Mutant(obj) {\n        var triggered,\n            i = 0;\n            mutations = {};\n    \n        <initializeEventTarget>\n        if (!obj.addEventListener) {\n            obj = EventTarget(obj);\n        }\n        </initializeEventTarget>\n        \n        <triggerMutationEvent>\n        function trigger() {\n            i++;\n            \n            if (triggered) return;\n            \n            triggered = setTimeout(function() {\n                var evt = new MutationEvent(mutations, i);\n    \n                triggered = null;\n                mutations = {};\n                i = 0;\n    \n                obj.dispatchEvent(evt);\n            }, 0);\n        }\n        </triggerMutationEvent>\n        \n        <proxyMutationHandler>\n        return new Proxy(obj, {\n            deleteProperty: function(target, property) {\n                if (property in target) {\n                    if (!(property in mutations)) {\n                        mutations[property] = target[property];\n                    }\n                    \n                    delete target[property];\n                    trigger();\n                }\n                \n                return true;\n            },\n            defineProperty: function(target, property, descriptor) {\n                var value = target[property];\n                \n                Object.defineProperty(target, property, descriptor);\n    \n                if (!(property in mutations)) {\n                    if (target[property] !== value) {\n                        mutations[property] = value;\n                        trigger();\n                    }\n                }\n            },\n            set: function(target, property, value, receiver) {\n                if (value !== target[property]) {\n                    if (!(property in mutations)) {\n                        mutations[property] = target[property];\n                    }\n                    \n                    target[property] = value;\n                    trigger();\n                }\n            }\n        });\n        </proxyMutationHandler>\n    }\n"], ["parseMetaValue", "\nfunction metaValue(value) {\n        var newValue = value;\n        <classifyValue>\n        if (typeof value === 'string') {\n            if (value.match(/^=/)) {\n                \n                var name = value.slice(1).trim();\n                newValue = new _reference2.default('metachild', name);\n            } else if (value.match(/^#([a-fA-F0-9]){3,8}/) || value.match(/^rgba?\\(.*\\)$/)) {\n                \n                newValue = _color_value2.default.fromColorValue(value);\n            } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'yes') {\n                newValue = true;\n            } else if (value.toLowerCase() === 'false' || value.toLowerCase() === 'no') {\n                newValue = false;\n            } else if (value.match(/^[0-9\\.,]+$/)) {\n                var num = parseFloat(value);\n                if (!isNaN(num)) {\n                    newValue = num;\n                }\n            }\n        }\n        </classifyValue>\n        return newValue;\n    }\n"], ["createNetworkRequest", "\nfunction(method, params, payload) {\n        <prepareRequest>\n        var baseUrl   = (method.base_url || this.spec.base_url).replace(/(\\/)$/, '');\n        var headers   = {};\n        for (var header in method.headers) {\n            headers[header] = method.headers[header];\n        }\n        </prepareRequest>\n        return simpleHttp.createRequest(this.httpClient, baseUrl + method.path, method.method, headers, params, payload);\n    }\n"], ["handleDocumentSave", "\nfunction(doc, options) {\n          options = options || {};\n          var db = this;\n          <setupRequestDetails>\n          var beforeSend = fullCommit(options);\n          if (doc._id === undefined) {\n            var method = \"POST\";\n            var uri = this.uri;\n          } else {\n            var method = \"PUT\";\n            var uri = this.uri + encodeDocId(doc._id);\n          }\n          var versioned = maybeApplyVersion(doc);\n          </setupRequestDetails>\n          <sendAjaxRequest>\n          $.ajax({\n            type: method, url: uri + encodeOptions(options),\n            contentType: \"application/json\",\n            dataType: \"json\", data: toJSON(doc),\n            beforeSend : beforeSend,\n            complete: function(req) {\n                <handleResponse>\n                var resp = $.parseJSON(req.responseText);\n                if (req.status == 200 || req.status == 201 || req.status == 202) {\n                    doc._id = resp.id;\n                    doc._rev = resp.rev;\n                    if (versioned) {\n                        db.openDoc(doc._id, {\n                        attachPrevRev : true,\n                        success : function(d) {\n                            doc._attachments = d._attachments;\n                            if (options.success) options.success(resp);\n                        }\n                        });\n                    } else {\n                        if (options.success) options.success(resp);\n                    }\n                } else if (options.error) {\n                    options.error(req.status, resp.error, resp.reason);\n                } else {\n                    throw \"The document could not be saved: \" + resp.reason;\n                }\n                </handleResponse>\n            }\n          });\n          </sendAjaxRequest>\n        }\n"], ["constructAttributeAst", "\nfunction(attrs, attributeBlocks){\n    <constructAstFromAttributes>\n    var ast = [];\n    if (attributeBlocks.length) {\n        <mergeAttributes>\n        if (attrs.length) {\n            var val = this.attrs(attrs);\n            attributeBlocks.unshift(val);\n        }\n        if (attributeBlocks.length > 1) {\n            push.apply(ast, this.bufferExpression(this.runtime('attrs') + '(' + this.runtime('merge') + '([' + attributeBlocks.join(',') + ']), ' + stringify(this.terse) + ')'));\n        } else {\n            push.apply(ast, this.bufferExpression(this.runtime('attrs') + '(' + attributeBlocks[0] + ', ' + stringify(this.terse) + ')'));\n        }\n        </mergeAttributes>\n    } else if (attrs.length) {\n        push.apply(ast, this.bufferExpression(this.attrs(attrs, true)));\n    }\n    </constructAstFromAttributes>\n    return ast;\n  }\n"], ["removeStarFromRepository", "\nasync function del(owner, repo) {\n        const endpoint = `/user/starred/${owner}/${repo}`\n        <sendUnstarRequest>\n        const { statusCode } = await this._request({\n            method: 'DELETE',\n            endpoint,\n        })\n        </sendUnstarRequest>\n        <verifyResponse>\n        if (statusCode != 204) {\n            throw new Error(`Unexpected status code ${statusCode}.`)\n        }\n        </verifyResponse>\n    }\n"], "```"]