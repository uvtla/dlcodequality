```javascript
<defaultAssets>
function defaultAssets( { name, category, descriptor } ) {
   switch( category ) {
      case 'themes':
         return {
            assetUrls: [ descriptor.styleSource || 'css/theme.css' ]
         };
      case 'layouts':
      case 'widgets':
      case 'controls':
         return {
            assetsForTheme: [ descriptor.templateSource || `${name}.html` ],
            assetUrlsForTheme: [ descriptor.styleSource || `css/${name}.css` ]
         };
      default:
         return {};
   }
}
</defaultAssets>

<getFieldValue>
function( field ){
    var tagName = field.tagName.toLowerCase();

    if( tagName == 'input' && field.type == 'checkbox' ){
        return field.checked;
    }

    if( tagName == 'select' ){
        return field.options[field.selectedIndex].value;
    }

    return field.value;
}
</getFieldValue>

<anonymousFunction>
function () {

    this.middlewarePaths.forEach(function (mwPath) {
      <loadAndMountMiddleware>
      require(mwPath)(this);

      debug(format('mounted middleware/%s', path.basename(mwPath)));
      </loadAndMountMiddleware>
    }, this);

  }
</anonymousFunction>

<SpanData>
function SpanData(agent, trace, name, parentSpanId, isRoot, skipFrames) {
  <initializeSpanData>
  var spanId = uid++;
  this.agent = agent;
  var spanName = traceUtil.truncate(name, constants.TRACE_SERVICE_SPAN_NAME_LIMIT);
  this.span = new TraceSpan(spanName, spanId, parentSpanId);
  this.trace = trace;
  this.isRoot = isRoot;
  trace.spans.push(this.span);
  </initializeSpanData>
  if (agent.config().stackTraceLimit > 0) {
    <captureStackTrace>
    
    
    
    
    var origLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = agent.config().stackTraceLimit + skipFrames;

    var origPrepare = Error.prepareStackTrace;
    Error.prepareStackTrace = function(error, structured) {
      return structured;
    };
    var e = {};
    Error.captureStackTrace(e, SpanData);

    var stackFrames = [];
    e.stack.forEach(function(callSite, i) {
      if (i < skipFrames) {
        return;
      }
      var functionName = callSite.getFunctionName();
      var methodName = callSite.getMethodName();
      var name = (methodName && functionName) ?
        functionName + ' [as ' + methodName + ']' :
        functionName || methodName || '<anonymous function>';
      stackFrames.push(new StackFrame(undefined, name,
        callSite.getFileName(), callSite.getLineNumber(),
        callSite.getColumnNumber()));
    });
    </captureStackTrace>
    <setLabelForStackTrace>
    this.span.setLabel(TraceLabels.STACK_TRACE_DETAILS_KEY,
      traceUtil.truncate(JSON.stringify({stack_frame: stackFrames}),
        constants.TRACE_SERVICE_LABEL_VALUE_LIMIT));
    </setLabelForStackTrace>
    <restoreErrorSettings>
    Error.stackTraceLimit = origLimit;
    Error.prepareStackTrace = origPrepare;
    </restoreErrorSettings>
  }
}
</SpanData>

<getStopByName>
function getStopByName(db, name, callback) {

  <checkCache>
  let cacheKey = db.id + "-" + name;
  let cache = cache_stopByName.get(cacheKey);
  if ( cache !== null ) {
    return callback(null, cache);
  }
  </checkCache>

  <prepareQueries>
  let queries = [
    "SELECT stop_id FROM gtfs_stops WHERE stop_name='" + name + "' COLLATE NOCASE;",
    "SELECT stop_id FROM rt_alt_stop_names WHERE alt_stop_name='" + name + "' COLLATE NOCASE;",
    "SELECT stop_id FROM rt_stops_extra WHERE display_name='" + name + "' COLLATE NOCASE;"
  ];
  </prepareQueries>

  <executeQueries>
  let found = false;
  let count = 0;
  for ( let i = 0; i < queries.length; i++ ) {
    _queryForStopByName(db, queries[i], function(stop) {

    <checkResultAndUpdateCache>
      if ( !found && stop !== undefined ) {
        found = true;
        cache_stopByName.put(cacheKey, stop);
        return callback(null, stop);
      }
    </checkResultAndUpdateCache>

    <checkCompletion>
      count ++;
      if ( count === queries.length ) {
        return callback(null, undefined);
      }
    </checkCompletion>

    });
  }
  </executeQueries>
}
</getStopByName>

<kolkrabbiRequest>
function kolkrabbiRequest (url, token) {
  <makeHTTPRequest>
  return cli.got.get(KOLKRABBI_BASE_URL + url, {
    headers: {
      authorization: 'Bearer ' + token
    },
    json: true
  })
    </makeHTTPRequest>
    <processResponse>
    .then(res => res.body)
    </processResponse>
    <handleError>
    .catch(err => {
      switch (err.statusCode) {
        case 404:
          err = new Error(`404 ${url}`)
          err.name = 'NOT_FOUND'
          throw err
        default:
          throw err
      }
    })
    </handleError>
}
</kolkrabbiRequest>

<createResponseHandler>
function createResponseHandler(callback, okStatusCodes, noBuffer, retryFn) {
    <validateArguments>
    if (typeof callback !== 'function') {
        callback = function () {};
    }

    if (typeof okStatusCodes === 'function') {
        retryFn = okStatusCodes;
        okStatusCodes = null;
        noBuffer = retryFn;
    }
    if (typeof noBuffer === 'function') {
        retryFn = noBuffer;
        noBuffer = false;
    }

    okStatusCodes = okStatusCodes || [200];
    </validateArguments>

    <retryHandler>
    function retry(response) {
        var retryAfter = response.headers['retry-after'];
        if (typeof retryFn === 'function' && retryAfter) {
            retryAfter = parseInt(retryAfter, 10);
            setTimeout(retryFn, retryAfter * 1000);
            return true;
        }
        return false;
    }
    </retryHandler>

    <responseHandler>
    function handleResponse(response, body) {
        var error;

        
        if (noBuffer !== true && typeof body === 'undefined') {
            response.pipe(concat(function (body) {
                handleResponse(response, parseJSONBody(body));
            }));
            return;
        }

        if (okStatusCodes.indexOf(response.statusCode) > -1) {
            if (!retry(response)) {
                if (noBuffer) {
                    callback(null, response);
                } else {
                    callback(null, body, response);
                }
            }
        } else {
            if (response.statusCode === 429) {
                if (retry(response)) {
                    return;
                }
            }

            handleError(body, response, callback);
        }
    }
    </responseHandler>

    return function (error, response) {
        if (error) {
            callback(error, response);
        } else {
            handleResponse(response);
        }
    };
}
</createResponseHandler>

<ws_get_cell_stub>
function ws_get_cell_stub(ws, R, C) {
	
	if(typeof R == "string") return ws[R] || (ws[R] = {t:'z'});
	
	if(typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
	
	return ws_get_cell_stub(ws, encode_cell({r:R,c:C||0}));
}
</ws_get_cell_stub>

<init>
function init(names) {  

  <setupState>
  this.count = 0;
  this.deps = {};
  this.groups = {};
  this.cb = null;
  </setupState>

  if (! names) return;

  <buildDependencies>
  this.add(names[0], function(cb) { cb() });
  for (var i = 1; i < names.length; i++) {
    this.add(names[i], names[i-1], function(cb) { cb() });
  }
  </buildDependencies>

  return;
}
</init>

<processSection>
function processSection(section, config, parentDepth) {
	
	<resolveContentPath>
	const contentRelativePath = section.content
	let content
	if (contentRelativePath) {
		const contentAbsolutePath = path.resolve(config.configDir, contentRelativePath)
		if (!fs.existsSync(contentAbsolutePath)) {
			throw new Error(`Styleguidist: Section content file not found: ${contentAbsolutePath}`)
		}
		content = requireIt(`!!${examplesLoader}?customLangs=vue|js|jsx!${contentAbsolutePath}`)
	}
	</resolveContentPath>

	<determineSectionDepth>
	let sectionDepth
	if (parentDepth === undefined) {
		sectionDepth = section.sectionDepth !== undefined ? section.sectionDepth : 0
	} else {
		sectionDepth = parentDepth === 0 ? 0 : parentDepth - 1
	}
	</determineSectionDepth>

	return {
		<assembleSectionObject>
		name: section.name,
		exampleMode: section.exampleMode || config.exampleMode,
		usageMode: section.usageMode || config.usageMode,
		sectionDepth,
		description: section.description,
		slug: slugger.slug(section.name),
		sections: getSections(section.sections || [], config, sectionDepth),
		filepath: contentRelativePath,
		href: section.href,
		components: getSectionComponents(section, config),
		content,
		external: section.external
		</assembleSectionObject>
	}
}
</processSection>
```