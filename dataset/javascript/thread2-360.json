[["identity", "\nfunction identity(f) {\n    return forAll(_.Int).satisfy(function(a) {\n      <returnSelf>\n      function returnSelf(b) {\n        return b;\n      }\n      </returnSelf>\n\n      <mapAndCompare>\n      return f(a).map(returnSelf).isEqual(f(a));\n      </mapAndCompare>\n    });\n}\n"], ["addChildView", "\nfunction(view, childView, options) {\n    var buffer = view.buffer;\n    var _childViews = view._childViews;\n\n    <createChildView>\n    childView = view.createChildView(childView, options);\n    </createChildView>\n\n    <addChildViewToBuffer>\n    if (!_childViews.length) { _childViews = view._childViews = _childViews.slice(); }\n    _childViews.push(childView);\n\n    if (!childView._morph) {\n      buffer.pushChildView(childView);\n    }\n    </addChildViewToBuffer>\n\n    <notifyPropertyChange>\n    view.propertyDidChange('childViews');\n    </notifyPropertyChange>\n\n    return childView;\n}\n"], ["invariant", "\nfunction invariant(predicate, Err, ...format) {\n  <checkPredicate>\n  if (Boolean(predicate) === false) {\n    return undefined\n  }\n  </checkPredicate>\n  \n  <throwStringError>\n  if (typeof Err === \"string\") {\n    throw new Error(fmt(Err, ...format))\n  }\n  </throwStringError>\n\n  <throwFunctionError>\n  if (typeof Err === \"function\") {\n    const message = format.shift()\n\n    throw new Err(fmt(message, ...format))\n  }\n  </throwFunctionError>\n\n  <throwError>\n  throw Err\n  </throwError>\n}\n"], ["stop", "\nfunction stop() {\n  var time;\n  <checkEnabled>\n  if(!this.enabled) return false;\n  </checkEnabled>\n  \n  <recordTime>\n  time = this._record.isSlowerThan(this._slowerThan);\n  </recordTime>\n\n  <unshiftRecord>\n  if(this._record && time > -1) {\n    this._records.unshift(this._record.toArray(id++, time));\n    if(this._records.length >= this._maxLen) {\n      this._records.pop();\n    }\n  }\n  </unshiftRecord>\n}\n"], ["validateInterval", "\nfunction( value, interval ) {\n\t\t\tvar error;\n\n\t\t\t<splitInterval>\n\t\t\tinterval = interval.split( ',' );\n\t\t\t</splitInterval>\n\n\t\t\t<checkLowerBound>\n\t\t\tif ( value < parseFloat( interval[ 0 ] ) ) {\n\t\t\t\terror = {\n\t\t\t\t\t\"rule\": \"interval\",\n\t\t\t\t\t\"message\": \"ERROR:provided value exceeds the lower bound: \" + interval[ 0 ]\n\t\t\t\t};\n\t\t\t\treturn [ error ];\n\t\t\t}\n\t\t\t</checkLowerBound>\n\t\t\t<checkUpperBound>\n\t\t\tif ( value > parseFloat( interval[ 1 ] ) ) {\n\t\t\t\terror = {\n\t\t\t\t\t\"rule\": \"interval\",\n\t\t\t\t\t\"message\": \"ERROR:provided value exceeds the upper bound: \" + interval[ 1 ]\n\t\t\t\t};\n\t\t\t\treturn [ error ];\n\t\t\t}\n\t\t\t</checkUpperBound>\n\t\t\treturn;\n\t\t}\n"], ["createCheck", "\nfunction createCheck(src) {\n  <normalizeSrc>\n  src = normalizeKeys(src);\n  </normalizeSrc>\n\n  <createServiceCheck>\n  var dst = _createServiceCheck(src);\n  </createServiceCheck>\n\n  <assignName>\n  if (src.name) {\n    dst.Name = src.name;\n  } else {\n    throw new Error('name required');\n  }\n  </assignName>\n\n  <assignOptionalProperties>\n  if (src.hasOwnProperty('id')) dst.ID = src.id;\n  if (src.hasOwnProperty('serviceid')) dst.ServiceID = src.serviceid;\n  </assignOptionalProperties>\n\n  return dst;\n}\n"], ["RegionConstructor", "\nfunction Region(name, state) {\n    var _this = _super.call(this, name, state) || this;\n    \n    <initializeVertices>\n    _this.vertices = new Array();\n    </initializeVertices>\n    <addToParentRegions>\n    _this.parent.regions.push(_this);\n    </addToParentRegions>\n    <markRootDirty>\n    _this.getRoot().clean = false;\n    </markRootDirty>\n    return _this;\n}\n"], ["registerDirective", "\nfunction registerDirective(Vue, name, definition) {\n    <initializeDirectivesStorage>\n    Vue._shards_vue_directives_ = Vue._shards_vue_directives_ || {};\n    </initializeDirectivesStorage>\n    var loaded = Vue._shards_vue_directives_[name];\n\n    <registerIfNotLoaded>\n    if (!loaded && definition && name) {\n        Vue._shards_vue_directives_[name] = true;\n        Vue.directive(name, definition);\n    }\n    </registerIfNotLoaded>\n\n    return loaded\n}\n"], ["smaller", "\nfunction smaller(tree, n, m, depth) {\n  <calculateIndexes>\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  </calculateIndexes>\n\n  <compareValues>\n  return (tree[_n2] < tree[_m2] ||\n         (tree[_n2] === tree[_m2] && depth[n] <= depth[m]));\n  </compareValues>\n}\n"], ["uuids", "\nfunction uuids (count, callback) {\n    <handleArguments>\n    if (typeof count === 'function') {\n      callback = count\n      count = 1\n    }\n    </handleArguments>\n    <requestUuids>\n    return relax({ method: 'GET', path: '_uuids', qs: { count: count } }, callback)\n    </requestUuids>\n}\n"], ""]