[["validate_and_handle_select_value", "\nfunction () {\n    <check_for_empty_options>\n    if (!this._cfg.options.length) {\n        return;\n    }\n    </check_for_empty_options>\n    <check_and_log_invalid_option_value>\n    if (typeof this._cfg.value != 'undefined') {\n        for (var i = 0; i < this._cfg.options.length; i++) {\n            if (this._cfg.options[i].value === this._cfg.value) {\n                return;\n            }\n        }\n        this.$logError(this.WIDGET_OPTIONS_INVALID_VALUE);\n    }\n    </check_and_log_invalid_option_value>\n    <set_default_option_value>\n    else {\n        this.setProperty(\"value\", this._cfg.options[0].value);\n    }\n    </set_default_option_value>\n}\n"], ["scrollTop_implementation", "\nfunction scrollTop(...args) {\n  <handle_arguments>\n  let [top, duration, easing, callback] = args;\n  if (args.length === 3 && typeof easing === 'function') {\n    [top, duration, callback, easing] = args;\n  }\n  </handle_arguments>\n  <scroll_or_return_position>\n  const dom = this;\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n  </scroll_or_return_position>\n}\n"], ["createTouchList_from_MouseEvent", "\nfunction createTouchList(mouseEv) {\n  var touchList = TouchList();\n  touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));\n  return touchList;\n}\n"], ["reset_element_prefixTimeout", "\nfunction resetPrefixTimeout(element) {\n  if (element[prefixTimeoutKey]) {\n    clearTimeout(element[prefixTimeoutKey]);\n    element[prefixTimeoutKey] = false;\n  }\n}\n"], ["encodeDate_to_representation", "\nfunction encodeDate(date) {\n    if (!(date instanceof Date)) throw new Error('Value not Date: ' + date)\n    return (date.getUTCFullYear() * monthsPerYear + date.getUTCMonth()) - yearMonthZero\n}\n"], ["compile_postData_with_mergeData", "\nfunction () {\n    <retrieve_data>\n    var element = this.get_element();\n    var data = this._postData || this.get_data();\n    </retrieve_data>\n    <merge_data_if_present>\n    var m = this._mergeData;\n    if (m) {\n        for (var i in m) {\n            data[i] = m[i];\n        }\n    }\n    </merge_data_if_present>\n    return data;\n}\n"], ["isUnique_async_query", "\nfunction isUnique(str, options){\n    var deferred = q.defer(),\n        qry = [ { key: options.property, cmp: '=', value: str } ];\n\n    db.content.query([], options.contentTypes, qry, {} ).then(\n        function(payload) {\n            if(payload.total === 0){\n                deferred.resolve(true);\n            }\n            else {\n                deferred.reject(false);\n            }\n        }\n    );\n\n    return deferred.promise;\n}\n"], ["loadCompleteOptionsCmd_validation_and_extension", "\nfunction loadCompleteOptionsCmd(options) {\n    <validate_options_object>\n    if(!options || typeof options !== 'object')\n        throw new Error('expected options object')\n    </validate_options_object>\n    <extend_options_with_defaults_or_composite_options>\n    if(!options.getOptions)\n        options = new BasicOptions(options)\n    return options.file ? new CompositeOptions([new MultiOptions(options.file), options]) : options\n    </extend_options_with_defaults_or_composite_options>\n}\n"], ["elements_sorting_with_placement_control", "\nfunction(elements, comparator) {\n    var $elements = $(elements);\n    <create_placements_for_sorting>\n    var placements = $elements.map(function() {\n        var sortElement = this;\n        var parentNode = sortElement.parentNode;\n        var nextSibling = parentNode.insertBefore(document.createTextNode(''), sortElement.nextSibling);\n        return function() {\n            if (parentNode === this) {\n                throw new Error('You can\\'t sort elements if any one is a descendant of another.');\n            }\n            parentNode.insertBefore(this, nextSibling);\n            parentNode.removeChild(nextSibling);\n        };\n    });\n    </create_placements_for_sorting>\n    <apply_sorting_and_placement_to_elements>\n    return Array.prototype.sort.call($elements, comparator).each(function(i) {\n        placements[i].call(this);\n    });\n    </apply_sorting_and_placement_to_elements>\n}\n"], ["initialize_HeadCornerChartParser", "\nfunction HeadCornerChartParser(grammar) {\n  this.grammar = grammar;\n  <compute_and_log_grammar_relation>\n  this.grammar.computeHCRelation();\n  logger.debug(\"HeadCornerChartParser: \" + JSON.stringify(grammar.hc));\n  </compute_and_log_grammar_relation>\n}\n"], "```"]