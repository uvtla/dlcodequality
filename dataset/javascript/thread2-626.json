[["isEscapeingAt", "\nfunction isEscapeingAt(string, index) {\n\tif (index === 0) { return false; }\n\tlet i = index - 1;\n\twhile (\n\t\ti >= 0 && string[i] === '\\\\'\n\t) { --i; }\n\treturn (index - i) % 2 === 0;\n}\n"], ["partitionValueToIndex", "\nfunction partitionValueToIndex (partition, value) {\n  var group;\n\n  if (!partition) {\n    return 0;\n  }\n  \n  group = partition.groups.get(value, 'value');\n\n  if (group) {\n    return group.groupIndex;\n  } else {\n    return -1;\n  }\n}\n"], ["tick", "\nfunction tick (a) {\n\t\t\tif (isStopped) return\n\n\t\t\tlet playedTime = context.currentTime - initTime;\n\t\t\tlet playedCount = playedTime * sampleRate;\n\n\t\t\t\n\t\t\tif (lastCount - playedCount < samplesPerFrame) {\n\t\t\t\tlet buf = fetch(samplesPerFrame)\n\n\t\t\t\t\n\t\t\t\tutil.copy(buf, buffer, lastCount % buffer.length)\n\n\t\t\t\t\n\t\t\t\tlastCount += samplesPerFrame;\n\n\t\t\t\t\n\t\t\t\tconsume(samplesPerFrame)\n\n\t\t\t\t\n\t\t\t\ttick()\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tlet starvingTime = (lastCount - samplesPerFrame) / sampleRate;\n\t\t\t\tlet remainingTime = starvingTime - playedTime;\n\t\t\t\tsetTimeout(tick, remainingTime * 1000)\n\t\t\t}\n\t\t}\n"], ["getLayout", "\nfunction getLayout(layout) {\n    if (!layoutCache.hasOwnProperty(layout)) {\n      var layoutContents = false,\n          layoutPath = path.join(\n        path.isAbsolute(options.layoutPath) ?\n          options.layoutPath : path.join(process.cwd(), options.layoutPath),\n        layout\n      );\n      try {\n        <readLayoutFile>\n        layoutContents = fs.readFileSync(layoutPath, 'utf8');\n        </readLayoutFile>\n      } catch (err) {\n        throw new PluginError(logFlag, 'Could not read layout: \\'' + layoutPath + '\\'\\n');\n      }\n      layoutCache[layout] = {\n        contents: layoutContents,\n        path: layoutPath\n      };\n    }\n    return layoutCache[layout];\n  }\n"], ["getPixel", "\nfunction (x, y) {\n        var i = (y * this.size.w + x) * this.bytes;\n        var res = [this.image[i], this.image[i + 1], this.image[i + 2], this.image[i + 3]];\n        return res;\n    }\n"], ["warn", "\nfunction () {\n        var prefix = 'WARN';\n        this.output(prefix, prefix.yellow, Array.prototype.slice.call(arguments));\n    }\n"], ["pushNode", "\nfunction pushNode(result, nodes) {\n\t'use strict';\n\n\tvar temp;\n\n\tif (result.length === 0) {\n\t\treturn nodes;\n\t}\n\tif (result.length < nodes.length) {\n\t\t\n\t\ttemp = result;\n\t\tresult = nodes;\n\t\tnodes = temp;\n\t}\n\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\tif (!result.includes(nodes[i])) {\n\t\t\tresult.push(nodes[i]);\n\t\t}\n\t}\n\treturn result;\n}\n"], ["_stringsByCharOrder", "\nfunction _stringsByCharOrder(magicWord, givenMagicWord) {\n  let charNumber = 0\n\n  function _findMatchingCharacter(matchChar, string) {\n    let found = false\n    for (let j = charNumber; j < string.length; j++) {\n      const stringChar = string[j]\n      if (stringChar === matchChar) {\n        found = true\n        charNumber = j + 1\n        break\n      }\n    }\n    return found\n  }\n\n  for (let i = 0; i < givenMagicWord.length; i++) {\n    const matchChar = givenMagicWord[i]\n    const found = _findMatchingCharacter(matchChar, magicWord)\n    if (!found) {\n      return _matchRankMap.noMatch\n    }\n  }\n  return _matchRankMap.matches\n}\n"], ["_createMaskConsumer", "\nfunction _createMaskConsumer() {\n  const element = document.createElementNS(svgNS, 'rect');\n\n  _setAttributes(element, {\n    height: '100%',\n    width: '100%',\n    x: '0',\n    y: '0'\n  });\n  element.setAttribute('mask', `url(#${elementIds.modalOverlayMask})`);\n\n  return element;\n}\n"], ["TypeVector", "\nfunction TypeVector(options) {\n    var opts = util._extend({type: 'int'}, options);\n    this.constructor.super_.call(this, opts.buffer, opts.offset);\n    this._typeId = TypeVector.id;\n    this._typeName = TypeVector.typeName;\n    this.module = opts.module;\n    <manageType>\n    manageType.call(this, opts.type);\n    </manageType>\n    this.list = !opts.list ? [] : opts.list;\n    this._byId = {};\n    if (TypeVector.logger.isDebugEnabled()) {\n        TypeVector.logger.debug('Vector init: module = %s , type = %s, list = %s', opts.module, opts.type, this.list);\n    }\n}\n"], ""]