[["removeValueFromArray", "\nfunction (value) {\n  var res;\n  if (this.has(value)) {\n    res = this.items.splice(\n      x.indexOf(this.items, value),\n      1\n    );\n  }\n  return res;\n}\n"], ["renderTemplate", "\nfunction (filePath, model, cb) {\n  <callbackDefinition>\n  var callback = function (err, html) {\n    if (err) {\n      return cb(err);\n    }\n    return cb(null, html);\n  };\n  </callbackDefinition>\n  if (cache[filePath] && isProd) {\n    cache[filePath](model, callback)\n  } else {\n    saker.getView(filePath, function (err, template) {\n      if (err) {\n        return cb(err);\n      }\n      try {\n        var compiled = saker.compile(template, filePath);\n      } catch (err) {\n        return cb(err);\n      }\n      if (isProd) {\n        cache[filePath] = compiled;\n      }\n      compiled(model, callback);\n    })\n  }\n}\n"], ["testingNodeClass", "\nfunction (node) {\n  const parent = node.parentNode\n  return parent.classList.contains('code') && parent.nodeName === 'TD' && node.nodeName === 'PRE'\n}\n"], ["shinyProxy", "\nfunction ShinyProxy(router, schedulerRegistry) {\n  <httpListener>\n  this.httpListener = function(req, res) {\n    ...\n    <handlingRequestPause>\n    req.pause();\n    ...\n    </handlingRequestPause>\n    <getAppSpec>\n    router.getAppSpec_p(req, res)\n    ...\n    </getAppSpec>\n  };\n  </httpListener>\n  \n  ...\n\n  <createHttpProxy>\n  function createHttpProxy(appWorkerHandle) {\n    ...\n    <configureProxy>\n    var proxy = new http_proxy.createProxyServer({\n      ...\n    });\n    ...\n    </configureProxy>\n    \n    ...\n  }\n  </createHttpProxy>\n  \n  ...\n}\n"], ["getInputTypeForCommand", "\nfunction inputTypeForCommand (cmd) {\n...\n}\n"], ["getModulesAnswered", "\nfunction getModulesAnswered(command, argv, globs) {\n...\n}\n"], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ""]