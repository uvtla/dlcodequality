[["react", "\nfunction react(h) {\n  var node = h && h('div')\n  return Boolean(\n    node && ('_owner' in node || '_store' in node) && node.key === null\n  )\n}\n"], ["moduleDependencies", "\nfunction(data, done) {\n  try {\n    <dependencyLoop>\n    _.forEach(data._dependencies || {}, function(value, key) {\n      if(this.sandbox[key] !== undefined) {\n        return;\n      }\n      this.sandbox[key] = module.parent.require(value);\n    }.bind(this));\n    </dependencyLoop>\n\n    <deleteDependencies>\n    delete data._dependencies;\n    </deleteDependencies>\n  }\n  catch(e) {\n    return done(e);\n  }\n\n  <asyncSeries>\n  async.eachSeries(Object.keys(data), function(key, next) {\n    _this.result[key] = {};\n    var value = data[key];\n\n    try {\n      <modelCheck>\n      if(!value._model) {\n          throw new Error('Please provide a _model property that describes which database model should be used.');\n      }\n      </modelCheck>\n\n      <modelName>\n      var modelName = value._model;\n      </modelName>\n\n      <deleteModel>\n      delete value._model;\n      </deleteModel>\n\n      <mongooseModel>\n      var Model = mongoose.model(modelName);\n      </mongooseModel>\n\n      <asyncSeriesInner>\n      async.series([\n        <dropCollection>\n        function(callback) {\n          if(_this.options.dropCollections === true) {\n            mongoose.connection.db.dropCollection(Model.collection.name, function(err) {\n              callback();\n            });\n          }\n          else {\n            callback();\n          }\n        },\n        </dropCollection>\n        <createModelData>\n        function(callback) {\n          async.eachSeries(Object.keys(value), function(k, innerNext) {\n            var modelData = value[k],\n                data = _this._unwind(modelData);\n\n            Model.create(data, function(err, result) {\n              if(err) {\n                return innerNext(err);\n              }\n              _this.result[key][k] = result;\n              innerNext();\n            });\n          }, callback);\n        }\n        </createModelData>\n      ], next);\n      </asyncSeriesInner>\n    }\n    catch(err) {\n      return next(err);\n    }\n  }, function(err) {\n    if(err) {\n      return done(err);\n    }\n    done(undefined, _this.result);\n  });\n  </asyncSeries>\n}\n"], ["appConfiguration", "\nfunction(app, results, callback) {\n  <pathSetup>\n  var dir = (results.dir) ? results.dir : process.cwd();\n  var appPath = path.join(dir, results.name);\n  </pathSetup>\n\n  <filesPath>\n  var kalaboxFile = path.join(appPath, 'kalabox.yml');\n  var pkgFile = path.join(appPath, 'package.json');\n  </filesPath>\n\n  <configuration>\n  var defaultConf = kbox.util.yaml.toJson(kalaboxFile);\n  var pkgConf = require(pkgFile);\n  </configuration>\n\n  <mergeConfig>\n  var data = {\n    config: _.merge(defaultConf, getOverrides(app.options, results)),\n    results: results,\n    pkg: pkgConf\n  };\n  </mergeConfig>\n\n  <updatePkgName>\n  pkgConf.name = results.name;\n  </updatePkgName>\n\n  <preCreateEmit>\n  return kbox.core.events.emit('pre-create-configure', data)\n  </preCreateEmit>\n\n  <writeConfigFiles>\n  .then(function() {\n    kbox.util.yaml.toYamlFile(data.config, kalaboxFile);\n    fs.writeFileSync(pkgFile, JSON.stringify(pkgConf, null, 2));\n  })\n  </writeConfigFiles>\n\n  <postCreateEmit>\n  .then(function() {\n    return kbox.core.events.emit('post-create-configure', data);\n  })\n  </postCreateEmit>\n\n  .nodeify(callback);\n}\n"], ["CMScope", "\nfunction CMScope(manager, scope) {\n  <CMScopeDefinition>\n  function o () {}\n\n  o.prototype.create = function (obj, cb) {\n    return manager.create.call(manager, scope, obj, cb);\n  };\n\n  o.prototype.remove = function (id) {\n    return manager.remove.call(manager, scope, id);\n  };\n\n  o.prototype.removeAll = function () {\n    var keys = manager.getKeys.call(manager);\n    for (var i = 0, len = keys.length; i < len; i++) {\n      manager.remove.call(manager, scope, keys[i]);\n    }\n  };\n\n  o.prototype.get = function (id, creds) {\n    return manager.get.call(manager, scope, id, creds);\n  };\n\n  o.prototype.getOrCreate = function (id, obj, cb) {\n    var client = manager.get.call(manager, scope, id, obj.credentials);\n    if (! client) {\n      manager.create.call(manager, scope, obj, cb);\n    }\n  };\n\n  o.prototype.move = function (oldID, oldcreds, newID, newcreds) {\n    return manager.move.call(manager, scope, oldID, oldcreds, newID, newcreds);\n  };\n\n  o.prototype.exists = function (id) {\n    return manager.exists.call(manager, id);\n  };\n\n  o.prototype.referenceCount = function (id) {\n    return manager.referenceCount.call(manager, id);\n  };\n\n  o.prototype.getKeys = function () {\n    return manager.getKeys.call(manager);\n  };\n\n  o.prototype.removeListeners = function (id) {\n    return manager.removeListeners.call(manager, scope, id);\n  };\n\n  o.prototype.__getScope = function () { return scope; };\n  </CMScopeDefinition>\n\n  return new o();\n}\n"], ["getRowSample2", "\nfunction getRowSample2() {\n  <conditionSetup>\n  var condition = new TableStore.CompositeCondition(TableStore.LogicalOperator.AND);\n  condition.addSubCondition(new TableStore.SingleColumnCondition('name', 'john', TableStore.ComparatorType.EQUAL));\n  condition.addSubCondition(new TableStore.SingleColumnCondition('addr', 'china', TableStore.ComparatorType.EQUAL));\n  </conditionSetup>\n\n  <applyFilter>\n  params.columnFilter = condition;\n  </applyFilter>\n\n  <getRow>\n  client.getRow(params, function (err, data) {\n    if (err) {\n      console.log('error:', err);\n      return;\n    }\n    console.log('success:', data);\n  });\n  </getRow>\n}\n"], ["registerGesture", "\nfunction register(gesture) {\n  <setOptions>\n  var options = gesture.defaults || {};\n  if(options[gesture.name] === undefined) {\n    options[gesture.name] = true;\n  }\n  </setOptions>\n\n  <extendDefaults>\n  Hammer.utils.extend(Hammer.defaults, options, true);\n  </extendDefaults>\n\n  <setGestureIndex>\n  gesture.index = gesture.index || 1000;\n  </setGestureIndex>\n\n  <addGesture>\n  this.gestures.push(gesture);\n  </addGesture>\n\n  <sortGestures>\n  this.gestures.sort(function(a, b) {\n    if(a.index < b.index) { return -1; }\n    if(a.index > b.index) { return 1; }\n    return 0;\n  });\n  </sortGestures>\n\n  return this.gestures;\n}\n"], ["unwrapBlock", "\nfunction unwrapBlock(removedLength, state) {\n  <changeState>\n  let change = state.change();\n  change = unwrapBlockForChange(removedLength, change);\n  return change.state;\n  </changeState>\n}\n"], ["AisPositionObj", "\nfunction AisPositionObj (ais) {\n  <setProperty>\n  this.devid= ais.mmsi;   \n  this.lat  = ais.lat;\n  this.lon  = ais.lon;\n  this.sog  = ais.sog; \n  this.cog  = ais.cog;\n  this.alt  = 0;          \n  this.date = new Date(); \n  </setProperty>\n}\n"], ["findFocusableDomRef", "\nfunction findFocusableDomRef(oContainer, bForward) {\n  <findFocusable>\n  var oChild = bForward ? oContainer.firstChild : oContainer.lastChild,\n    oFocusableDescendant;\n\n  while (oChild) {\n    if ( oChild.nodeType == 1 && !isHidden(oChild) ) {\n      if ( jQuery(oChild).hasTabIndex() ) {\n        return oChild;\n      }\n      oFocusableDescendant = findFocusableDomRef(oChild, bForward);\n      if (oFocusableDescendant) {\n        return oFocusableDescendant;\n      }\n    }\n    oChild = bForward ? oChild.nextSibling : oChild.previousSibling;\n  }\n  </findFocusable>\n\n  return null;\n}\n"], ["localExist", "\nfunction localExist(name) {\n  <checkModuleExistence>\n  const modulePath = path.resolve(home.getModulesPath(), name);\n  const pkgPath = path.resolve(modulePath, 'package.json');\n  return fs.existsSync(pkgPath);\n  </checkModuleExistence>\n}\n"], ""]