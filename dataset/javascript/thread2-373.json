[["_addEntityIdentifier", "\nfunction _addEntityIdentifier(entity, obj) {\n    if (entity.constructor === EVT.Entity.Product) {\n      obj.product = entity.id;\n    } else if (entity.constructor === EVT.Entity.Thng) {\n      obj.thng = entity.id;\n    } else if (entity.constructor === EVT.Entity.Collection) {\n      obj.collection = entity.id;\n    }\n\n    return obj;\n}\n"], ["createNamespace", "\nfunction createNamespace(name) {\n  \n  var isObject = name === 'Object';\n  \n  var sugarNamespace = getNewChainableClass(name, true);\n  \n  var extend = function (opts) {\n\n    var nativeClass = globalContext[name], nativeProto = nativeClass.prototype;\n    var staticMethods = {}, instanceMethods = {}, methodsByName;\n    \n    function objectRestricted(name, target) {\n      \n    }\n   \n    function arrayOptionExists(field, val) {\n      \n    }\n\n    function arrayOptionExcludes(field, val) {\n      \n    }\n\n    function disallowedByFlags(methodName, target, flags) {\n      \n    }\n\n    function namespaceIsExcepted() {\n      \n    }\n\n    function methodIsExcepted(methodName) {\n      \n    }\n\n    function canExtend(methodName, method, target) {\n      \n    }\n\n    \n    \n    forEachProperty(methodsByName || sugarNamespace, function(method, methodName) {\n      \n    });\n\n    \n    \n    extendNative(nativeClass, staticMethods);\n    extendNative(nativeProto, instanceMethods);\n\n    \n    \n    setProperty(sugarNamespace, 'active', true);\n    return sugarNamespace;\n  };\n\n  \n  defineWithOptionCollect('defineStatic', STATIC);\n  \n  defineWithOptionCollect('defineInstance', INSTANCE);\n  \n  defineWithOptionCollect('defineInstanceAndStatic', INSTANCE | STATIC);\n  \n  defineWithOptionCollect('defineStaticWithArguments', STATIC, true);\n  \n  defineWithOptionCollect('defineInstanceWithArguments', INSTANCE, true);\n  \n  setProperty(sugarNamespace, 'defineStaticPolyfill', function(arg1, arg2, arg3) {\n   \n  });\n\n  \n  setProperty(sugarNamespace, 'defineInstancePolyfill', function(arg1, arg2, arg3) {\n    \n  });\n\n  \n  setProperty(sugarNamespace, 'alias', function(name, source) {\n    \n  });\n\n  \n  setProperty(sugarNamespace, 'extend', extend);\n\n  \n  namespacesByName[name] = sugarNamespace;\n  namespacesByClassString['[object ' + name + ']'] = sugarNamespace;\n\n  mapNativeToChainable(name);\n  mapObjectChainablesToNamespace(sugarNamespace);\n\n\n  \n  return Sugar[name] = sugarNamespace;\n}\n"], ["stringifyArg", "\nfunction stringifyArg (arg) {\n\tif (Array.isArray(arg)) {\n\t\t<arrayToString>\n\t\treturn arg.map(stringifyArg).join(\" \");\n\t\t</arrayToString>\n\t} else {\n\t\treturn String(arg);\n\t}\n}\n"], ["anonymous", "\nfunction (data, retainEmpty) {\n        if (!(Array.isArray(data) && data.length)) { return []; }\n\n        var formdata = [],\n            i,\n            ii,\n            param;\n\n        for (i = 0, ii = data.length; i < ii; i++) {\n            <processDataItem>\n            param = typeof data[i] === 'object' && Object.assign({}, data[i]);\n\n            if (!(param && param.key)) {\n                continue;\n            }\n\n            if (param.type === 'file' && !param.src && param.value) {\n                param.src = (_.isString(param.value) || _.isArray(param.value)) ? param.value : null;\n                delete param.value;\n            }\n\n            if (Object.prototype.hasOwnProperty.call(param, 'enabled')) {\n                param.enabled === false && (param.disabled = true);\n                delete param.enabled; \n            }\n\n            util.cleanEmptyValue(param, 'description', retainEmpty);\n            </processDataItem>\n\n            formdata.push(param);\n        }\n\n        return formdata;\n}\n"], ["Push", "\nfunction Push(phonegap) {\n        \"use strict\";\n    \n        var events = new Events({'bind': this});\n    \n        var push;\n    \n        var registrationId;\n        Object.defineProperty(this, 'registrationId', {\n            \n        });\n    \n        var device = 'android';\n        <iOSDeviceCheck>\n        var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n        if (iOS) device = 'ios';\n        </iOSDeviceCheck>\n    \n        Object.defineProperty(this, 'device', {\n            \n        });\n    \n        <onRegistration>\n        function onRegistration(data) {\n            \n        }\n        </onRegistration>\n    \n        <onNotification>\n        function onNotification(data) {\n            events.trigger('notification', data);\n            push.finish();\n        }\n        </onNotification>\n    \n        <onError>\n        function onError(error) {\n            beyond.logs.append('Push notification error: ' + error);\n        }\n        </onError>\n    \n        <onPhonegapDone>\n        function onPhonegapDone() {\n    \n            \n    \n            var config = {\n                \n            };\n    \n            push = PushNotification.init(config);\n    \n            push.on('registration', onRegistration);\n            push.on('notification', onNotification);\n            push.on('error', onError);\n    \n        }\n        </onPhonegapDone>\n    \n        \n        if (phonegap.isPhonegap && beyond.params.pushNotifications) {\n            phonegap.done(onPhonegapDone);\n        }\n    \n}\n"], ["checkAndWarnForMutatedProps", "\nfunction checkAndWarnForMutatedProps(element) {\n  if (!element._store) {\n    \n    return;\n  }\n\n  var originalProps = element._store.originalProps;\n  var props = element.props;\n\n  for (var propName in props) {\n    if (props.hasOwnProperty(propName)) {\n      <compareAndWarn>\n      if (!originalProps.hasOwnProperty(propName) ||\n          !is(originalProps[propName], props[propName])) {\n        warnForPropsMutation(propName, element);\n        originalProps[propName] = props[propName];\n      }\n      </compareAndWarn>\n    }\n  }\n}\n"], ["refreshDataState", "\nfunction refreshDataState (sName, oDataState) {\n\t\tif (oDataState.getChanges().messages) {\n\t\t\t<processMessages>\n\t\t\tvar aMessages = oDataState.getMessages();\n\t\t\tvar aLabels = sap.ui.core.LabelEnablement.getReferencingLabels(this);\n\t\t\tvar sLabelId = aLabels[0];\n\t\t\tvar bForceUpdate = false;\n\n\t\t\taMessages.forEach(function(oMessage) {\n\t\t\t\t\n\t\t\t\t\tvar oLabel = sap.ui.getCore().byId(sLabelId);\n\t\t\t\t\tif (oLabel.getMetadata().isInstanceOf(\"sap.ui.core.Label\") && oLabel.getText && oMessage.getAdditionalText() !== oLabel.getText()) {\n\t\t\t\t\t\toMessage.setAdditionalText(oLabel.getText());\n\t\t\t\t\t\tbForceUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.warning(\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (oMessage.getControlId() !== this.getId()){\n\t\t\t\t\toMessage.addControlId(this.getId());\n\t\t\t\t\tbForceUpdate = true;\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t\t\n\t\t\tvar oMessageModel = sap.ui.getCore().getMessageManager().getMessageModel();\n\t\t\toMessageModel.checkUpdate(bForceUpdate, true);\n\t\t\t</processMessages>\n\n\t\t\t<updateValueState>\n\t\t\tif (aMessages && aMessages.length > 0) {\n\t\t\t\tvar oMessage = aMessages[0];\n\t\t\t\t\n\t\t\t\tif (ValueState[oMessage.type]) {\n\t\t\t\t\tthis.setValueState(oMessage.type);\n\t\t\t\t\tthis.setValueStateText(oMessage.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.setValueState(ValueState.None);\n\t\t\t\tthis.setValueStateText('');\n\t\t\t}\n\t\t\t</updateValueState>\n\t\t}\n}\n"], ["definitionFunction", "\nfunction( definition ) {\n\t\t\tvar $ = definition.$,\n\t\t\t\tbaseClass = definition.base,\n\t\t\t\tprivates = definition.privates || definition._,\n\t\t\t\tproto = definition.proto,\n\t\t\t\tstatics = definition.statics;\n\n\t\t\t<createConstructor>\n\t\t\t!$ && ( $ = function() {\n\t\t\t\tbaseClass && this.base.apply( this, arguments );\n\t\t\t} );\n\t\t\t</createConstructor>\n\n\t\t\t<handlePrivates>\n\t\t\tif ( privates ) {\n\t\t\t\tvar originalConstructor = $;\n\t\t\t\t$ = function() {\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\t\t\t</handlePrivates>\n\n\t\t\t<inheritBaseClass>\n\t\t\tif ( baseClass ) {\n\t\t\t\t\n\t\t\t}\n\t\t\t</inheritBaseClass>\n\n\t\t\t<extendPrototypes>\n\t\t\tif ( proto )\n\t\t\t\tthis.extend( $.prototype, proto, true );\n\t\t\t</extendPrototypes>\n\n\t\t\t<applyStatics>\n\t\t\tif ( statics )\n\t\t\t\tthis.extend( $, statics, true );\n\t\t\t</applyStatics>\n\n\t\t\treturn $;\n}\n"], ["_link_comp", "\nfunction _link_comp(str1, str2){\n\t<splitAndSort>\n\tvar tmp1 = str1.split('?');\n\tvar head1 = '';\n\tvar args1 = [];\n\tif( ! tmp1[1] ){ \n\t    args1 = tmp1[0].split('&');\n\t}else{ \n\t    head1 = tmp1[0];\n\t    args1 = tmp1[1].split('&');\n\t}\n\tvar sorted_args1 = args1.sort();\n\n\tvar tmp2 = str2.split('?');\n\tvar head2 = '';\n\tvar args2 = [];\n\tif( ! tmp2[1] ){ \n\t    args2 = tmp2[0].split('&');\n\t}else{ \n\t    head2 = tmp2[0];\n\t    args2 = tmp2[1].split('&');\n\t}\n\tvar sorted_args2 = args2.sort();\n\t</splitAndSort>\n\n\t<compareResults>\n\tvar retval = false;\n\tif( head1 == head2 &&\n\t    _same_array(sorted_args1, sorted_args2) ){\n\t    retval = true;\n\t}\n\treturn retval;\n\t</compareResults>\n}\n"], ["getNodePath", "\nfunction getNodePath(node) {\n    var nodePaths = [];\n    <gatherPaths>\n    var nodeParent = node;\n    while (nodeParent) {\n        \n        nodeParent = nodeParent.parent;\n    }\n    </gatherPaths>\n\n    return nodePaths;\n}\n"], "```"]