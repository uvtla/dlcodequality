```javascript
<loadCompressedPublicKey>
function loadCompressedPublicKey(xBuffer) {
	let x = new BN(xBuffer);

	if (x.cmp(ecparams.p) >= 0) return null;
	x = x.toRed(ecparams.red);

	let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();

	return ec.keyPair({ pub: { x, y } });
}
</loadCompressedPublicKey>

<unnamed_tree_constructor>
function (blockList) {
        this.errors = [];
        <initialize_tree>
        this.tree = new Node("file", null);
        this.tree.content = [];
        </initialize_tree>

        <process_blocks>
        this._advance(blockList, 0, this.tree.content);

        this._postProcessTree();
        </process_blocks>
    }
</unnamed_tree_constructor>

<unnamed_rrule_text_conversion>
function() {
        var gettext = this.gettext;

        if (!(this.options.freq in ToText.IMPLEMENTED)) {
            return gettext('RRule error: Unable to fully convert this rrule to text');
        }

        <build_base_text>
        this.text = [gettext('every')];

        this[RRule.FREQUENCIES[this.options.freq]]();
        </build_base_text>

        <add_conditions_to_text>
        if (this.options.until) {
            this.add(gettext('until'));
            var until = this.options.until;
            this.add(this.language.monthNames[until.getMonth()])
                .add(until.getDate() + ',')
                .add(until.getFullYear());
        } else if (this.options.count) {
            this.add(gettext('for'))
                .add(this.options.count)
                .add(this.plural(this.options.count)
                        ? gettext('times')
                        : gettext('time'));
        }
        </add_conditions_to_text>

        <handle_partial_conversion>
        if (!this.isFullyConvertible()) {
            this.add(gettext('(~ approximate)'));
        }
        </handle_partial_conversion>
        
        return this.text.join('');
    }
</unnamed_rrule_text_conversion>

<sanicJoin>
function sanicJoin(array, separator = ',') {
    if (!(array instanceof Array)){
        throw new TypeError('array is not an Array');
    }

    if (!array.length){
        return '';
    }

    if (array.length === 1){
        return array[0];
    }

    let res = String(array[0]), i = 1;
    const iMax = array.length;

    for (; i < iMax; i++){
        res += separator + array[i];
    }

    return res;
}
</sanicJoin>

<calculate_distances>
function (X) {
		var N = X.length;
		var dist = zeros(N * N); 
		for (var i = 0; i < N; i++) {
			for (var j = i + 1; j < N; j++) {
				<calculate_distance>
				var d = L2(X[i], X[j]);
				dist[i * N + j] = d;
				dist[j * N + i] = d;
				</calculate_distance>
			}
		}
		return dist;
	}
</calculate_distances>

<typeOf>
function typeOf (rule) {
  var ruleType = typeof rule
  
  return ruleType === 'function'
    ? ruleType
    : ruleType !== 'object'
      ? (rule.length === 0
          ? 'noop'
          : (rule === 0
              ? 'zero'
              : ruleType
            )
        )
      : Buffer.isBuffer(rule)
        ? 'buffer'
        : !isArray(rule)
          ? ((has(rule, 'start') && has(rule, 'end')
              ? 'range'
              : has(rule, 'start')
                ? 'rangestart'
                : has(rule, 'end')
                  ? 'rangeend'
                  : has(rule, 'firstOf')
                    ? (( (isArray(rule.firstOf) && sameTypeArray(rule.firstOf) )
                        || typeof rule.firstOf === 'string'
                        )
                      && rule.firstOf.length > 1
                      )
                        ? 'firstof'
                        : 'invalid firstof'
                    : 'invalid'
              )
              + '_object'
            )
          : !sameTypeArray(rule)
            ? 'multi types array'
            : ((Buffer.isBuffer( rule[0] )
                ? 'buffer'
                : typeof rule[0]
                )
                + '_array'
              )
}
</typeOf>

<loadRoute>
async function loadRoute ( dir )
{
return new Promise( async function(resolve, reject){
    
    <scan_files>
    let files = await scanFile ( path.join(dir_app, './'+dir), 'js', true );
    </scan_files>

    let whole_router;
    
    <setup_routers>
    files.forEach(function( f ){
        let mod = require(f)
          , name = path.basename(f, '.js');
        
        let router = mod(app.Context);
        router.__renderForContext(app.Context); 
    });
    </setup_routers>

    resolve();

});
}
</loadRoute>

<gestureEnd>
function gestureEnd(ev) {
    if (!pointer || !typesMatch(ev, pointer)) return;

    updatePointerState(ev, pointer);
    pointer.endTime = +Date.now();

    <run_gesture_handlers>
    if (ev.type !== 'pointercancel') {
      runHandlers('end', ev);
    }
    </run_gesture_handlers>

    lastPointer = pointer;
    pointer = null;
  }
</gestureEnd>

<getArgParam>
function getArgParam(argName, fullArgName) {
  
    <search_for_args>
    for (const arg of [argName, fullArgName]) {
      if (restArgs.includes(arg)) {
        return restArgs[restArgs.indexOf(argName) + 1];
      }
    }
    </search_for_args>
  
    return undefined;
}
</getArgParam>

<Memcached_constructor>
function Memcached () {
  var self = this;

  self.klass = Memcached;
  self.klass.super_.apply(self, arguments);

  <build_auth_string>
  var auth = [
        self.options.server.username,
        self.options.server.password
      ].compact().join(':');
  </build_auth_string>

  <build_domain_and_port>
  var domain_and_port = [
        self.options.server.hostname,
        self.options.server.port
      ].compact().join(':');
  </build_domain_and_port>

  <set_server_endpoint>
  self.options.server.endpoint = auth.isBlank() ? domain_and_port : [auth, domain_and_port].join('@');
  </set_server_endpoint>
}
</Memcached_constructor>
```

Note: For the "Memcached" constructor function, I've inferred that the "compact" and "isBlank" methods are doing some sort of filtering/validation, which is why I've marked them as separate responsibilities even though they're one-liners. However, if these are just simple property accessor methods with no real logic, they might not warrant their own SRP annotations.