```javascript
<_gpfCompatibilityInstallMethods>
function _gpfCompatibilityInstallMethods(typeName, description) {
    var on = description.on;
    _gpfInstallCompatibleMethods(on, description.methods);
    _gpfInstallCompatibleStatics(on, description.statics);
}
</_gpfCompatibilityInstallMethods>

<list>
function list(options = {}) {
  <setDefaultOptions>
  options = _.defaults(options, {
    limit: -1,
    keys: true,
    values: true,
    fillCache: false,
    json: true
  });
  </setDefaultOptions>

  <processPrefixOption>
  if (options.prefix) {
    options.gte = options.prefix + '\x00';
    options.lte = options.prefix + '\xff';
  }
  </processPrefixOption>

  let readStream,
    transformOptions = {
      objectMode: options.values,
      isArray: options.isArray
    };

  <setTransformOptions>
  if (options.keys && !options.values || !options.keys && options.values) {
    transformOptions.isArray = true;
  }
  </setTransformOptions>

  <createReadStream>
  readStream = module.exports.createReadStream(options);
  </createReadStream>

  <processTransforms>
  if (_.isFunction(options.transforms)) {
    options.transforms = options.transforms();
  }
  
  if (options.transforms) {
    readStream = _.reduce(options.transforms, function (readStream, transform) {
      return readStream.pipe(transform);
    }, readStream);
  }
  </processTransforms>

  <applyJsonTransform>
  if (options.json) {
    readStream = readStream.pipe(jsonTransform(transformOptions));
  }
  </applyJsonTransform>

  return readStream;
}
</list>

<getSubdivisions>
function(opt) {
    opt = opt || {};
    <setPrecision>
    var precision = (opt.precision === undefined) ? this.PRECISION : opt.precision;
    </setPrecision>

    var subdivisions = [new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end)];
    <earlyReturn>
    if (precision === 0) return subdivisions;
    </earlyReturn>

    var previousLength = this.endpointDistance();
    var precisionRatio = pow(10, -precision);

    var iteration = 0;
    <iterateSubdivisions>
    while (true) {
        iteration += 1;
        <divideCurve>
        var newSubdivisions = [];
        var numSubdivisions = subdivisions.length;
        for (var i = 0; i < numSubdivisions; i++) {
            var currentSubdivision = subdivisions[i];
            var divided = currentSubdivision.divide(0.5); 
            newSubdivisions.push(divided[0], divided[1]);
        }
        </divideCurve>

        <calculateLengths>
        var length = 0;
        var numNewSubdivisions = newSubdivisions.length;
        for (var j = 0; j < numNewSubdivisions; j++) {
            var currentNewSubdivision = newSubdivisions[j];
            length += currentNewSubdivision.endpointDistance();
        }
        </calculateLengths>

        <checkPrecision>
        var observedPrecisionRatio = ((length !== 0) ? ((length - previousLength) / length) : 0);
        if (iteration > 1 && observedPrecisionRatio < precisionRatio) {
            return newSubdivisions;
        }
        </checkPrecision>

        subdivisions = newSubdivisions;
        previousLength = length;
    }
    </iterateSubdivisions>
}
</getSubdivisions>

<ignoreLinks>
function(element) {
    var depth = 3,
        ignore = false;
    <checkForLinks>
    do {
        if (element.nodeName.toLowerCase() === 'a') {
            ignore = true;
            break;
        }
        element = element.parentNode;
    } while (--depth > 0 && element);
    </checkForLinks>
    return ignore;
}
</ignoreLinks>

<filterString>
function (str, highlight) {
  highlight = highlight || false;
  var self = this;

  <defineHighlightColor>
  var highlightColor = this.highlightColor;
  </defineHighlightColor>

  <replaceFunction>
  var replace = function (str, pattern) {
    if (!highlight) {
      return str.replace(pattern, function (match) {
        self.currentMatch.matches.push(match);
        return self.replacementString;
      });
    }

    return str.replace(pattern, function (match) {
      self.currentMatch.matches.push(match);
      return '<span style="background: #' + highlightColor + ';">' + match + '</span>';
    });
  }.bind(this);
  </replaceFunction>

  <validateString>
  if (typeof str !== 'string') {
    throw 'Invalid "str" type supplied in filterString. Expected string.';
  }
  </validateString>

  <processPatterns>
  for (var p in this.patterns) {
    if (!this.patterns[p].enabled) {
      continue;
    }

    if (this.patterns[p].pattern instanceof RegExp) {
      str = replace(str, this.patterns[p].pattern);

      continue;
    }

    if (!this.isArray(this.patterns[p].pattern)) {
      throw 'Invalid pattern type supplied. Expected Array.';
    }

    for (var i = 0; i < this.patterns[p].pattern.length; i++) {
      if (!this.patterns[p].pattern[i] instanceof RegExp) {
        throw 'Expected valid RegExp.';
      }

      str = replace(str, this.patterns[p].pattern[i]);
    }
  }
  </processPatterns>

  return str;
}
</filterString>

<assert>
function( result, message ) {
    message = message || ( result ? "okay" : "failed, expected argument to be truthy, was: " +
    QUnit.dump.parse( result ) );
    <pushResult>
    if ( !!result ) {
        this.push( true, result, true, message );
    } else {
        this.test.pushFailure( message, null, result );
    }
    </pushResult>
}
</assert>

<calculatePixelForValue>
function(index) {
    var me = this;
    var offset = me.options.offset;
    <calculateHorizontalPosition>
    if (me.isHorizontal()) {
        var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
        var tickWidth = innerWidth / Math.max((me._ticks.length - (offset ? 0 : 1)), 1);
        var pixel = (tickWidth * index) + me.paddingLeft;

        if (offset) {
            pixel += tickWidth / 2;
        }

        var finalVal = me.left + pixel;
        finalVal += me.isFullWidth() ? me.margins.left : 0;
        return finalVal;
    }
    </calculateHorizontalPosition>
    <calculateVerticalPosition>
    var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
    return me.top + (index * (innerHeight / (me._ticks.length - 1)));
    </calculateVerticalPosition>
}
</calculatePixelForValue>

<traverse>
function(filter){
    filter = filter || this.filter;

    var cursor = this.cursor_ || this.root_;

    <iterateTreeNodes>
    do
    {
        var node = cursor[this.a]; 
        while (!node)
        {
            if (cursor === this.root_)
                return this.cursor_ = null;

            node = cursor[this.b]; 

            if (!node)
                cursor = cursor[PARENT_NODE];
        }
    }
    while (!filter(cursor = node));
    </iterateTreeNodes>

    return this.cursor_ = cursor;
}
</traverse>

<values>
function values(object, follow) {
  <checkForNonEmptyObject>
  if (is(object) && !empty(object)) {
    const result = [];
    </checkForNonEmptyObject>

    <getAllKeys>
    const keysObject = follow
      ? deflate(object)
      : object;
    </getAllKeys>

    <collectValues>
    Object.keys(keysObject).forEach((key) => {
      const value = keysObject[key];
      result.push(value);
    });
    </collectValues>

    return result;
  }
  <handleEmptyObject>
  return [];
  </handleEmptyObject>
}
</values>

<executeOnText>
function(filePath, callback) {
    <readFile>
    var text = fs.readFileSync(path.resolve(filePath), 'utf8');
    </readFile>
    return this.executeOnText(text, filePath, callback);
}
</executeOnText>
```