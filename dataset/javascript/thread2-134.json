[["mergeSubmatrices", "\nfunction mergeSubmatrices(sbmA, sbmB) {\n    \n    <checkCompatibility>\n    if (sbmA.x != sbmB.x || sbmA.y != sbmB.y) {\n      return\n    }\n    </checkCompatibility>\n    \n    <initializeMatrix>\n    var mat = {}\n    mat.x = sbmA.x\n    mat.y = sbmA.y\n    mat.data = []\n    </initializeMatrix>\n    \n    <mergeData>\n    for (var i = 0; i < mat.x; i++) {\n      mat.data[i] = _.union(sbmA.data[i], sbmB.data[i]).sort()\n    }\n    </mergeData>\n    \n    return mat\n}\n"], ["bindAndBufferData", "\nfunction bindAndBufferData(array) {\n    var gl = this.gl;\n    <bindBuffer>\n    gl.bindBuffer(TGT, this.buffer);\n    </bindBuffer>\n    <bufferData>\n    gl.bufferData(TGT, array, this.usage);\n    </bufferData>\n    <unbindBuffer>\n    gl.bindBuffer(TGT, null);\n    </unbindBuffer>\n\n    <setByteLength>\n    this.byteLength = (array.byteLength === undefined) ? array : array.byteLength;\n    </setByteLength>\n    <computeLength>\n    this._computeLength();\n    </computeLength>\n}\n"], ["scaleAndDrawImage", "\nfunction scaleAndDrawImage(source, $destination, maxSize) {\n    <calculateSize>\n    var size = calculateSize(source, maxSize);\n    </calculateSize>\n    <setDimensions>\n    setDimensions($destination, size, 1);\n    </setDimensions>\n    <getContextAndDrawImage>\n    var destCtx = $destination[0].getContext('2d');\n    destCtx.drawImage(source, 0, 0, source.width, source.height,\n        0, 0, size.width, size.height);\n    </getContextAndDrawImage>\n}\n"], ["dropArrayElements", "\nfunction unsafeDrop(n, a, l) {\n    <createNewArray>\n    const b = new Array(l)\n    </createNewArray>\n    <copyElements>\n    for (let i = 0; i < l; ++i) {\n        b[i] = a[n + i]\n    }\n    </copyElements>\n    return b\n}\n"], ["createOneOfTypeChecker", "\nfunction createOneOfTypeChecker(expectedEnumOfTypeValues) {\n    <returnChainableChecker>\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n        <validateDataValues>\n        if (getDataType(expectedEnumOfTypeValues) !== 'array') {\n            throw new Error('[SAN ERROR] '\n                + 'Data `' + dataName + '` of `' + componentName + '` has invalid '\n                + 'DataType notation inside `oneOf`, array is expected.'\n            );\n        }\n\n        var dataValue = data[dataName];\n\n        for (var i = 0, len = expectedEnumOfTypeValues.length; i < len; i++) {\n            var checker = expectedEnumOfTypeValues[i];\n            if (typeof checker !== 'function') {\n                continue;\n            }\n            try {\n                checker(data, dataName, componentName, fullDataName);\n                return;\n            }\n            catch (e) {\n            }\n        }\n        \n        throw new Error('[SAN ERROR] '\n            + 'Invalid ' + componentName + ' data `' + dataName + '` of value'\n            + '(`' + dataValue + '` supplied to ' + componentName + ')'\n        );\n        </validateDataValues>\n    });\n    </returnChainableChecker>\n}\n"], ["initializeMailer", "\nfunction Mailer(config, middleware) {\n    <assignMiddleware>\n    app[middleware] = this;\n    </assignMiddleware>\n    \n    <mergeConfigs>\n    this.config = protos.extend({\n        default: 'sendmail'\n    }, config);\n    </mergeConfigs>\n    \n    <createTransports>\n    createTransports.call(this);\n    </createTransports>\n}\n"], ["updateButtonState", "\nfunction updateButtonState(stateName) {\n    <setStateName>\n    this._stateName = stateName;\n    </setStateName>\n    <updateUI>\n    this._updateIcons();\n    if (this._updateFrameWidth()) {\n        this._frame.resize(this._frameWidth, this._outerHeight);\n    }\n    ariaUtilsArray.forEach(this._iconsLeft, this._changeIconState, this);\n    this._frame.changeState(stateName);\n    ariaUtilsArray.forEach(this._iconsRight, this._changeIconState, this);\n    this.innerWidth = this._frame.innerWidth;\n    this.innerHeight = this._frame.innerHeight;\n    </updateUI>\n}\n"], ["removeResponseListeners", "\nfunction removeListeners() {\n    <removeErrorListener>\n    res.removeListener('error', removeListeners);\n    </removeErrorListener>\n    <removeCloseListener>\n    res.removeListener('close', removeListeners);\n    </removeCloseListener>\n    <removeFinishListener>\n    res.removeListener('finish', onResponseFinished);\n    </removeFinishListener>\n}\n"], ["selectFieldUI", "\nfunction selectField(options) {\n    var self = this;\n    <mixinComponents>\n    var $el = mixin_basic_component(self, \"select\");\n    mixin_emitter(self);\n    </mixinComponents>\n\n    var _sel_idx = -1;\n    <defineDataProperty>\n    Object.defineProperty(self, \"data\", {\n        get: function () {\n            return _sel_idx;\n        },\n        set: function (n) {\n            if (n == null || n < 0 || n > options.options.length) n = -1;\n            _sel_idx = n;\n            updateUI();\n        }\n    });\n    </defineDataProperty>\n\n    <updateUIFunction>\n    function updateUI(){\n        $el.empty();\n        for (var i=0; i<options.options.length; i++){\n          (function(o,i){\n            var $o = $$('option');\n            if (_sel_idx == i) $o.addClass('selected');\n            $o.text(o);\n            $o.click(function(){\n              self.data = i;\n              self.emit('change');\n            });\n            $el.append($o);\n          })(options.options[i], i);\n        }\n    }\n    </updateUIFunction>\n}\n"], ["findByCredentials", "\nfunction findByCredentials(username, password, cb) {\n    <encodePassword>\n    crypto.encode(password, function(err, encoded) {\n        if(err) { return cb(err); }\n    </encodePassword>\n\n    <getClientAndQuery>\n    db.getClient(function(err, client, done) {\n        client.query(SELECT_CREDENTIALS, [username, encoded], function(err, r) {\n            <processQueryResults>\n            var result = r && r.rows[0];\n            if(!err && !result) { err = new exceptions.AuthenticationFailed(); }\n            if(err) {\n                cb(err);\n                done(err);\n            } else {\n                cb(null, result);\n                done();\n            }\n            </processQueryResults>\n        });\n    });\n    </getClientAndQuery>\n}\n"], "```"]