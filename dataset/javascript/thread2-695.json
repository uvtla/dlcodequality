[["function", "\nfunction(el) {\n    if (!el) {\n      return false;\n    }\n    var styles = _getComputedStyle(el, null);\n    if (!styles) {\n      return false;\n    }\n    var hasCssHeight = _parseFloat(styles.height) > 0;\n    var hasCssWidth = _parseFloat(styles.width) > 0;\n    var hasCssTop = _parseFloat(styles.top) >= 0;\n    var hasCssLeft = _parseFloat(styles.left) >= 0;\n    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;\n    var rect = cssKnows ? null : _getElementPosition(el);\n    var isVisible = styles.display !== \"none\" && styles.visibility !== \"collapse\" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));\n    return isVisible;\n  }\n"], ["executeCommand", "\nfunction executeCommand(parameters) {\n    const configFilePath = path.join(process.cwd(), plugin.config.policiesPath);\n    return mkdirpAsync(configFilePath)\n    .then(() => {\n      <createPolicyDocument>\n      const document = {\n        Version: '2012-10-17',\n        Statement: [{\n          Effect: 'Deny',\n          Action: ['*'],\n          Resource: ['*']\n        }]\n      };\n      </createPolicyDocument>\n\n      <writePolicyToFile>\n      return fs.writeFileAsync(configFilePath + path.sep + parameters.identifier + '.json', JSON.stringify(document, null, 2));\n      </writePolicyToFile>\n    })\n    .then(() => {\n      <logPolicyCreation>\n      const msg = '\\n  The IAM policy ' + icli.format.info(parameters.identifier)\n                + ' has been created in ' + icli.format.info(configFilePath + path.sep + parameters.identifier + '.json') + '\\n\\n';\n      icli.print(msg);\n      </logPolicyCreation>\n    });\n  }\n"], ["addEvent", "\nfunction addEvent(el,name,func){\n\t\tif(name.match(\" \")){\n\t\t\tvar a = name.split(' ');\n\t\t\tfor(var i=0;i<a.length;i++){\n\t\t\t\taddEvent( el, a[i], func);\n\t\t\t}\n\t\t}\n\t\tif(el.addEventListener){\n\t\t\tel.removeEventListener(name, func, false);\n\t\t\tel.addEventListener(name, func, false);\n\t\t}\n\t\telse {\n\t\t\tel.detachEvent('on'+name, func);\n\t\t\tel.attachEvent('on'+name, func);\n\t\t}\n\t}\n"], ["function", "\nfunction (layer) {\n\t\tif (!this.hasLayer(layer)) {\n\t\t\treturn this;\n\t\t}\n\t\tif (layer in this._layers) {\n\t\t\tlayer = this._layers[layer];\n\t\t}\n\n\t\tlayer.removeEventParent(this);\n\n\t\tvar id = L.stamp(layer);\n\n\t\tif (this._map && this._layers[id]) {\n\t\t\t<removeLayerFromMap>\n\t\t\tthis._map._originalRemoveLayer(this._layers[id]);\n\t\t\t</removeLayerFromMap>\n\t\t}\n\n\t\t<deleteLayerEntry>\n\t\tdelete this._layers[id];\n\t\t</deleteLayerEntry>\n\n\t\treturn this.fire('layerremove', {layer: layer});\n\t}\n"], ["RAgent_onEvent", "\nfunction RAgent_onEvent(message) {\n  DEBUG(\"RAgent.onEvent(\" + message.name + \")\");\n  var name = message.name;\n  var body = message.body;\n  var agent;\n\n  if (message.from == \"server\") {\n    <handleAgentEvents>\n    if ((name == \"agentCreated\") || (name == \"agentDestroyed\")) {\n      agent = this._session._ragents.get(body.id);\n      if (null == agent) {\n        agent = new RAgent(this._session, body);\n        this._session._ragents.set(body.id, agent);\n      }\n\n      this.emit(name, agent.info);\n    }\n    else {\n      this.emit(name, body);\n    }\n    </handleAgentEvents>\n  }\n  else {\n    <emitEvent>\n    this.emit(name, body);\n    </emitEvent>\n  }\n}\n"], ["ekurtosis", "\nfunction ekurtosis( arr, path, sep ) {\n\tvar len = arr.length,\n\t\topts = {},\n\t\tdget,\n\t\tdset,\n\t\tv, i;\n\tif ( arguments.length > 2 ) {\n\t\topts.sep = sep;\n\t}\n\tif ( len ) {\n\t\tdget = deepGet( path, opts );\n\t\tdset = deepSet( path, opts );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tv = dget( arr[ i ] );\n\t\t\tif ( typeof v === 'number' ) {\n\t\t\t\tdset( arr[i], EKURTOSIS ( v ) );\n\t\t\t} else {\n\t\t\t\tdset( arr[i], NaN );\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n"], ["function", "\nfunction(func, context, oldObserved, onchanged) {\n            \n            var info = can.__read(func, context),\n                \n                newObserveSet = info.observed;\n            \n            bindNewSet(oldObserved, newObserveSet, onchanged);\n            unbindOldSet(oldObserved, onchanged);\n\n            return info;\n        }\n"], ["keywords", "\nfunction keywords (opts) {\n    if (!R.is(Array, opts.keywords)) {\n      return Promise.reject(Error('an array of seed keywords is required for this strategy'));\n    }\n    return getAppsFromKeywords(opts.keywords);\n  }\n"], ["_parsePhonetics", "\nfunction _parsePhonetics ($containor) {\n  const phonetics = []\n\n  $containor.find('.pronounce').each((index, item) => {\n    <extractPhonetics>\n    const html = $(item).html()\n    const content = removeTagsAndSpaces($(item).html())\n\n    debug(`phonetics parse html: ${html}`)\n    debug(`phonetics parse content: ${content}`)\n    </extractPhonetics>\n\n    if (!content) {\n      return\n    }\n\n    <createPhoneticObject>\n    const data = content.split(' ')\n    let phonetic;\n\n    if (data.length > 1) {\n      phonetic = new Phonetic(...data)\n    } else {\n      phonetic = new Phonetic('', ...data)\n    }\n\n    debug('phonetics object: %O', phonetic)\n    </createPhoneticObject>\n\n    phonetics.push(phonetic)\n  })\n\n  return phonetics\n}\n"], ["function", "\nfunction(key) {\n\t\t\tY.log(\"Fetching item at  \" + key);\n\t\t\tvar item = this._getItem(key);\n\t\t\treturn YL.isValue(item) ? this._getValue(item) : null; \n\t\t}\n"], ""]