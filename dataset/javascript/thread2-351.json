[["errorFormatting", "\n  var obj = { success: false };\n  obj[res ? 'description' : 'reason'] = errorArray;\n  "], ["searchItems", "\nfunction (term) {\n  return this.get('/storesearch', {\n    'term': term\n  }).then(function (body) {\n    var items = body.items;\n    return Promise.resolve(items);\n  });\n}\n"], ["phoneNumberValidation", "\nfunction isValid(number, countryCode) {\n  try {\n      var phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();\n      var numberObj = phoneUtil.parseAndKeepRawInput(number, countryCode);\n      return phoneUtil.isValidNumber(numberObj);\n  } catch (e) {\n      return false;\n  }\n}\n"], ["processDocument", "\nfunction(doc) {\n  var that = this;\n  <mapDocument>\n  doc = that._in_map(doc);\n  </mapDocument>\n\n  return this._init.then(function() {\n    <checkAdmissibility>\n    return that.isAdmissible(doc);\n    </checkAdmissibility>\n  }).then(function(admissible) {\n    if (!admissible) {\n      throw new Error('Document not admissible');\n    }\n\n    <cleanDocument>\n    doc = that.clean(doc);\n    </cleanDocument>\n\n    if (that._index) {\n      <removeIndexProperty>\n      delete doc[that._index];\n      </removeIndexProperty>\n    }\n\n    return that.getNextIndex();\n  }).then(function(max) {\n    if (that._index && typeof max === 'number') {\n      <assignNewIndex>\n      doc[that._index] = max;\n      </assignNewIndex>\n    }\n\n    return that._dbApi.create(doc).then(function(doc) {\n      if (!doc) {\n        throw new Error('Document not created');\n      }\n\n      return doc;\n    });\n  });\n}\n"], ["parsePayload", "\nfunction extractPayload(content) {\n  var payload = {};\n\n  <handleTextNode>\n  if (content[0] !== \"<\") {\n    payload.nodeType = 3;\n    payload.nodeValue = content;\n  } \n  </handleTextNode>\n  <handleCommentNode>\n  else if (content.substr(0, 4) === \"<!--\") {\n    payload.nodeType = 8;\n    payload.nodeValue = content.substr(4, content.length - 7);\n  }\n  </handleCommentNode>\n  <handleDoctypeNode>\n  else if (content[1] === \"!\") {\n    payload.nodeType = 10;\n  }\n  </handleDoctypeNode>\n  <handleElementNode>\n  else {\n    payload.nodeType = 1;\n    payload.nodeName = /^<([^>\\s]+)/.exec(content)[1].toUpperCase();\n    payload.attributes = _extractAttributes(content);\n\n    <handleClosingTags>\n    if (payload.nodeName[0] === \"/\") {\n      payload.nodeName = payload.nodeName.substr(1);\n      payload.closing = true;\n    }\n    </handleClosingTags>\n    \n    <handleSelfClosingTags>\n    if (content[content.length - 2] === \"/\") {\n      payload.closed = true;\n    }\n    </handleSelfClosingTags>\n    \n    <handleSpecialCaseElements>\n    if (payload.nodeName === \"SCRIPT\" || payload.nodeName === \"STYLE\") {\n      payload.closed = true;\n    }\n    </handleSpecialCaseElements>\n  }\n  </handleElementNode>\n  return payload;\n}\n"], ["addErrorControl", "\nfunction addControl(ucode, umessage, uaux){\n  <checkAndSetAuxColor>\n  if(uaux && !terminal.colors.aux) terminal.colors.aux=terminal.colors.info;\n  </checkAndSetAuxColor>\n  <initializeErrorList>\n  if(!terminal.errors) terminal.errors=[];\n  </initializeErrorList>\n  <createAndAddErrorObject>\n  var errObject={code: ucode, message: umessage, aux: uaux};\n  terminal.errors.push(errObject);\n  </createAndAddErrorObject>\n}\n"], ["configureBoxStyle", "\nfunction _setColor(box, color) {\n  <standardizeColor>\n  color = color.toLowerCase();\n  </standardizeColor>\n  <setBackgroundColor>\n  box.css('background-color', color);\n  </setBackgroundColor>\n  <setTextColor>\n  if (color) {\n      box.css('color', color === '#000000' ? '#FFFFFF' : '#000000');\n  }\n  </setTextColor>\n  <setValueOrText>\n  box.name === 'input' ? box.val(color) : box.html(color);\n  </setValueOrText>\n}\n"], ["handleMoveEvent", "\nfunction sendMove(ev) {\n  <getPressedStatus>\n  var button = pressed\n  </getPressedStatus>\n  , pos;\n\n  <getCoordinates>\n  pos = getCoords(ev);\n  if (!pos) return;\n  </getCoordinates>\n\n  <calculateButtonCode>\n  button += 32;\n  </calculateButtonCode>\n  \n  <emitEvent>\n  sendEvent(button, pos);\n  </emitEvent>\n}\n"], ["funcBind", "\nfunction bind (callback, context) {\n  <sliceInitialArguments>\n  var args = arraySlice(arguments, 2)\n  </sliceInitialArguments>\n  \n  <determineContext>\n  context = context || this\n  </determineContext>\n  \n  <returnBoundFunction>\n  return function () {\n    return callback.apply(context, arraySlice(arguments).concat(args))\n  }\n  </returnBoundFunction>\n}\n"], ["loadPlugins", "\nfunction (pluginsPath) {\n  <readPluginsDirectory>\n  var plugins = fs.readdirSync(pluginsPath);\n  </readPluginsDirectory>\n  var loadedPlugin = [];\n  <importPluginModules>\n  plugins.forEach(function (pluginName) {\n    if (pluginName !== 'index.js') {\n        loadedPlugin.push(require(path.resolve(pluginsPath, path.basename(pluginName, '.js'))));\n    }\n  });\n  </importPluginModules>\n  return loadedPlugin;\n}\n"], "```"]