[["addNodesToDrag", "\nfunction addNodesToDrag(nodes, opts) {\n    opts = opts || {};\n    var hasCompoundNodes = nodes.cy().hasCompoundNodes();\n\n    <updateNodesWithDragOptions>\n    if (opts.inDragLayer) {\n      nodes.forEach(setInDragLayer);\n      nodes.neighborhood().stdFilter(function (ele) {\n        return !hasCompoundNodes || ele.isEdge();\n      }).forEach(setInDragLayer);\n    }\n    </updateNodesWithDragOptions>\n\n    <addNodesToDragList>\n    if (opts.addToList) {\n      nodes.forEach(function (ele) {\n        addToDragList(ele, opts);\n      });\n    }\n    </addNodesToDragList>\n\n    <handleDescendantsForDrag>\n    addDescendantsToDrag(nodes, opts);\n    </handleDescendantsForDrag>\n\n    <updateAncestorsAndCache>\n    updateAncestorsInDragLayer(nodes, {\n      inDragLayer: opts.inDragLayer\n    });\n    r.updateCachedGrabbedEles();\n    </updateAncestorsAndCache>\n}\n"], ["generateMonthNavigationHTMLAndEvents", "\nfunction(picker, calendar, inst) {\n    var target = $(this);\n    var isTR = (inst.options.renderer.selectedClass === 'ui-state-active');\n    var minDate = inst.curMinDate();\n    var maxDate = inst.get('maxDate');\n    var year = inst.drawDate.year();\n    <buildNavigationHTML>\n    var html = '<div class=\"' + (!isTR ? 'calendars-month-nav' : 'ui-datepicker-month-nav') + '\">';\n    for (var i = 0; i < calendar.monthsInYear(year); i++) {\n        var ord = calendar.fromMonthOfYear(year, i + calendar.minMonth) - calendar.minMonth;\n        var inRange = ((!minDate || calendar.newDate(year, i + calendar.minMonth,\n            calendar.daysInMonth(year, i + calendar.minMonth)).compareTo(minDate) > -1) && (!maxDate ||\n            calendar.newDate(year, i + calendar.minMonth, calendar.minDay).compareTo(maxDate) < +1));\n        html += '<div>' + (inRange ? '<a href=\"#\" class=\"jd' +\n            calendar.newDate(year, i + calendar.minMonth, calendar.minDay).toJD() + '\"' : '<span') +\n            ' title=\"' + calendar.local.monthNames[ord] + '\">' + calendar.local.monthNamesShort[ord] +\n            (inRange ? '</a>' : '</span>') + '</div>';\n    }\n    html += '</div>';\n    </buildNavigationHTML>\n    <insertNavigationAndBindEvents>\n    $(html).insertAfter(picker.find('div.calendars-nav,div.ui-datepicker-header:first')).\n        find('a').click(function() {\n            var date = target.calendarsPicker('retrieveDate', this);\n            target.calendarsPicker('showMonth', date.year(), date.month());\n            return false;\n        });\n    </insertNavigationAndBindEvents>\n}\n"], ["logoutUser", "\nfunction(req, res) {\n    waterlock.logger.debug('user logout');\n    delete(req.session.user);\n\n    <handleLogoutProcess>\n    if (req.session.authenticated) {\n        this.logoutSuccess(req, res);\n    } else {\n        this.logoutFailure(req, res);\n    }\n    </handleLogoutProcess>\n}\n"], ["blockCmdArrowNavigation", "\nfunction blockCmdArrowNavigation() {\n    if (Env.mac) {\n      <bindArrowKeyHandler>\n      editor.on('keydown', function (e) {\n        if (VK.metaKeyPressed(e) && !e.shiftKey && (e.keyCode == 37 || e.keyCode == 39)) {\n          e.preventDefault();\n          editor.selection.getSel().modify('move', e.keyCode == 37 ? 'backward' : 'forward', 'lineboundary');\n        }\n      });\n      </bindArrowKeyHandler>\n    }\n}\n"], ["applyRatioToProperties", "\nfunction(ratio) {\n    var target = this.target,\n        a = this.a,\n        i = a.length,\n        e, val;\n      <handlePropertyInterpolation>\n      if (this._round) {\n          while (--i > -1) {\n              e = a[i];\n              target[e.i] = Math.round(e.s + e.c * ratio);\n          }\n      } else {\n          while (--i > -1) {\n              e = a[i];\n              val = e.s + e.c * ratio;\n              target[e.i] = (val < 0.000001 && val > -0.000001) ? 0 : val;\n          }\n      }\n      </handlePropertyInterpolation>\n}\n"], ["stripSensitiveValues", "\nfunction authorizedHandler(value) {\n    if (! value) return value;\n\n    <removeSensitiveKeys>\n    delete value.public_id;\n    delete value.version;\n    delete value.signature;\n    delete value.resource_type;\n    </removeSensitiveKeys>\n\n    return value;\n}\n"], ["initializeCellState", "\nfunction mxCellState(view, cell, style) {\n    <assignCellStateProperties>\n    this.view = view;\n    this.cell = cell;\n    this.style = (style != null) ? style : {};\n\n    this.origin = new mxPoint();\n    this.absoluteOffset = new mxPoint();\n    </assignCellStateProperties>\n}\n"], ["fetchPullRequestFiles", "\nasync function getPrFiles(prNo) {\n  <logFetchingPrFiles>\n  logger.debug({ prNo }, 'getPrFiles');\n  </logFetchingPrFiles>\n  <retrievePRDiff>\n  const diff = (await api.get(\n    `/2.0/repositories/${config.repository}/pullrequests/${prNo}/diff`,\n    { json: false }\n  )).body;\n  </retrievePRDiff>\n  <parseDiffToGetFiles>\n  const files = parseDiff(diff).map(file => file.to);\n  </parseDiffToGetFiles>\n  return files;\n}\n"], ["executePromiseHandlingErrors", "\nfunction callAndCatchPromiseError(fn, ...args) {\n    const next = args[args.length - 1];\n    let p = null;\n    <attemptFunctionCall>\n    try {\n      p = fn.apply(null, args);\n    } catch (err) {\n      return next(err);\n    }\n    </attemptFunctionCall>\n    <handlePromiseError>\n    if (p && p.then && p.catch) {\n      p.catch(err => next(err));\n    }\n    </handlePromiseError>\n}\n"], ["checkAndReportReferenceIssues", "\nfunction checkReference(reference, index, references) {\n    var identifier = reference.identifier;\n\n    <validateReferenceProperties>\n    if (identifier &&\n        !reference.init &&\n        (index === 0 || references[index - 1].identifier !== identifier)\n    ) {\n    </validateReferenceProperties>\n        <reportIssueBasedOnWriteOrPropModification>\n        if (reference.isWrite()) {\n            context.report(\n                identifier,\n                ProblemMessages.noParamReassign,\n                {\n                    name: identifier.name\n                });\n        } else if (props && isModifyingProp(reference)) {\n            context.report(\n                identifier,\n                ProblemMessages.noParamPropertyReassign,\n                {\n                    name: identifier.name\n                });\n        }\n        </reportIssueBasedOnWriteOrPropModification>\n    }\n}\n"], ""]