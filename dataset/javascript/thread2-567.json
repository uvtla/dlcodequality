[["repaintClockHourCanvas", "\nfunction repaintClockHourCanvas(hoverHour, hoverSign) {\n\t\t\t\t\n\t\t\t\t<canvasSetup>\n\t\t\t\tvar ctx = clockHourCanvas.get(0).getContext('2d');\n\t\t\t\t</canvasSetup>\n\n\t\t\t\t<inputProcessing>\n\t\t\t\t(new RegExp('^(-|\\\\+)?([0-9]+).([0-9]{1,2})$')).test(inputElement.val());\n\t\t\t\tvar negative = RegExp.$1 == '-' ? true : false;\n\t\t\t\tvar hour = parseInt(RegExp.$2);\n\t\t\t\t</inputProcessing>\n\n\t\t\t\t<clearCanvas>\n\t\t\t\tctx.clearRect(0, 0, canvasSize, canvasSize);\n\t\t\t\t</clearCanvas>\n\n\t\t\t\t<popupVisibilityControl>\n\t\t\t\tif (hour >= 24) {\n\t\t\t\t\tpopup.css('visibility', 'hidden');\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (!settings.onlyShowClockOnMobile) popup.css('visibility', 'visible');\n\t\t\t\t}\n\t\t\t\t</popupVisibilityControl>\n\n\t\t\t\t<adjustHourValue>\n\t\t\t\tif (hour == 0) hour = 24;\n\t\t\t\tif (!inputElement.val()) hour = -1;\t\n\t\t\t\t</adjustHourValue>\n\n\t\t\t\t<drawClockFace>\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(clockCenterX, clockCenterY, clockRadius, 0, 2 * Math.PI, false);\n\t\t\t\tctx.fillStyle = settings.colors.clockFaceColor;\n\t\t\t\tctx.fill();\n\t\t\t\t</drawClockFace>\n\n\t\t\t\t<hoverCircleDrawing>\n\t\t\t\tif (!isMobile() && hoverHour) {\n\t\t\t\t\tvar isMinMaxFullfilled = true;\n\t\t\t\t\t... // Code to determine if min/max conditions are fulfilled\n\t\t\t\t\tif (isMinMaxFullfilled) {\n\t\t\t\t\t\t... // Code to draw the hover circle\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t</hoverCircleDrawing>\n\n\t\t\t\t<drawClockCenter>\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(clockCenterX, clockCenterY, 3, 0, 2 * Math.PI, false);\n\t\t\t\tctx.fillStyle = settings.colors.selectorColor;\n\t\t\t\tctx.fill();\n\t\t\t\t</drawClockCenter>\n\n\t\t\t\t<currentHourIndicatorDrawing>\n\t\t\t\tif (hour > -1 && (!settings.maximum || hour == 24 || isTimeSmallerOrEquals(hour, settings.maximum))) {\n\t\t\t\t\t... // Drawing code for the current hour indicator\n\t\t\t\t}\n\t\t\t\t</currentHourIndicatorDrawing>\n\n\t\t\t\t<drawOuterCircleNumbers>\n\t\t\t\tctx.font = settings.fonts.clockOuterCircleFontSize + 'px ' + settings.fonts.fontFamily;\n\t\t\t\tfor(i = 1; i <= 12; i++) {\n\t\t\t\t\t... // Code for drawing the numbers on the outer circle\n\t\t\t\t}\n\t\t\t\t</drawOuterCircleNumbers>\n\n\t\t\t\t<drawInnerCircleNumbers>\n\t\t\t\tctx.font = settings.fonts.clockInnerCircleFontSize + 'px ' + settings.fonts.fontFamily;\n\t\t\t\tfor(i = 1; i <= 12; i++) {\n\t\t\t\t\t... // Code for drawing the numbers on the inner circle\n\t\t\t\t}\n\t\t\t\t</drawInnerCircleNumbers>\n\n\t\t\t\t<repaintSignButtonConditional>\n\t\t\t\tif (settings.duration && settings.durationNegative) repaintSignButton(ctx, hoverSign);\n\t\t\t\t</repaintSignButtonConditional>\n\t\t\t}\n"], ["_sanitizeCoefficients", "\nfunction _sanitizeCoefficients(coefficients) {\n  <initializeDefaultCoefficients>\n  if (coefficients == undefined) {\n    coefficients = {};\n  }\n  </initializeDefaultCoefficients>\n  <setPropertyCoefficients>\n  for (let property in Utils.DEFAULT_ROOM_MATERIALS) {\n    if (!(coefficients.hasOwnProperty(property))) {\n      coefficients[property] = Utils.ROOM_MATERIAL_COEFFICIENTS[\n        Utils.DEFAULT_ROOM_MATERIALS[property]];\n    }\n  }\n  </setPropertyCoefficients>\n  return coefficients;\n}\n"], ["batchSendData", "\nfunction batchSendData (ops, callback) {\n  <createClient>\n  var client = dgram.createSocket('udp4');\n  </createClient>\n\n  <sendData>\n  executeSendData(client, ops, 0, function () {\n    try {\n      client.close();\n    } finally {\n      callback();\n    }\n  });\n  </sendData>\n}\n"], ["stock_args", "\nfunction stock_args(f, _params, _psize, _phead, _ptail){\n  <curryFunctionDefinition>\n  function purry_wrapper(){\n    ... // Code defining the wrapper behavior for currying the function\n  }\n  </curryFunctionDefinition>\n  return purry_wrapper;\n}\n"], ["displayScore", "\nfunction (renderer) {\n  <drawScore>\n  this.font.draw(renderer, game.data.score, this.pos.x, this.pos.y);\n  </drawScore>\n}\n"], ["_create", "\nfunction _create(f) {\n  <createContract>\n  var c = Object.create(Contract);\n  c._wrapped = f;\n  return c;\n  </createContract>\n}\n"], ["validateResponse", "\nfunction validateResponse(type, noSchema, options) {\n  <checkArguments>\n  if (arguments.length < 3) {\n    throw new Error('Handlebars Helper \\'validateResponse\\'' +\n      'needs 2 parameters');\n  }\n  </checkArguments>\n\n  <returnBlockHelpers>\n  if (!noSchema && mediaTypeContainsJson(type)) {\n    return options.fn(this);\n  } else {\n    return options.inverse(this);\n  }\n  </returnBlockHelpers>\n}\n"], ["repeat", "\nfunction repeat(input, n) {\n  <repeatString>\n  var times = ~~n;\n  return (!isString(input) || !times) ? input : strRepeat(input, n);\n  </repeatString>\n}\n"], ["validateFile", "\nasync function validateFile (file, options) {\n  <fileValidation>\n  if (file instanceof File === false) {\n    return null\n  }\n  await file.setOptions(Object.assign(file.validationOptions, options)).runValidations()\n  return _.size(file.error()) ? file.error().message : null\n  </fileValidation>\n}\n"], ["resolveConstraints", "\nfunction(){\n  <iterateConstraintResolution>\n  var its = this.options.iterations\n  ,coef = 1 / its;\n  for (var i = 0; i < its; i++){\n    this.resolveDistanceConstraints( coef );\n    this.resolveAngleConstraints( coef );\n  }\n  </iterateConstraintResolution>\n}\n"], ""]