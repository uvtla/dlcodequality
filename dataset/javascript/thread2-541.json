[["mapChildren", "\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var mapResult = {};\n  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context); // Responsibility: Acquiring a pooled traverse context\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext); // Responsibility: Traversing all children with provided context\n  MapBookKeeping.release(traverseContext); // Responsibility: Releasing the pooled traverse context\n  return ReactFragment.create(mapResult); // Responsibility: Creating a React Fragment from the result\n}\n"], ["SimpleThumbnailGenerator", "\nfunction SimpleThumbnailGenerator(options, generatorOptions) {\n\toptions = options || {};\n\tgeneratorOptions = generatorOptions || {};\n\n\tif (!options.manifestFileName) {\n\t\tthrow new Error(\"manifestFileName required.\"); // Responsibility: Validating input\n\t}\n\n\tif (typeof(options.logger) === \"undefined\") {\n\t\tthis._logger = Logger.get('SimpleThumbnailGenerator'); // Responsibility: Setting default logger\n\t}\n\telse {\n\t\tif (options.logger === null) {\n\t\t\tthis._logger = nullLogger; // Responsibility: Setting null logger\n\t\t}\n\t\telse {\n\t\t\tthis._logger = options.logger; // Responsibility: Setting custom logger\n\t\t}\n\t}\n\tthis._generatorOptions = generatorOptions; // Responsibility: Assigning generator options\n\tthis._manifestFileName = options.manifestFileName; // Responsibility: Assigning manifest file name\n\tthis._expireTime = options.expireTime || 0; // Responsibility: Assigning expire time\n\tthis._segmentRemovalTimes = {\n\t\toffset: null, // Responsibility: Init segment removal times\n\t\ttimes: []\n\t};\n\t\n\t\n\tthis._segments = []; // Responsibility: Initializing segments\n\tthis._playlistRemoved = false; // Responsibility: Initializing playlist removed flag\n\tthis._playlistEnded = false; // Responsibility: Initializing playlist ended flag\n\tthis._generator = new ThumbnailGenerator(Object.assign({}, generatorOptions, {\n\t\ttempDir: generatorOptions.tempDir || utils.getTempDir() // Responsibility: Creating new ThumbnailGenerator with tempDir\n\t}));\n\tthis._gcTimerId = setInterval(this._gc.bind(this), 30000); // Responsibility: Starting garbage collection timer\n\tthis._emitter = ee({}); // Responsibility: Creating an event emitter instance\n\tthis._registerGeneratorListeners(); // Responsibility: Registering generator event listeners\n\tthis._updateManifest(); // Responsibility: Updating manifest\n}\n"], ["RSAGetPublicString", "\nfunction RSAGetPublicString() {\n  var exportObj = {n: this.n.toString(16), e: this.e.toString(16)}; // Responsibility: Preparing RSA public key components\n  if (exportObj.n.length % 2 == 1) {\n    exportObj.n = '0' + exportObj.n; // Responsibility: Normalizing the key component length\n  }\n  return JSON.stringify(exportObj); // Responsibility: Returning the public key in JSON format\n}\n"], ["disable", "\nfunction disable(namespaces) {\n  var split = (namespaces || '').split(/[\\s,]+/); // Responsibility: Splitting namespaces\n  var len = split.length;\n\n  function removeNamespaceFromNames(namespaces){\n    _.remove(exports.names, function(name){\n      return name.toString() === '/^' + namespaces + '$/';\n    }); // Responsibility: Removing a specific namespace\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // Responsibility (internal iteration control): Continue if item is falsy\n    namespaces = split[i].replace(/\\*/g, '.*?'); // Responsibility: Replacing wildcard in the namespace\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$')); // Responsibility: Adding namespace to skips\n    } else {\n      removeNamespaceFromNames(namespaces); // Responsibility: Invoking removeNamespaceFromNames\n      exports.skips.push(new RegExp('^' + namespaces + '$')); // Responsibility: Adding namespace to skips\n      loggerEventBus.emit('disable', split[i]); // Responsibility: Emitting 'disable' event for the namespace\n    }\n  }\n\n  exports.save(namespaces); // Responsibility: Saving the state of namespaces\n}\n"], ["jsonSections", "\nfunction jsonSections(sections, block) {\n\n  return sections.map(function(section) { // Responsibility: Mapping through sections to transform them into a JSON structure\n    \n    var partial = section; \n    if (partial.markup() && partial.markup().toString().match(/^[^\\n]+\\.(html|hbs|pug)$/)) {\n      partial.file = partial.markup().toString(); // Responsibility: Assigning file name from markup\n      partial.name = path.basename(partial.file, path.extname(partial.file)); // Responsibility: Extracting the name from file name\n      partial.file = path.dirname(block.filePath) + '/' + partial.file; // Responsibility: Assigning full file path\n      partial.markupText = fs.readFileSync(partial.file, 'utf8'); // Responsibility: Reading file content\n      section.markup = function() {\n        return partial.markupText; // Responsibility: Overriding markdown function to return file content\n      };\n    }\n\n    return {\n      header: generateDescription(section.header(), {noWrapper: true}), // Responsibility: Generating section header description\n      description: generateDescription(section.description()), // Responsibility: Generating section description\n      modifiers: jsonModifiers(section.modifiers()), // Responsibility: Generating JSON modifiers\n      deprecated: section.deprecated(), // Responsibility: Identifying deprecated section\n      experimental: section.experimental(), // Responsibility: Identifying experimental section\n      reference: section.reference(), // Responsibility: Providing section reference\n      markup: section.markup() ? section.markup().toString() : null // Responsibility: Determining final section markup value\n    };\n  });\n}\n"], ["Entity", "\nfunction(options) {\n  Entity.call(this, options); // Responsibility: Structure setup inherited from Entity\n  addCustomFeatureProperties(this); // Responsibility: Adding custom properties to instance\n  this.currentProperties = undefined; // Responsibility: Initializing current properties\n  this.currentDescription = undefined; // Responsibility: Initializing current description\n  this.updateCounters = undefined; // Responsibility: Initializing update counters\n  knockout.track(this, [ // Responsibility: Setting up knockout tracking\n    \"currentProperties\",\n    \"currentDescription\",\n    \"updateCounters\"\n  ]);\n}\n"], ["_tahta_anahtar_tumu_to_mapX", "\nfunction (_kalem_id, _tahta_id) {\n    return db.tahta.f_db_tahta_anahtar_tumu(_tahta_id) // Responsibility: Fetching all keys for a board\n        .then(\n            \n            function (_arrKelimeler) {\n                var arr_idler = _arrKelimeler.pluckX(\"Id\"); // Responsibility: Extracting all IDs from keys\n                return arr_idler.mapX(null, db.anahtar.f_db_anahtar_index_sil_kalem, _kalem_id).allX(); // Responsibility: Bulk deleting key index for an item\n            });\n}\n"], ["github", "\nfunction github(repo, clone) {\n\tlet url;\n\tif (clone)\n\t\turl = 'git@' + repo.host + ':' + repo.owner + '/' + repo.name + '.git'; // Responsibility: Generating SSH clone URL\n\telse\n\t\turl = addProtocol(repo.host) + '/' + repo.owner + '/' + repo.name + '/archive/' + repo.checkout + '.zip'; // Responsibility: Generating download ZIP URL\n\treturn url; // Responsibility: Returning the constructed URL\n}\n"], ["Module", "\nfunction Module(id, deps, maker, root) {\n        this.id = id; // Responsibility: Assigning module id\n        this.deps = deps; // Responsibility: Assigning module dependencies\n        this.maker = maker; // Responsibility: Assigning module maker function\n        this.root = root || $; // Responsibility: Assigning module root\n        if(checkDeps(id)) { // Responsibility: Checking module dependencies\n            this.namespace(); // Responsibility: Setting module namespace if dependencies check out\n        } else {\n            this.init(); // Responsibility: Initializing module if dependencies don't check out\n        }\n}\n"], ["lower", "\nfunction lower (value) {\n  if (value === null || value === undefined) {\n    return value // Responsibility (single line control): Returning the value if it's null or undefined\n  }\n  return String.prototype.toLowerCase.call(value) // Responsibility: Converting value to lower case\n}\n"], "```"]