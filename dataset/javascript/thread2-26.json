[["_set", "\nfunction _set(obj, key, val) {\n    <validation>\n    if (arguments.length !== 3 || !is_1.isObject(obj) || (!is_1.isArray(key) && !is_1.isString(key)))\n        return null;\n    </validation>\n    \n    <splitKey>\n    var props = string_1.split(key);\n    </splitKey>\n    \n    <propInitialization>\n    var prop = props.shift();\n    var match = matchIndex(prop);\n    var next = obj[prop];\n    </propInitialization>\n    \n    <prepareNextValue>\n    if (!is_1.isValue(next) && !match)\n        next = obj[prop] = {};\n    if (match) {\n        if (!obj[match.name])\n            obj[match.name] = [];\n        next = obj[match.name][match.index];\n    }\n    </prepareNextValue>\n    \n    <recursiveSetValue>\n    if (props.length > 0) {\n        _set(next, props, val);\n    }\n    </recursiveSetValue>\n    <setFinalValue>\n    else {\n        if (match)\n            obj[match.name][match.index] = val;\n        else\n            obj[prop] = val;\n    }\n    </setFinalValue>\n    \n    return obj;\n}\n"], ["_takeDrop", "\nfunction _takeDrop(arrayCase, generalCase) {\n    <takeDropFunctionFactory>\n    return function(n) {\n      return function(xs) {\n        <validation>\n        if (n < 0) return Nothing;\n        </validation>\n\n        <processArray>\n        if (Array.isArray (xs)) {\n          return n <= xs.length ? Just (arrayCase (n, xs)) : Nothing;\n        }\n        </processArray>\n\n        <generalCaseProcessing>\n        var m = Z.reduce (function(m, x) {\n          return Z.map (function(pair) {\n            var n = pair.fst;\n            var xs = pair.snd;\n            return Pair (n - 1) (generalCase (n, xs, x));\n          }, m);\n        }, Just (Pair (n) (Z.empty (xs.constructor))), xs);\n\n        return Z.map (Pair.snd, Z.reject (B (gt (0)) (Pair.fst), m));\n        </generalCaseProcessing>\n      };\n    };\n    </takeDropFunctionFactory>\n}\n"], ["findRefObjectsByWildcardNamespace", "\nfunction findRefObjectsByWildcardNamespace (ref, components) {\n  <refSplitting>\n  const [ type ] = ref.split(':')\n  </refSplitting>\n\n  <objectsRetrieval>\n  const objects = components[type]\n  </objectsRetrieval>\n  \n  return objects ? Object.values(objects) : null\n}\n"], ["startColumnResize", "\nfunction(e) {\n    <startWidthCapture>\n    this.startWidth = this.headCellLiner.offsetWidth;\n    this.startX = YAHOO.util.Event.getXY(e)[0];\n    </startWidthCapture>\n    \n    <calculatePadding>\n    this.nLinerPadding = (parseInt(YAHOO.util.Dom.getStyle(this.headCellLiner,\"paddingLeft\"),10)|0) +\n            (parseInt(YAHOO.util.Dom.getStyle(this.headCellLiner,\"paddingRight\"),10)|0);\n    </calculatePadding>\n}\n"], ["addRoutes", "\nfunction addRoutes( app ) {\n  <routerSetup>\n  router.get( '/', dbRequestHandler )\n  </routerSetup>\n  \n  <appMiddleware>\n  app.use( router )\n  app.use( express.static( 'public' ) )\n  </appMiddleware>\n}\n"], ["logicOperationBlocklyBlock", "\nfunction() {\n  <blockSetup>\n    var OPERATORS =\n        [[Blockly.Msg.LOGIC_OPERATION_AND, 'AND'],\n         [Blockly.Msg.LOGIC_OPERATION_OR, 'OR']];\n    this.setHelpUrl(Blockly.Msg.LOGIC_OPERATION_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A')\n        .setCheck('Boolean');\n    this.appendValueInput('B')\n        .setCheck('Boolean')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n  </blockSetup>\n    \n  <tooltipSetup>\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'AND': Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND,\n        'OR': Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR\n      };\n      return TOOLTIPS[op];\n    });\n  </tooltipSetup>\n}\n"], ["toMap", "\nfunction toMap(keySelector, elementSelector) {\n  <keySelectorValidation>\n  if (!keySelector) return new Map(this);\n  </keySelectorValidation>\n\n  <elementSelectorDefaulting>\n  elementSelector = typeof elementSelector === 'function' ? elementSelector : i => i;\n  </elementSelectorDefaulting>\n  \n  <mapConstruction>\n  let map = new Map();\n\n  for (let item of this) {\n    let key = keySelector(item);\n    let element = elementSelector(item);\n    map.set(key, element);\n  }\n  </mapConstruction>\n\n  return map;\n}\n"], ["loggerInit", "\nfunction init(o){\n  <defaultSettings>\n\topts.outputPath = dfault( o.outputPath, opts.outputPath );\n\n\topts.consoleOutput = dfault(o.consoleOutput, opts.consoleOutput );\n\topts.consoleOutputLevel = dfault(o.consoleOutputLevel, opts.consoleOutputLevel );\n\t\n\topts.fileOutput = dfault(o.fileOutput, opts.fileOutput);\n\topts.fileOutputLevel= dfault(o.fileOutputLevel, opts.fileOutputLevel);\n\t\n\topts.dateTimeFormat = dfault(o.dateTimeFormat, opts.dateTimeFormat );\n\topts.fileNamePrefix = dfault(o.fileNamePrefix, opts.fileNamePrefix );\n\topts.fileNameSuffix = dfault(o.fileNameSuffix, opts.fileNameSuffix );\n\topts.fileNameDateFormat = dfault(o.fileNameDateFormat, opts.fileNameDateFormat  );\n\t\n\topts.verbose = dfault(o.verbose, opts.verbose ); \n\topts.customIntro = dfault(o.customIntro, opts.customIntro );\n  </defaultSettings>\n  \n  <customIntro>\n\tif(typeof opts.customIntro ==='function') \n\t\topts.customIntro(require('../../package.json')); \n\telse if(opts.customIntro != null &&  opts.customIntro != false);\n  </customIntro>\n\t\n  <filenameGeneration>\n\topts.filename = opts.outputPath + opts.fileNamePrefix + now().format(opts.fileNameDateFormat) + opts.fileNameSuffix +\".log\";\n  </filenameGeneration>\n\n  <whenTheDayEndsSetup>\n\twhenTheDayEnds(); \n  </whenTheDayEndsSetup>\n\n  <mkdirSyncCall>\n    mkdirSync(opts.outputPath);\n  </mkdirSyncCall>\n\n  <initializedFlag>\n\tinitialized =true;\n  </initializedFlag>\n\n  return self;\n}\n"], ["selectCallbackHandler", "\nfunction(event, ui){\n  <preventDefaultAction>\n    if( ! anchor._fill_p ){\n\tevent.preventDefault();\t\t\n    }\n  </preventDefaultAction>\n\n  <documentRetrieval>\n    var doc_to_apply = null;\n    if( ui.item ){\n\tdoc_to_apply = ui.item.document;\n    }\n  </documentRetrieval>\n\n  <invokeSelectCallback>\n    if( doc_to_apply && \n\tbbop.core.is_defined(anchor._list_select_callback) ){\n\tanchor._list_select_callback(doc_to_apply);\n    }\n  </invokeSelectCallback>\n}\n"], ["stripQuotes", "\nfunction stripQuotes (str) {\n  <characterCodeRetrieval>\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  </characterCodeRetrieval>\n  \n  <quoteRemoval>\n  return a === b && (a === 0x22 || a === 0x27)\n    ? str.slice(1, -1)\n    : str\n  </quoteRemoval>\n}\n"], "```"]