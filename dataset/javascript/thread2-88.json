[["equalsColors", "\nfunction equalsColors(c1,c2){\n  for (var i = 0; i < 4; i++) {\n    if(c1[i] !== c2[i])\n      return false;\n  }\n  return true;\n}\n"], ["sn_api_datum_datumDate", "\nfunction sn_api_datum_datumDate(d) {\n\tif ( d ) {\n\t\tif ( d.date ) {\n\t\t\treturn d.date;\n\t\t} else if ( d.localDate ) {\n\t\t\treturn sn.format.dateTimeFormat.parse(d.localDate +(d.localTime ? ' ' +d.localTime : ' 00:00'));\n\t\t} else if ( d.created ) {\n\t\t\treturn sn.format.timestampFormat.parse(d.created);\n\t\t}\n\t}\n\treturn null;\n}\n"], ["preheatANode", "\nfunction preheatANode(aNode) {\n    var stack = [];\n    <recordHotspotData>\n    function recordHotspotData(expr, notContentData) {\n        var refs = analyseExprDataHotspot(expr);\n        if (refs.length) {\n            for (var i = 0, len = stack.length; i < len; i++) {\n                if (!notContentData || i !== len - 1) {\n                    var data = stack[i].hotspot.data;\n                    if (!data) {\n                        data = stack[i].hotspot.data = {};\n                    }\n                    each(refs, function (ref) {\n                        data[ref] = 1;\n                    });\n                }\n            }\n        }\n    }\n    </recordHotspotData>\n\n    <analyseANodeHotspot>\n    function analyseANodeHotspot(aNode) {\n        // ...[Several responsibilities included in this function related to analysing nodes]...\n    }\n    </analyseANodeHotspot>\n\n    <conditionalNodeAnalysis>\n    if (aNode) {\n        analyseANodeHotspot(aNode);\n    }\n    </conditionalNodeAnalysis>\n}\n"], ["isNativeFunction", "\nfunction isNativeFunction(f) {\n\t  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\t  var funcMatchString = Function.prototype.toString.call(Object.prototype.hasOwnProperty)\n\t    .replace(reRegExpChar, '\\\\$&')\n\t    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?');\n\t  var reIsNative = RegExp('^' + funcMatchString + '$');\n\t  return isObject(f) && reIsNative.test(f);\n}\n"], ["createApiClass", "\nfunction createApiClass(vow, ApiError) {\n    <sendAjaxRequest>\n    function sendAjaxRequest(url, data, execOptions) {\n        // ... [Details of the AJAX Request handling] ...\n    }\n    </sendAjaxRequest>\n        \n    <Api>\n    function Api(basePath, options) {\n        // ...[Api instance setup and configuration]...\n    }\n\n    Api.prototype = {\n        constructor: Api,\n\n        // ...[several methods that handle execution of API requests]...\n    };\n\n    return Api;\n    </Api>\n}\n"], ["Dropping", "\nfunction Dropping(duration, metas) {\n    _super.call(this, Infinity, metas);\n    this._r = [];\n    this._n = [];\n    this._g = null;\n    this._f = null;\n}\n"], ["onchange", "\nfunction onchange (parent, prefix) {\n  <onChangeHandler>\n  return function (ary) {\n    // ...[Event handling and propagation code]...\n  }\n  </onChangeHandler>\n}\n"], ["TourCMS", "\nfunction TourCMS(options) {\n  <optionsSetup>\n  this.options = {\n    // ...[Default options setup]...\n  };\n\n  if(typeof options !== 'undefined') {\n    // ...[Options configuration based on user input]...\n  }\n  </optionsSetup>\n}\n"], ["report", "\nfunction report(node, startOffset, character) {\n    context.report({\n        node,\n        loc: sourceCode.getLocFromIndex(sourceCode.getIndexFromLoc(node.loc.start) + startOffset),\n        message: \"Unnecessary escape character: \\\\{{character}}.\",\n        data: { character }\n    });\n}\n"], ["associativity", "\nfunction associativity(f) {\n    return forAll(_.Int, _.Int, _.Int).satisfy(function(a, b, c) {\n      var x = f(a).concat(f(b)).concat(f(c));\n      var y = f(a).concat(f(b).concat(f(c)));\n\n      return x.isEqual(y);\n    });\n  }\n"], ""]