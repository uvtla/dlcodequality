[["subscribe", "\nfunction subscribe(listener) {\n  <validateListener>\n  if (typeof listener !== 'function') {\n    throw new Error('Expected listener to be a function.');\n  }\n  </validateListener>\n\n  var isSubscribed = true;\n\n  <manageNextListeners>\n  ensureCanMutateNextListeners();\n  nextListeners.push(listener);\n  </manageNextListeners>\n\n  return function unsubscribe() {\n    <checkSubscription>\n    if (!isSubscribed) {\n      return;\n    }\n    </checkSubscription>\n\n    isSubscribed = false;\n\n    <removeListener>\n    ensureCanMutateNextListeners();\n    var index = nextListeners.indexOf(listener);\n    nextListeners.splice(index, 1);\n    </removeListener>\n  };\n}\n"], ["handleReaderEvent", "\nfunction (event) {\n  <handleReaderErrors>\n  var reader = event.target;\n  _gpfAssert(reader === this._reader, \"Unexpected change of reader\");\n  if (reader.error) {\n    gpfFireEvent.call(this,\n      gpfI.IReadableStream.ERROR,\n      {\n        error: {\n          name: reader.error.name,\n          message: reader.error.message\n        }\n      },\n      this._eventsHandler\n    );\n  }\n  </handleReaderErrors>\n\n  <processReaderCompletion>\n  else if (reader.readyState === FileReader.DONE) {\n    var buffer = new Int8Array(reader.result);\n    var len = buffer.length;\n    var result = [];\n    for (var idx = 0; idx < len; ++idx) {\n      result.push(buffer[idx]);\n    }\n    gpfFireEvent.call(this, gpfI.IReadableStream.EVENT_DATA, {buffer: result}, this._eventsHandler);\n  }\n  </processReaderCompletion>\n}\n"], ["configureStack", "\nfunction ( options, queue ) {\n  <determineQueue>\n  queue =\n    Util.is.Array( queue ) || Util.is.Function( queue ) && queue ||\n    Util.is.Array( options ) || Util.is.Function( options ) && options ||\n    false;\n  if( queue ) {\n    this.queue( queue );\n  }\n  </determineQueue>\n\n  <extendAndVerifyOptions>\n  options = this.options = Util.is.Object( options ) && Util.extend( {}, options ) || {};\n  options.__proto__ = Stack.defaultOptions;\n  if( options.hasOwnProperty( 'breakOn' ) ) {\n    if( Util.isnt.Function( options.breakOn ) && options.breakOn !== false ) {\n      throw new TypeError(\"options.breakOn should be either a function or false\");\n    }\n  }\n  </extendAndVerifyOptions>\n}\n"], ["compareArrays", "\nfunction compareArrays (x, y) {\n  <compareArrayElements>\n  for (let i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {\n    const v = compareNatural(x[i], y[i])\n    if (v !== 0) {\n      return v\n    }\n  }\n  </compareArrayElements>\n\n  <compareArraySizes>\n  if (x.length > y.length) { return 1 }\n  if (x.length < y.length) { return -1 }\n  </compareArraySizes>\n\n  <defaultEquality>\n  return 0\n  </defaultEquality>\n}\n"], ["negate", "\nfunction negate(bytes) {\n  <flipBits>\n  for (var i = 0; i < 8; i++) {\n      bytes[i] ^= 0xFF;\n  }\n  </flipBits>\n\n  <incrementCounter>\n  for (var i = 7; i > -1; i--) {\n      bytes[i]++;\n      if (bytes[i] !== 0) {\n          break;\n      }\n  }\n  </incrementCounter>\n}\n"], ["setActivePaneId", "\nfunction setActivePaneId(newPaneId) {\n  <verifyAndSetNewPane>\n  if (!_isSpecialPaneId(newPaneId) && newPaneId !== _activePaneId) {\n    var oldPaneId = _activePaneId,\n        oldPane = _getPane(ACTIVE_PANE),\n        newPane = _getPane(newPaneId);\n\n    if (!newPane) {\n      throw new Error(\"invalid pane id: \" + newPaneId);\n    }\n    _activePaneId = newPaneId;\n  </verifyAndSetNewPane>\n\n  <triggerPaneEvents>\n  exports.trigger(\"activePaneChange\", newPaneId, oldPaneId);\n  exports.trigger(\"currentFileChange\", _getPane(ACTIVE_PANE).getCurrentlyViewedFile(),\n                                                      newPaneId,\n                                                      oldPane.getCurrentlyViewedFile(),\n                                                      oldPaneId);\n  </triggerPaneEvents>\n\n  <updatePane>\n  _makePaneMostRecent(_activePaneId);\n  focusActivePane();\n  </updatePane>\n}\n"], ["immutableAppHttpRedirect", "\nfunction immutableAppHttpRedirect (url, code, cookies, headers) {\n  <setDefaultValues>\n  if (!url) {\n    url = '/'\n  }\n  if (!code) {\n    code = 302\n  }\n  </setDefaultValues>\n\n  <constructError>\n  var err = new Error('Redirect')\n  err.code = code\n  err.cookies = cookies\n  err.headers = headers\n  err.url = url\n  </constructError>\n\n  <throwRedirect>\n  throw err\n  </throwRedirect>\n}\n"], ["getParentCaretContainer", "\nfunction getParentCaretContainer(node) {\n  <searchForCaretContainer>\n  while (node) {\n    if (node.id === caretContainerId) {\n      return node;\n    }\n    node = node.parentNode;\n  }\n  </searchForCaretContainer>\n}\n"], ["adjustContentItemDimensions", "\nfunction() {\n  <setHeight>\n  this._el.content_item.style.height = TL.Util.ratio.r16_9({w:this.options.width}) + \"px\";\n  </setHeight>\n  <setWidth>\n  this._el.content_item.style.width = this.options.width + \"px\";\n  </setWidth>\n}\n"], ["authorize", "\nfunction authorize(ctx) {\n  <lookupAuthorizeMiddleware>\n  var fn = lookup(ctx.operation, 'middleware', 'authorize');\n  </lookupAuthorizeMiddleware>\n\n  <handleAuthorization>\n  var prefix = describe(ctx);\n  if (fn) {\n    return fn(ctx);\n  } else {\n    debug(prefix + 'authorize middleware disabled (not defined)');\n  }\n  </handleAuthorization>\n}\n"], ""]