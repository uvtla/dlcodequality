[["createAlertifyDialog", "\nfunction (item) {\n    var html = \"\",\n        type = item.type,\n        message = item.message,\n        css = item.cssClass || \"\";\n\n    html += \"<div class=\\\"alertify-dialog\\\">\";\n\n    if (_alertify.buttonFocus === \"none\") html += \"<a href=\\\"#\\\" id=\\\"alertify-noneFocus\\\" class=\\\"alertify-hidden\\\"></a>\";\n\n    if (type === \"prompt\") html += \"<form id=\\\"alertify-form\\\">\";\n\n    html += \"<article class=\\\"alertify-inner\\\">\";\n    html += dialogs.message.replace(\"{{message}}\", message);\n\n    if (type === \"prompt\") html += dialogs.input;\n\n    html += dialogs.buttons.holder;\n    html += \"</article>\";\n\n    if (type === \"prompt\") html += \"</form>\";\n\n    html += \"<a id=\\\"alertify-resetFocus\\\" class=\\\"alertify-resetFocus\\\" href=\\\"#\\\">Reset Focus</a>\";\n    html += \"</div>\";\n\n    <templateReplacement>\n    switch (type) {\n    case \"confirm\":\n        html = html.replace(\"{{buttons}}\", this.appendButtons(dialogs.buttons.cancel, dialogs.buttons.ok));\n        html = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n        break;\n    case \"prompt\":\n        html = html.replace(\"{{buttons}}\", this.appendButtons(dialogs.buttons.cancel, dialogs.buttons.submit));\n        html = html.replace(\"{{ok}}\", this.labels.ok).replace(\"{{cancel}}\", this.labels.cancel);\n        break;\n    case \"alert\":\n        html = html.replace(\"{{buttons}}\", dialogs.buttons.ok);\n        html = html.replace(\"{{ok}}\", this.labels.ok);\n        break;\n    default:\n        break;\n    }\n    </templateReplacement>\n\n    elDialog.className = \"alertify alertify-\" + type + \" \" + css;\n    elCover.className = \"alertify-cover\";\n    return html;\n}\n"], ["generateMarkdownFromPath", "\nfunction flux(path) {\n    return function (done) {\n        fs.createReadStream(resolve(__dirname, path))\n            .pipe(docflux())\n            .pipe(docflux.markdown({depth: DEPTH, indent: INDENT}))\n            .pipe(concat(function (data) {\n                done(null, data.toString())\n            }))\n    }\n}\n"], ["resolveDocumentAndPresentModal", "\nfunction presentModal(modal) {\n    let doc = modal; \n\n    <determineModalType>\n    if (_.isString(modal)) { \n        doc = Parser.dom(modal);\n    } else if (_.isPlainObject(modal)) { \n        doc = Page.makeDom(modal);\n    }\n    </determineModalType>\n\n    navigationDocument.presentModal(doc);\n    modalDoc = doc;\n    return doc;\n}\n"], ["parseContinuationToken", "\nfunction (token) {\n    if (token === undefined || token === null) {\n        return {\n            nextPartitionKey: undefined,\n            nextRowKey: undefined,\n        };\n    }\n\n    <validateTokenFormat>\n    assert(typeof token === 'string', 'Continuation token must be a string if ' +\n        'not undefined');\n\n    token = token.split('~');\n    assert(token.length === 2, 'Expected an encoded continuation token with ' +\n        'a single tilde as separator');\n    </validateTokenFormat>\n\n    return {\n        nextPartitionKey: decodeURIComponent(token[0]),\n        nextRowKey: decodeURIComponent(token[1]),\n    };\n}\n"], ["toSourceConversion", "\nfunction toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString$2.call(func);\n        } catch (e) {}\n        try {\n            return (func + '');\n        } catch (e) {}\n    }\n    return '';\n}\n"], ["sendHTTPRequest", "\nfunction request(method, params, callback) {\n\n    <configureHeadersAndOptions>\n    var headers = {\n        Accept: 'application/vnd.layer+json; version=' + this.version,\n        Authorization: 'Bearer ' + this.token\n    };\n\n    if (method === 'patch') headers['Content-Type'] = 'application/vnd.layer-patch+json';\n    else headers['Content-Type'] = 'application/json';\n\n    if (params.dedupe) headers['If-None-Match'] = params.dedupe;\n\n    var options = {\n        host: API.host,\n        port: API.port,\n        path: API.prefix + this.appId + params.path,\n        method: method.toUpperCase(),\n        headers: headers\n    }\n\n    if (this.agent) options.agent = this.agent;\n    </configureHeadersAndOptions>\n\n    var req = https.request(options);\n\n    req.setTimeout(this.timeout, timeout.bind(this, req, callback));\n    req.on('error', error.bind(this, req, callback));\n    req.on('response', response.bind(this, callback));\n\n    <writeRequestData>\n    req.on('socket', function (socket) {\n        var write = function () {\n            if (params.body) req.write(JSON.stringify(params.body));\n            req.end();\n        }\n\n        if (socket.authorized) write();\n        else socket.on('secureConnect', function () { write(); })\n    });\n    </writeRequestData>\n}\n"], ["convertCharactersToPinyin", "\nfunction (str, polyphone) {\n    polyphone = polyphone == undefined ? false : polyphone;\n    if (!str || /^ +$/g.test(str)) return '';\n\n    <handleStringConversion>\n    if (dict.firstletter) {\n        var result = [];\n        for (var i = 0; i < str.length; i++) {\n            var unicode = str.charCodeAt(i);\n            var ch = str.charAt(i);\n            if (unicode >= 19968 && unicode <= 40869) {\n                ch = dict.firstletter.all.charAt(unicode - 19968);\n                if (polyphone) ch = dict.firstletter.polyphone[unicode] || ch;\n            }\n            result.push(ch);\n        }\n        if (!polyphone) return result.join('');\n        else return handlePolyphone(result, '', '');\n    } else {\n        var py = this.getPinyin(str, ' ', false, polyphone);\n        py = py instanceof Array ? py : [py];\n        var result = [];\n        for (var i = 0; i < py.length; i++) {\n            result.push(py[i].replace(/(^| )(\\w)\\w*/g, function (m, $1, $2) { return $2.toUpperCase(); }));\n        }\n        if (!polyphone) return result[0];\n        else return simpleUnique(result);\n    }\n    </handleStringConversion>\n}\n"], ["checkEmailProtocol", "\nfunction checkEmail(msg, node) {\n\n    <determineProtocolAndCheck>\n    if (node.protocol === 'POP3') {\n        checkPOP3(msg);\n    } else if (node.protocol === 'IMAP') {\n        console.log('Inside checkEmail');\n        imap = new Imap({\n            user: node.userid,\n            password: node.password,\n            host: node.server,\n            port: node.port,\n            tls: node.useSSL,\n            tlsOptions: { rejectUnauthorized: false },\n            connTimeout: (node.repeat - 10),\n            authTimeout: (node.repeat - 10),\n        });\n\n        imap.on('error', function (err) {\n            if (err.errno !== 'ECONNRESET') {\n                node.log(err);\n                node.status({ fill: 'red', shape: 'ring', text: 'email.status.connecterror' });\n            }\n        });\n\n        checkIMAP(msg, node.attachment);\n    }\n    </determineProtocolAndCheck>\n}\n"], ["calculateMaximumZIndex", "\nfunction (target) {\n    var elem = $(target);\n    var maxValue = 0;\n\n    <findMaxZIndexInDOMTree>\n    var position, value;\n    while (elem.length && elem[0] !== document) {\n        position = elem.css(\"position\");\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n            value = parseInt(elem.css(\"zIndex\"), 10);\n            if (!isNaN(value) && value !== 0) {\n                if (value > maxValue) { maxValue = value; }\n            }\n        }\n        elem = elem.parent();\n    }\n    </findMaxZIndexInDOMTree>\n\n    return maxValue;\n}\n"], ["resolveHierarchyFromRecords", "\nfunction resolveHierarchy(wofRecords, hierarchy) {\n\n    <transformHierarchyToResolvedRecords>\n    return Object.keys(hierarchy).map(function (key) {\n        return wofRecords[hierarchy[key]];\n    }).filter(isDefined).filter(hasName);\n    </transformHierarchyToResolvedRecords>\n}\n"], "```"]