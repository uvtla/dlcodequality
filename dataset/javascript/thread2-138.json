[["decode", "\nfunction decode(encoded, stack) {\n    if (!stack) stack = [];\n\n    <handleUndefinedNullBooleanNumberString>\n    if (encoded === undefined) return undefined;\n    if (encoded === null) return null;\n    var type = typeof(encoded);\n    if (type === 'boolean') return encoded;\n    if (type === 'number') return encoded;\n    if (type === 'string') return encoded;\n    </handleUndefinedNullBooleanNumberString>\n\n    <handleObjectType>\n    if (type === 'object') {\n\n      <handleSpecialObjects>\n      if (isBufferOrView(encoded)) return encoded;\n      if (encoded instanceof Date) return encoded;\n      if (encoded instanceof RegExp) return encoded;\n      </handleSpecialObjects>\n\n      <handleEncodedErrors>\n      if (encoded[\"!$error$!\"] != null) {\n        return new RemoteError(encoded[\"!$error$!\"]);\n      }\n      </handleEncodedErrors>\n\n      <handleEncodedFunctions>\n      if (encoded[\"!$function$!\"] != null) {\n        return eval('(' + encoded[\"!$function$!\"] + ')');\n      }\n      </handleEncodedFunctions>\n\n      <handleEncodedNative>\n      if (encoded[\"!$native$!\"] != null) {\n        return receiveNative(encoded[\"!$native$!\"]);\n      }\n      </handleEncodedNative>\n\n      <handleEncodedProxy>\n      if (encoded[\"!$proxyId$!\"] != null) {\n        return getProxy(encoded[\"!$proxyId$!\"]);\n      }\n      </handleEncodedProxy>\n\n      <handleStandardDecode>\n      return copy(encoded, encoded, stack, decode);\n      </handleStandardDecode>\n    }\n    </handleObjectType>\n\n    throw new TypeError(\"Error decoding \" + type + \": \" + JSON.stringify(encoded));\n}\n"], ["addDirective", "\nfunction addDirective(tDirectives, name, location, maxPriority) {\n  var match = false;\n  if (hasDirectives.hasOwnProperty(name)) {\n    for(var directive, directives = $injector.get(name + Suffix),\n        i = 0, ii = directives.length; i<ii; i++) {\n      <tryAddDirective>\n      try {\n        directive = directives[i];\n        if ( (maxPriority === undefined || maxPriority > directive.priority) &&\n             directive.restrict.indexOf(location) != -1) {\n          tDirectives.push(directive);\n          match = true;\n        }\n      } catch(e) { $exceptionHandler(e); }\n      </tryAddDirective>\n    }\n  }\n  return match;\n}\n"], ["pickup", "\nfunction pickup () {\n    var str = '', pos;\n    var len, dict;\n\n    <handleArguments>\n    if (arguments.length === 1) {\n        dict = arguments[0];\n        len = 1;\n    } else if (arguments.length === 2) {\n        len = arguments[0];\n        dict = arguments[1];\n    } else {\n        return string();\n    }\n    </handleArguments>\n\n    <generateRandomString>\n    for (var i=0; i< len; i++) {\n        pos = dice(dict.length - 1);\n        str += dict.substring(pos, pos + 1);\n    }\n    </generateRandomString>\n\n    return str;\n}\n"], ["classify", "\nfunction classify (s) {\n    const keys = {\n        ak: 'account_pubkey',\n        ok: 'oracle_pubkey'\n    }\n\n    <validateAndClassifyHash>\n    if (!s.match(/^[a-z]{2}_.+/)) {\n        throw Error('Not a valid hash')\n    }\n    const klass = s.substr(0, 2)\n    if (klass in keys) {\n        return keys[klass]\n    } else {\n        throw Error(`Unknown class ${klass}`)\n    }\n    </validateAndClassifyHash>\n}\n"], ["pathFilter", "\nfunction pathFilter(filter){\n    if (isFunction(filter)) {\n        return filter;\n    } else if (isString(filter)) {\n        return function (entryInfo) {\n            return minimatch(entryInfo.path, filter.trim());\n        };\n    } else if (filter && Array.isArray(filter)) {\n        if (filter) filter = filter.map(function (f) {\n            return f.trim();\n        });\n\n        <returnFilterCondition>\n        return allNegated(filter) ?\n            function (entryInfo) {\n                return filter.every(function (f) {\n                    return minimatch(entryInfo.path, f);\n                });\n            }\n            :\n            function (entryInfo) {\n                return filter.some(function (f) {\n                    return minimatch(entryInfo.path, f);\n                });\n            };\n        </returnFilterCondition>\n    }\n}\n"], ["anonymousFunction", "\nfunction() {\n    if (this.peek() != '[') {\n        return 0;\n    }\n    var startpos = this.pos;\n    var nest_level = 0;\n    if (this.label_nest_level > 0) {\n        <handleLabelNesting>\n        this.label_nest_level--;\n        return 0;\n        </handleLabelNesting>\n    }\n    this.pos++;  \n    var c;\n    <parseLinkLabel>\n    while ((c = this.peek()) && (c != ']' || nest_level > 0)) {\n        switch (c) {\n            case '`':\n                this.parseBackticks([]);\n                break;\n            case '<':\n                this.parseAutolink([]) || this.parseHtmlTag([]) || this.parseString([]);\n                break;\n            case '[':  \n                nest_level++;\n                this.pos++;\n                break;\n            case ']':  \n                nest_level--;\n                this.pos++;\n                break;\n            case '\\\\':\n                this.parseEscaped([]);\n                break;\n            default:\n                this.parseString([]);\n        }\n    }\n    if (c === ']') {\n        this.label_nest_level = 0;\n        this.pos++; \n        return this.pos - startpos;\n    } else {\n        if (!c) {\n            this.label_nest_level = nest_level;\n        }\n        this.pos = startpos;\n        return 0;\n    }\n    </parseLinkLabel>\n}\n"], ["bindEventListeners", "\nfunction bindEventListeners(instanceData) {\n    var eventDelegates = instanceData.eventDelegates,\n        moduleBehaviors = getBehaviors(instanceData);\n\n    <createMainEventDelegate>\n    createAndBindEventDelegate(eventDelegates, instanceData.element, instanceData.instance);\n    </createMainEventDelegate>\n\n    <bindEventToModuleBehaviors>\n    for (var i = 0; i < moduleBehaviors.length; i++) {\n        createAndBindEventDelegate(eventDelegates, instanceData.element, moduleBehaviors[i]);\n    }\n    </bindEventToModuleBehaviors>\n}\n"], ["encodeHeader", "\nfunction encodeHeader(doc, result) {\n    doc.startElement('header').writeAttribute('xsi:type', 'n2:APIResponseHeader');\n\n    <writeErrorCode>\n    doc.startElement('errorCode').writeAttribute('xsi:type', 'n2:APIErrorEnum');\n    doc.text(result.header.errorCode);\n    doc.endElement();\n    </writeErrorCode>\n\n    <writeMinorErrorCode>\n    doc.startElement('minorErrorCode').writeAttribute('xsi:null', '1');\n    doc.endElement();\n    </writeMinorErrorCode>\n\n    <writeSessionToken>\n    doc.startElement('sessionToken').writeAttribute('xsi:type', 'xsd:string');\n    doc.text(result.header.sessionToken);\n    doc.endElement();\n    </writeSessionToken>\n\n    <writeTimestamp>\n    doc.startElement('timestamp').writeAttribute('xsi:type', 'xsd:dateTime');\n    doc.text(result.header.timestamp.toISOString());\n    doc.endElement();\n    </writeTimestamp>\n\n    doc.endElement(); \n    return;\n}\n"], ["mergeOptions", "\nfunction mergeOptions(pluginOptions) {\n    <setDefaultOptions>\n    const defaultOptions = {\n        config: null,\n        debug: false,\n        css: {\n            file_types: ['.css', '.less', '.sass', '.scss'],\n        },\n        html: {\n            file_types: ['.html'],\n        },\n        js: {\n            file_types: ['.js', '.json'],\n        },\n    };\n    </setDefaultOptions>\n\n    <loadConfigurationFiles>\n    const explorer = cosmiconfig('jsbeautify');\n    let explorerResult;\n    if (pluginOptions && pluginOptions.config) {\n        explorerResult = explorer.loadSync(path.resolve(pluginOptions.config));\n    } else {\n        explorerResult = explorer.searchSync();\n    }\n    let fileOptions;\n    if (explorerResult) {\n        fileOptions = explorerResult.config;\n    }\n    </loadConfigurationFiles>\n\n    <mergeOptionsWithDefaults>\n    const finalOptions = mergeWith({}, defaultOptions, fileOptions, pluginOptions, (objValue, srcValue) => {\n        if (Array.isArray(objValue)) {\n            return objValue.concat(srcValue);\n        }\n        return undefined;\n    });\n    </mergeOptionsWithDefaults>\n\n    <handleDebugLogging>\n    if (finalOptions.debug) {\n        if (fileOptions) {\n            log(`File options:\\n${JSON.stringify(fileOptions, null, 2)}`);\n        }\n        log(`Final options:\\n${JSON.stringify(finalOptions, null, 2)}`);\n    }\n    </handleDebugLogging>\n\n    <cleanupOptions>\n    delete finalOptions.config;\n    delete finalOptions.debug;\n    </cleanupOptions>\n\n    return finalOptions;\n}\n"], ["Menu", "\nfunction Menu(funct, enabled)\n{\n    <initializeEventSource>\n    mxEventSource.call(this);\n    </initializeEventSource>\n\n    this.funct = funct;\n    this.enabled = (enabled != null) ? enabled : true;\n}\n"], ""]