[["getUserProfile", "\nfunction getUserProfile(callback) {\n    <checkCallback>\n    if (_.isUndefined(callback)) { \n    } else { </checkCallback>\n      <buildRequestUrl>\n      var u = baseUrl + \"/me\"; </buildRequestUrl>\n      <retrieveAndValidateAuthToken>\n      var tokenData = this.getAuthToken();\n      if (tokenData.type != \"bearer\") {\n        throw new Error(\"Invalid token type. Must use a token of type bearer.\");\n      } </retrieveAndValidateAuthToken>\n      return <performApiRequest>helper.get(tokenData, u, callback);</performApiRequest>\n    }\n}\n"], ["getMinimumLastModifiedTime", "\nfunction() {\n    return Q.all(this.tech\n        .getPaths(PATH.resolve(this.root, this.output), this.tech.getBuildSuffixes())\n        .map(function(path) {\n            return QFS.lastModified(path)\n                .fail(function() {\n                    return -1;\n                });  \n        }))\n        .spread(Math.min);\n}\n"], ["removeViewFromIndexes", "\nfunction(view){\n  <removeFromModelIndex>\n  var viewCid = view.cid;  \n  if (view.model){\n    delete this._indexByModel[view.model.cid];\n  } </removeFromModelIndex>\n  \n  <removeFromCustomIndex>\n  _.any(this._indexByCustom, function(cid, key) {\n    if (cid === viewCid) {\n      delete this._indexByCustom[key];\n      return true;\n    }\n  }, this); </removeFromCustomIndex>\n  \n  <removeFromViews>\n  delete this._views[viewCid]; </removeFromViews>\n  \n  <updateCollectionLength>this._updateLength();</updateCollectionLength>\n}\n"], ["parseStatusLine", "\nfunction (line) {\n  var pieces = line.split(' ')\n  var output = {\n    version: pieces.shift(),\n    status: parseFloat(pieces.shift()),\n    statusText: pieces.join(' ')\n  }\n  return output\n}\n"], ["makeConstructor", "\nfunction makeConstructor(name, defaults) {\n  <assertParameterTypes>\n  assert.string(name, 'name');\n  assert.optionalObject(defaults, 'defaults'); </assertParameterTypes>\n\n  <prepareDefaultCodes>\n  var defaultCode = name.replace(new RegExp('[Ee]rror$'), '');\n  var prototypeDefaults = _.assign({}, {\n      name: name,\n      code: (defaults && defaults.code) || defaultCode,\n      restCode: _.get(defaults, 'restCode', defaultCode)\n  }, defaults); </prepareDefaultCodes>\n\n  <checkIfConstructorExists>\n  assert.equal(\n      typeof module.exports[name],\n      'undefined',\n      'Constructor already exists!'\n  ); </checkIfConstructorExists>\n\n  <createErrorConstructor>\n  var ErrCtor = function() { \n      \n      RestError.apply(this, arguments);\n      this.name = name;\n  };\n  util.inherits(ErrCtor, RestError); </createErrorConstructor>\n  \n  <augmentErrorConstructorPrototype>\n  _.assign(ErrCtor.prototype, prototypeDefaults); </augmentErrorConstructorPrototype>\n\n  <setDisplayName>\n  ErrCtor.displayName = name; </setDisplayName>\n\n  return ErrCtor;\n}\n"], ["getLastSeen", "\nfunction getLastSeen(params, config, conn) {\n  <prepareDefaultConfigAndParams>\n  config = config || require('../config/config.js')\n  params = params || {}\n  params.webid = params.webid || 'http://example.com' </prepareDefaultConfigAndParams>\n\n  return new Promise((resolve, reject) => {\n    <establishDatabaseConnection>\n    if (!conn) {\n      var conn = wc_db.getConnection(config.db)\n    } </establishDatabaseConnection>\n\n    <executeFragmentQuery>\n    var sql = \"...\"; \n    var fragLastSeen;\n    var mediaLastSeen;\n    var val;\n    debug('getLastSeen', sql, params);\n    conn.query(sql, { replacements: { \"webid\" : params.webid } }).then(function(frag){ ... }) </executeFragmentQuery>\n    \n    .then(function(media) {\n      ... \n      if (mediaLastSeen > fragLastSeen) { \n        ...\n      } else {\n        ...\n      }\n    })\n    .catch(function(err) {\n      return <handleQueryError>reject({\"err\" : err, \"conn\" : conn})</handleQueryError>\n    });\n  });\n}\n"], ["cleanAndRenameValue", "\nfunction renameValue(item, rawName) {\n  ...\n  return trimmedName;\n}\n"], ["query", "\nfunction query(params, callback) {\n  <prepareArguments>\n  const args = utils.getArgs(params, [config], callback); </prepareArguments>\n  <buildUrl>\n  const url = `http://example.com`; </buildUrl>\n\n  return <executeHttpRequest>request.get({\n    ...\n  }, function(err, res, body) {\n    if (err) {\n      return args.callback(err);\n    }\n    return args.callback(null, body);\n  });</executeHttpRequest>\n}\n"], ["createRadioElements", "\nfunction radio(bind, el, param, value) {\n  ...\n  bind.set = function(value) { ... };\n}\n"], ["findAndRenamePartials", "\nfunction findPartials(source, source_path, options, deps) {\n  ...\n  while ((result = reg.exec(source)) !== null) {\n    ...\n    <registerPartial>\n    name = addDustDependency(partial.name, source_path, options, deps);\n    dep = deps[deps.length - 1];\n    log(options, 'found partial dependency \"' + partial.name + '\"'); </registerPartial>\n    \n    <renameAndReplacePartial>\n    if (name != partial.name) {\n      ...\n      source = source.substring(0, result.index) + ... + source.substring(result.index + result[0].length);\n      reg.lastIndex += ...;\n    } </renameAndReplacePartial>\n  }\n\n  return source;\n}\n"], "```"]