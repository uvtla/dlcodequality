[["tick", "\nfunction tick() {\n  <calculatePositions>\n  var moment = (new Date().getTime() - startDate)/1000;\n  x = Math.round(150 * Math.sin(moment));\n  y = Math.round(150 * Math.cos(moment));\n  </calculatePositions>\n  <requestNextFrame>\n  requestAnimationFrame(tick);\n  </requestNextFrame>\n}\n"], ["propIsRequired", "\nfunction propIsRequired (prop) {\n  const propRequiredNode = prop.value.properties\n    .find(p =>\n      p.type === 'Property' &&\n      p.key.name === 'required' &&\n      p.value.type === 'Literal' &&\n      p.value.value === true\n    )\n  return Boolean(propRequiredNode)\n}\n"], ["anonymousFunctionWithEventBindings", "\nfunction() {\n  var self = this;\n\n  <bindSelectAllEventHandler>\n  this.$main.on('click.bizTableSelectAll', '.biz-table-head .select-col .biz-label', function(e) {\n      if ($(this).hasClass('biz-checkbox-unchecked-disabled')) {\n          return;\n      }\n\n      var selected = $(this).hasClass('biz-checkbox-checked'),\n          checkbox = self.$tableBody.find('.select-col :checkbox').filter(':not(:disabled)'),\n          tr = self.$tableBody.find('tr[class!=\"sum\"]').filter('[class!=\"select-disabled\"]');\n\n      if (selected) {\n          checkbox.bizCheckbox('check');\n          tr.addClass('selected');\n      } else {\n          checkbox.bizCheckbox('uncheck');\n          tr.removeClass('selected');\n      }\n\n      if (self.options.onSelect) {\n          self.options.onSelect.call(self, self.getSelected(), e);\n      }\n  })\n  </bindSelectAllEventHandler>\n\n  <bindSelectOneEventHandler>\n  .on('click.bizTableSelectOne', '.biz-table-body .select-col .biz-label', function(e) {\n      if ($(this).hasClass('biz-checkbox-unchecked-disabled')) {\n          return;\n      }\n\n      var selected = $(this).hasClass('biz-checkbox-checked'),\n          tr = $(this).parent().parent();\n      if (selected) {\n          tr.addClass('selected');\n      } else {\n          tr.removeClass('selected');\n      }\n\n      var selectedCount = self.$tableBody.find('.select-col .biz-checkbox-checked').length,\n          checkboxCount = self.$tableBody.find('.select-col :checkbox').filter(':not(:disabled)').length,\n          selectAll = self.$tableHead.find('.select-col :checkbox');\n      if (selectedCount === checkboxCount) {\n          selectAll.bizCheckbox('check');\n      } else {\n          selectAll.bizCheckbox('uncheck');\n      }\n\n      if (self.options.onSelect) {\n          self.options.onSelect.call(self, self.getSelected(), e);\n      }\n  });\n  </bindSelectOneEventHandler>\n\n}\n"], ["findAuthAndExecCallback", "\nfunction(criteria, cb){\n  var self = this;\n  <findAndPopulateAuth>\n  waterlock.Auth.findOne(criteria).populate('user')\n  .exec(function(err, auth){\n    <invertAuthAndExecuteCB>\n    cb(err, self._invertAuth(auth));\n    </invertAuthAndExecuteCB>\n  });\n  </findAndPopulateAuth>\n}\n"], ["benchBatch", "\nfunction benchBatch(targets, cb, idx) {\n  idx |= 0;\n  if (targets.length == 0) return cb(idx);\n\n  <iterateAndBenchmarkTargets>\n  var target = targets.shift();\n  process.stdout.write(util.format('[%s] ', idx+1));\n  try {\n    main.bench(target.name, target.func);\n    idx++;\n  } catch (err) {\n    console.log('%s failed!', target.name);\n  }\n  </iterateAndBenchmarkTargets>\n\n  <checkCompletionAndContinue>\n  if (targets.length == 0) return cb(idx);\n  \n  setTimeout(function() {\n    benchBatch(targets, cb, idx); \n  }, 10000);\n  </checkCompletionAndContinue>\n}\n"], ["writeFabricServiceGradleHook", "\nfunction writeFabricServiceGradleHook(config) {\n  console.log(\"Install Fabric-build-gradle hook.\");\n  <createDirectoriesAndWriteScripts>\n  try {\n    if (!fs.existsSync(path.join(appRoot, \"hooks\"))) {\n        fs.mkdirSync(path.join(appRoot, \"hooks\"));\n    }\n    if (!fs.existsSync(path.join(appRoot, \"hooks\", \"after-prepare\"))) {\n        fs.mkdirSync(path.join(appRoot, \"hooks\", \"after-prepare\"));\n    }\n    var scriptContent = `...`;\n    console.log(\"Writing 'nativescript-fabric-gradle.js' to \" + appRoot + \"hooks/after-prepare\");\n    var scriptPath = path.join(appRoot, \"hooks\", \"after-prepare\", \"nativescript-fabric-gradle.js\");\n    fs.writeFileSync(scriptPath, scriptContent);\n  } catch (e) {\n    console.log(\"Failed to install nativescript-fabric-gradle hook.\");\n    console.log(e);\n    throw e;\n  }\n  </createDirectoriesAndWriteScripts>\n}\n"], ["equals", "\nfunction equals(first, second){\n  <compareValues>\n\t\tif (first === second)\n\t\t\treturn true;\n\t\t\t\n\t\t\n\t\tif (first == second)\n\t\t\treturn true;\n\t\t\t\n\t\t\n\t\tif (typeof first != typeof second)\n\t\t\treturn false;\n\t\t\t\n\t\t\n\t\tif (typeof first != \"object\")\n\t\t\treturn first == second;\n  </compareValues>\n\t\t\t\n  <compareObjects>\n\t\tfor (var current in first){\n\t\t\tvar firstValue = first[current];\n\t\t\tvar secondValue = second[current];\n\t\t\tvar isEqual = (typeof firstValue === 'object') ? equals(firstValue, secondValue) : firstValue == secondValue;\n\t\t\tif (!isEqual)\n\t\t\t\treturn false;\n\t\t}\n  </compareObjects>\n\n  <finalTrue>\n\t\treturn true;\n  </finalTrue>\n}\n"], ["updateLastMousePositionAndSendEvent", "\nfunction (position, callback) {\n  <updatePosition>\n  var lastPosition = this._lastMousePosition;\n  lastPosition.x = position.x;\n  lastPosition.y = position.y;\n  </updatePosition>\n  <sendEvent>\n  this._sendEvent('mousemove', position.x, position.y);\n  </sendEvent>\n  <executeCallback>\n  this._callCallback(callback);\n  </executeCallback>\n}\n"], ["validateGreaterThan", "\nfunction( value, comparator ) {\n  <validateAndCreateError>\n  var error;\n  if ( value <= parseFloat( comparator ) ) {\n    error = {\n      \"rule\": \"greater_than\",\n      \"message\": \"ERROR:provided value [\" + value + \"] is not greater than \" + parseFloat( comparator )\n    };\n    return [ error ];\n  }\n  </validateAndCreateError>\n  <noErrors>\n  return;\n  </noErrors>\n}\n"], ["switchActiveTab", "\nfunction( contentItem ) {\n  <checkActiveTabAndUpdate>\n  var i, j, isActive, activeTab;\n\n  if (this.activeContentItem === contentItem) return;\n  \n  for( i = 0; i < this.tabs.length; i++ ) {\n    isActive = this.tabs[ i ].contentItem === contentItem;\n    this.tabs[ i ].setActive( isActive );\n    if( isActive === true ) {\n      this.activeContentItem = contentItem;\n      this.parent.config.activeItemIndex = i;\n    }\n  }\n  </checkActiveTabAndUpdate>\n\n  <reorderAndUpdateTabs>\n  if (this.layoutManager.config.settings.reorderOnTabMenuClick) {\n    if (this._lastVisibleTabIndex !== -1 && this.parent.config.activeItemIndex > this._lastVisibleTabIndex) {\n      activeTab = this.tabs[this.parent.config.activeItemIndex];\n      for ( j = this.parent.config.activeItemIndex; j > 0; j-- ) {\n        this.tabs[j] = this.tabs[j - 1];\n      }\n      this.tabs[0] = activeTab;\n      this.parent.config.activeItemIndex = 0;\n    }\n  }\n  </reorderAndUpdateTabs>\n\n  <updateState>\n  this._updateTabSizes();\n  this.parent.emitBubblingEvent( 'stateChanged' );\n  </updateState>\n}\n"], "```"]