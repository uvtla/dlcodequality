[["setEventExtender", "\nfunction (fn) {\n    <validateFunction>\n    if (!fn || !_.isFunction(fn)) {\n      var err = new Error('Please pass a valid function!');\n      debug(err);\n      throw err;\n    }\n    </validateFunction>\n\n    <assignExtenderFunction>\n    if (fn.length === 2) {\n      this.getNewIdForThisEventExtender = fn;\n      return this;\n    }\n\n    this.getNewIdForThisEventExtender = function (evt, callback) {\n      callback(null, fn(evt));\n    };\n    </assignExtenderFunction>\n\n    return this;\n}\n"], ["ResizeConstructor", "\nfunction Resize($rootScope, scope, element, options) {\n    <initializeProperties>\n    rootScope = $rootScope;\n        \n    this.id = nextUid();\n    this.name = this.id;\n    this.scope = scope;\n    this.timeStamp = 0;\n    \n    this.element = element; \n    \n    this.DOMelement = null;\n    if (typeof(element) == 'object') {\n        this.DOMelement = element[0];\n    } else {\n        this.DOMelement = document.getElementById(element);\n    }\n    \n    this.options = {\n        callApply: false \n    };\n\n    this.nodeList = [];\n    this.nodeIndex = {};\n    this.cssKeys = [];\n    this.scopeVars = [];\n    </initializeProperties>\n\n    <processOptions>\n    for (var optKey in options) {\n        if (!options.hasOwnProperty(optKey)) continue;\n        this.options[optKey] = options[optKey];\n        if (optKey == 'name') {\n            this.name = options[optKey];\n        }\n    }\n    </processOptions>\n\n    <addResizeEventHandlers>\n    var self = this;\n    addResizeListener(this);\n    this.element.bind('$destroy', function () {\n        self.destroy();\n    });\n    </addResizeEventHandlers>\n\n    <initializeOrientationChangeHandler>\n    if (!orientationChangeHandlerStarted) {\n        window.addEventListener(fidj.BrowserCapabilities.RESIZE_EVENT, Resize.handleDocOrientationChange, false);\n        orientationChangeHandlerStarted = true;\n        window.setTimeout(function () {\n            a4p.safeApply($rootScope, function () {\n                Resize.handleDocOrientationChange();\n            });\n        }, 200);\n    }\n    </initializeOrientationChangeHandler>\n}\n"], ["configureExecutor", "\nfunction configureExecutor(executor) {\n  <defineExecutorCommands>\n  executor.defineCommand(\n      Command.LAUNCH_APP,\n      'POST',\n      '/session/:sessionId/chromium/launch_app');\n  executor.defineCommand(\n      Command.GET_NETWORK_CONDITIONS,\n      'GET',\n      '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(\n      Command.SET_NETWORK_CONDITIONS,\n      'POST',\n      '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(\n      Command.SEND_DEVTOOLS_COMMAND,\n      'POST',\n      '/session/:sessionId/chromium/send_command');\n  </defineExecutorCommands>\n}\n"], ["typeOfFunction", "\nfunction typeOf (value) {\n  <determineValueType>\n  var type = {\n    hasValue: false,\n    isArray: false,\n    isPOJO: false,\n    isNumber: false,\n  };\n\n  if (value !== undefined && value !== null) {\n    type.hasValue = true;\n    var typeName = typeof value;\n\n    if (typeName === 'number') {\n      type.isNumber = !isNaN(value);\n    }\n    else if (Array.isArray(value)) {\n      type.isArray = true;\n    }\n    else {\n      type.isPOJO =\n        (typeName === 'object') &&\n        !(value instanceof RegExp) &&\n        !(value instanceof Date);\n    }\n  }\n  </determineValueType>\n\n  return type;\n}\n"], ["clearStringBackwards", "\nfunction clearStringBackwards(stream: tty.WriteStream, str: string): void {\n  <clearPreviousOutput>\n  readline.moveCursor(stream, -stream.columns, 0);\n  readline.clearLine(stream, 0);\n  </clearPreviousOutput>\n  \n  <handleMultilineClearing>\n  let lineCount = (str.match(/\\n/g) || []).length;\n  while (lineCount > 0) {\n    readline.moveCursor(stream, 0, -1);\n    readline.clearLine(stream, 0);\n    --lineCount;\n  }\n  </handleMultilineClearing>\n}\n"], ["getDomain", "\nfunction getDomain(data, accessor) {\n    <mapAndFilterData>\n    return data\n      .map(function (item) {\n        return accessor.call(this, item);\n      })\n      .filter(function (item, index, array) {\n        return array.indexOf(item) === index;\n      });\n    </mapAndFilterData>\n}\n"], ["createStack", "\nfunction createStack(app, plugins) {\n  <initializeStackWithMinimalConfig>\n  if (app.enabled('minimal config')) {\n    return es.pipe.apply(es, []);\n  }\n  </initializeStackWithMinimalConfig>\n\n  <addToStackBasedOnPlugins>\n  function enabled(acc, plugin, name) {\n    if (plugin == null) {\n      acc.push(through.obj());\n    }\n    if (app.enabled(name + ' plugin')) {\n      acc.push(plugin);\n    }\n    return acc;\n  }\n  var arr = _.reduce(plugins, enabled, []);\n  </addToStackBasedOnPlugins>\n\n  return es.pipe.apply(es, arr);\n}\n"], ["configureDefaultMode", "\nfunction configureDefaultMode (outputFolder) {\n  <setupLogging>\n  const logfile = path.join(outputFolder, 'thumbsup.log')\n  const stream = fs.createWriteStream(logfile, { flags: 'a' })\n  overrideDebugFormat()\n  debug.enable('thumbsup:error,thumbsup:warn')\n  debug.useColors = () => false\n  debug.log = function () {\n    const line = util.format.apply(util, arguments) + '\\n'\n    stream.write(line)\n  }\n  </setupLogging>\n}\n"], ["checkMapLayersChanged", "\nfunction() {\n    <compareLayerStates>\n    if ( !this.layerStates.length ||\n         (this.map.layers.length != this.layerStates.length) ) {\n        return true;\n    }\n\n    for (var i = 0, len = this.layerStates.length; i < len; i++) {\n        var layerState = this.layerStates[i];\n        var layer = this.map.layers[i];\n        if ( (layerState.name != layer.name) ||\n             (layerState.inRange != layer.inRange) ||\n             (layerState.id != layer.id) ||\n             (layerState.visibility != layer.visibility) ) {\n            return true;\n        }\n    }\n    </compareLayerStates>\n\n    return false;\n}\n"], ["amf3decInteger", "\nfunction amf3decInteger(buf) { \n    <decodeUI29>\n    var resp = amf3decUI29(buf);\n    </decodeUI29>\n    <convertToInteger>\n    if (resp.value > 0x0FFFFFFF) resp.value = (resp.value & 0x0FFFFFFF) - 0x10000000;\n    </convertToInteger>\n    return resp;\n}\n"], "```"]