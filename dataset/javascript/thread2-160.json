[["saveBase64Strings", "\nfunction saveBase64Strings(dbPath, list, save) {\n  return bluebird.all(_.map(list, function (item, itemName) {\n    return save(dbPath + buf.encode(itemName), item);\n  }));\n}\n"], ["validateNode", "\nfunction validateNode(opts: Options) {\n    <validationSetup>\n    const isRow = node => node.type === opts.typeRow; \n    const isCell = node => node.type === opts.typeCell;\n    const countCells = row => row.nodes.count(isCell);\n    </validationSetup>\n\n    <nodeValidation>\n    return node => {\n        if (node.type !== opts.typeTable) {\n            return undefined;\n        }\n\n        const rows = node.nodes.filter(isRow);\n        const maxColumns = Math.max(\n            1,\n            rows.map(countCells).max()\n        );\n        const rowsMissingColumns = rows.filter(\n            row => countCells(row) < maxColumns\n        );\n\n        if (rowsMissingColumns.isEmpty()) {\n            return undefined;\n        }\n\n        return change => {\n            rowsMissingColumns.forEach(row => {\n                const numberOfCellsToAdd = maxColumns - row.nodes.size;\n                const cells = Array.from({ length: numberOfCellsToAdd }).map(\n                    () => createCell(opts)\n                );\n                cells.forEach(cell =>\n                    change.insertNodeByKey(row.key, row.nodes.size, cell, {\n                        normalize: false\n                    })\n                );\n            });\n        };\n    };\n    </nodeValidation>\n}\n"], ["SortableTable", "\nfunction SortableTable(oTable, oSortTypes) {\n  <initialization>\n  this.sortTypes = oSortTypes || [];\n  this.sortColumn = null;\n  this.descending = null;\n  var oThis = this;\n  this._headerOnclick = function (e) {\n    oThis.headerOnclick(e);\n  };\n  if (oTable) {\n    this.setTable(oTable);\n    this.document = oTable.ownerDocument || oTable.document;\n  }\n  else {\n    this.document = document;\n  }\n  </initialization>\n\n  <eventSetup>\n  var win = this.document.defaultView || this.document.parentWindow;\n  this._onunload = function () {\n    oThis.destroy();\n  };\n  if (win && typeof win.attachEvent != \"undefined\") {\n    win.attachEvent(\"onunload\", this._onunload);\n  }\n  </eventSetup>\n}\n"], ["getSites", "\nfunction getSites(data) {\n  <handleMobileSitesFallback>\n  if (!data['mobileSites'].length) {\n    data['mobileSites'] = data['sites'];\n  }\n  </handleMobileSitesFallback>\n\n  <initialSiteProcessing>\n  var sites = (isMobileScreen ? data['mobileSites'] : data['sites']).slice(0);\n  var disabled = data['disabled'];\n  if (typeof sites == 'string') {\n    sites = sites.split(/\\s*,\\s*/);\n  }\n  if (typeof disabled == 'string') {\n    disabled = disabled.split(/\\s*,\\s*/);\n  }\n  if (runningInWeChat) {\n    disabled.push('wechat');\n  }\n  </initialSiteProcessing>\n\n  <removeDisabledSites>\n  disabled.length && each(disabled, function (it) {\n    sites.splice(inArray(it, sites), 1);\n  });\n  </removeDisabledSites>\n  \n  return sites;\n}\n"], ["listen", "\nfunction listen () {\n  <observersSetup>\n  if (typeof obs === 'function') {\n    releases.push(obs(binder.onUpdate))\n  }\n  rebindAll()\n  </observersSetup>\n\n  <itemInvalidatorsSetup>\n  Array.from(itemInvalidators.values()).forEach(function (invalidators) {\n    invalidators.forEach(function (invalidator) {\n      invalidator.release = invalidator.observable(invalidate.bind(null, invalidator))\n    })\n  })\n  </itemInvalidatorsSetup>\n\n  <additionalListenHooks>\n  if (opts && opts.onListen) {\n    var release = opts.onListen()\n    if (typeof release === 'function') {\n      releases.push(release)\n    }\n  }\n  </additionalListenHooks>\n}\n"], ["function", "\nfunction(id) {\n    <validateQueueState>\n    var q = queues[id];\n    q.finished = true;\n    if (q.aborted) {\n        var msg = \"transaction \" + id + \" was aborted\";\n        _fail(id, msg);\n        return;\n    }\n    </validateQueueState>\n\n    <triggerOnSuccess>\n    if (q.onSuccess) {\n        var sc=q.scope || q.win;\n        q.onSuccess.call(sc, _returnData(q));\n    }\n    </triggerOnSuccess>\n}\n"], ["function", "\nfunction() {\n  <initializeSubscriptions>\n  if (!this.hasOwnProperty(\"_postalSubscriptions\")) {\n    this._postalSubscriptions = {};\n  }\n  </initializeSubscriptions>\n\n  <subscribeToTopics>\n  for (var topic in this.subscriptions) {\n    if (this.subscriptions.hasOwnProperty(topic)) {\n      var callback = this.subscriptions[topic];\n      this.subscribe(topic, callback);\n    }\n  }\n  </subscribeToTopics>\n}\n"], ["destroy", "\nfunction destroy() {\n  <initialCleanup>\n\tvar i,\n\t\tparentNode = container && container.parentNode;\n\tif (chart === null) {\n\t\treturn;\n\t}\n  </initialCleanup>\n\n  <fireEventOnDestroy>\n\tfireEvent(chart, 'destroy');\n  </fireEventOnDestroy>\n\n  <removeEventListeners>\n\tremoveEvent(win, '.' + containerId);\n\tremoveEvent(chart);\n  </removeEventListeners>\n\n  <destroyAxes>\n\ti = axes.length;\n\twhile (i--) {\n\t\taxes[i] = axes[i].destroy();\n\t}\n  </destroyAxes>\n\n  <destroySeries>\n\ti = series.length;\n\twhile (i--) {\n\t\tseries[i] = series[i].destroy();\n\t}\n  </destroySeries>\n\n  <destroyAdditionalProperties>\n\teach(['title', 'subtitle', 'seriesGroup', 'clipRect', 'credits', 'tracker'], function (name) {\n\t\tvar prop = chart[name];\n\t\tif (prop) {\n\t\t\tchart[name] = prop.destroy();\n\t\t}\n\t});\n  </destroyAdditionalProperties>\n\n  <destroyMiscComponents>\n\teach([chartBackground, legend, tooltip, renderer, tracker], function (obj) {\n\t\tif (obj && obj.destroy) {\n\t\t\tobj.destroy();\n\t\t}\n\t});\n\tchartBackground = legend = tooltip = renderer = tracker = null;\n  </destroyMiscComponents>\n\n  <cleanupContainer>\n\tif (container) { \n\t\tcontainer.innerHTML = '';\n\t\tremoveEvent(container);\n\t\tif (parentNode) {\n\t\t\tparentNode.removeChild(container);\n\t\t}\n\t\tcontainer = null;\n\t}\n  </cleanupContainer>\n\n  <otherCleanups>\n\tclearInterval(tooltipInterval);\n\tfor (i in chart) {\n\t\tdelete chart[i];\n\t}\n\tchart = null;\n  </otherCleanups>\n}\n"], ["isInTailCallPosition", "\nfunction isInTailCallPosition(node) {\n  <tailCallPositionLogic>\n    if (node.parent.type === \"ArrowFunctionExpression\") {\n        return true;\n    }\n    if (node.parent.type === \"ReturnStatement\") {\n        return !hasErrorHandler(node.parent);\n    }\n    if (node.parent.type === \"ConditionalExpression\" && (node === node.parent.consequent || node === node.parent.alternate)) {\n        return isInTailCallPosition(node.parent);\n    }\n    if (node.parent.type === \"LogicalExpression\" && node === node.parent.right) {\n        return isInTailCallPosition(node.parent);\n    }\n    if (node.parent.type === \"SequenceExpression\" && node === node.parent.expressions[node.parent.expressions.length - 1]) {\n        return isInTailCallPosition(node.parent);\n    }\n  </tailCallPositionLogic>\n  return false;\n}\n"], ["setTitleAndSubtitle", "\nfunction (titleOptions, subtitleOptions, redraw) {\n  <updateChartTitleOptions>\n  var chart = this,\n    options = chart.options,\n    chartTitleOptions,\n    chartSubtitleOptions;\n  chartTitleOptions = options.title = merge(options.title, titleOptions);\n  chartSubtitleOptions = options.subtitle = merge(options.subtitle, subtitleOptions);\n  </updateChartTitleOptions>\n\n  <createOrDestroyTitles>\n  each([\n      ['title', titleOptions, chartTitleOptions],\n      ['subtitle', subtitleOptions, chartSubtitleOptions]\n  ], function (arr) {\n      var name = arr[0],\n        title = chart[name],\n        titleOptions = arr[1],\n        chartTitleOptions = arr[2];\n\n      if (title && titleOptions) {\n          chart[name] = title = title.destroy(); \n      }\n\n      if (chartTitleOptions && chartTitleOptions.text && !title) {\n          chart[name] = chart.renderer.text(\n            chartTitleOptions.text,\n            0,\n            0,\n            chartTitleOptions.useHTML\n            )\n            .attr({\n                align: chartTitleOptions.align,\n                'class': PREFIX + name,\n                zIndex: chartTitleOptions.zIndex || 4\n            })\n            .css(chartTitleOptions.style)\n            .add();\n      }\n  });\n  </createOrDestroyTitles>\n\n  <layoutTitles>\n  chart.layOutTitles(redraw);\n  </layoutTitles>\n}\n"], "```"]