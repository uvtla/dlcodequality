[["updateState", "\nfunction (name, value, oldValue) {\n    <handleSelectedIndex>\n    if (name === \"selectedIndex\") {\n        this._domElt.selectedIndex = value;\n        this.setValueInDataModel();\n        if (!this.isIndexValid(value)) {\n            this.setIndexInDataModel();\n        }\n    } </handleSelectedIndex>\n    <handleValueUpdate>\n    else if (name === \"value\") {\n        this._domElt.selectedIndex = this.getIndex(value);\n        this.setIndexInDataModel();\n        \n        if (this._domElt.selectedIndex === -1) {\n            this.setValueInDataModel();\n        }\n    } </handleValueUpdate>\n    <handleDisabled>\n    this.onDisabledBind(name, value, oldValue);\n    </handleDisabled>\n}\n"], ["createShaderProgram", "\nfunction createShaderProgram(gl, shaders) {\n  <createProgram>\n  const program = gl.createProgram();\n\n  for (let i = 0; i < shaders.length; i++) {\n    gl.attachShader(program, shaders[i]);\n  }\n\n  gl.linkProgram(program);\n  </createProgram>\n\n  <checkLinkStatus>\n  const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!linked) {\n    <handleLinkError>\n    const lastError = gl.getProgramInfoLog(program);\n    console.error('Error in program linking:', lastError);\n    gl.deleteProgram(program);\n    return null;\n    </handleLinkError>\n  }\n  </checkLinkStatus>\n\n  <finalizeProgram>\n  program.shaders = shaders;\n  gl.useProgram(program);\n  </finalizeProgram>\n\n  return program;\n}\n"], ["constructorPathHandler", "\nfunction PathHandler() {\n  _classCallCheck(this, PathHandler);\n  <initializeProperties>\n  this.shapes = [];\n  this.firstX = null;\n  this.firstY = null;\n  this.lastX = null;\n  this.lastY = null;\n  this.lastCommand = null;\n  </initializeProperties>\n}\n"], ["constructorScatteredFilesTransport", "\nfunction ScatteredFilesTransport(logger, config = {}) {\n    CommonTransport.call(this, logger, config);\n    <configDefaults>\n    if (typeof config.path !== 'string') { config.path = __dirname; }\n    </configDefaults>\n\n    <initializeProperties>\n    this.color = !!config.color;\n    this.indent = config.indent === undefined ? true : !!config.indent;\n    this.includeIdMeta = !!config.includeIdMeta;\n    this.includeCommonMeta = config.includeCommonMeta === undefined ? true : !!config.includeCommonMeta;\n    this.includeUserMeta = config.includeUserMeta === undefined ? true : !!config.includeUserMeta;\n    this.path = config.path;\n    this.streams = {};\n    </initializeProperties>\n}\n"], ["cloneRetryOptions", "\nfunction cloneRetryOptions(options, defaults) {\n    if (options === false) {\n        return (false);\n    }\n\n    <inputValidation>\n    assert.optionalObject(options, 'options.retry');\n    assert.optionalNumber(r.minTimeout, 'options.retry.minTimeout');\n    assert.optionalNumber(r.maxTimeout, 'options.retry.maxTimeout');\n    assert.optionalNumber(r.retries, 'options.retry.retries');\n    assert.optionalObject(defaults, 'defaults');\n    </inputValidation>\n    var r = options || {};\n    var normalizedDefaults = defaults || {};\n\n    <setResolvedOptions>\n    return ({\n        minTimeout: r.minTimeout || normalizedDefaults.minTimeout || 1000,\n        maxTimeout: r.maxTimeout || normalizedDefaults.maxTimeout || Infinity,\n        retries: r.retries || normalizedDefaults.retries || 4\n    });\n    </setResolvedOptions>\n}\n"], ["twitterClickHandler", "\nfunction twitterClickHandler() {\n    <initiateRequest>\n    var url = $twitter.attr('href')\n    $\n        .get(url)\n        .success(function(data) {\n            <handleSuccess>\n            $spin.hide();\n            var sorted = [];\n            var thumbs = \"\";\n\n            if (data.error) {\n                console.dir(data.error)\n                alert(data.error_message)\n                return false;\n            }\n\n            $.each(data.media, function(i, el) {\n                thumbs += \"<img data-standard-resolution='\"\n                        + el.full_url\n                        + \"' src='\" + el.thumb_url + \"' />\";\n            });\n            </handleSuccess>\n\n            <updateDOM>\n            $oneUpTwitterWrapper.before(thumbs);\n            $photoPickerTwitter.show();\n            wireTwitterGalleryPicker();\n            progressToNextStep($stepOne, function() {\n                $stepTwo.slideDown(333);\n            });\n            </updateDOM>\n            </handleError>\n        })\n        .error(function(e, b) {\n            $spin.hide();\n            if (e.status === 400) alert(e.responseText || 'Bad request.');\n            if (e.status === 401) alert(e.responseText || 'Unauthorized request.');\n            if (e.status === 402) alert(e.responseText || 'Forbidden request.');\n            if (e.status === 403) alert(e.responseText || 'Forbidden request.');\n            if (e.status === 404) alert(e.responseText || 'Images were not found.');\n            if (e.status === 405) alert(e.responseText || 'That method is not allowed.');\n            if (e.status === 408) alert(e.responseText || 'The request timed out. Try again.');\n            if (e.status === 500) alert(e.responseText || 'Something went really wrong.');\n        })\n    </initiateRequest>\n\n    return false\n}\n"], ["organizationalChartNodeCreation", "\nfunction (data) {\n    var that = this;\n    var opts = this.options;\n    <constructNodeDiv>\n    var level = data.level;\n    if (data.children) {\n        $.each(data.children, function(index, child) {\n            child.parentId = data.id;\n        });\n    }\n    var $nodeDiv = $('<div' + (opts.draggable ? ' draggable=\"true\"' : '') + (data[opts.nodeId] ? ' id=\"' + data[opts.nodeId] + '\"' : '') + (data.parentId ? ' data-parent=\"' + data.parentId + '\"' : '') + '>')\n        .addClass('node ' + (data.className || '') + (level > opts.visibleLevel ? ' slide-up' : ''));\n    if (opts.nodeTemplate) {\n        $nodeDiv.append(opts.nodeTemplate(data));\n    } else {\n        $nodeDiv.append('<div class=\"title\">' + data[opts.nodeTitle] + '</div>')\n            .append(typeof opts.nodeContent !== 'undefined' ? '<div class=\"content\">' + (data[opts.nodeContent] || '') + '</div>' : '');\n    }\n    </constructNodeDiv>\n    <processDataForNode>\n    var nodeData = $.extend({}, data);\n    delete nodeData.children;\n    $nodeDiv.data('nodeData', nodeData);\n    </processDataForNode>\n    <addExtraFeaturesToNode>\n    var flags = data.relationship || '';\n    if (opts.verticalLevel && level >= opts.verticalLevel) {\n        if ((level + 1) > opts.verticalLevel && Number(flags.substr(2, 1))) {\n            var icon = level + 1 > opts.visibleLevel ? 'plus' : 'minus';\n            $nodeDiv.append('<i class=\"toggleBtn fa fa-' + icon + '-square\"></i>');\n        }\n    } else {\n        if (Number(flags.substr(0, 1))) {\n            $nodeDiv.append('<i class=\"edge verticalEdge topEdge fa\"></i>');\n        }\n        if (Number(flags.substr(1, 1))) {\n            $nodeDiv.append('<i class=\"edge horizontalEdge rightEdge fa\"></i>' +\n                '<i class=\"edge horizontalEdge leftEdge fa\"></i>');\n        }\n        if (Number(flags.substr(2, 1))) {\n            $nodeDiv.append('<i class=\"edge verticalEdge bottomEdge fa\"></i>')\n                .children('.title').prepend('<i class=\"fa ' + opts.parentNodeSymbol + ' symbol\"></i>');\n        }\n    }\n    </addExtraFeaturesToNode>\n\n    <nodeEventBindings>\n    $nodeDiv.on('mouseenter mouseleave', this.nodeEnterLeaveHandler.bind(this));\n    $nodeDiv.on('click', this.nodeClickHandler.bind(this));\n    $nodeDiv.on('click', '.topEdge', this.topEdgeClickHandler.bind(this));\n    $nodeDiv.on('click', '.bottomEdge', this.bottomEdgeClickHandler.bind(this));\n    $nodeDiv.on('click', '.leftEdge, .rightEdge', this.hEdgeClickHandler.bind(this));\n    $nodeDiv.on('click', '.toggleBtn', this.toggleVNodes.bind(this));\n    </nodeEventBindings>\n\n    <bindDragAndDrop>\n    if (opts.draggable) {\n        this.bindDragDrop($nodeDiv);\n        this.touchHandled = false;\n        this.touchMoved = false;\n        this.touchTargetNode = null;\n    }\n    </bindDragAndDrop>\n    \n    <executeCustomCreateNode>\n    if (opts.createNode) {\n        opts.createNode($nodeDiv, data);\n    }\n    </executeCustomCreateNode>\n\n    return $nodeDiv;\n}\n"], ["taskAutomation", "\nfunction() {\n    <loadDependencies>\n    var jxBin = require('jxcore').findpath();\n    </loadDependencies>\n\n    <packageInfo>\n    var pkgName = 'kbox-' + common.kalabox.pkgType;\n    </packageInfo>\n    <shellOptions>\n    var shellOpts = {\n      execOptions: {\n        cwd: 'build/cli',\n        maxBuffer: 20 * 1024 * 1024\n      }\n    };\n    </shellOptions>\n\n    <defineIncludePatterns>\n    var jxAddPatterns = common.files.jxAdd;\n    </defineIncludePatterns>\n    <defineExcludePatterns>\n    var jxSlimPatterns = common.files.jxSlim;\n    </defineExcludePatterns>\n    \n    <createCommandString>\n    var jxCmd = [\n      jxBin,\n      'package',\n      'bin/kbox.js',\n      pkgName,\n      '--add \"' + jxAddPatterns.join(',') + '\"',\n      '--slim \"' + jxSlimPatterns.join(',') + '\"',\n      '--native'\n    ].join(' ');\n    </createCommandString>\n\n    <composeCommands>\n    var cmd = [];\n    cmd.push(npmInstallCmd());\n    cmd.push(jxCmd);\n    </composeCommands>\n\n    <platformSpecificCommands>\n    if (platform !== 'win32') {\n      cmd.push('chmod +x ' + pkgName);\n      cmd.push('sleep 2');\n    }\n    </platformSpecificCommands>\n\n    <assembleTaskResult>\n    return {\n      options: shellOpts,\n      command: cmd.join(' && ')\n    };\n    </assembleTaskResult>\n}\n"], ["configurationFileMonitoring", "\nfunction(provider, name, path, data, dbg) {\n    dbg = dbg || debug;\n    <initializeProperties>\n    this._provider = provider;\n    this._name = name;\n    this._path = path;\n    this._err = null;\n    this._data = data;\n    this._lock = null;\n    this._queue = [];\n    this._ready = false;\n    </initializeProperties>\n\n    <createLegendProperty>\n    Object.defineProperty(this, 'legend', {\n        get: function() {\n            return this._path;\n        }\n    });\n    </createLegendProperty>\n}\n"], ["queuedExecution", "\nfunction() {\n    <conditionalExecution>\n    if (concurrentQueries < concurrentLimit) {\n        gaExecuteQuery.apply(this, arguments);\n    } else {\n        var args = Array.prototype.slice.call(arguments);\n        queryQueue.push(args);\n    }\n    </conditionalExecution>\n}\n"], "```"]