```javascript
<add_shared>
function add_shared(hash, customTags, doc_map) {
    <mergeData>
    hash = utils.merge(hash, {
      "inheritable" : !!doc_map["inheritable"],
      "inheritdoc" : extract(doc_map, "inheritdoc"),
      "related" : extract(doc_map, "related"),
      "see" : extract(doc_map, "see"),
      "private" : extract(doc_map, "private") !== null ? true : false,
      "experimental" : extract(doc_map, "experimental") !== null ? true : false,
      "ignore" : extract(doc_map, "ignore") !== null ? true : false,
      "author" : extract_plural(doc_map["author"] || []),
      "version" : extract(doc_map, "version"),
      "since" : extract(doc_map, "since"),
      "todo" : extract(doc_map, "todo")
    });
    </mergeData>

    <mergeCustomTags>
    if (customTags !== undefined) {
      var custom = {};
      _.each(customTags, function(tag) {
        var text = extract(doc_map, tag);
        if (text !== null) {
          custom[tag] = text.doc.length > 0 ? text.doc : true;
        }
      });

      hash = utils.merge(hash, custom);
    }
    </mergeCustomTags>

    return hash;
}
</add_shared>

<activateDefaultPlugins>
function (ui, done) {
        <pluginActivationLoop>
        Object.keys(ui.defaultPlugins).forEach(function (key) {
            ui.pluginManager.get(key)(ui, ui.bs);
        });
        </pluginActivationLoop>
        done();
    }
</activateDefaultPlugins>

<processEventByName>
function (name, data) {
            switch (name) {
                case 'layoutchange':
                    <updateLayout>
                    api.updateLayout();
                    </updateLayout>
                    break;

                case 'linkclick':
                    <handleLinkClick>
                    handleLinkClick(data);
                    </handleLinkClick>
                    break;

                case 'zoom':
                    <modifyZoomData>
                    data.zoom *= config.pageScale;
                    data.prevZoom *= config.pageScale;
                    </modifyZoomData>
                    <updateDraggerData>
                    if (config.enableDragging) {
                        updateDragger(data.isDraggable);
                    }
                    </updateDraggerData>
                    <fireZoomEvent>
                    api.fire(name, data);
                    </fireZoomEvent>
                    break;

                case 'dragstart':
                    <handleDragStart>
                    if (!$el.hasClass(CSS_CLASS_DRAGGING)) {
                        $el.addClass(CSS_CLASS_DRAGGING);
                    }
                    </handleDragStart>
                    <fireDragStartEvent>
                    api.fire(name, data);
                    </fireDragStartEvent>
                    break;

                case 'dragend':
                    <handleDragEnd>
                    if ($el.hasClass(CSS_CLASS_DRAGGING)) {
                        $el.removeClass(CSS_CLASS_DRAGGING);
                    }
                    </handleDragEnd>
                    <fireDragEndEvent>
                    api.fire(name, data);
                    </fireDragEndEvent>
                    break;

                default:
                    <fireDefaultEvent>
                    api.fire(name, data);
                    </fireDefaultEvent>
                    break;
            }
        }
</processEventByName>

<TextFieldDirective>
function TextFieldDirective($log, $timeout, fieldHelper) {
            <directiveConfiguration>
            this.require = '^formFor';
            this.restrict = 'EA';
            this.templateUrl = function ($element, $attributes) {
                return $attributes['template'] || 'form-for/templates/text-field.html';
            };
            this.scope = {
                attribute: '@',
                debounce: '@?',
                disable: '=',
                focused: '&?',
                blurred: '&?',
                help: '@?',
                iconAfterClicked: '&?',
                iconBeforeClicked: '&?',
                placeholder: '@?',
                rows: '=?',
                controller: '=?'
            };
            </directiveConfiguration>
            <dependencyAssignment>
            $log_ = $log;
            $timeout_ = $timeout;
            fieldHelper_ = fieldHelper;
            </dependencyAssignment>
        }
</TextFieldDirective>

<orderBy>
function orderBy() {
  
  var self = (this instanceof QueryBuilder) ? this : new QueryBuilder();

  <parseArguments>
  var args = mlutil.asArray.apply(null, arguments);
  </parseArguments>
  
  <initializeVariables>
  var sortOrder = [];

  var scoreOption    = null;
  var scoreDirection = null;
  </initializeVariables>

  <sortOrderProcessing>
  var arg = null;
  for (var i=0; i < args.length; i++) {
    arg = args[i];
    if (typeof arg === 'string' || arg instanceof String) {
      sortOrder.push(sort(arg));
    } else {
      if (scoreOption === null) {
        scoreOption = arg.score;
        if (typeof scoreOption === 'string' || scoreOption instanceof String) {
          scoreOption = 'score-'+scoreOption;
          scoreDirection = arg.direction;
          sortOrder.push(
              (scoreDirection === null || scoreDirection === void 0) ?
              {score: null} :
              {score: null, direction: scoreDirection}
              );
          continue;
        } else if (scoreOption === void 0) {
          scoreOption = null;
        }
      }

      sortOrder.push(arg);
    }
  }
  </sortOrderProcessing>

  <buildOrderByClause>
  self.orderByClause = (scoreOption === null) ? {
    'sort-order': sortOrder
  } : {
    'sort-order': sortOrder,
    scoreOption:  scoreOption
  };
  </buildOrderByClause>

  return self;
}
</orderBy>

<resolveDependencies>
function(key) {
	        
	        <checkResolvedValue>
	        var value = _resolved.get(key);
	        if (value && (value.pending || value.file)) {
	      	  return;
	        }
	  		</checkResolvedValue>
	  		<invokeResolve>
	  		resolve(server, key, loc);
	  		</invokeResolve>
	    }
</resolveDependencies>

<getParamsDetails>
function getParamsDetails(spec_c) {
  <getParaChildren>
  var paras = getChildren(spec_c, 'para');
  </getParaChildren>
  <findParameterList>
  var details = _.find(_.map(paras, function(para) {
    return getChild(para, 'parameterlist');
  }), function(obj) { return (obj != undefined); });
  </findParameterList>
  return (details ? details.children : undefined);
}
</getParamsDetails>

<gettextTranslation>
function ( domain, context, singular_key, plural_key, val ) {
      
      <setDefaults>
      plural_key = plural_key || singular_key;
      domain = domain || this._textdomain;
      </setDefaults>

      <configureFallback>
      var fallback;
      if ( ! this.options ) {
        fallback = new Jed();
        return fallback.dcnpgettext.call( fallback, undefined, undefined, singular_key, plural_key, val );
      }
      </configureFallback>

      <verifyLocaleData>
      if ( ! this.options.locale_data ) {
        throw new Error('No locale data provided.');
      }
      if ( ! this.options.locale_data[ domain ] ) {
        throw new Error('Domain `' + domain + '` was not found.');
      }
      if ( ! this.options.locale_data[ domain ][ "" ] ) {
        throw new Error('No locale meta information provided.');
      }
      </verifyLocaleData>

      <checkTranslationKey>
      if ( ! singular_key ) {
        throw new Error('No translation key found.');
      }
      </checkTranslationKey>

      <prepareTranslationQuery>
      var key  = context ? context + Jed.context_delimiter + singular_key : singular_key,
          locale_data = this.options.locale_data,
          dict = locale_data[ domain ],
          defaultConf = (locale_data.messages || this.defaults.locale_data.messages)[""],
          pluralForms = dict[""].plural_forms || dict[""]["Plural-Forms"] || dict[""]["plural-forms"] || defaultConf.plural_forms || defaultConf["Plural-Forms"] || defaultConf["plural-forms"],
          val_list,
          res;
      </prepareTranslationQuery>

      <determinePluralFormIndex>
      var val_idx;
      if (val === undefined) {
        val_idx = 1;
      } else {
        if ( typeof val != 'number' ) {
          val = parseInt( val, 10 );
          if ( isNaN( val ) ) {
            throw new Error('The number that was passed in is not a number.');
          }
        }
        val_idx = getPluralFormFunc(pluralForms)(val) + 1;
      }
      </determinePluralFormIndex>

      <validateTranslationData>
      if ( ! dict ) {
        throw new Error('No domain named `' + domain + '` could be found.');
      }
      val_list = dict[ key ];
      if ( ! val_list || val_idx >= val_list.length ) {
        if (this.options.missing_key_callback) {
          this.options.missing_key_callback(key, domain);
        }
        res = [ null, singular_key, plural_key ];
        return res[ getPluralFormFunc(pluralForms)( val ) + 1 ];
      }
      res = val_list[ val_idx ];
      if ( ! res  ) {
        res = [ null, singular_key, plural_key ];
        return res[ getPluralFormFunc()( val ) + 1 ];
      }
      </validateTranslationData>

      return res;
    }
</gettextTranslation>

<manageAudioMuteState>
function(mute) {
            <checkSupport>
            if (!Crafty.support.audio) return;
            </checkSupport>
            <muteChannels>
            var c;
            for (var i in this.channels) {
                c = this.channels[i];
                c.obj.volume = mute ? 0 : c.volume;
            }
            </muteChannels>
            <updateMutedState>
            this.muted = mute;
            </updateMutedState>
        }
</manageAudioMuteState>

<getFileServiceFunction>
function(fileUrl) {
  <initialLogging>
  logger.entry('getFileServiceFunction', logger.NO_CLIENT_ID);
  logger.log('parms', logger.NO_CLIENT_ID, 'fileUrl:', fileUrl);
  </initialLogging>

  <inputValidation>
  if (typeof fileUrl !== 'string') {
    var err = new TypeError('fileUrl must be a string type');
    logger.ffdc('getFileServiceFunction', 'ffdc001', null, err);
    logger.throw('getFileServiceFunction', logger.NO_CLIENT_ID, err);
    throw err;
  }
  </inputValidation>

  <prepareFilePath>
  var filePath = fileUrl;
  if (os.platform() === 'win32' && filePath.match('^/[a-zA-Z]:/')) {
    filePath = filePath.substring(1);
  }
  </prepareFilePath>

  <createFileServiceFunction>
  var fileServiceFunction = function(callback) {
    <fileServiceFunctionLogging>
    logger.entry('fileServiceFunction', logger.NO_CLIENT_ID);
    logger.log('parms', logger.NO_CLIENT_ID, 'filePath:', filePath);
    </fileServiceFunctionLogging>

    <readFileAndProcess>
    fs.readFile(filePath, {encoding: 'utf8'}, function(err, data) {
      <callbackLogging>
      logger.entry('fileServiceFunction.readFile.callback',
                   logger.NO_CLIENT_ID);
      logger.log('parms', logger.NO_CLIENT_ID, 'err:', err);
      logger.log('parms', logger.NO_CLIENT_ID, 'data:', data);
      </callbackLogging>

      if (err) {
        <handleReadError>
        err.message = 'attempt to read ' + filePath + ' failed with the ' +
                      'following error: ' + err.message;
        logger.log('error', logger.NO_CLIENT_ID, err);
        logger.entry('fileServiceFunction.callback', logger.NO_CLIENT_ID);
        logger.log('parms', logger.NO_CLIENT_ID, 'err:', err);
        callback(err);
        logger.exit('fileServiceFunction.callback', logger.NO_CLIENT_ID, null);
        </handleReadError>
      } else {
        var obj;
        try {
          <parseJSON>
          obj = JSON.parse(data);
          </parseJSON>
        } catch (err) {
          <handleParseError>
          err.message = 'the content read from ' + filePath + ' contained ' +
                        'unparseable JSON: ' + err.message;
          logger.caught('fileServiceFunction.readFile.callback',
                        logger.NO_CLIENT_ID, err);
          logger.entry('fileServiceFunction.callback', logger.NO_CLIENT_ID);
          logger.log('parms', logger.NO_CLIENT_ID, 'err:', err);
          callback(err);
          logger.exit('fileServiceFunction.callback', logger.NO_CLIENT_ID,
                      null);
          </handleParseError>
        }
        if (obj) {
          <returnServiceData>
          logger.entry('fileServiceFunction.callback', logger.NO_CLIENT_ID);
          logger.log('parms', logger.NO_CLIENT_ID, 'service:', obj.service);
          callback(null, obj.service);
          logger.exit('fileServiceFunction.callback', logger.NO_CLIENT_ID,
                      null);
          </returnServiceData>
        }
      }
      <exitCallbackLogging>
      logger.exit('fileServiceFunction.readFile.callback', logger.NO_CLIENT_ID,
                  null);
      </exitCallbackLogging>
    });
    </readFileAndProcess>

    <exitFileServiceFunctionLogging>
    logger.exit('fileServiceFunction', logger.NO_CLIENT_ID, null);
    </exitFileServiceFunctionLogging>
  };
  </createFileServiceFunction>

  <exitAndGetServiceFunction>
  logger.exit('getFileServiceFunction', logger.NO_CLIENT_ID,
              fileServiceFunction);
  return fileServiceFunction;
  </exitAndGetServiceFunction>
}
</getFileServiceFunction>
```