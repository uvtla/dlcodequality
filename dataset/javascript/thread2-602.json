[["formatAdMarkup", "\nfunction formatAdMarkup(bid) {\n  let adm = bid.adm;\n  if ('nurl' in bid) {\n    adm += utils.createTrackPixelHtml(`${bid.nurl}&px=1`);\n  }\n  return adm;\n}\n"], ["requestNextHashTree", "\nfunction requestNextHashTree(ws) {\n  <countLeftQuery>\n  db.query(\"SELECT COUNT(1) AS count_left FROM catchup_chain_balls\", function (rows) {\n    if (rows.length > 0) {\n      if (catchup_balls_at_start == -1) { \n        catchup_balls_at_start = rows[0].count_left;\n      }\n      catchup_balls_left = rows[0].count_left;\n    }\n  });\n  </countLeftQuery>\n  <selectAndProcessBalls>\n  db.query(\"SELECT ball FROM catchup_chain_balls ORDER BY member_index LIMIT 2\", function (rows) {\n    if (rows.length === 0)\n      return comeOnline();\n    if (rows.length === 1) {\n      db.query(\"DELETE FROM catchup_chain_balls WHERE ball=?\", [rows[0].ball], function () {\n        comeOnline();\n      });\n      return;\n    }\n\n    let from_ball = rows[0].ball;\n    let to_ball = rows[1].ball;\n\n    <checkPendingRequests>\n    for (let tag in ws.assocPendingRequests) {\n      if (ws.assocPendingRequests[tag].request.command === 'get_hash_tree') {\n        console.log(\"already requested hash tree from this peer\");\n        return;\n      }\n    }\n    </checkPendingRequests>\n\n    <sendHashTreeRequest>\n    sendRequest(ws, 'get_hash_tree', {from_ball: from_ball, to_ball: to_ball}, true, handleHashTree);\n  });\n  </selectAndProcessBalls>\n}\n"], ["_ensurePaneIsFocused", "\nfunction _ensurePaneIsFocused(paneId) {\n  var pane = MainViewManager._getPane(paneId);\n\n  <focusPane>\n  setTimeout(function () {\n      pane.focus();\n      this._lastFocusedElement = pane.$el[0];\n      MainViewManager.setActivePaneId(paneId);\n  }, 1);\n  </focusPane>\n}\n"], ["createPipeReducer", "\nfunction createPipeReducer (container) {\n  return (state, action = {data: {}}) => {\n    const pipes = container[$pipes].entries()\n    <reduceState>\n    reduce()\n    return state\n\n    function reduce () {\n      const step = pipes.next()\n      const done = step.done\n      const pipe = step.value ? step.value[1] : null\n      if (done) return\n      else if (false === pipe(state, action)) return\n      else return reduce()\n    }\n    </reduceState>\n  }\n}\n"], ["flush", "\nfunction flush() {\n  <processQueue>\n  if (queue.length) {\n    let bench = queue[0]\n    process.nextTick(() => {\n      run(bench).then(() => {\n        queue.shift()\n        flush()\n      }, console.error)\n    })\n  }\n  </processQueue>\n}\n"], ["_callbackAndReset", "\nfunction _callbackAndReset(e) {\n  <fireCallback>\n  _fireCallback.call(this, callback, e, combo);\n  </fireCallback>\n\n  <ignoreNextKeyup>\n  if (action !== 'keyup') {\n    this._ignoreNextKeyup = _characterFromEvent(e);\n  }\n  </ignoreNextKeyup>\n\n  <resetSequences>\n  setTimeout(_resetSequences.bind(this), 10);\n  </resetSequences>\n}\n"], ["forEachArray", "\nfunction forEachArray(arr, iteratee, context) {\n  var index = 0;\n  var len = arr.length;\n\n  context = context || null;\n\n  <iterateArray>\n  for (; index < len; index += 1) {\n    if (iteratee.call(context, arr[index], index, arr) === false) {\n      break;\n    }\n  }\n  </iterateArray>\n}\n"], ["webpackMathClz32", "\nfunction (module, exports, __webpack_require__) {\n\n  var $export = __webpack_require__(0);\n  \n  <exportClz32>\n  $export($export.S, 'Math', {\n    clz32: function clz32(x) {\n      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n    }\n  });\n  </exportClz32>\n}\n"], ["handler", "\nfunction handler (eventDetails){\n  var Alert = models.getModels().Alert;\n  <logEventProcessing>\n  logger.logger.trace(loggerPrefix +'Processing Alerts for Event: ', eventDetails);\n  </logEventProcessing>\n\n  <queryAndProcessAlerts>\n  Alert.queryAlerts(eventDetails.uid, eventDetails.env, eventDetails.domain, function(err, alerts){\n    if(err) {\n      logger.logger.warn({ error:err }, loggerPrefix +'Failed to query Alerts for uid and env', uid, env);\n    } else {\n      if(alerts && alerts.length > 0){\n        logger.logger.trace(loggerPrefix +'Found ['+ alerts.length +'] Alerts. Matching and send emails', alerts);\n        matchAndIssueAlertEmails(eventDetails, alerts);\n      } else {\n        logger.logger.trace(loggerPrefix +'No Alerts for event. No emails to send.');\n      }\n    }\n  });\n  </queryAndProcessAlerts>\n}\n"], ["isPathAbsolute", "\nfunction isPathAbsolute(path) {\n  <checkPath>\n  if (process.platform === 'win32') {\n      const result = npm.patterns.splitDevice.exec(path);\n      const device = result[1] || '';\n      const isUnc = !!device && device.charAt(1) !== ':';\n      return !!result[2] || isUnc;\n  }\n  return path.charAt(0) === '/';\n  </checkPath>\n}\n"], ""]