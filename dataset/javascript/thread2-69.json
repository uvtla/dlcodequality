[["promisify", "\nfunction promisify(func) {\n        return function(str, options) {\n            var result,\n                deferred = q.defer(),\n                promise = deferred.promise;\n                \n            // Validate the function\n            <validateFunction>\n            if (!_.isFunction(func)) {\n                deferred.reject();\n            } </validateFunction>\n            else {\n                // Execute the function and process the result\n                <executeAndProcessResult>\n                result = func(str, options);\n\n                if (_.isBoolean(result)) {\n                    promise = handleBoolean(result, deferred);\n                }\n                else if (_.isFunction(result.then)) {\n                    promise = result;\n                } </executeAndProcessResult>\n            }\n            return promise;\n        };\n}\n"], ["createDynamicDropdown", "\nfunction() {\n    this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n    var $ul = $('<ul/>').appendTo(this.$menu);\n\n    for (var i in this.options) {\n        if (!this.options.hasOwnProperty(i)) {\n            continue;\n        }\n\n        var option = this.options[i];\n\n        if (option === '-') {\n            $('<hr/>').appendTo(this.$menu);\n            $ul = $('<ul/>').appendTo(this.$menu);\n        }\n        else {\n            var $li = $('<li></li>').appendTo($ul),\n                $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n            if (typeof option.onClick === 'function') {\n                // Attach event handlers\n                <attachEventHandlers>\n                (function($a, onClick) {\n                    setTimeout($.proxy(function() {\n                        $a.mousedown($.proxy(function(ev) {\n                            this.hideMenu();\n                            onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                        }, this));\n                    }, this), 1);\n                }).call(this, $a, option.onClick);\n                </attachEventHandlers>\n            }\n        }\n    }\n}\n"], ["mapArray", "\nfunction mapArray(fn, array) {\n  let newArray = [],\n      index = -1;\n\n  while (++index < array.length) {\n    newArray[index] = fn(array[index], index, array);\n  }\n\n  return newArray;\n}\n"], ["normalizeX509", "\nfunction normalizeX509(raw, loggerPrefix) {\n    logger.debug(`${loggerPrefix} [normalizeX509] raw cert: ${raw}`);\n    \n    // Process the X509 certificate\n    <processX509>\n    const regex = /(\\-\\-\\-\\-\\-\\s*BEGIN ?[^-]+?\\-\\-\\-\\-\\-)([\\s\\S]*)(\\-\\-\\-\\-\\-\\s*END ?[^-]+?\\-\\-\\-\\-\\-)/;\n    let matches = raw.match(regex);\n    if (!matches || matches.length !== 4) {\n        throw new Error('Failed to find start line or end line of the certificate.');\n    }\n    matches.shift();\n    matches = matches.map((element) => {\n        return element.trim();\n    });\n    </processX509>\n    \n    return matches.join('\\n') + '\\n';\n}\n"], ["curry4", "\nfunction curry4(f) {\n    return function(w) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            // Apply the curried function\n            <applyCurriedFunction>\n            return f(w, x, y, z);\n            </applyCurriedFunction>\n          };\n        };\n      };\n    };\n  }\n"], ["omitNested", "\nfunction omitNested(path, collection, isCollectionObject) {\n  const nextPath = path.shift();\n  \n  // Clean collection\n  <cleanCollection>\n  const cleanCollection = getCleanCollection(collection, isCollectionObject);\n  </cleanCollection>\n\n  if (!path.length) {\n    // Remove property or index\n    <removePropertyOrIndex>\n    const removeMethod = isCollectionObject ? removeKeyFromObject : removeIndicesFromArray;\n    return removeMethod(nextPath, cleanCollection);\n    </removePropertyOrIndex>\n  }\n\n  // Omit from collection recursively\n  <omitRecursively>\n  const omitMethod = isObject(cleanCollection[nextPath]) ? omitFromObject : omitFromArray;\n  collection[nextPath] = omitMethod(cleanCollection[nextPath], [path]);\n  </omitRecursively>\n\n  return collection;\n}\n"], ["mediaPlayerFullscreenControl", "\nfunction() {\n\tvar t = this;\n\t\n\tif (zyMedia.features.nativeFullscreenPrefix != '-') {\n\t\t// Fullscreen event listener\n\t\t<fullscreenEventListener>\n\t\tvar func = function(e) {\n\t\t\tif (t.isFullScreen) {\n\t\t\t\tif (!isInFullScreenMode()) {\n\t\t\t\t\tt.exitFullScreen()\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(zyMedia.features.nativeFullscreenPrefix + 'fullscreenchange', func)\n\t\t</fullscreenEventListener>\n\t}\n\n\t// Setup fullscreen button\n\t<setupFullscreenButton>\n\tt.fullscreenBtn = document.createElement('div');\n\tt.fullscreenBtn.className = 'zy_fullscreen_btn';\n\tt.controls.appendChild(t.fullscreenBtn);\n\n\tt.fullscreenBtn.addEventListener('click', function() {\n\t\tif ((zyMedia.features.nativeFullscreenPrefix != '-' && isInFullScreenMode()) || t.isFullScreen) {\n\t\t\tt.exitFullScreen()\n\t\t} else {\n\t\t\tt.enterFullScreen()\n\t\t}\n\t});\n\t</setupFullscreenButton>\n}\n"], ["removePnode", "\nfunction removePnode(pnode, skipParent) {\n    if (!pnode.exists) return pnode\n    \n    // Recursively remove children\n    <removeChildren>\n    for (var i = 0; i < pnode.children.length; i++) removePnode(pnode.children[i], true)\n    </removeChildren>\n    \n    if (!skipParent) {\n        // Remove the node from its parent\n        <removeNodeFromParent>\n        removeChild(pnode.parent, pnode)\n        </removeNodeFromParent>\n    }\n\n    // Cleanup operations\n    <cleanup>\n    delete data[pnode.path]\n    incTransaction()\n    feed('remove', pnode)\n    </cleanup>\n    \n    return pnode\n}\n"], ["formatDateISO8601", "\nfunction(date) {\n    // Format date to ISO 8601\n    <formatDate>\n    return sprintf(\"%04d-%02d-%02dT%02d:%02d:%02dZ\",\n           date.getUTCFullYear(),\n           (date.getUTCMonth() + 1),\n           date.getUTCDate(),\n           (date.getUTCHours()),\n           (date.getUTCMinutes() + 1),\n           (date.getUTCSeconds() + 1)\n    );\n    </formatDate>\n}\n"], ["calculateLuminance", "\nfunction(hexNum) {\n            // Validate the hex number\n            <validateHex>\n            if(typeof hexNum !== \"number\") {\n                hexNum = parseInt(hexNum, 16);\n            }\n            if(isNaN(hexNum) || hexNum < 0x000000 || hexNum > 0xffffff) {\n                return undefined;\n            }\n            </validateHex>\n\n            // Calculate luminance\n            <calculateLuminance>\n            var r = (hexNum & 0xff0000) >> 16,\n                g = (hexNum & 0x00ff00) >> 8,\n                b = hexNum & 0x0000ff;\n            return Math.round(0.2126 * r + 0.7152 * g + 0.0722 * b);\n            "], "}\n</calculateLuminance>\n```"]