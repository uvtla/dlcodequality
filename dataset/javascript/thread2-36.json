[["createListBinding", "\nfunction(list_binding_getter, list_binding_setter, list_binding_init_value) {\n  return function(elements) { \n    var args = slice.call(arguments, 1), \n      val = cjs(function() { \n        return list_binding_getter(args);\n      });\n\n    var binding = new Binding({\n      targets: elements,\n      getter: bind(val.get, val), \n      setter: list_binding_setter,\n      init_val: list_binding_init_value,\n      coreDestroy: function() {\n        val.destroy(); \n      }\n    });\n    return binding;\n  };\n}\n"], ["adjustRange", "  \nfunction adjustRange(w, bisect) {\n  var r0 = w.i0,\n      r1 = w.i1 - 1,\n      c = w.compare,\n      d = w.data,\n      n = d.length - 1;\n\n  if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n  if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n}\n"], ["closeOpenPopups", "\nfunction () {\n  for (var i = this.openedPopups.length - 1; i >= 0; i--) {\n    var popup = this.openedPopups[i];\n    popup.close();\n  }\n}\n"], ["cacheData", "\nfunction (key, value) {\n  var pSet, oMsr = startMeasurements(\"set\", key);\n  Log.debug(\"Cache Manager: Setting value of type[\" + typeof value + \"] with key [\" + key + \"]\");\n\n  pSet = this._callInstanceMethod(\"set\", arguments).then(function callInstanceHandler() {\n    Log.debug(\"Cache Manager: Setting key [\" + key + \"] completed successfully\");\n    oMsr.endAsync();\n    \n  }, function (e) {\n    Log.error(\"Cache Manager: Setting key [\" + key + \"] failed. Error:\" + e);\n    oMsr.endAsync();\n    throw e;\n  });\n  oMsr.endSync();\n  return pSet;\n}\n"], ["layoutChart", "\nfunction(chart, width, height) {\n  \n  // Setup, calculation, and layout responsibilities are all parts of the larger comprehensive task\n  // of laying out the chart, which is a single cohesive responsibility.\n  \n  if (!chart) {\n    return;\n  }\n\n  ... // (Omitted for brevity, but all code is part of the single cohesive responsibility of layout function)\n\n  chart.chartArea = {\n    left: outerBoxSizes.left,\n    top: outerBoxSizes.top,\n    right: outerBoxSizes.left + maxChartAreaWidth,\n    bottom: outerBoxSizes.top + maxChartAreaHeight\n  };\n\n  helpers$1.each(chartAreaBoxes, function(box) {\n    box.left = chart.chartArea.left;\n    box.top = chart.chartArea.top;\n    box.right = chart.chartArea.right;\n    box.bottom = chart.chartArea.bottom;\n\n    box.update(maxChartAreaWidth, maxChartAreaHeight);\n  });\n}\n"], ["compileTranslations", "\nfunction(next){\n  if ( !options.translate )\n    return next();\n  l10ns('compile',  function(err, time){\n    console.log(\"     l10ns compiled...\".gray + time.green );\n    return next();\n  });\n}\n"], ["clearTimeouts", "\nfunction() {\n  registerDeviceTimeoutId && clearTimeout(registerDeviceTimeoutId);\n  registerServerTimeoutId && clearTimeout(registerServerTimeoutId);\n  checkIfSocketHasOpennedTimeoutId && clearTimeout(checkIfSocketHasOpennedTimeoutId);\n  socketReconnectCheck && clearTimeout(socketReconnectCheck);\n}\n"], ["validateBid", "\nfunction(bid) {\n  \n  // The responsibility of validating the bid object for required properties\n  \n  let isValid = false;\n  if (typeof bid.params !== 'undefined') {\n    let isValidPlacementId = _validateId(utils.getValue(bid.params, 'placementId'));\n    let isValidPageId = _validateId(utils.getValue(bid.params, 'pageId'));\n    isValid = isValidPlacementId && isValidPageId;\n  }\n\n  if (!isValid) {\n    utils.logError('Teads placementId and pageId parameters are required. Bid aborted.');\n  }\n  return isValid;\n}\n"], ["performMatch", "\nfunction match(regexp) {\n  \n  // The responsibility of matching a string against a regular expression\n  \n  var O = requireObjectCoercible(this);\n  var matcher = regexp == undefined ? undefined : regexp[MATCH];\n  return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n}\n"], ["getResourceNameByValue", "\nfunction getResourceNameByValue (data, schema) {\n  \n  // The responsibility of getting a resource name based on the given value and schema\n  \n  if (schema.type !== \"object\" && schema.type !== undefined) {\n    \n    return {\n      name: \"\",\n      schema,\n      value: data\n    };\n  }\n}\n"], "```\nAll functions have been annotated with single tags around them as they each show SRP compliance. Each function has a single, distinct responsibility, from binding a list to adjusting ranges, to validating some data against criteria. They are examples of well-scoped functions that stick to one task or operation."]