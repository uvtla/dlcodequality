[["cross", "\nfunction cross( x, y ) {\n    <inputValidation>\n    if ( !Array.isArray( x ) ) {\n        throw new TypeError( 'cross()::invalid input argument. First argument must be an array.' );\n    }\n    if ( !Array.isArray( y ) ) {\n        throw new TypeError( 'cross()::invalid input argument. Second argument must be an array.' );\n    }\n    if ( x.length !== 3 || y.length !== 3 ) {\n        throw new Error( 'cross()::invalid input argument. Input arrays must be of length 3.' );\n    }\n    </inputValidation>\n    return [\n        x[1]*y[2]-x[2]*y[1],\n        x[2]*y[0]-x[0]*y[2],\n        x[0]*y[1]-x[1]*y[0]\n    ];\n}\n"], ["Vector", "\nfunction Vector( x, y ) {\n    <checkInstance>\n    if ( !(this instanceof Vector) ){\n        return new Vector( x, y );\n    }\n    </checkInstance>\n\n    <initializeArray>\n    if (typedArrays){\n        this._ = new Float64Array(5);\n    } else {\n        this._ = [];\n    }\n    </initializeArray>\n\n    <assignOrCloneValues>\n    if (x && (x.x !== undefined || x._ && x._.length)){\n        this.clone( x );\n    } else {\n        this.recalc = true; \n        this.set( x, y );\n    }\n    </assignOrCloneValues>\n}\n"], ["removeDuplicateAttributes", "\nfunction removeDuplicateAttributes(attrs) {\n    var attrsNames = [],\n        res = [];\n\n    _.forEach(attrs, function (attr) {\n        if (attrsNames.indexOf(attr.name) === -1) {\n            res.push(attr);\n            attrsNames.push(attr.name);\n        }\n    });\n\n    return res;\n}\n"], ["printCollectedDeviceData", "\nfunction printCollectedDeviceData(results) {\n    <defineDataToKeep>\n    var dataToKeep = {\n        'AIN0': 'val',\n        'FIRMWARE_VERSION': 'val',\n        'WIFI_IP': 'str',\n        'ETHERNET_IP': 'str',\n        'WIFI_RSSI': 'str',\n        'WIFI_VERSION': 'val',\n        'SERIAL_NUMBER': 'val',\n        'HARDWARE_INSTALLED': 'productType',\n    };\n    </defineDataToKeep>\n    \n    <processResults>\n    var vals = [];\n    results.forEach(function(result) {\n        result = result.data;\n        var data = {};\n        var keyToKeep = 'res';\n        if(dataToKeep[result.name]) {\n            keyToKeep = dataToKeep[result.name];\n        }\n        data[result.name] = result.res;\n        if(result[keyToKeep]) {\n            data[result.name] = result[keyToKeep];\n        }\n        vals.push(data);\n    });\n    </processResults>\n\n    <logDebugInformation>\n    if(DEBUG_COLLECTED_DEVICE_DATA) {\n        console.log('Connection Type', self.curatedDevice.savedAttributes.connectionTypeName);\n        console.log('Serial Number', self.curatedDevice.savedAttributes.serialNumber);\n        console.log('Read Data', self.curatedDevice.getDevice().handle,':');\n        console.log(vals);\n    }\n    </logDebugInformation>\n}\n"], ["checkFieldsLogicallySound", "\nfunction checkFieldsLogicallySound(indexFields, selector) {\n  var firstField = indexFields[0];\n  var matcher = selector[firstField];\n\n  <checkUndefinedMatcher>\n  if (typeof matcher === 'undefined') {\n    return true;\n  }\n  </checkUndefinedMatcher>\n\n  <checkLogicalOperator>\n  var hasLogicalOperator = Object.keys(matcher).some(function (matcherKey) {\n    return !(isNonLogicalMatcher(matcherKey));\n  });\n  </checkLogicalOperator>\n\n  <checkInvalidNeOperator>\n  var isInvalidNe = Object.keys(matcher).length === 1 &&\n    getKey(matcher) === '$ne';\n  </checkInvalidNeOperator>\n\n  return !isInvalidNe;\n}\n"], ["parse_AddinUdf", "\nfunction parse_AddinUdf(blob, length, opts) {\n    <adjustBlobPointer>\n    blob.l += 4; length -= 4;\n    </adjustBlobPointer>\n    var l = blob.l + length;\n    <parseName>\n    var udfName = parse_ShortXLUnicodeString(blob, length, opts);\n    </parseName>\n    <checkPadding>\n    var cb = blob.read_shift(2);\n    l -= blob.l;\n    if(cb !== l) throw new Error(\"Malformed AddinUdf: padding = \" + l + \" != \" + cb);\n    </checkPadding>\n    blob.l += cb;\n    return udfName;\n}\n"], ["_getFieldLayoutData", "\nfunction _getFieldLayoutData(oField){\n    var oLayoutData;\n    <switchLayout>\n    switch (this.getLayout()) {\n    case SimpleFormLayout.ResponsiveLayout:\n        oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, \"sap.ui.layout.ResponsiveFlowLayoutData\");\n        break;\n    case SimpleFormLayout.GridLayout:\n        oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, \"sap.ui.layout.form.GridElementData\");\n        break;\n    case SimpleFormLayout.ResponsiveGridLayout:\n        oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, \"sap.ui.layout.GridData\");\n        break;\n    case SimpleFormLayout.ColumnLayout:\n        oLayoutData = FormLayout.prototype.getLayoutDataForElement(oField, \"sap.ui.layout.form.ColumnElementData\");\n        break;\n    }\n    </switchLayout>\n    return oLayoutData;\n}\n"], ["updateCellsStyle", "\nfunction(model, cells, key, value) {\n    <checkAndBeginUpdate>\n    if (cells != null && cells.length > 0) {\n        model.beginUpdate();\n        try {\n            for (var i = 0; i < cells.length; i++) {\n                if (cells[i] != null) {\n                    var style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n                    model.setStyle(cells[i], style);\n                }\n            }\n        } finally {\n            model.endUpdate();\n        }\n    }\n    </checkAndBeginUpdate>\n}\n"], ["config", "\nfunction config(obj) {\n    <validateObject>\n    if (!obj || typeof obj !== 'object') {\n        throw Error(decimalError + 'Object expected');\n    }\n    </validateObject>\n    \n    <setConfiguration>\n    var i, p, v,\n    ps = [\n        'precision', 1, MAX_DIGITS,\n        'rounding', 0, 8,\n        'toExpNeg', -1 / 0, 0,\n        'toExpPos', 0, 1 / 0\n    ];\n\n    for (i = 0; i < ps.length; i += 3) {\n        if ((v = obj[p = ps[i]]) !== void 0) {\n            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n            else throw Error(invalidArgument + p + ': ' + v);\n        }\n    }\n\n    if ((v = obj[p = 'LN10']) !== void 0) {\n        if (v == Math.LN10) this[p] = new this(v);\n        else throw Error(invalidArgument + p + ': ' + v);\n    }\n    </setConfiguration>\n\n    return this;\n}\n"], ["connect", "\nfunction connect () {\n    <initializeConnection>\n    if (!alreadyConnectedOnce) {\n        if (connectedPromise === null) connection = createConnection()\n        var url = AppConfig.apiUrl + 'websocket/chat'\n        if (accessToken) {\n            token = accessToken\n            url += '?access_token=' + accessToken\n        }\n        <createSocket>\n        socket = new SockJS(url)\n        stompClient = webstomp.over(socket)\n        </createSocket>\n        \n        <logConnectionAttempt>\n        console.tron.log(`Connecting to ${url}`)\n        </logConnectionAttempt>\n        \n        <performConnection>\n        var headers = {}\n        stompClient.connect(headers, onConnect, onError)\n        </performConnection>\n        \n        alreadyConnectedOnce = true\n    }\n    </initializeConnection>\n}\n"], "```"]