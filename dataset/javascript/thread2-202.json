[["buildProcessOptions", "\nfunction buildProcessOptions(processes, logRoot, cmdOptions) {\n  <createOptionObjects>\n  return _.flatten(_.map(_.keys(processes), function(procKey) {\n    var concurrentCount = parser.parseConcurrencyOpts(cmdOptions)[procKey] || 1;\n    var command = processes[procKey];\n    return _.map(_.range(concurrentCount), function(index) {\n      return {\n        port: cmdOptions.port,\n        app: cmdOptions.app,\n        appName: getProcessName(cmdOptions.app, procKey, index),\n        environmentVar: getEnvOpts(command, cmdOptions),\n        processCommand: command,\n        processName: procKey,\n        logRoot: logRoot,\n        directory: parser.cmdWorkingDir(cmdOptions),\n        user: cmdOptions.user,\n        num: index\n      };\n    });\n  }));\n  </createOptionObjects>\n}\n"], ["anonymousEventTrigger", "\nfunction(el, attrName, oldValue) {\n  <triggerAttributesEvent>\n  if (can.data(can.$(el), \"canHasAttributesBindings\")) {\n    return setImmediate(function() {\n      can.trigger(el, {\n          type: \"attributes\",\n          attributeName: attrName,\n          target: el,\n          oldValue: oldValue,\n          bubbles: false\n        }, []);\n    });\n  }\n  </triggerAttributesEvent>\n}\n"], ["fromWylie", "\nfunction fromWylie(str, warns) {\n  <initializeTranslationVariables>\n  var out = '', line = 1, units = 0, i = 0\n  if (opt.fix_spacing) { str = str.replace(/^\\s+/, '') }\n  </initializeTranslationVariables>\n  <tokenization>\n  var tokens = splitIntoTokens(str);\n  </tokenization>\n  <translateTokens>\n  ITER:while (tokens[i] != null) {\n    // ... (translation logic and iteration over tokens) ...\n  }\n  </translateTokens>\n  <outputValidation>\n  if (units == 0) warn(warns, \"No Tibetan characters found!\");\n  </outputValidation>\n  return out\n}\n"], ["isKeyNotMatch", "\nfunction isKeyNotMatch (expect, actual) {\n  <compareKeys>\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n  </compareKeys>\n}\n"], ["webidAndPubKeyToAddress", "\nfunction webidAndPubKeyToAddress(webid, pubKey, testnet) {\n  <parsePublicKey>\n  if (typeof(pubKey) === 'string') {\n    pubKey = new bitcore.HDPublicKey(pubKey)\n  }\n  </parsePublicKey>\n  <computeHash>\n  var hash = sha2(webid)\n  var ints = hashToInts(hash)\n  </computeHash>\n  <deriveAddress>\n  var dep2 = pubKey.derive(ints[0]).derive(ints[1]).derive(ints[2]).derive(ints[3])\n  </deriveAddress>\n  <createAddress>\n  if (testnet) {\n    var address2 = new bitcore.Address(dep2.publicKey, bitcore.Networks.testnet)\n  } else {\n    var address2 = new bitcore.Address(dep2.publicKey)\n  }\n  </createAddress>\n  return address2\n}\n"], ["DeviceGuider", "\nfunction DeviceGuider(deviceLoader) {\n  <initialize>\n  var self = this;\n  EventEmitter2.call(this, {\n    wildcard: true,\n    delimiter: ':',\n    maxListeners: 1000 \n  });\n  </initialize>\n  <setupLogging>\n  if (this.log) {\n    // ... (wrapped log function) ...\n  } else if (DeviceGuider.prototype.log) {\n    // ... (wrapped log function using prototype) ...\n  } else {\n    var debug = require('debug')(this.constructor.name);\n    this.log = function(msg) {\n      debug(msg);\n    };\n  }\n  </setupLogging>\n  <initializeState>\n  // ... (initializing state object and methods) ...\n  </initializeState>\n  <registerDeviceEvents>\n  // ... (setup event listeners for deviceLoader) ...\n  </registerDeviceEvents>\n}\n"], ["termShieldConstructor", "\nfunction(doc, confclass, linker, in_argument_hash, add_ons){\n    \n    <initialize>\n    this._is_a = 'bbop-widget-set.term_shield';\n    var anchor = this;\n    </initialize>\n    \n    <setupLogging>\n    // ... (Logging setup) ...\n    </setupLogging>\n\n    <processDocument>\n    var txt = 'Nothing here...';\n    if( doc && confclass ){\n      // ... (processes the document and creates a table structure for display) ...\n    }\n    var div = new html.tag('div', {'generate_id': true});\n    var div_id = div.get_id();\n    </processDocument>\n\n    <appendToBody>\n    // ... (appending the div to the body) ...\n    </appendToBody>\n\n    <createDialog>\n    // ... (creation and setup of dialog) ...\n    </createDialog>\n\n    return dia; // Variable 'dia' is presumably declared and used inside createDialog; this is implied, but not directly visible in the code snippet.\n}\n"], ["castSlice", "\nfunction castSlice(array, start, end) {\n  <sliceArray>\n  var length = array.length;\n  end = end === undefined$1 ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n  </sliceArray>\n}\n"], ["isNumeric", "\nfunction isNumeric(input) {\n  <checkNumeric>\n  return input !== undefined\n    && input !== null\n    && (typeof input === 'number' || parseInt(input, 10) == input);\n  </checkNumeric>\n}\n"], ["rule", "\nfunction rule(type = 'multi', terms = [], roles = []) {\n  <incrementGeneration>\n  generation += 1;\n  </incrementGeneration>\n  <generateRule>\n  return {\n    type: 'rule',\n    generation,\n    rule: {\n      type,\n      terms,\n      roles,\n    },\n  };\n  </generateRule>\n}\n"], ""]