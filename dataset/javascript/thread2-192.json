[["locateConfig", "\nfunction locateConfig(url) {\n  let configpath = '';\n\n  function check(dir) {\n    <constructPaths>\n    const urljs = path.join(dir, DEFAULT_MANIFEST.js);\n    const urljson = path.join(dir, DEFAULT_MANIFEST.json);\n    const urlpkgjson = path.join(dir, DEFAULT_MANIFEST.pkgjson);\n    let urlFinal;\n    </constructPaths>\n\n    <checkExistence>\n    if (exists((urlFinal = urljs)) || exists((urlFinal = urljson)) || exists((urlFinal = urlpkgjson))) {\n      return urlFinal;\n    }\n    </checkExistence>\n\n    return '';\n  }\n\n  <resolveConfigPath>\n  if (url) {\n    configpath = path.resolve(url);\n\n    try {\n\n      if (!path.extname(configpath).length || fs.statSync(configpath).isDirectory()) {\n        configpath = check(configpath);\n        if (!configpath) throw Error('no default found');\n      }\n    } catch (err) {\n      throw Error(strong('buddy') + ' config not found in ' + strong(path.dirname(url)));\n    }\n  </resolveConfigPath>\n\n  <huntForConfigPath>\n  else {\n    try {\n      configpath = hunt(\n        process.cwd(),\n        (resource, stat) => {\n          if (stat.isFile()) {\n            const basename = path.basename(resource);\n\n            return basename == DEFAULT_MANIFEST.js ||\n              basename == DEFAULT_MANIFEST.json ||\n              basename == DEFAULT_MANIFEST.pkgjson;\n          }\n        },\n        true\n      );\n    } catch (err) {\n      if (!configpath) throw Error(strong('buddy') + ' config not found');\n    }\n  }\n  </huntForConfigPath>\n\n  return configpath;\n}\n"], ["unknownFunctionName", "\nfunction(branch, category, appName) {\n  if (!isBranch(branch)) {\n    throw new TypeError('Invalid branch: ' + pp(branch));\n  }\n\n  var recMap = function(node) {\n    if (isTask(node)) {\n      return [node];\n    } else if (isBranch(node)) {\n      <flattenChildren>\n      node.children = _.flatten(_.map(node.children, recMap));\n      </flattenChildren>\n\n      <sortChildren>\n      node.children.sort(compareBranchOrTask);\n      </sortChildren>\n\n      <resolveNameConflicts>\n      var nameMap = _.groupBy(node.children, getName);\n      node.children = _.map(_.values(nameMap), function(children) {\n        ...\n      });\n      </resolveNameConflicts>\n\n      <overrideChildrenIfAppName>\n      if (getName(node) === appName) {\n        ...\n      } else {\n        return [node];\n      }\n      </overrideChildrenIfAppName>\n\n    } else {\n      assert(false);\n    }\n  };\n\n  <addNodesToLines>\n  var recAdd = function(node, lines, parentName, depth) {\n    ...\n  };\n  </addNodesToLines>\n\n  <processBranch>\n  if (getName(branch) !== appName) {\n    branch = recMap(branch)[0];\n  }\n  </processBranch>\n\n  <filterByCategory>\n  var kids = _.filter(branch.children, function(child) {\n    ...\n  });\n  </filterByCategory>\n\n  if (!_.isEmpty(kids)) {\n    <formatOutput>\n    var tabSpacing = 4;\n    ...\n    lines.unshift(header);\n    return lines.join('\\n');\n    </formatOutput>\n  }\n}\n"], ["canTotalBeCalculatedAndIfNotWarnUser", "\nfunction canTotalBeCalculatedAndIfNotWarnUser(item) {\n  <checkIfSummable>\n  if (canResultsBeSummed(item)) {\n    return true;\n  }\n  </checkIfSummable>\n\n  <warnUserOnChangeActive>\n  var conceptItems = item._concepts[0].items;\n  var changedActive = [];\n  ...\n  if (changedActive.length > 0) {\n    ...\n    return false;\n  }\n  </warnUserOnChangeActive>\n\n  return true;\n}\n"], ["noFunctionName_1", "\nfunction () {\n    var self = this;\n    if (self._stopped)\n      return;\n\n    <throwIfNotQuerying>\n    if (self._phase !== PHASE.QUERYING) {\n      self._pollQuery();\n      throw new SwitchedToQuery;\n    }\n    </throwIfNotQuerying>\n\n    <flagForRequery>\n    self._requeryWhenDoneThisQuery = true;\n    </flagForRequery>\n  }\n"], ["getMetadataPage", "\nfunction getMetadataPage(options) {\n\treturn new Promise(function(resolve, reject) {\n\t\t<retrieveFiles>\n\t\tfs.readdir(__dirname + '/../proxies/', (err, files) => {\n\t\t...\n\t\t</retrieveFiles>\n\n\t\t<prepareTemplateData>\n\t\tconst templateData = {\n\t\t\tmetadata: options.service,\n\t\t\tejs,\n\t\t\tproxies,\n\t\t\tisStatic: options.isStatic,\n\t\t\troot: options.root,\n\t\t\timages: getFilesContent(images, 'base64'),\n\t\t\tjs: getFilesContent(jsFiles),\n\t\t\tcss: getFilesContent(cssFiles),\n\t\t};\n\t\t</prepareTemplateData>\n\n\t\t<renderTemplate>\n\t\tejs.renderFile(\n\t\t\t__dirname + '/../templates/metadata.ejs',\n\t\t\ttemplateData,\n\t\t\t{ _with: false },\n\t\t\t(err, html) => {\n\t\t\t\t...\n\t\t\t}\n\t\t);\n\t\t</renderTemplate>\n\t});\n}\n"], ["findInAllWorkingSets", "\nfunction findInAllWorkingSets(fullPath) {\n    <searchWorkSets>\n    var index,\n        result = [];\n    ...\n    return result;\n    </searchWorkSets>\n}\n"], ["noFunctionName_2", "\nfunction(matches)\n{\n    <resolveMatchConflicts>\n    ...\n    return matches;\n    </resolveMatchConflicts>\n}\n"], ["processTextNode", "\nfunction processTextNode(node, options) {\n    options = options || {};\n\n    <collectNodeData>\n    var data = [].concat(getBasicFields(node, options)).\n        concat([\n            node.lineCount\n        ]);\n    </collectNodeData>\n\n    <optionalExtensionFields>\n    if (!options.body) {\n        data = data.concat(getExtensionFields(node, options));\n    }\n    </optionalExtensionFields>\n\n    data.node = node;\n    return data;\n}\n"], ["intValidatorWithErrors", "\nfunction intValidatorWithErrors( n, min, max, caller, name ) {\n    <validateIntegerInRange>\n            if ( n < min || n > max || n != truncate(n) ) {\n                raise( caller, ( name || 'decimal places' ) +\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\n            }\n            </validateIntegerInRange>\n\n            return true;\n        }\n"], ["calendarWeekdayRow", "\nfunction(html) {\n\n        <constructWeekdayRow>\n        html[html.length] = '<tr class=\"' + this.Style.CSS_WEEKDAY_ROW + '\">';\n\n        if (this.cfg.getProperty(DEF_CFG.SHOW_WEEK_HEADER.key)) {\n            html[html.length] = '<th>&#160;</th>';\n        }\n\n        for(var i=0;i < this.Locale.LOCALE_WEEKDAYS.length; ++i) {\n            html[html.length] = '<th class=\"' + this.Style.CSS_WEEKDAY_CELL + '\">' + this.Locale.LOCALE_WEEKDAYS[i] + '</th>';\n        }\n\n        if (this.cfg.getProperty(DEF_CFG.SHOW_WEEK_FOOTER.key)) {\n            html[html.length] = '<th>&#160;</th>';\n        }\n\n        html[html.length] = '</tr>';\n        </constructWeekdayRow>\n\n        return html;\n    }\n"], "```"]