[["waitIdleTimeExpire", "\nfunction waitIdleTimeExpire(key, timeout) {\n  return function(client) {\n    var contains = true;\n    t.sleepFor(200);\n    waitsFor(function() {\n      client.containsKey(key).then(function(success) {\n        contains = success;\n      });\n      return !contains;\n    }, '`' + key + '` key should be expired', timeout);\n    return client;\n  }\n}\n"], ["removeFeatures", "\nfunction(features) {\n  if(!(OpenLayers.Util.isArray(features))) {\n    features = [features];\n  }\n  for(var i=0; i<features.length; ++i) {\n    delete this.features[features[i].id];\n  }\n  this.redraw();\n}\n"], ["interpret", "\nfunction interpret(source) {\n  var tree = parser.parse(source);\n  var js = [\n    'module.exports = function (out, globals) {',\n    '  var end = false;',\n    // ... (omitting the repetitive parts for brevity)\n    '  }',\n    '  if (end) {',\n    '    out.end();',\n    '  }',\n    '}'\n  ];\n  interpretChildren(js, tree, '    ');\n  js.push(\n    '  }',\n    '  if (end) {',\n    '    out.end();',\n    '  }',\n    '}'\n  );\n  js = js.join('\\n');\n  return js;\n}\n"], ["connect", "\nfunction connect (req, opts, fn) {\n  <establishConnection>\n  var proxy = this.proxy;\n  var socket;\n  if (this.secureProxy) {\n    socket = tls.connect(proxy);\n  } else {\n    socket = net.connect(proxy);\n  }\n  </establishConnection>\n  \n  <handlingData>\n  var buffers = [];\n  var buffersLength = 0;\n\n  function read () {\n    // ...\n  }\n\n  function cleanup () {\n    // ...\n  }\n\n  function onclose (err) {\n    // ...\n  }\n\n  function onend () {\n    // ...\n  }\n\n  function onerror (err) {\n    // ...\n  }\n\n  function ondata (b) {\n    // ...\n  }\n\n  function onsocket (socket) {\n    // ...\n  }\n\n  socket.on('error', onerror);\n  socket.on('close', onclose);\n  socket.on('end', onend);\n\n  if (socket.read) {\n    read();\n  } else {\n    socket.once('data', ondata);\n  }\n  </handlingData>\n\n  <sendingRequest>\n  var hostname = opts.host + ':' + opts.port;\n  var msg = 'CONNECT ' + hostname + ' HTTP/1.1\\r\\n';\n  var auth = proxy.auth;\n  if (auth) {\n    msg += 'Proxy-Authorization: Basic ' + Buffer.from(auth, 'utf8').toString('base64') + '\\r\\n';\n  }\n  msg += 'Host: ' + hostname + '\\r\\n' +\n      'Connection: close\\r\\n' +\n      '\\r\\n';\n  socket.write(msg);\n  </sendingRequest>\n}\n"], ["updateCurrentProjectContext", "\nfunction _updateCurrentProjectContext() {\n  var defaultScopeOrder = PreferencesImpl.manager._getScopeOrder({});\n  scopeOrderWithProject = _adjustScopeOrderForProject(defaultScopeOrder, true);\n  scopeOrderWithoutProject = _adjustScopeOrderForProject(defaultScopeOrder, false);\n  CURRENT_PROJECT.scopeOrder = scopeOrderWithProject;\n}\n"], ["checkSlugAvailability", "\nfunction (slug) {\n  var query = { where: {} };\n  query.where[slugColumn] = slug;\n  return Model.findOne(query).then(function (model) {\n    return model === null;\n  });\n}\n"], ["setupBinding", "\nfunction (target, element, key, path, twoWays, jq, valueFunction, events) {\n  this.clearBinding(element, key);\n  var ab = new WebAtoms.AtomBinding(target, element, key, path, twoWays, jq, valueFunction, events);\n  this.bindings.push(ab);\n  ab.setup();\n}\n"], ["ClientConstructor", "\nfunction Client(connParams, db) {\n  this.connParams = connParams;\n  this.connected  = false;\n  this.lastError = null;\n  this.db = db || 'pg';\n}\n"], ["toBuffer", "\nfunction toBuffer(buf) {\n  if (buf instanceof ArrayBuffer) {\n    return arrayBufferToBuffer(buf);\n  } else if (Buffer.isBuffer(buf)) {\n    return buf;\n  } else if (buf instanceof Uint8Array) {\n    return new Buffer(buf);\n  } else {\n    return buf; \n  }\n}\n"], ["inverseProjection", "\nfunction inverse$15(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n"], "```\n\nIn several cases here, certain functions might appear to be doing multiple things because they contain sub-functions, but it is necessary to evaluate the overarching goal of the parent function, which may encapsulate the responsibilities within a single theme or purpose such as setting up a connection or performing a calculation."]