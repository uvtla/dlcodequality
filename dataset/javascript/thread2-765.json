[["chooseViewForRoute", "\nfunction chooseViewForRoute() {\n    <addExtraParams>\n    var allParams = addExtraParamsTo(params,\n        layoutDelegate,\n        serverRequest,\n        serverResponse\n    );\n    </addExtraParams>\n\n    return promisify(originalHandler).apply(router, allParams)\n        .then(function(view) {\n            <validateAndViewHandling>\n            validateView(view);\n            return {\n                view: view,\n                reason: null,\n            };\n            </validateAndViewHandling>\n        })\n        .catch(function(reason) {\n            <catchError>\n            return {\n                view: null,\n                reason: reason\n            };\n            </catchError>\n        });\n}\n"], ["wrap", "\nfunction wrap(fn, isFocus, isDescription, isSpec) {\n    if (!fn) return fn;\n    return function(name, def) {\n        <handleDescriptionAndSpec>\n        if (isDescription && depth === 0) {\n            isFaking = !shouldUseDescription(name, def);\n        }\n        hasOwnSpecs = hasOwnSpecs || (isSpec && !isFaking);\n        hasOtherSpecs = hasOtherSpecs || (isSpec && isFaking);\n        hasFocusedWhileFaking = hasFocusedWhileFaking || (isFocus && isFaking);\n        hasFocusedWithoutFaking =\n            hasFocusedWithoutFaking || (isFocus && !isFaking);\n        if (isDescription) def = wrapDescription(def);\n        </handleDescriptionAndSpec>\n\n        <forceDescribeAndFakingLogic>\n        if (!isFaking || forceDescribe) {\n            return fn.call(this, name, def);\n        } else if (isDescription) {\n            def();\n        }\n        </forceDescribeAndFakingLogic>\n    };\n}\n"], ["unknown", "\nfunction(val) {\n    <urlAssignmentAndAnalysis>\n    if(val) {\n        complete_url = val;\n        url_info = JSDAS.URL.analyzeUrl(url);\n    }       \n    </urlAssignmentAndAnalysis>\n    return val;\n}\n"], ["deprecateMethod", "\nfunction deprecateMethod(book, key, fn, msg) {\n    return function() {\n        <logNoticeAndApply>\n        logNotice(book, key, msg);\n        return fn.apply(this, arguments);\n        </logNoticeAndApply>\n    };\n}\n"], ["getFilePath", "\nfunction getFilePath (str) {\n    <extractRootAndPathEnd>\n    var hasRoot = /^[a-z]:/i.exec(str)\n    var colonLeftIndex = 0\n    if (hasRoot) {\n      colonLeftIndex = hasRoot[0].length\n    }\n    var pathEnd = str.split('\\n')[0].indexOf(':', colonLeftIndex)\n    if (pathEnd === -1) {\n      return null\n    }\n    </extractRootAndPathEnd>\n    return str.substring(0, pathEnd)\n}\n"], ["encryptGroupSessionKey", "\nfunction encryptGroupSessionKey(opts) {\n    return encryptOlmEvent({\n        <encryptionDetails>\n        senderKey: opts.senderKey,\n        recipient: opts.recipient,\n        p2pSession: opts.p2pSession,\n        plaincontent: {\n            algorithm: 'm.megolm.v1.aes-sha2',\n            room_id: opts.room_id,\n            session_id: opts.groupSession.session_id(),\n            session_key: opts.groupSession.session_key(),\n        },\n        </encryptionDetails>\n        plaintype: 'm.room_key',\n    });\n}\n"], ["getId", "\nfunction getId (transaction) {\n    <generateIdFromTransaction>\n\tvar hash = crypto.createHash('sha256').update(getBytes(transaction).toString('hex'), 'hex').digest();\n\tvar temp = new Buffer(8);\n\tfor (var i = 0; i < 8; i++) {\n\t\ttemp[i] = hash[7 - i];\n\t}\n\tvar id = bignum.fromBuffer(temp).toString();\n    </generateIdFromTransaction>\n\treturn id;\n}\n"], ["cast", "\nfunction cast(data, EntityClass) {\n      <conditionalCasting>\n      if (!EntityClass && !_lodash2.default.isArray(data)) {\n        return _dataManagement2.default.cast(data, this);\n      } else if (!EntityClass && _lodash2.default.isArray(data)) {\n        return _dataManagement2.default.cast(data, [this]);\n      } else if (_lodash2.default.isArray(EntityClass) && EntityClass.length === 0) {\n        return _dataManagement2.default.cast(data, [this]);\n      } else if (_lodash2.default.isObject(EntityClass) && !_lodash2.default.isFunction(EntityClass) && _lodash2.default.values(EntityClass).length === 0) {\n        return _dataManagement2.default.cast(data, _defineProperty({}, this.name, this));\n      } else {\n        return _dataManagement2.default.cast(data, EntityClass);\n      }\n      </conditionalCasting>\n}\n"], ["unknown", "\nfunction(id, key) {\n      <memoryDeletion>\n      if(typeof key !== 'undefined' && typeof key === 'string') {\n        if(memStore[id] && memStore[id][key]) {\n          delete memStore[id][key];\n        }\n        return true;\n      }\n      else if(typeof key === 'undefined') {\n        delete memStore[id];\n        return true;\n      }\n      else {\n        throw new Error('invalid data type or missing value');\n        return false;\n      }\n      </memoryDeletion>\n}\n"], ["run", "\nfunction run() {\n    <initializeRun>\n    var template;\n    $ionicTemplateCache._runCount++;\n    hasRun = true;\n    </initializeRun>\n    \n    <cacheHandling>\n    if (toCache.length === 0) return;\n    var i = 0;\n    while (i < 4 && (template = toCache.pop())) {\n      if (isString(template)) $http.get(template, { cache: $templateCache });\n      i++;\n    }\n    if (toCache.length) {\n      $timeout(run, 1000);\n    }\n    </cacheHandling>\n}\n"], ""]