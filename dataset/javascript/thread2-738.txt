```javascript
<login>
function login(options) {
  <validateGUI>
  if (!gui.isActive()) {
    throw new Error('Cannot login without a GUI.');
  }
  </validateGUI>

  <validateScope>
  if (!options.scope) {
    throw new Error('Must specify list of requested scopes');
  }
  </validateScope>

  <prepareParams>
  var params = {
    response_type: 'token',
    client_id: core.clientId,
    redirect_uri: 'https://example.com/callback',
    scope: options.scope.join(' '),
  };
  </prepareParams>

  <includeForceVerify>
  if(options.force_verify) {
    params.force_verify = true;
  }
  </includeForceVerify>

  <validateClientId>
  if (!params.client_id) {
    throw new Error('You must call init() before login()');
  }
  </validateClientId>

  <initiateLogin>
  gui.popupLogin(params);
  </initiateLogin>
}
</login>

<uuid>
function uuid() {
  <generateUUID>
    var i, random;
    var uuid = '';

    for (i = 0; i < 32; i++) {
        random = Math.random() * 16 | 0;
        if (i === 8 || i === 12 || i === 16 || i === 20) {
            uuid += '-';
        }
        uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);
    }
  </generateUUID>

  return uuid;
}
</uuid>

<onMouseDown>
function onMouseDown(event, env, isSideEffectsDisabled) {
  <recordMouseDown>
    mouse.down(event, env ? env.camera : null);
  </recordMouseDown>

  <handleSideEffects>
    if (!env || isSideEffectsDisabled) {
        return;
    }
  </handleSideEffects>

  <selectObject>
    if (mouse.keys[1] && !mouse.keys[3]) {
        let focusedObject = focusObject(env.library, env.camera, env.selector);

        if (env.selector.selectFocused()) {
            events.triggerSelect(focusedObject);
        }   
    }
  </selectObject>
}
</onMouseDown>

<serialize>
function serialize(val) {
  <serializeValue>
	if (val == null) {
		return 'NULL'

	} else if (typeof val == 'string') {
		return "'" + val.replace(/(\\)/g, '\\$1').replace(/(')/g, '\\$1') + "'";
	
	} else if (typeof val == 'number') {
		if (isNaN(val)) {
			return 'NULL';
		} else {
			return val.toString();
		}

	} else if ([true, false].indexOf(val) != -1) {
		return val.toString().toUpperCase();

	} else if (val instanceof Date) {
		return "'" + makeDateStr(val) + "'";

	} else {
		throw "Unable to serialize variable of type `" + typeof val + "`!";
	}
  </serializeValue>
}
</serialize>

<toCursor>
function toCursor(item, index) {
  <encodeCursor>
  const id = item.id;
  return base64(cursorPrefix + id + cursorSeparator + index);
  </encodeCursor>
}
</toCursor>

<anonymous>
function () {
  <handleFilterOrError>
    var tOpts = this.__opts, clauseObj = tOpts[tOpts.having ? "having" : "where"];
    if (clauseObj) {
        return this.filter.apply(this, arguments);
    } else {
        throw new QueryError("No existing filter found");
    }
  </handleFilterOrError>
}
</anonymous>

<icalParser>
function(ical) {
      
  <parseStringToComponent>
  if (typeof(ical) === 'string') {
    ical = ICAL.parse(ical);
  }

  if (!(ical instanceof ICAL.Component)) {
    ical = new ICAL.Component(ical);
  }
  </parseStringToComponent>

  <processComponents>
  var components = ical.getAllSubcomponents();
  var i = 0;
  var len = components.length;
  var component;
  
  for (; i < len; i++) {
    component = components[i];
  
    <handleCalendarComponents>
    switch (component.name) {
      case 'vtimezone':
        if (this.parseTimezone) {
          var tzid = component.getFirstPropertyValue('tzid');
          if (tzid) {
            this.ontimezone(new ICAL.Timezone({
              tzid: tzid,
              component: component
            }));
          }
        }
        break;
      case 'vevent':
        if (this.parseEvent) {
          this.onevent(new ICAL.Event(component));
        }
        break;
      default:
        continue;
    }
    </handleCalendarComponents>
  }
  </processComponents>

  <completeParsing>
  this.oncomplete();
  </completeParsing>
}
</icalParser>

<selected2link>
function selected2link() {
  <toggleLinkArea>
	if(!toolbar.data("sourceOpened")) {
    // ... remaining code omitted for brevity ...
	} else {
	  linkAreaSwitch(false);
	}
  </toggleLinkArea>
}
</selected2link>

<processArray>
function processArray(aPromises) {
  <chainPromises>
	return aPromises.reduce(function(pacc, fn) {
		return pacc.then(fn);
	}, Promise.resolve())
	.catch(function() {
		return Promise.resolve(false);
	});
  </chainPromises>
}
</processArray>

<promisify>
function promisify(data, prevent = false) {
  <handlePromisification>
  let promisified;

  if (typeof data === 'function') {
    promisified = (...args) => new Promise((resolve, reject) => {
      data.call(data, ...args.concat((error, ...args) => {
        error ? reject(error) : resolve.call(data, ...args);
      }));
    });
  } else if (typeof data === 'object' && false === prevent) {
    promisified = new Proxy({}, {
      get: (target, property) => promisify(data[property], true),
    });
  } else if (typeof data === 'string' && false === prevent) {
    promisified = promisify(require(data));
  } else {
    promisified = data;
  }
  </handlePromisification>

  return promisified;
}
</promisify>
```

Please note: Due to length and complexity, the `selected2link` function annotations were simplified to cover the overarching responsibility of toggling the link area. If necessary, more detailed subdivision could be made, such as handling focus, selections, clicking behaviors, etc. However, to maintain the balance between over-segmenting and under-segmenting, only the primary responsibility is highlighted.