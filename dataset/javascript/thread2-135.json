[["defaultComparison", "\nfunction defaultComparison(left, right) {\n        var leftS = $toString(left),\n            rightS = $toString(right),\n            val = 1;\n\n        if (leftS === rightS) {\n            val = +0;\n        } else if (leftS < rightS) {\n            val = -1;\n        }\n\n        return val;\n}\n"], ["getPfIcon", "\nfunction getPfIcon(iconName) {\n  const currentIcon = icons.pfIcons[iconName];\n  currentIcon.yOffset = 64;\n  <adjustIcon>\n  currentIcon.transform = `rotate(180 0 ${currentIcon.height / 2}) scale(-1 1)`\n  </adjustIcon>\n  return generateIcon(currentIcon, `${iconName}`)\n}\n"], ["executeRemoteMethod", "\nfunction (methodName, params, execOptions) {\n  <createRequestId>\n  var requestId = this._getRequestId(methodName, params);\n  </createRequestId>\n  <getPromiseForRequest>\n  var promise = this._getRequestPromise(requestId);\n  </getPromiseForRequest>\n\n  if (!promise) {\n      <addRequestToBatch>\n      this._addToBatch(methodName, params);\n      </addRequestToBatch>\n      <createPromise>\n      promise = this._createPromise(requestId);\n      </createPromise>\n      <runBatchedRequests>\n      this._run(execOptions);\n      </runBatchedRequests>\n  }\n\n  return promise;\n}\n"], ["commonErrorStatusHandler", "\nfunction commonErrorStatusHandler(result) {\n  <logWarning>\n  console.warn('\u63a5\u53e3\u8c03\u7528\u51fa\u9519', this.type || this.method, this.url, this.data, result.status, result);\n  </logWarning>\n\n  <handleFailStatus>\n  if (result.status === REQUEST_FAIL_STATUS) {\n      \n  }\n  </handleFailStatus>\n  <handleOtherStatus>\n  else if (result.status == 1) {\n      \n  }\n  </handleOtherStatus>\n}\n"], ["minjs", "\nfunction minjs(config, tools) {\n  return tools.simpleStream(config, [\n    <configConcat>\n    config.concat && concat(config.concat),\n    </configConcat>\n    <configMinify>\n    config.minify && uglify(config.uglifyjs)\n    </configMinify>\n  ])\n}\n"], ["handleUIColorPickerUpdate", "\nfunction(ui)\n{\n  try\n  {\n    <retrieveColorValue>\n    var all = ui.val('all');\n    </retrieveColorValue>\n    <applyBackgroundColor>\n    activePreview.css({ backgroundColor: all && '#' + all.hex || 'transparent' });\n    </applyBackgroundColor>\n    <setAlphaValue>\n    setAlpha.call($this, activePreview, all && Math.precision((all.a * 100) / 255, 4) || 0);\n    </setAlphaValue>\n  }\n  catch (e) { }\n}\n"], ["_rescheduleInterval", "\nfunction _rescheduleInterval(timeout, now) {\n    <calculateNextOccurrence>\n    timeout.occurrence = Math.round((now - timeout.firstTime) / timeout.interval);\n    </calculateNextOccurrence>\n    <setNextExecutionTime>\n    timeout.time = timeout.firstTime + timeout.occurrence * timeout.interval;\n    </setNextExecutionTime>\n}\n"], ["destroyDpad", "\nfunction(name) {\n  if (this._dpads[name]) {\n      <destroyParsedDefinitionInputs>\n      for (var d in this._dpads[name].parsedDefinition) {\n          this._dpads[name].parsedDefinition[d].input.destroy();\n      }\n      </destroyParsedDefinitionInputs>\n      <deleteDpad>\n      delete this._dpads[name];\n      </deleteDpad>\n      <triggerControlDestroyed>\n      Crafty.trigger(\"ControlDestroyed\", { type: \"Dpad\", name: name });\n      </triggerControlDestroyed>\n  }\n}\n"], ["binl", "\nfunction binl(x, len) {\n  <initializeHashValues>\n  var T, j, i, l,\n    h0 = 0x67452301,\n    h1 = 0xefcdab89,\n    h2 = 0x98badcfe,\n    h3 = 0x10325476,\n    h4 = 0xc3d2e1f0,\n    A1, B1, C1, D1, E1,\n    A2, B2, C2, D2, E2;\n  </initializeHashValues>\n\n  <prepareInput>\n  x[len >> 5] |= 0x80 << (len % 32);\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n  l = x.length;\n  </prepareInput>\n\n  <processInput>\n  for (i = 0; i < l; i += 16) {\n    A1 = A2 = h0;\n    B1 = B2 = h1;\n    C1 = C2 = h2;\n    D1 = D2 = h3;\n    E1 = E2 = h4;\n    for (j = 0; j <= 79; j += 1) {\n      // complex hashing process...\n    }\n\n    T = safe_add(h1, safe_add(C1, D2));\n    h1 = safe_add(h2, safe_add(D1, E2));\n    h2 = safe_add(h3, safe_add(E1, A2));\n    h3 = safe_add(h4, safe_add(A1, B2));\n    h4 = safe_add(h0, safe_add(B1, C2));\n    h0 = T;\n  }\n  </processInput>\n  \n  return [h0, h1, h2, h3, h4];\n}\n"], ["QuickSearchField", "\nfunction QuickSearchField($input, options) {\n  <setInstanceVariables>\n  this.$input = $input;\n  this.options = options;\n  </setInstanceVariables>\n  \n  <setDefaultOptions>\n  options.maxResults = options.maxResults || 10;\n  </setDefaultOptions>\n\n  <bindEventHandlers>\n  this._handleInput   = this._handleInput.bind(this);\n  this._handleKeyDown = this._handleKeyDown.bind(this);\n  </bindEventHandlers>\n\n  <registerEventListeners>\n  $input.on(\"input\", this._handleInput);\n  $input.on(\"keydown\", this._handleKeyDown);\n  </registerEventListeners>\n\n  <setHighlightOptions>\n  if (options.highlightZeroResults !== undefined) {\n      this._highlightZeroResults = options.highlightZeroResults;\n  } else {\n      this._highlightZeroResults = true;\n  }\n  </setHighlightOptions>\n\n  <setFirstHighlightIndex>\n  this._firstHighlightIndex = options.firstHighlightIndex;\n  </setFirstHighlightIndex>\n\n  <calculateDropdownPosition>\n  this._dropdownTop = $input.offset().top + $input.height() + (options.verticalAdjust || 0);\n  </calculateDropdownPosition>\n}\n"], "```"]