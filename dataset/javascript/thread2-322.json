[["format", "\nfunction format(number, decimals, thousandsSep, decPoint) {\n    <parseAndPrepare>\n    number = (number + '').replace(/[^0-9+-Ee.]/g, ''); // Clean up the number\n\n    var n = !isFinite(+number) ? 0 : +number,\n        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n        sep = typeof thousandsSep !== 'string' ? ',' : thousandsSep,\n        dec = typeof decPoint !== 'string' ? '.' : decPoint,\n        s = ''\n    </parseAndPrepare>\n    \n    <generateFormattedString>\n    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.') // Format decimal part\n    var re = /(-?\\d+)(\\d{3})/\n    while (re.test(s[0])) {\n        s[0] = s[0].replace(re, \"$1\" + sep + \"$2\") // Insert thousands separators\n    }\n    </generateFormattedString>\n\n    <adjustDecimalPlaces>\n    if ((s[1] || '').length < prec) {\n        s[1] = s[1] || ''\n        s[1] += new Array(prec - s[1].length + 1).join('0') // Pad with zeroes if necessary\n    }\n    </adjustDecimalPlaces>\n    \n    return s.join(dec)\n}\n"], ["treeWalker", "\nfunction treeWalker(registryJson) {\n  <traverseRegistry>\n  if (registryJson.registry) {\n    return treeWalker(registryJson.registry);\n  }\n  </traverseRegistry>\n\n  const portlets = registryJson.portlets || [];\n\n  <assignCategories>\n  if (portlets.length > 0) {\n    portlets.forEach((p) => (p.categories = new Array(registryJson.name)));\n  }\n  </assignCategories>\n\n  <concatenateAndFlatten>\n  if (registryJson.categories) {\n    return portlets\n        .concat(registryJson.categories.map(portletRegistryToArray))\n        .reduce(flatten, []);\n  }\n  if (registryJson.subcategories) {\n    return portlets\n        .concat(registryJson.subcategories.map(portletRegistryToArray))\n        .reduce(flatten, []);\n  }\n  </concatenateAndFlatten>\n\n  return portlets;\n}\n"], ["keyboardEventHandler", "\nfunction (event) {\n            var inst = $.timepicker._getInst(event.target);\n            var handled = true;\n            inst._keyEvent = true;\n            <evaluateVisibility>\n            if ($.timepicker._timepickerShowing) {\n                switch (event.keyCode) {\n                    case 9: $.timepicker._hideTimepicker();\n                        handled = false;\n                        break; \n                    case 13:\n                        $.timepicker._updateSelectedValue(inst);\n                        $.timepicker._hideTimepicker();\n                        return false;\n                        break; \n                    case 27: $.timepicker._hideTimepicker();\n                        break; \n                    default: handled = false;\n                }\n            </evaluateVisibility>\n            else if (event.keyCode == 36 && event.ctrlKey) {\n                <showTimepicker>\n                $.timepicker._showTimepicker(this);\n                </showTimepicker>\n            }\n            else {\n                handled = false;\n            }\n            if (handled) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        }\n"], ["contextCreation", "\nfunction ctx() {\n    return function context(req, res, next) {\n        var data = {};\n\n        req.set = function set(key, value) {\n            <validateSetArguments>\n            assert.string(key, 'key must be string');\n\n            if (key === '') {\n                assert.fail('key must not be empty string');\n            }\n            </validateSetArguments>\n            data[key] = value;\n        };\n\n        req.get = function get(key) {\n            <validateGetArguments>\n            assert.string(key, 'key must be string');\n\n            if (key === '') {\n                assert.fail('key must not be empty string');\n            }\n            </validateGetArguments>\n            return data[key];\n        };\n\n        req._getAllContext = function _getAllContext() {\n            return data;\n        };\n\n        return next();\n    };\n}\n"], ["regexpConstructor", "\nfunction () {\n            var target = arguments[0],\n                regStr = '', langNum = arguments.length, i;\n    \n            target = String(target);\n    \n            for (i = 1; i < langNum; ++i) {\n                <buildRegexpString>\n                switch( arguments[i] ) {\n                    case 'en':\n                        regStr += 'A-Za-z';\n                        break;\n                    case 'ko':\n                        regStr += '\u3131-\u3163\uac00-\ud7a3';\n                        break;\n                    case 'number':\n                        regStr += '0-9';\n                        break;\n                    default:\n                        regStr += arguments[i].replace( /[(){}[\\]*+?.\\\\^$|,\\-]/g, '\\\\$&' );\n                        break;\n                }\n                </buildRegexpString>\n            }\n            return new RegExp( '[' + regStr + ']' ).test( target );\n        }\n"], ["highlightCodeBlock", "\nfunction( block ) {\n\t\t\t<applyHighlighting>\n\t\t\thljs.highlightBlock( block );\n\t\t\t</applyHighlighting>\n\n\t\t\tif( block.hasAttribute( 'data-line-numbers' ) ) {\n\t\t\t\t<applyLineNumbers>\n\t\t\t\thljs.lineNumbersBlock( block, { singleLine: true } );\n\t\t\t\t</applyLineNumbers>\n\n\t\t\t\t<highlightDelayed>\n\t\t\t\tsetTimeout( RevealHighlight.highlightLines.bind( this, block ), 0 );\n\t\t\t\t</highlightDelayed>\n\t\t\t}\n\t\t}\n"], ["quickstart", "\nasync function quickstart() {\n  const bigqueryDataTransfer = require('@google-cloud/bigquery-data-transfer');\n\n  <initializeClient>\n  const client = new bigqueryDataTransfer.v1.DataTransferServiceClient();\n  </initializeClient>\n  \n  <getProjectId>\n  const projectId = await client.getProjectId();\n  </getProjectId>\n\n  <listDataSources>\n  \n  const formattedParent = client.projectPath(projectId, 'us-central1');\n  let nextRequest = {parent: formattedParent};\n  const options = {autoPaginate: false};\n  console.log('Data sources:');\n  do {\n    \n    const responses = await client.listDataSources(nextRequest, options);\n    \n    const resources = responses[0];\n    \n    nextRequest = responses[1];\n    \n    \n    resources.forEach(resource => {\n      console.log(`  ${resource.name}`);\n    });\n  } while (nextRequest);\n  </listDataSources>\n\n  <streamDataSources>\n  console.log('\\n\\n');\n  console.log('Sources via stream:');\n\n  client\n    .listDataSourcesStream({parent: formattedParent})\n    .on('data', element => {\n      console.log(`  ${element.name}`);\n    });\n  </streamDataSources>\n}\n"], ["initializeScrollbar", "\nfunction ScrollBar(options) {\n\t<this.options>\n\t\tthis.options = $.extend({\n\t\t\t// ...\n\t\t}, options);\n\t\t</this.options>\n\t\t<initScrollbar>\n\t\tthis.init();\n\t\t</initScrollbar>\n\t}\n"], ["constructorLeague", "\nfunction League(obj) {\n    <assignProperties>\n    this.id = obj.id\n    this.caption = obj.caption\n    this.year = obj.year\n    </assignProperties>\n}\n"], ["formatNumbersToList", "\nfunction(numbers, type) {\n    <checkForSingleItem>\n    if (numbers.length < 2) {\n      return numberToDateName(''+numbers[0], type);\n    }\n    </checkForSingleItem>\n\n    <formatMultipleItems>\n    var last_val = '' + numbers.pop();\n    var output_text = '';\n\n    for (var i=0, value; value=numbers[i]; i++) {\n      if (output_text.length > 0) {\n        output_text += ', ';\n      }\n      output_text += numberToDateName(value, type);\n    }\n    </formatMultipleItems>\n    return output_text + ' and ' + numberToDateName(last_val, type);\n  }\n"], "```"]