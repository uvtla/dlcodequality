[["isReactNode", "\nfunction isReactNode(node) {\n  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));\n}\n"], ["getFeedback", "\nfunction getFeedback() {\n        var out;\n        out = this.textareaElement ?\n            this.textareaElement.value : this._feedback;\n        return out ? out.trim() : out;\n    }\n"], ["configureChildrenCollections", "\nfunction (collection, element, settings) {\n    if (settings.children) {\n        $.each(settings.children, function (index, childrenSettings) {\n            if (!childrenSettings.selector) {\n                console.log(\"jquery.collection.js: given collection \" + collection.attr('id') + \" has children collections, but children's root selector is undefined.\");\n                return true;\n            }\n            if (element !== null) {\n                <initiateChildrenCollection>\n                element.find(childrenSettings.selector).collection(childrenSettings); \n                </initiateChildrenCollection>\n            } else {\n                <initiateTopLevelCollection>\n                collection.find(childrenSettings.selector).collection(childrenSettings);\n                </initiateTopLevelCollection>\n            }\n        });\n    }\n}\n"], ["fileChecks", "\nfunction fileChecks(filepath) {\n    \n    if (!grunt.file.exists(filepath)) {\n        grunt.log.warn('Source file \"' + filepath + '\" not found');\n        return false;\n    }\n\n    if (options.checkFilesize) {\n        \n        <getFileStats>\n        var stats = fs.lstatSync(filepath);\n        </getFileStats>\n\n        if (stats.size > UNCRITICAL_FILE_SIZE) {\n            <logFileSizeWarning>\n            grunt.log.warn('uncritical datauri size (' + filesize(UNCRITICAL_FILE_SIZE) + ') exceeded: ' + filepath + ' (' + filesize(stats.size) + ')');\n            </logFileSizeWarning>\n        }\n    }\n\n    return true;\n}\n"], ["parseError", "\nfunction parseError(logText, jqXhr, textStatus, errorThrown) {\n    <logInitialError>\n    log(\"**warning: AJAX call failure in \" + logText + \": [\" +\n        textStatus +\n        \"], [\" +\n        errorThrown +\n        \"], [\" +\n        jqXhr.responseText +\n        \"], [\" +\n        jqXhr.statusText +\n        \"]\");\n    </logInitialError>\n\n    if (errorThrown === \"\" || errorThrown === \"Internal Server Error\") {\n        if (textStatus !== \"error\") {\n            errorThrown = jqXhr.responseText || textStatus;\n        }\n        else {\n            if (typeof jqXhr.responseJSON === \"object\" && typeof jqXhr.responseJSON.Message === \"string\") {\n                errorThrown = jqXhr.responseJSON.Message;\n            }\n            else {\n                if (typeof jqXhr.responseText === \"string\") {\n                    errorThrown = jqXhr.responseText;\n                }\n                else\n                    errorThrown = \"Server or network error\";\n            }\n        }\n    }\n\n    <logParsedError>\n    log(\" error parsed to --> [\" + errorThrown + \"]\");\n    </logParsedError>\n    return errorThrown;\n}\n"], ["generateResult", "\nfunction() {\n      salep.isRunning = false;\n      var result = new Result({\n        success: successCount,\n        fail: failCount,\n        skip: skipCount,\n        total: totalCount,\n        tests: salep.tests,\n        cases: salep.cases\n      });\n      successCount = failCount = totalCount = skipCount = 0;\n      return result;\n}\n"], ["disposeAndReloadTemplate", "\nfunction (evt) {\n    var reloading = evt.reloadingObject;\n    var tmpCfg = this._getReloadCfg();\n    var isUsingModuleData = reloading && (this.moduleCtrl.getData() == tmpCfg.data);\n    <disposeTemplate>\n    Aria.disposeTemplate(tmpCfg.div);\n    </disposeTemplate>\n    if (reloading) {\n        var oSelf = this;\n        reloading.$on({\n            scope : {},\n            <reloadObjectListener>\n            \"objectLoaded\" : function (evt) {\n                tmpCfg.moduleCtrl = evt.object;\n                if (isUsingModuleData) {\n                    tmpCfg.data = evt.object.getData();\n                }\n                oSelf._callLoadTemplate(tmpCfg);\n            }\n            </reloadObjectListener>\n        });\n    }\n}\n"], ["pipedFunction", "\nfunction() {\n    var fns = [].slice.call(arguments);\n    return function piped() {\n      var args = [].slice.call(arguments);\n      <invokePipedFunctions>\n      fns.forEach(function(fn) {\n        args = [fn.apply(null, args)];\n      });\n      </invokePipedFunctions>\n      return args[0];\n    };\n  }\n"], ["generatePath", "\nfunction generatePath(path = \"/\", params = {}) {\n  return path === \"/\" ? path : <compileAndCreatePath>compilePath(path)(params, { pretty: true });</compileAndCreatePath>\n}\n"], ["runTask", "\nfunction run(taskKey) {\n  var args = inputArgs(outs, pipe, taskKey)\n  var taskName = task[taskKey]\n  var f = funcs[taskName]\n\n  \n\n  if (gotReturn) return\n\n  <handleReturnTask>\n  if ((taskName === 'return') && (!gotReturn)) {\n    returnValue = args[0]\n    gotReturn = true\n    return\n  }\n  </handleReturnTask>\n\n  \n\n  if (no(f)) {\n    <logTaskNotFound>\n    var taskNotFound = new Error('Task not found: ' + taskName + ' [' + taskKey + '] ')\n    taskNotFound.taskKey = taskKey\n    taskNotFound.taskName = taskName\n    </logTaskNotFound>\n  }\n\n  \n\n  try {\n    outs[taskKey] = <executeTaskFunction>f.apply(null, args)</executeTaskFunction>\n  } catch (err) {\n    \n    <handleTaskError>\n    err.taskName = taskName\n    err.taskKey = taskKey\n\n    throw err\n    </handleTaskError>\n  }\n}\n"], "```"]