[["Client", "\nfunction Client(settings, callback) {\n  this.debug('new Client', settings.url); // Part of logging, can be considered part of the construction responsibility\n\n  <mixinDependencies>\n  require('object-emitter').mixin(this); \n  require('object-settings').mixin(this);\n  </mixinDependencies>\n\n  <configureSettings>\n  this.set(Client.defaults).set(settings);\n  </configureSettings>\n\n  <parseAndSetURL>\n  this.set('hostname', this.common.parseURL(this.get('url')).hostname);\n  this.set('auth', this.common.parseURL(this.get('url')).auth);\n  this.set('blog', this.get('blog') || this.get('blogId'));\n  </parseAndSetURL>\n\n  <defineProperties>\n  Object.defineProperties(this, {\n    __client: {\n      value: this.common.createClient({\n        url: settings.url,\n        username: settings.username,\n        password: settings.password,\n        blogId: self.get('blog')\n      }),\n      enumerable: false,\n      configurable: true,\n      writable: false\n    },\n    __queue: {\n      value: [],\n      enumerable: false,\n      configurable: true,\n      writable: false\n    }\n  });\n  </defineProperties>\n\n  <detectAndListMethods>\n  this.detectBlog(function (err, blog, response) {\n    if (err) {\n      return self.onceReady.call(self, err);\n    }\n\n    self.set('blogs', response);\n\n    self.listMethods(self.onceReady.bind(self));\n\n    if (_.isFunction(callback)) {\n      self.once('connected', callback);\n    }\n\n    self.nextTick(self.emit, 'ready', null, self);\n  });\n  </detectAndListMethods>\n\n  return this;\n}\n"], ["separate", "\nfunction separate(from, to) {\n  from = this.toDate(from);\n  to = this.toDate(to);\n  if (!from || !to) {\n    return null;\n  }\n  return separateFn(from, to, this.startMonth);\n}\n"], ["maybeMkdir", "\nfunction maybeMkdir(path, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  fs.exists(path, function (exists) {\n    <deleteIfNeeded>\n    if (opts && opts.purge) {\n      rimraf.sync(path);\n    } else {\n      if (exists) {\n        return callback && callback();\n      }\n    }\n    </deleteIfNeeded>\n\n    <attemptDirectoryCreation>\n    (function tryMkdir() {\n      fs.mkdir(path, function (err) {\n        if (err) {\n          debug('error maybeMkdir, will try again ' + path + ': ' + err);\n          return tryMkdir();\n        }\n\n        return callback(null);\n      });\n    })();\n    </attemptDirectoryCreation>\n  });\n}\n"], ["__deserializeIntVar", "\nfunction __deserializeIntVar(buffer, start, options) {\n  const dataBuff = new Uint8Array(buffer);\n\n  <validateIntVarSize>\n  if (dataBuff[start] > 127) {\n    throw new Error(\"Cannot support IntVar whose size is greater than 127 bytes\");\n  }\n  </validateIntVarSize>\n\n  <deserializeIntVar>\n  let index = 0, data_size = dataBuff[start], end = start + 1;\n  const result_buffer = new Uint8Array(data_size);\n  while (data_size-- > 0) {\n    result_buffer[index] = dataBuff[end];\n    index++; end++;\n  }\n  </deserializeIntVar>\n\n  <createIntVar>\n  let data = new IntVar(result_buffer);\n  return { anchor: end, value: data };\n  </createIntVar>\n}\n"], ["getPythonCode", "\nfunction getPythonCode(options) {\n  var pythonCode = [],\n      internalPylint = !options.externalPylint,\n      pylintPath = path.join(__dirname, 'lib'),\n      initHook = options.initHook;\n  delete options.initHook;\n\n  <appendInitHook>\n  if (initHook) {\n    pythonCode.push(initHook);\n  }\n  </appendInitHook>\n\n  <configureInternalPylint>\n  if (internalPylint) {\n    pythonCode.push('import sys', 'sys.path.insert(0, r\"' + pylintPath + '\")');\n  }\n  </configureInternalPylint>\n\n  <runPylint>\n  pythonCode.push('import pylint', 'pylint.run_pylint()');\n  delete options.externalPylint;\n  </runPylint>\n\n  return pythonCode.join('; ');\n}\n"], ["readTokenFile", "\nfunction readTokenFile(tokenFile) {\n  return new Promise((resolve, reject) => {\n    <readFile>\n    fs.readFile(tokenFile, 'utf8', (err, token) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(token.slice(0, 40));\n    });\n    </readFile>\n  });\n}\n"], ["authenticate", "\nfunction authenticate(name, pass, fn) {\n  <logAuthenticationAttempt>\n  if (!module.parent) console.log('authenticating %s:%s', name, pass);\n  </logAuthenticationAttempt>\n\n  <findUser>\n  var user = users[name];\n  </findUser>\n\n  <validateUserAndPassword>\n  if (!user) return fn(new Error('cannot find user'));\n\n  \n  hash({ password: pass, salt: user.salt }, function (err, pass, salt, hash) {\n    if (err) return fn(err);\n    if (hash === user.hash) return fn(null, user)\n    fn(new Error('invalid password'));\n  });\n  </validateUserAndPassword>\n}\n"], ["encodeHtml", "\nfunction (html) {\n  return html.toString()\n    .replace(/&/gmi, '&amp;')\n    .replace(/\"/gmi, '&quot;')\n    .replace(/>/gmi, '&gt;')\n    .replace(/</gmi, '&lt;')\n}\n"], ["addTree", "\nfunction addTree(zip, src) {\n  const srcN = path.normalize(src);\n\n  <readAndAddFiles>\n  return fse\n    .readdirAsync(srcN)\n    .map(name => {\n      <getFileInfo>\n      const srcPath = path.join(srcN, name);\n\n      return fse.statAsync(srcPath).then(stat => {\n        <handleDirectory>\n        if (stat.isDirectory()) {\n          return addTree(zip.folder(name), srcPath);\n        } else {\n        </handleDirectory>\n\n        <addFileToZip>\n          const opts = { date: stat.mtime, unixPermissions: stat.mode };\n          return fse\n            .readFileAsync(srcPath)\n            .then(data => zip.file(name, data, opts));\n        </addFileToZip>\n      });\n    })\n    .then(() => zip); \n  </readAndAddFiles>\n}\n"], ["syncCollections", "\nfunction(to) {\n  <registerEventListeners>\n  to.listenTo(this, \"add\", function(model) {\n    this.add(model);\n  });\n  to.listenTo(this, \"remove\", function(model) {\n    this.remove(model);\n  });\n  to.listenTo(this, \"reset\", function(collection, options) {\n    _.each(options.previousModels, function(model) {\n      this.remove(model);\n    }, this);\n    collection.each(function(model) {\n      this.add(model);\n    }, this);\n  });\n  </registerEventListeners>\n\n  <synchronizeInitialModels>\n  this.each(function(model) {\n    to.add(model);\n  });\n  </synchronizeInitialModels>\n}\n"], "```"]