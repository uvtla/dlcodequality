[["fileToPackage", "\nfunction fileToPackage(d) {\n  debug(d);\n  if (d.startsWith('packages/node_modules/')) {\n    d = d.replace('packages/node_modules/', '');\n    d = d.split('/');\n    if (d[0].startsWith('@')) {\n      return d.slice(0, 2).join('/');\n    }\n\n    return d[0];\n  }\n\n  if (d.startsWith('docs') || d.startsWith('documentation') || d.startsWith('.github') || d.endsWith('.md')) {\n    return 'docs';\n  }\n\n  return 'tooling';\n}\n"], ["onWrite", "\nfunction onWrite (c) {\n  if (c[c.length - 1] === '\\n') {\n    console.log(c.substr(0, c.length - 1))\n  } else {\n    console.log(c)\n  }\n}\n"], ["ServiceDescriptorProto", "\nfunction ServiceDescriptorProto(properties) {\n    this.method = [];\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null)\n                this[keys[i]] = properties[keys[i]];\n}\n"], ["setDocumentTitle", "\nfunction (title) {\n    var document = window.document;\n    if (ariaUtilsType.isString(title)) {\n        document.title = title;\n    } else {\n        title = document.title;\n    }\n    return title;\n}\n"], ["reformatPaths", "\nfunction reformatPaths(paths) {\n  let output = {};\n\n  if (!paths) {\n    return output;\n  }\n\n  let pathsKeys = Object.keys(paths);\n\n  pathsKeys.forEach(function (eachKey) {\n    let newKey = eachKey;\n\n    if (eachKey.includes(\"{\") && eachKey.includes(\"}\")) {\n      newKey = newKey.replace(new RegExp('{', 'g'), ':');\n      newKey = newKey.replace(new RegExp('}', 'g'), '');\n    }\n\n    output[newKey] = paths[eachKey];\n  });\n\n  return output;\n}\n"], ["messageHandlingAndCaching", "\nfunction(threadId, messageContent) {\n\n  <formatAndDeliverMessage>\n  var message = formatDataToMakeMessage(threadId, messageContent);\n  deliver({\n    messageId: message.id,\n    ownerId: message.participant.id\n  });\n  </formatAndDeliverMessage>\n  \n  <handleMessageCaching>\n  if (canUseCache) {\n    if (db) {\n      var tempData = {};\n\n      try {\n        var salt = Utility.generateUUID();\n        tempData.id = parseInt(message.id);\n        tempData.owner = parseInt(userInfo.id);\n        tempData.threadId = parseInt(message.threadId);\n        tempData.time = message.time;\n        tempData.message = Utility.crypt(message.message, cacheSecret, salt);\n        tempData.data = Utility.crypt(JSON.stringify(unsetNotSeenDuration(message)), cacheSecret, salt);\n        tempData.salt = salt;\n        tempData.sendStatus = 'sent';\n      }\n      catch (error) {\n        fireEvent('error', {\n          code: error.code,\n          message: error.message,\n          error: error\n        });\n      }\n\n      db.messages.put(tempData)\n        .catch(function(error) {\n          fireEvent('error', {\n            code: error.code,\n            message: error.message,\n            error: error\n          });\n        });\n    }\n    else {\n      fireEvent('error', {\n        code: 6601,\n        message: CHAT_ERRORS[6601],\n        error: null\n      });\n    }\n  }\n  </handleMessageCaching>\n\n  <emitMessageEvents>\n  fireEvent('messageEvents', {\n    type: 'MESSAGE_NEW',\n    result: {\n      message: message\n    }\n  });\n  </emitMessageEvents>\n\n  <updateThreadInformation>\n  if (fullResponseObject) {\n    getThreads({\n      threadIds: [threadId]\n    }, function(threadsResult) {\n      var threads = threadsResult.result.threads;\n\n      if (messageContent.participant.id !== userInfo.id && !threadsResult.cache) {\n        fireEvent('threadEvents', {\n          type: 'THREAD_UNREAD_COUNT_UPDATED',\n          result: {\n            thread: threads[0],\n            messageId: messageContent.id,\n            senderId: messageContent.participant.id\n          }\n        });\n      }\n\n      if (!threadsResult.cache) {\n        fireEvent('threadEvents', {\n          type: 'THREAD_LAST_ACTIVITY_TIME',\n          result: {\n            thread: threads[0]\n          }\n        });\n      }\n    });\n  }\n  else {\n    fireEvent('threadEvents', {\n      type: 'THREAD_LAST_ACTIVITY_TIME',\n      result: {\n        thread: threadId\n      }\n    });\n  }\n  </updateThreadInformation>\n  \n  <handleCacheQueueDeletion>\n  if (hasCache && typeof queueDb == 'object') {\n    queueDb.waitQ.where('uniqueId')\n      .equals(message.uniqueId)\n      .and(function(item) {\n        return item.owner == parseInt(userInfo.id);\n      })\n      .delete()\n      .catch(function(error) {\n        fireEvent('error', {\n          code: error.code,\n          message: error.message,\n          error: error\n        });\n      });\n  }\n  else {\n    for (var i = 0; i < chatSendQueue.length; i++) {\n      if (chatSendQueue[i].uniqueId == message.uniqueId) {\n        chatSendQueue.splice(i, 1);\n      }\n    }\n  }\n  </handleCacheQueueDeletion>\n\n}\n"], ["loadExternalStylesheet", "\nfunction(source, callback) {\n  callback = callback || noop;\n\n  <addToQueue>\n  if (queue[source] instanceof Array) {\n    return callback();\n  }\n  </addToQueue>\n\n  <initializeQueue>\n  queue[source] = [];\n  </initializeQueue>\n\n  <createAndAppendStylesheet>\n  var style     = document.createElement('link');\n  var head     = document.getElementsByTagName('head')[0];\n\n  style.type = 'text/css';\n  style.rel = 'stylesheet';\n  style.href = source;\n\n  head.appendChild(style);\n  </createAndAppendStylesheet>\n  \n  <invokeCallback>\n  callback();\n  </invokeCallback>\n}\n"], ["hashKey", "\nfunction hashKey(requestorId, taskId) {\n  var sha       = crypto.createHash('sha512');\n  sha.update(requestorId);\n  sha.update(taskId);\n\n  return sha.digest('hex');\n}\n"], ["getTarget", "\nfunction getTarget (node) {\n  if (node === void 0) {\n    return document.body\n  }\n\n  if (typeof node === 'string' && node.indexOf('?') === 0) {\n    return document.body\n  } else if (typeof node === 'string' && node.indexOf('?') > 0) {\n    node = node.split('?')[0]\n  }\n\n  if (node === 'body' || node === true) {\n    return document.body\n  }\n\n  return node instanceof window.Node ? node : document.querySelector(node)\n}\n"], ["setDOMElementValue", "\nfunction (selector, value) {\n  return this.waitForDOM(selector).execute(function (selector, value) {\n    var element = document.querySelector(selector);\n    if (element) {\n      element.value = value;\n    }\n  }, [selector, value]);\n}\n"], "```"]