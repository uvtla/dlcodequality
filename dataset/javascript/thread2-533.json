[["polygonRemoveCollinearPoints", "function polygonRemoveCollinearPoints(polygon, precision){\n    var num = 0;\n    for(var i=polygon.length-1; polygon.length>3 && i>=0; --i){\n        if(collinear(polygonAt(polygon, i-1),polygonAt(polygon, i),polygonAt(polygon, i+1),precision)){\n            polygon.splice(i%polygon.length,1);\n            num++;\n        }\n    }\n    return num;\n}\n"], ["_gpfAttributesGet", "function _gpfAttributesGet (objectOrClass, baseAttributeClass) {\n    var classConstructor;\n    if (typeof objectOrClass === \"function\") {\n        classConstructor = objectOrClass;\n    } else {\n        classConstructor = _gpfAttributesGetConstructorFrom(objectOrClass);\n    }\n    return _gpfAttributesGetFromClass(classConstructor, baseAttributeClass);\n}\n"], ["discard", "function discard (bboxes, exclude = null) {\n    if (this.obb) { \n        return Label.prototype.occluded.call(this, bboxes, exclude);\n    }\n    else if (this.obbs) { \n        for (let i = 0; i < this.obbs.length; i++){\n            let aabb = this.aabbs[i];\n            let obb = this.obbs[i];\n            let obj = { aabb, obb };\n            let should_discard = Label.prototype.occluded.call(obj, bboxes, exclude);\n            if (should_discard) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["build", "function build(obj, options) {\n  \n  let opt = Object.assign(defaultOptions, options);\n\n  let map = '';\n\n  let tab = '';\n  for (let i = 0; i < opt.tabSize; i++) {\n    tab += ' ';\n  }\n\n  determineKeyValueSpaces(obj, opt.tabSize);\n\n  obj.forEach((line) => {\n    if (line.isEmpty) {\n      if (opt.emptyLines) {\n        map += opt.lineBreak;\n      }\n    } else {\n      if (line.isComment) {\n        if (opt.comments) {\n          map += determineTabs(line, tab) + '#' + opt.commentPrefix + line.comment + opt.lineBreak;\n        }\n      } else {\n        if (line.key) {\n          if (line.isKeyOnly) {\n            map += determineTabs(line, tab) + line.key + opt.lineBreak;\n          } else {\n            map += determineTabs(line, tab) + line.key;\n            if (line.value) {\n              if (line.includesComment) {\n                map += line.keyValueSpaces + line.value;\n                if (opt.comments) {\n                  if (line.comment) {\n                    map += tab + '#' + opt.commentPrefix + line.comment + opt.lineBreak;\n                  } else {\n                    map += opt.lineBreak;\n                  }\n                } else {\n                  map += opt.lineBreak;\n                }\n              } else {\n                map += line.keyValueSpaces + line.value + opt.lineBreak;\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  return map;\n}\n"], ["deriveKey", "async function deriveKey (password, nonce, options = {\n  kdf_params: DEFAULTS.crypto.kdf_params,\n  kdf: DEFAULTS.crypto.kdf\n}) {\n  if (typeof password === 'undefined' || password === null || !nonce) {\n    throw new Error('Must provide password and nonce to derive a key')\n  }\n\n  if (!DERIVED_KEY_FUNCTIONS.hasOwnProperty(options.kdf)) throw new Error('Unsupported kdf type')\n\n  return DERIVED_KEY_FUNCTIONS[options.kdf](password, nonce, options)\n}\n"], ["Cam", "function Cam(gl) {\n  this._projection = mat4.create();\n  this._camModelView = mat4.create();\n  this._modelView = mat4.create();\n  this._rotation = mat4.create();\n  this._translation = mat4.create();\n  this._near = 0.10;\n  this._onCameraChangedListeners = [];\n  this._far = 4000.0;\n  this._fogNear = -5;\n  this._fogFar = 50;\n  this._fog = true;\n  this._fovY = Math.PI * 45.0 / 180.0;\n  this._fogColor = vec3.fromValues(1, 1, 1);\n  this._outlineColor = vec3.fromValues(0.1, 0.1, 0.1);\n  this._outlineWidth = 1.0;\n  this._outlineEnabled = true;\n  this._selectionColor = vec4.fromValues(0.1, 1.0, 0.1, 0.7);\n  this._center = vec3.create();\n  this._zoom = 50;\n  this._screenDoorTransparency = false;\n  this._updateProjectionMat = true;\n  this._updateModelViewMat = true;\n  this._upsamplingFactor = 1;\n  this._gl = gl;\n  this._currentShader = null;\n  this._stateId = 0;\n  this.setViewportSize(gl.viewportWidth, gl.viewportHeight);\n}\n"], ["Parser", "function Parser(stdout) {\n  this._name = null;\n  this._description = null;\n  this._version = \"0.0.0\";\n  this._epilog = null;\n  this._commands = { };\n  this._short = { };\n  this._default = this.showHelp.bind(this);\n  this._hooks = { };\n  this._width = 0;\n  this._out = isFunction(stdout) ? stdout : console.log;\n  this.option(\"H\", \"help\", \"show this help information\", this.showHelp.bind(this));\n  this.option(\"V\", \"version\", \"show version information\", this.showVersion.bind(this));\n  return this;\n}\n"], ["tryToLoadNextProperties", "function tryToLoadNextProperties(oBundle, bAsync) {\n  var sLocale = oBundle._sNextLocale;\n  oBundle._sNextLocale = nextFallbackLocale(sLocale);\n\n  var aSupportedLanguages = window.sap && window.sap.ui && sap.ui.getCore && sap.ui.getCore().getConfiguration().getSupportedLanguages();\n\n  if ( sLocale != null && isSupported(sLocale, aSupportedLanguages) ) {\n    var oUrl = oBundle.oUrlInfo,\n      sUrl, mHeaders;\n\n    if ( oUrl.ext === '.hdbtextbundle' ) {\n      if ( M_SUPPORTABILITY_TO_XS[sLocale] ) {\n        sUrl = oUrl.prefix + oUrl.suffix + '?' + (oUrl.query ? oUrl.query + \"&\" : \"\") + \"sap-language=\" + M_SUPPORTABILITY_TO_XS[sLocale] + (oUrl.hash ? \"#\" + oUrl.hash : \"\");\n      } else {\n        sUrl = oUrl.url;\n      }\n      \n      mHeaders = {\n        \"Accept-Language\": convertLocaleToBCP47(sLocale) || \"\"\n      };\n    } else {\n      sUrl = oUrl.prefix + (sLocale ? \"_\" + sLocale : \"\") + oUrl.suffix;\n    }\n\n    var vProperties = Properties.create({\n      url: sUrl,\n      headers: mHeaders,\n      async: !!bAsync,\n      returnNullIfMissing: true\n    });\n\n    var addProperties = function(oProps) {\n      if ( oProps ) {\n        oBundle.aPropertyFiles.push(oProps);\n        oBundle.aLocales.push(sLocale);\n      }\n      return oProps;\n    };\n\n    return bAsync ? vProperties.then( addProperties ) : addProperties( vProperties );\n  }\n  return bAsync ? Promise.resolve(null) : null;\n}\n"], ["function(value)", "function(value) {\n  value = value.toString().replace(/\\s*/, '');\n\n  if (!isNaN(parseFloat(value)) && parseFloat(value).toString() == value) {    \n    return parseFloat(value);\n  } else if(geolib.isSexagesimal(value) == true) {\n    return parseFloat(geolib.sexagesimal2decimal(value));\n  } else {\n    throw 'Unknown format.';\n  }\n}\n"], ["functionName", "` tags indicating the boundary of the function's responsibilities. In cases where the function body contains multiple cohesive tasks that could be considered as distinctive responsibilities, further nested tags might be added, but these functions do not require such nested tagging as they perform actions within the scope of a single responsibility."], ""]