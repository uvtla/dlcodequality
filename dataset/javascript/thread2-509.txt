```javascript
<toc>
function toc(node, options) {
    <setupOptionsAndVariables>
    var settings = options || {};
    var heading = settings.heading ? toExpression(settings.heading) : null;
    var result = search(node, heading, settings.maxDepth || 6);
    var map = result.map;
    </setupOptionsAndVariables>

    <generateTableOfContents>
    result.map = map.length === 0 ? null : contents(map, settings.tight);
    
    if (!heading) {
        result.index = null;
        result.endIndex = null;
    }
    </generateTableOfContents>

    return result;
}
</toc>

<process>
function process(configure, ret) {
  <concatenateAndSplitBuffer>
  ret = configure.buffer + ret;
  var pos = ret.lastIndexOf('\n');
  configure.buffer = ret.slice(pos + 1);
  ret = ret.slice(0, pos);
  ret = ret.split(/\n+/);
  ret = ret.map(item => item && mapper(item.split(configure.separator), configure.map));
  </concatenateAndSplitBuffer>

  if(!ret.length) return;
  <incrementCount>
  configure.count += ret.length;
  </incrementCount>

  <initializeDestinationFile>
  if(configure.first && typeof configure.dist === 'string' ) {
    configure.first = 0;
    fs.writeFileSync(configure.dist, '[');
  }
  </initializeDestinationFile>

  <storeOrFlushCache>
  if(configure.cacheArray.length > STOP) {
    typeof configure.dist === 'string' ? append(configure) : configure.dist(configure.cacheArray.slice());
    return configure.cacheArray.length = 0;
  }
  </storeOrFlushCache>

  <cacheResults>
  configure.cacheArray.push.apply(configure.cacheArray, ret);
  </cacheResults>
}
</process>

<createPart>
function createPart(name, content, options) {
    <validateArguments>
    if (!name || !options) { throw new Error('name and options are required.'); }
    </validateArguments>

    <assemblePartContent>
    var digest = calculateMD5(content, options);
    newContent     = autoStartLine(name);
    newContent    += template.warning();
    newContent    += content || '';
    newContent    += template.md5({md5: digest});
    newContent    += autoEndLine(name);
    </assemblePartContent>

    return newContent;
}
</createPart>

<anonymousFunction>
function (data, options) {
      <handleSuccessCallback>
      var rdf = this,
        options = options || {},
        success = options.success;
      if (success !== undefined) {
        options.success = function () {
          success.call(rdf);
        }
      }
      </handleSuccessCallback>
      <loadDataIntoDatabank>
      this.databank.load(data, options);
      </loadDataIntoDatabank>
      return this;
}
</anonymousFunction>

<ngramAnalysis>
function(sequence, n, startSymbol, endSymbol, stats) {
    var result = [];
    frequencies = {};
    nrOfNgrams = 0;
    
    <convertSequenceToArray>
    if (!_(sequence).isArray()) {
        sequence = tokenizer.tokenize(sequence);
    }
    </convertSequenceToArray>

    var count = _.max([0, sequence.length - n + 1]);

    <handleStartSymbol>
    if(typeof startSymbol !== "undefined" && startSymbol !== null) {
        
        var blanks = [];
        for(var i = 0 ; i < n ; i++) {
            blanks.push(startSymbol);
        }

        
        for(var p = n - 1 ; p > 0 ; p--) {
            
          var ngram = blanks.slice(0, p).concat(sequence.slice(0, n - p));
          result.push(ngram);
          if (stats) {
            countNgrams(ngram);
          }
        }
    }
    </handleStartSymbol>

    <generateNgrams>
    for (var i = 0; i < count; i++) {
        var ngram = sequence.slice(i, i + n);
        result.push(ngram);
        if (stats) { 
          countNgrams(ngram);
        }
    }
    </generateNgrams>

    <handleEndSymbol>
    if(typeof endSymbol !== "undefined" && endSymbol !== null) {
        
        var blanks = [];
        for(var i = 0 ; i < n ; i++) {
            blanks.push(endSymbol);
        }

        
        for(var p = n - 1 ; p > 0 ; p--) {
            
          var ngram = sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p));
          result.push(ngram);
          if (stats) {
            countNgrams(ngram);
          }
        }
    }
    </handleEndSymbol>

    <generateStatistics>
    if (stats) {
      
      
      var Nr = {};
      Object.keys(frequencies).forEach(function(key) {
        if (!Nr[frequencies[key]]) {
          Nr[frequencies[key]] = 0;
        }
        Nr[frequencies[key]]++;
      });
      
      
      return {
        "ngrams": result,
        "frequencies": frequencies,
        "Nr": Nr,
        "numberOfNgrams": nrOfNgrams
      };
      
    }
    </generateStatistics>
    else { 
      return result;
    }
}
</ngramAnalysis>

<doWhilst>
function doWhilst(value, iterator, tester) {
  <handleTester>
  if (typeof tester !== 'function') {
    tester = iterator;
    iterator = value;
    value = undefined;
  }
  </handleTester>
  <performIteration>
  return new DoWhilst(new WhilstTester(tester), iterator)._iterate(value);
  </performIteration>
}
</doWhilst>

<instanceApi>
function instanceApi(oboeBus, contentSource){

  <initialize>
  var oboeApi,
      fullyQualifiedNamePattern = /^(node|path):./,
      rootNodeFinishedEvent = oboeBus(ROOT_NODE_FOUND),
      emitNodeDrop = oboeBus(NODE_DROP).emit,
      emitNodeSwap = oboeBus(NODE_SWAP).emit,
  </initialize>

  <addListener>
  addListener = varArgs(function( eventId, parameters ){

    if( oboeApi[eventId] ) {

      apply(parameters, oboeApi[eventId]);
    } else {

      var event = oboeBus(eventId),
          listener = parameters[0];

      if( fullyQualifiedNamePattern.test(eventId) ) {

        addForgettableCallback(event, listener);
      } else  {

        event.on( listener);
      }
    }

    return oboeApi; 
  }),
  </addListener>

  <removeListener>
  removeListener = function( eventId, p2, p3 ){

    if( eventId == 'done' ) {

      rootNodeFinishedEvent.un(p2);

    } else if( eventId == 'node' || eventId == 'path' ) {

      oboeBus.un(eventId + ':' + p2, p3);
    } else {

      var listener = p2;

      oboeBus(eventId).un(listener);
    }

    return oboeApi; 
  };
  </removeListener>

  <helperFunctions>
  
  function addProtectedCallback(eventName, callback) {
    oboeBus(eventName).on(protectedCallback(callback), callback);
    return oboeApi; 
  }
  
  function addForgettableCallback(event, callback, listenerId) {
    listenerId = listenerId || callback;
    var safeCallback = protectedCallback(callback);
    event.on( function() {
      var discard = false;
      oboeApi.forget = function(){
        discard = true;
      };
      apply( arguments, safeCallback );
      delete oboeApi.forget;
      if( discard ) {
        event.un(listenerId);
      }
    }, listenerId);
    return oboeApi; 
  }
  
  function protectedCallback( callback ) {
    return function() {
      try{
        return callback.apply(oboeApi, arguments);
      }catch(e)  {
        setTimeout(function() {
          throw new Error(e.message);
        });
      }
    }
  }
  
  function fullyQualifiedPatternMatchEvent(type, pattern) {
    return oboeBus(type + ':' + pattern);
  }

  function wrapCallbackToSwapNodeIfSomethingReturned( callback ) {
    return function() {
      var returnValueFromCallback = callback.apply(this, arguments);
      if( defined(returnValueFromCallback) ) {
        if( returnValueFromCallback == oboe.drop ) {
          emitNodeDrop();
        } else {
          emitNodeSwap(returnValueFromCallback);
        }
      }
    }
  }

  function addSingleNodeOrPathListener(eventId, pattern, callback) {
    var effectiveCallback;
    if( eventId == 'node' ) {
      effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
    } else {
      effectiveCallback = callback;
    }
    addForgettableCallback(
      fullyQualifiedPatternMatchEvent(eventId, pattern),
      effectiveCallback,
      callback
    );
  }

  function addMultipleNodeOrPathListeners(eventId, listenerMap) {
    for( var pattern in listenerMap ) {
      addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
    }
  }
  
  function addNodeOrPathListenerApi( eventId, jsonPathOrListenerMap, callback ){
    if( isString(jsonPathOrListenerMap) ) {
      addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);
    } else {
      addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
    }
    return oboeApi; 
  }
  </helperFunctions>

  <setupApiEvents>
  
  oboeBus(ROOT_PATH_FOUND).on( function(rootNode) {
    oboeApi.root = functor(rootNode);
  });
  
  oboeBus(HTTP_START).on( function(_statusCode, headers) {
    oboeApi.header =  function(name) {
      return name ? headers[name]
        : headers
      ;
    }
  });
  </setupApiEvents>

  <createApiObject>
  return oboeApi = {
    on             : addListener,
    addListener    : addListener,
    removeListener : removeListener,
    emit           : oboeBus.emit,
    node           : partialComplete(addNodeOrPathListenerApi, 'node'),
    path           : partialComplete(addNodeOrPathListenerApi, 'path'),
    done           : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
    start          : partialComplete(addProtectedCallback, HTTP_START ),
    fail           : oboeBus(FAIL_EVENT).on,
    abort          : oboeBus(ABORTING).emit,
    header         : noop,
    root           : noop,
    source         : contentSource
  };
  </createApiObject>
}
</instanceApi>

<registerEndpoint>
function registerEndpoint(url, handler) {
        <handleRequestRegistration>
        tchannel.register(url, function (req, res, arg2, arg3) {

            <processMiddlewareStack>
            self.middlewareStack.run(req, arg2, arg3,
                function(req, arg2, arg3, callback) {
                    handler(arg2, arg3, req.remoteAddr, callback);
                },
                function(req, err, res1, res2) {
                    <setupResponseHeaders>
                    res.headers.as = 'raw';
                    </setupResponseHeaders>
                    <respondBasedOnError>
                    if (err) {
                        res.sendNotOk(null, JSON.stringify(err));
                    } else {
                        <convertResponseIfNeeded>
                        if (res2 && !Buffer.isBuffer(res2)) {
                            res2 = new Buffer(res2);
                        }
                        </convertResponseIfNeeded>

                        <sendResponse>
                        res.sendOk(res1, res2);
                        </sendResponse>
                    }
                    </respondBasedOnError>
                });
            </processMiddlewareStack>

        });
        </handleRequestRegistration>
}
</registerEndpoint>

<handleKeyPress>
function (charCode, keyCode, currentText, caretPosStart, caretPosEnd, event) {
            <initialize>
            var dataModel = this._dataModel, domEvent = ariaDomEvent, report, selectionKey;
            </initialize>

            <handleListWidgetBehaviors>
            if (this._listWidget) {
                selectionKey = this.checkSelectionKeys(event);
            }
            </handleListWidgetBehaviors>

            <handleNonNavigationKeyPress>
            if (!domEvent.isNavigationKey(keyCode) && !selectionKey) {
                
                var nextValueObject;
                <handleDeleteKeyPress>
                var isDelKey = (keyCode == domEvent.KC_DELETE || keyCode == domEvent.KC_BACKSPACE);
                if (isDelKey) {
                    nextValueObject = this._getTypedValueOnDelete(keyCode, currentText, caretPosStart, caretPosEnd);
                } else {
                    nextValueObject = this._getTypedValue(charCode, currentText, caretPosStart, caretPosEnd);
                }
                </handleDeleteKeyPress>

                <updateDataModel>
                dataModel.initialInput = nextValueObject.nextValue;
                </updateDataModel>

                return this._checkInputKey(charCode, keyCode, nextValueObject.nextValue, nextValueObject.caretPosStart, nextValueObject.caretPosEnd);
            }
            </handleNonNavigationKeyPress>

            <handleListWidgetSelection>
            if (this._listWidget) {
                if (!selectionKey && keyCode == domEvent.KC_ESCAPE) {
                    report = this.checkText(dataModel.initialInput);
                    if (!report) {
                        report = new ariaWidgetsControllersReportsDropDownControllerReport();
                    }
                    report.displayDropDown = false; 
                    report.text = dataModel.initialInput;
                    report.value = report.text;
                    report.cancelKeyStroke = true;
                    dataModel.value = null;
                    return report;

                } else if (selectionKey || keyCode == domEvent.KC_TAB) {
                    if (dataModel.selectedIdx != -1) {
                        if (dataModel.selectedIdx != null) {
                            dataModel.text = this._getLabelFromListValue(dataModel.listContent[dataModel.selectedIdx]);
                            dataModel.value = dataModel.listContent[dataModel.selectedIdx].value;
                        }
                        report = this.checkDropdownValue(dataModel.value);
                    } else {
                        var report = new ariaWidgetsControllersReportsDropDownControllerReport();
                    }
                    report.displayDropDown = false; 
                    if (keyCode != domEvent.KC_TAB) {
                        report.cancelKeyStroke = true; 
                    }
                    return report;
                }
                else {
                    <handleArrowKeyNavigation>
                    if (keyCode == domEvent.KC_ARROW_LEFT) {
                        return;
                    } else {
                        report = new ariaWidgetsControllersReportsDropDownControllerReport();
                        var oldIdx = dataModel.selectedIdx;
                        this._listWidget.sendKey(0, keyCode);
                        var newIdx = dataModel.selectedIdx;
                        if (oldIdx != newIdx) {
                            report.ok = true;
                            if (newIdx == -1) {
                                dataModel.value = null;
                                dataModel.text = dataModel.initialInput;
                            } else {
                                dataModel.value = dataModel.listContent[newIdx].value;
                                dataModel.text = this._getLabelFromListValue(dataModel.listContent[newIdx]);
                            }
                            report.text = dataModel.text;
                        }
                    }
                    return report;
                    </handleArrowKeyNavigation>
                }
            } else {
                <handleDropdownWithoutListWidget>
                if (keyCode == domEvent.KC_ARROW_DOWN) {
                    report = this._checkInputKey(charCode, keyCode, currentText, caretPosStart, caretPosEnd);
                } else {
                    report = new ariaWidgetsControllersReportsDropDownControllerReport();
                }
                if (report && keyCode != domEvent.KC_TAB && keyCode != domEvent.KC_ARROW_DOWN) {
                    report.cancelKeyStrokeDefaultBehavior = (keyCode == domEvent.KC_ESCAPE);
                }
                return report;
                </handleDropdownWithoutListWidget>
            }
            </handleListWidgetSelection>
}
</handleKeyPress>

<optionsFunction>
function(options) {
    <createStream>
    var stream = through.obj(function(file, enc, cb) {
        var out = options.out;

        <overrideOutFunction>
        options.out = function(text) {
            cb(null, new gutil.File({
                path: out,
                contents: new Buffer(text)
            }));
        };
        </overrideOutFunction>

        <runRequireJsOptimize>
        requirejs.optimize(options, null, function(err) {
            stream.emit('error', new gutil.PluginError('gulp-rjs', err.message));
        });
        </runRequireJsOptimize>
    });
    </createStream>

    return stream;
}
</optionsFunction>
```