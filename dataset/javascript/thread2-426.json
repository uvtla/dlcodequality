[["function1", "\nfunction (array, fn) {\n  if (array != null && fn != null) {\n    for (var i = 0; i < array.length; i++) {\n      fn(array[i]);\n    }\n  }\n      \n  return array;\n}\n"], ["function2", "\nfunction ($ul, direction) {\n  var current = this.S('.visible', $ul),\n      target = current[direction]();\n\n  <skipSelectorCheck>\n  if (this.settings.skip_selector && target.find(this.settings.skip_selector).length != 0) {\n    target = target[direction]();\n  }\n  </skipSelectorCheck>\n\n  <triggerEvents>\n  if (target.length) {\n    this.S('img', target)\n      .trigger('click', [current, target]).trigger('click.fndtn.clearing', [current, target])\n      .trigger('change.fndtn.clearing');\n  }\n  </triggerEvents>\n}\n"], ["function3", "\nfunction parse(value, now) {\n  now = now ? this.toDate(now) : new Date();\n  \n  <validateDate>\n  if (!now) {\n    return null;\n  }\n  </validateDate>\n\n  <parseValue>\n  if (value.indexOf('\u55b6\u696d\u65e5') !== -1) {\n    value = suji(value);\n    var matches = value.match(BIZ);\n    if (matches) {\n      return this.addBiz(now, matches[1] * (matches[2] === '\u524d' ? -1 : 1));\n    } else {\n      return null;\n    }\n  } else {\n    return parseFn(value, this.startMonth, this._startWeek, now) || toDatetimeFn(value, this.startMonth);\n  }\n  </parseValue>\n}\n"], ["function4", "\nfunction flip(str, options) {\n  if (typeof str != 'string') {\n    throw new Error('input is not a String.');\n  }\n\n  <parseCSS>\n  var node = css.parse(str, options);\n  </parseCSS>\n\n  <flipNodeCSS>\n  flipNode(node.stylesheet);\n  </flipNodeCSS>\n\n  return css.stringify(node, options);\n}\n"], ["function5", "\nfunction (value) {\n  var lines = vCard.normalize(value)\n    .split(/\\r?\\n/g)\n    \n  <validateVCardStructure>\n  var begin = lines[0];\n  var version = lines[1];\n  var end = lines[lines.length - 1];\n\n  if (!/BEGIN:VCARD/i.test(begin))\n    throw new SyntaxError('Invalid vCard: Expected \"BEGIN:VCARD\" but found \"' + begin + '\"');\n\n  if (!/END:VCARD/i.test(end))\n    throw new SyntaxError('Invalid vCard: Expected \"END:VCARD\" but found \"' + end + '\"');\n\n  if (!/VERSION:\\d\\.\\d/i.test(version))\n    throw new SyntaxError('Invalid vCard: Expected \"VERSION:\\\\d.\\\\d\" but found \"' + version + '\"');\n  </validateVCardStructure>\n\n  <validateAndParseData>\n  this.version = version.substring(8, 11);\n  if (!vCard.isSupported(this.version))\n    throw new Error('Unsupported version \"' + this.version + '\"');\n\n  this.data = vCard.parseLines(lines);\n  </validateAndParseData>\n\n  return this;\n}\n"], ["function6", "\nfunction UcFirst(str) {\n    var firstChar = \"\";\n    var leftChars = \"\";\n    var retStr;\n\n    <convertString>\n    if (typeof str == \"string\" && str.length > 0) {\n        firstChar = str[0].toUpperCase();\n        leftChars = str.slice(1, str.length);\n    }\n    </convertString>\n\n    retStr = firstChar + leftChars;\n    return retStr;\n}\n"], ["function7", "\nfunction find(requestObj, callback) {\n    var i, found, storedData, property, storage;\n\n    storage = this;\n    callback = callback || function () { };\n\n    <validateRequestObj>\n    if (typeof requestObj === 'undefined' || requestObj === null) {\n        callback(null);\n        return this;\n    }\n    </validateRequestObj>\n\n    <processRequestData>\n    for (i = 0; i < storage.preprocessors.length; i++) {\n        requestObj.data = storage.preprocessors[i](requestObj.data, requestObj);\n    }\n    </processRequestData>\n\n    <configureRequest>\n    requestObj.config = {};\n    requestObj.config.url = requestObj.config.url || this.url.find;\n    requestObj.config.type = requestObj.config.type || this.constructor.REQUEST_TYPE_GET;\n    </configureRequest>\n\n    <sendAndProcessRequest>\n    this.constructor._sendRequest(requestObj, function (data) {\n        for (i = 0; i < storage.processors.length; i++) {\n            data = storage.processors[i](data, requestObj);\n        }\n        callback(data);\n    });\n    </sendAndProcessRequest>\n\n    return this;\n}\n"], ["function8", "\nfunction (event) {\n    if (!(event && event.type)) {\n      return false;\n    }\n    if (event.client && event.client !== this) {\n      return false;\n    }\n    <evaluateEventMeta>\n    var meta = _clientMeta[this.id];\n    var clippedEls = meta && meta.elements;\n    var hasClippedEls = !!clippedEls && clippedEls.length > 0;\n    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;\n    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;\n    var goodClient = event.client && event.client === this;\n    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {\n      return false;\n    }\n    </evaluateEventMeta>\n    return true;\n}\n"], ["function9", "\nfunction runUntilResolved(genInstance, nextArg) {\n  try {\n    <stepGenerator>\n    let nextResult = genInstance.next(nextArg);\n    if (nextResult.done) {\n      return Promise.resolve(nextResult.value);\n    } else {\n      let v = nextResult.value;\n      let fn = v.fn;\n      let thisArg;\n      if (fn instanceof Array) {\n        thisArg = fn[0];\n        fn = fn[1];\n      }\n      let args = v.args;\n\n      if (fn == null || args == null) {\n        throw new Error('`Episode7.run` requires using `Episode7.call` with every `yield`. '+\n          'Check all of the `yield` expressions in [Function: '+genInstance.episode7Name+']');\n      }\n    </stepGenerator>\n\n    <resolveSideEffect>\n    let sideEffect;\n    if (isGeneratorFunction(fn)) {\n      sideEffect = Promise.resolve()\n        .then(function() {\n          return run(fn, ...args)\n        })\n    } else {\n      sideEffect = Promise.resolve()\n        .then(function() {\n          return fn.call(thisArg, ...args)\n        })\n    }\n    return sideEffect\n      .then(function(result) {\n        return runUntilResolved(genInstance, result);\n      })\n    </resolveSideEffect>\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n"], ["function10", "\nfunction convertRawTheme(theme) {\n  <transformTheme>\n  if (!Array.isArray(theme.constants)) {\n    return {\n      constants: Object.keys(theme.constants).map(key => theme.constants[key]),\n      styles: [].concat(theme.styles),\n      animations: [].concat(theme.animations)\n    }\n  }\n  else\n    return theme;\n  </transformTheme>\n}\n"], ""]