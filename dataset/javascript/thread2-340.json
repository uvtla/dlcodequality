[["read", "\nfunction read(file, opts) {\n    <parseOpts>\n    var encoding = opts.encoding || 'utf8';</parseOpts>\n    <getData>\n    var data = opts.transform(fs.readFileSync(file, encoding));</getData>\n    <parseData>\n    return css.parse(data, {source: file}).stylesheet;</parseData>\n}\n"], ["_colorToRgbArray", "\nfunction _colorToRgbArray(color) {\n    <initializeVariables>\n    var originalColor, elem,\n        rgb = [],\n        multiple = 1;</initializeVariables>\n\n    <handleColor>\n    if (color === 'transparent') {\n        color = 'rgba(0, 0, 0, 0)';\n    } else if (color.match(/^([a-z]+|#[0-9a-f]+)$/gi)) {\n        \n        elem = document.head;\n        originalColor = elem.style.color;\n        elem.style.color = color;\n        color = $.css(elem, 'color');\n        elem.style.color = originalColor;\n    }</handleColor>\n    \n    <calculateRgb>\n    if (color.match(/^rgb/gi)) {\n        rgb = color.match(/(\\d+(\\.\\d+)?)/gi);\n        \n        if (color.match(/%/gi)) {\n            multiple = 2.55;\n        }\n        rgb[0] *= multiple;\n        rgb[1] *= multiple;\n        rgb[2] *= multiple;\n        \n        if (rgb[3] !== undefined) {\n            rgb[3] = parseFloat(rgb[3]);\n        } else {\n            rgb[3] = 1;\n        }\n    }</calculateRgb>\n    <returnResult>\n    return rgb;</returnResult>\n}\n"], ["anonymous", "\nfunction(feature) {\n        <activationHandling>\n        var activated = false;\n        if(!this.handlers.drag.dragging) {\n            this.feature = feature;\n            this.handlers.drag.activate();\n            activated = true;\n        }</activationHandling>\n        <overHandling>\n        this.over = this.feature.id == feature.id;</overHandling>\n        <onEnterHandling>\n        if(activated) {\n            OpenLayers.Element.addClass(this.map.viewPortDiv, this.displayClass + \"Over\");\n            this.onEnter(feature);\n        }</onEnterHandling>\n        <returnResult>\n        return activated;</returnResult>\n    }\n"], ["renderToStaticMarkup", "\nfunction renderToStaticMarkup(element) {\n  <validateElement>\n  !ReactElement.isValidElement(element) ? \"development\" !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : _prodInvariant('47') : void 0;</validateElement>\n  <renderElement>\n  return renderToStringImpl(element, true);</renderElement>\n}\n"], ["anonymous", "\nfunction(array1, array2) {\n        <matchComparison>\n        var match = array1[0]==array2[0] && array1[1]==array2[1] && array1[2]==array2[2];</matchComparison>\n        <returnResult>\n        return match;</returnResult>\n    }\n"], ["anonymous", "\nfunction(pos, prop) {\n     <splatProp>\n     prop = $.splat(prop);</splatProp>\n     <updateNodePositions>\n     this.viz.graph.eachNode(function(elem) {\n         $.each(prop, function(p) { elem.getPos(p).$add(pos); });\n     });</updateNodePositions>\n  }\n"], ["createConnection", "\nfunction createConnection(port, host, options) {\n  <handleArguments>\n  if (isObject(port)) {\n    options = port;\n  }\n  else if (isObject(host)) {\n    options = host;\n  }\n  else if (isObject(options)) {\n    options = options; // This line doesn't change the state of options, so technically it's redundant and doesn't align with SRP\n  }\n  else {\n    options = {};\n  }\n  \n  if (isNumber(port)) {\n    options.port = port;\n  }\n\n  if (isString(host)) {\n    options.host = host;\n  }</handleArguments>\n  \n  <debugAndConnect>\n  debug('createConnection', options);\n  return tls.connect(options);</debugAndConnect>\n}\n"], ["startApp", "\nfunction(packageName, componentName) {\n    <promiseCreation>\n    return new Promise(function(resolve, reject) {\n        exec(resolve, reject, APP_PLUGIN_NAME, \"startApp\", [packageName, componentName]);\n    });</promiseCreation>\n}\n"], ["getResult", "\nfunction getResult (err) {\n    <initializeResult>\n    var res = {\n        valid: true,\n        errors: []\n    };</initializeResult>\n\n    <handleError>\n    if (err !== null) {\n        res.valid = false;\n        res.errors.push(err);\n    }</handleError>\n\n    <returnResult>\n    return res;</returnResult>\n}\n"], ["ListNode", "\nfunction ListNode (children) {\n    <assignChildren>\n    for(var i = 0; i < children.length; i++)\n        this[i] = children[i];\n    this.length = children.length;\n    </assignChildren>\n}\n"], ""]