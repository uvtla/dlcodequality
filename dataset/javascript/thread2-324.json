[["function_handleEntryClick", "\nfunction (e) {\n    <handleRenameCondition>\n    if (this.props.entry.get(\"rename\")) {\n        e.stopPropagation();\n        return;\n    }\n    </handleRenameCondition>\n    \n    <checkMouseButton>\n    if (e.button !== LEFT_MOUSE_BUTTON) {\n        return;\n    }\n    </checkMouseButton>\n\n    <handleSelection>\n    if (this.props.entry.get(\"selected\") && !e.ctrlKey) {\n        if (this.state.clickTimer === null && !this.props.entry.get(\"rename\")) {\n            var timer = window.setTimeout(this.startRename, CLICK_RENAME_MINIMUM);\n            this.setState({\n                clickTimer: timer\n            });\n        }\n    } else {\n        this.props.actions.setSelected(this.myPath());\n    }\n    </handleSelection>\n    e.stopPropagation();\n    e.preventDefault();\n}\n"], ["function_getView", "\nfunction getView(inner, type) { \n    if (!type) {\n        type = inner;\n        inner = undefined;\n    }\n\n    var views, i, l, found,\n        view = this,\n        root = !type || type === \"root\";\n        \n    <handleInnerViewLookup>\n    if (inner) {\n        found = view.type === type ? view : undefined;\n        if (!found) {\n            views = view.views;\n            if (view._.useKey) {\n                for (i in views) {\n                    if (found = views[i].get(inner, type)) {\n                        break;\n                    }\n                }\n            } else for (i = 0, l = views.length; !found && i < l; i++) {\n                found = views[i].get(inner, type);\n            }\n        }\n    }\n    </handleInnerViewLookup>\n\n    <findRootView>\n    else if (root) {\n        while (view.parent.parent) {\n            found = view = view.parent;\n        }\n    }\n    </findRootView> \n\n    <findViewByType>\n    else while (view && !found) {\n        found = view.type === type ? view : undefined;\n        view = view.parent;\n    }\n    </findViewByType>\n\n    return found;\n}\n"], ["function_connect", "\nfunction connect(uri, callback) {\n    console.log('connecting to database (' + uri + ')');\n    mongo.MongoClient.connect(uri, {safe: true}, function (err, client) {\n        if (err) return callback(err);\n\n        db = client;\n        <handleDatabaseError>\n        db.addListener(\"error\", function (error) {\n            console.log(\"mongo client error: \" + error);\n        });\n        </handleDatabaseError>\n\n        callback(null, db);\n    });\n}\n"], ["function_someComplexInitialization", "\nfunction () {\n    var children = [],\n        addedDescriptors = [],\n        i, child;\n\n    <checkDefaultsConsistency>\n    if (this.$defaultContentName && this.$defaultTemplateName) {\n        throw \"both $defaultContentName and $defaultTemplateName are defined\";\n    }\n    </checkDefaultsConsistency>\n\n    var desc;\n\n    <function_addChildren>\n    function addChildren(childrenFromDescriptor, fromDescriptor) {\n        for (var j = 0; j < childrenFromDescriptor.length; j++) {\n            child = childrenFromDescriptor[j];\n            child.$fromDescriptor = fromDescriptor;\n\n            if (child.$createdByTemplate || _.indexOf(addedDescriptors, child.$descriptor) === -1) {\n                children.push(child);\n                if (child.$descriptor) {\n                    addedDescriptors.push(child.$descriptor);\n                }\n            }\n        }\n    }\n    </function_addChildren>\n\n    <addInternalDescriptorsChildren>\n    for (var d = 0; d < this.$internalDescriptors.length; d++) {\n        desc = this.$internalDescriptors[d];\n        addChildren(this._getChildrenFromDescriptor(desc, this, null, this), \"intern\");\n    }\n    </addInternalDescriptorsChildren>\n\n    var externalDescriptorChildren;\n\n    <handleDefaultTemplateName>\n    if (this.$defaultTemplateName) {\n        var templateBlock;\n        for (i = 0; i < this.$descriptor.childNodes.length; i++) {\n            var node = this.$descriptor.childNodes[i];\n            if (node.nodeType === 1 && node.getAttribute(\"name\") === this.$defaultTemplateName && this.$stage.$applicationContext.getFqClassName(node.namespaceURI, this._localNameFromDomNode(node), true) === \"js/core/Template\") {\n                templateBlock = node;\n                break;\n            }\n        }\n        if (!templateBlock && this.$descriptor) {\n            templateBlock = this.createComponent(Component.Template, {\n                name: this.$defaultTemplateName\n            }, this.$descriptor);\n\n            externalDescriptorChildren = [templateBlock];\n        }\n    }\n    </handleDefaultTemplateName>\n\n    <handleDefaultContentName>\n    externalDescriptorChildren = externalDescriptorChildren || this._getChildrenFromDescriptor(this.$descriptor);\n    if (this.$defaultContentName && this.$descriptor) {\n        var contentBlock,\n            internAndExternalChildren = children.concat(externalDescriptorChildren);\n        for (i = 0; i < internAndExternalChildren.length; i++) {\n            child = internAndExternalChildren[i];\n            if (child instanceof Component.Content && child.$.name === this.$defaultContentName) {\n                contentBlock = child;\n                break;\n            }\n        }\n        if (!contentBlock) {\n            contentBlock = this.createComponent(Component.Content, {\n                name: this.$defaultContentName\n            });\n            for (i = 0; i < externalDescriptorChildren.length; i++) {\n                contentBlock.addChild(externalDescriptorChildren[i]);\n            }\n            externalDescriptorChildren = [contentBlock];\n        }\n    }\n    </handleDefaultContentName>\n\n    addChildren(externalDescriptorChildren, \"external\");\n\n    <handleExtraChildren>\n    var extraChildren = this.createChildren();\n    if (extraChildren) {\n        addChildren(extraChildren, \"extra\");\n    }\n    </handleExtraChildren>\n\n    this._initializeChildren(children);\n\n    this._childrenInitialized();\n\n    this._initializeXamlEventAttributes(this.$xamlDefaults, this);\n    this._initializeXamlEventAttributes(this.$xamlAttributes, this.$rootScope);\n}\n"], ["function_openAndPositionDropdown", "\nfunction () {\n    var self = this;\n    self.$el.addClass(\"open\");\n    var $button = self.parentView.$dropdownButton;\n    var align;\n    <calculateAlignment>\n    if (self.options.align === \"auto\") {\n        var viewPortWidth = document.body.clientWidth || document.body.clientWidth;\n        align = (($button.offset().left + self.$el.outerWidth()) > viewPortWidth) ? \"left\" : \"right\";\n    }\n    else {\n        align = (self.options.align === \"left\" || self.options.align === \"right\") ?\n        (self.options.align === \"right\" ? \"right\" : \"left\") : \"right\";\n    }\n    </calculateAlignment>\n    var offset;\n    <setPositionLeft>\n    if (align === \"left\") {\n        offset = $button.offset().left + $button.outerWidth() - self.$el.outerWidth();\n        self.$el.css(\"left\", offset + \"px\");\n    }\n    </setPositionLeft>\n    <setPositionRight>\n    else {\n        offset = $button.offset().left;\n        self.$el.css(\"left\", offset + \"px\");\n    }\n    </setPositionRight>\n    \n    <setPositionTop>\n    var offsetHeight = $button.offset().top + $button.outerHeight();\n    self.$el.css(\"top\", offsetHeight + \"px\");\n    </setPositionTop>\n}\n"], ["function_removeGoogleListeners", "\nfunction () {\n    if (!this.googleListeners) return false;\n    for (var i = 0; i < this.googleListeners.length; i++) {\n        google.maps.event.removeListener(this.googleListeners[i]);\n    }\n    this.googleListeners.length = 0;\n    return true;\n}\n"], ["function_getTextRangeContainerElement", "\nfunction(textRange) {\n    var parentEl = textRange.parentElement();\n    var range = textRange.duplicate();\n    range.collapse(true);\n    var startEl = range.parentElement();\n    range = textRange.duplicate();\n    range.collapse(false);\n    var endEl = range.parentElement();\n    var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);\n    return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer);\n}\n"], ["function_resolveType", "\nfunction resolveType(type) {\n    if (typeof type !== 'object') {\n        throw new Error('Type definition must be an object. Illegal value: ' + type);\n    }\n    var parent = types[type.type];\n    <iterateAndResolveType>\n    while (parent && !type.resolved) {\n        resolveType(parent);\n        _.defaults(type, JSON.parse(JSON.stringify(parent)));\n        type.write = type.write || parent.write;\n        type.read = type.read || parent.read;\n        type.type = parent.type; \n        parent = types[type.type];\n    }\n    </iterateAndResolveType>\n}\n"], ["function_setYearForCalendarPages", "\nfunction(year) {\n    var cfgPageDate = DEF_CFG.PAGEDATE.key;\n    year = parseInt(year, 10);\n    for (var p=0;p<this.pages.length;++p) {\n        var cal = this.pages[p];\n        var pageDate = cal.cfg.getProperty(cfgPageDate);\n        <handleYearIncrement>\n        if ((pageDate.getMonth()+1) == 1 && p>0) {\n            year+=1;\n        }\n        </handleYearIncrement>\n        cal.setYear(year);\n    }\n}\n"], ["function_parsePullDownPlaceHolders", "\nfunction parsePullDownPlaceHolders( str ) {\n\tlog( \"Pong-PullDown\",  \"parsePullDownPlaceHolders: \"+ str );\n\t<replacePlaceholdersWithSessionInfo>\n\tfor (var key in sessionInfo) {\n\t\tif ( str.indexOf( '${'+key+'}' ) >=0 ) {\n\t\t\tstr = str.replace( '${'+key+'}', $.i18n( sessionInfo[key] ) );\n\t\t}\n\t}\n\t</replacePlaceholdersWithSessionInfo>\n\tlog( \"Pong-PullDown\", \"Processed value: \"+ str );\n\treturn str;\n}\n"], "```"]