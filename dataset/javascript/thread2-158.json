[["fundMultipleAccounts", "\nasync function () {\n    <logTransfer>\n    logger.info('* Foundation funding ETH on value chain to valueRegistrar');\n    </logTransfer>\n    await setupFundManager.transferEth(foundationAddr, foundationPassphrase, valueRegistrarAddr, MIN_FUND.toString(10));\n\n    <logTransfer>\n    logger.info('* Foundation funding ETH on value chain to valueDeployer');\n    </logTransfer>\n    await setupFundManager.transferEth(foundationAddr, foundationPassphrase, valueDeployerAddr, MIN_FUND.toString(10));\n\n    <logTransfer>\n    logger.info('* Foundation funding ETH on value chain to valueOps');\n    </logTransfer>\n    await setupFundManager.transferEth(foundationAddr, foundationPassphrase, valueOpsAddr, MIN_FUND.toString(10));\n\n    <logTransfer>\n    logger.info('* Foundation funding ETH on value chain to utility chain owner');\n    </logTransfer>\n    await setupFundManager.transferEth(foundationAddr, foundationPassphrase, utilityChainOwnerAddr, MIN_FUND.mul(100000).toString(10));\n\n    <logTransfer>\n    logger.info('* Foundation funding ETH on value chain to staker');\n    </logTransfer>\n    await setupFundManager.transferEth(foundationAddr, foundationPassphrase, stakerAddr, MIN_FUND.mul(100000).toString(10));\n\n    return Promise.resolve();\n}\n"], ["galleryComponent", "\nfunction(element) {\n\n        this.core = $(element).data('lightGallery');\n        this.$el = $(element);\n\n        <checkItemLength>\n        if (this.core.$items.length < 2) {\n            return false;\n        }\n        </checkItemLength>\n\n        <configureSettings>\n        this.core.s = $.extend({}, defaults, this.core.s);\n        this.interval = false;\n        </configureSettings>\n\n        this.fromAuto = true;\n        this.canceledOnTouch = false;\n        this.fourceAutoplayTemp = this.core.s.fourceAutoplay;\n\n        <conditionalProgressBar>\n        if (!this.core.doCss()) {\n            this.core.s.progressBar = false;\n        }\n        </conditionalProgressBar>\n\n        this.init();\n\n        return this;\n}\n"], ["textInputConfiguration", "\nfunction () {\n    var inputElm = this.getTextInputField();\n\n    if (inputElm) {\n        this._updateState();\n\n        <inputFieldProperties>\n        inputElm.readOnly = this.isTextInputReadOnly();\n        inputElm.disabled = this._cfg.disabled;\n        </inputFieldProperties>\n\n        <ariaAccessibilityAttributes>\n        if (this._cfg.waiAria) {\n            if (this._cfg.formatError || this._cfg.error) {\n                inputElm.setAttribute(\"aria-invalid\", \"\");\n            } else {\n                inputElm.removeAttribute(\"aria-invalid\");\n            }\n        }\n        </ariaAccessibilityAttributes>\n\n    }\n}\n"], ["authenticateAppToken", "\nfunction(request, response, next){\n    var apptkn;\n    <extractAppToken>\n    if (!utils.Misc.isNullOrUndefined(request.get(X_BOLT_APP_TOKEN))) {\n        apptkn = request.get(X_BOLT_APP_TOKEN);\n    }\n    else {\n        var error = new Error(errors['110']);\n        response.end(utils.Misc.createResponse(null, error, 110));\n        return;\n    }\n    </extractAppToken>\n\n    <appTokenNameValidation>\n    var name = __getAppFromAppToken(apptkn, request);\n    if (utils.Misc.isNullOrUndefined(name)) {\n        var error = new Error(errors['113']);\n        response.end(utils.Misc.createResponse(null, error, 113));\n        return;\n    }\n    var appnm = utils.String.trim(name.toLowerCase());\n    </appTokenNameValidation>\n\n    <checkAppSystemName>\n    if (appnm == 'bolt') {\n        next();\n    }\n    else {\n        models.app.findOne({ \n            name: appnm, system: true\n        }, function(appError, app){\n            if (!utils.Misc.isNullOrUndefined(appError)) {\n                response.end(utils.Misc.createResponse(null, appError));\n            }\n            else if(utils.Misc.isNullOrUndefined(app)){\n                var error = new Error(errors['504']);\n                response.end(utils.Misc.createResponse(null, error, 504));\n            }\n            else{\n                next();\n            }\n        });\n    }\n    </checkAppSystemName>\n}\n"], ["removeResources", "\nfunction remove (dataStore, collectionName, resources, callback) {\n  \n  <openDataStore>\n  dataStore.__openDataStore(collectionName, (err, existingResources) => {\n    if (err) {\n      return callback(err);\n    }\n  </openDataStore>\n\n    <filterRemoveResources>\n    let removedResources = [];\n    resources.forEach((resource) => {\n      let removed = _.remove(existingResources, resource.filter(dataStore.__router));\n      removedResources = removedResources.concat(removed);\n    });\n    </filterRemoveResources>\n\n    <saveUpdatedCollection>\n    if (removedResources.length > 0) {\n      dataStore.__saveDataStore(collectionName, existingResources, (err) => {\n        if (err) {\n          callback(err);\n        }\n        else {\n          callback(null, removedResources);\n        }\n      });\n    }\n    else {\n      callback(null, []);\n    }\n    </saveUpdatedCollection>\n  });\n}\n"], ["initializeStorage", "\nfunction(callback) {\n    var _this = this\n\n    var initStorage = function() {\n        var obj = JSON.stringify([])\n        var _set = {}\n        _set[_this.key] = obj\n        storage.set(_set)\n\n        obj = JSON.parse(obj)\n\n        return obj\n    }\n\n    <getStorage>\n    storage.get(this.key, function(items) {\n        var obj\n        if (Object.keys(items).length > 0) {\n            for (itemKey in items) {\n                obj = items[itemKey]\n                if (obj) {\n                    obj = JSON.parse(obj)\n                }\n\n                if (obj === null || typeof obj === 'undefined') {\n                    obj = initStorage()\n                } \n                \n                if (callback) {\n                    callback(obj)\n                }\n            }\n        } else {\n            obj = initStorage()\n            callback(obj)\n        }\n    })\n    </getStorage>\n}\n"], ["processTextContent", "\nfunction( doc, text ){\n    <normalizeText>\n    text = text.replace( /&nbsp;/g, ' ') ;    \n    text = modules.utils.collapseWhiteSpace( text );\n    </normalizeText>\n\n    <decodeEntities>\n    text = modules.domUtils.decodeEntities( doc, text );  \n    </decodeEntities>\n\n    <replaceDash>\n    text = text.replace( '\u2013', '-' );  \n    </replaceDash>\n\n    <trimText>\n    return modules.utils.trim( text );\n    </trimText>\n}\n"], ["resolveObjectPaths", "\nfunction includePaths(object, pathsRemaining) {\n    debugPrint('INCLUDE', { object, pathsRemaining });\n    const path = pathsRemaining.shift();\n    <resolveTarget>\n    const target = object && object[path];\n    </resolveTarget>\n\n    <includeTargetPath>\n    if (target) {\n        if (Array.isArray(target)) {\n            object[path] = target.map(pointer => {\n                const fetched = fetchObjectByPointer(pointer);\n                includePaths(fetched, _.cloneDeep(pathsRemaining));\n                return fetched;\n            });\n        } else {\n            if (object[path].__type === 'Pointer') {\n                object[path] = fetchObjectByPointer(target);\n            }\n            includePaths(object[path], pathsRemaining);\n        }\n    }\n    </includeTargetPath>\n\n    return object;\n}\n"], ["inlineFileHandling", "\nfunction inlineFileRegHandle(regFiles, buildInfo, options, reqModuleJS, file) {        \n    var content = '';\n    <checkRegFiles>\n    if(regFiles && regFiles.length) {\n        var destMP = {'.js':options.jsDestPath,'.css':options.cssDestPath};\n        for(var j=0;j<regFiles.length;j++) {\n            var jp = regFiles[j].trim().replace(/(^['\"]*)|(['\"]*$)/g, '');               \n            if(!jp) continue;\n            </checkRegFiles>\n\n            <determineFilePath>\n            if(jp.indexOf('?') > -1) jp = jp.substr(0, jp.indexOf('?'));\n            if(jp[0] == '/') {\n                var filepath = path.join(options.destPath, jp);\n            }\n            else if(jp[0] != '.') { \n                var ext = path.extname(jp).toLowerCase();\n                var dest = destMP[ext] || options.destPath;\n                var filepath = path.join(dest, jp);\n                </determineFilePath>\n\n                <handleFileSystemChecks>\n                if(!fs.existsSync(filepath)) {                        \n                    filepath = path.join(options.dest, jp); \n                }\n                if(!fs.existsSync(filepath) && options.destPath) {                        \n                    filepath = path.join(options.destPath, jp); \n                }\n                               \n                if(!fs.existsSync(filepath)) {\n                    console.log(filepath + ' not exists, check dest path!');\n                    filepath = path.join(path.dirname(file.path), jp); \n                }\n                </handleFileSystemChecks>\n            }\n            else {\n                <handleRelativePath>\n                var filepath = path.join(options.dest, jp);\n                </handleRelativePath>\n            }\n            \n            <readInlineContent>\n            content += readInlineContent(filepath, buildInfo, reqModuleJS, options) + '\\n';\n            </readInlineContent>\n        }\n    }\n    return content;\n}\n"], ["getNormalizedPath", "\nfunction getAbsolutePath(url) {\n    <resolveAbsolutePath>\n    if (!path.isAbsolute(url)) {\n        url = path.join(__dirname, url);\n    }\n    </resolveAbsolutePath>\n    \n    <normalizePath>\n    return path.normalize(url)\n    </normalizePath>\n}\n"], "```"]