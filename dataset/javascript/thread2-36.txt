```javascript
<createListBinding>
function(list_binding_getter, list_binding_setter, list_binding_init_value) {
  return function(elements) { 
    var args = slice.call(arguments, 1), 
      val = cjs(function() { 
        return list_binding_getter(args);
      });

    var binding = new Binding({
      targets: elements,
      getter: bind(val.get, val), 
      setter: list_binding_setter,
      init_val: list_binding_init_value,
      coreDestroy: function() {
        val.destroy(); 
      }
    });
    return binding;
  };
}
</createListBinding>

<adjustRange>  
function adjustRange(w, bisect) {
  var r0 = w.i0,
      r1 = w.i1 - 1,
      c = w.compare,
      d = w.data,
      n = d.length - 1;

  if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);
  if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);
}
</adjustRange>

<closeOpenPopups>
function () {
  for (var i = this.openedPopups.length - 1; i >= 0; i--) {
    var popup = this.openedPopups[i];
    popup.close();
  }
}
</closeOpenPopups>

<cacheData>
function (key, value) {
  var pSet, oMsr = startMeasurements("set", key);
  Log.debug("Cache Manager: Setting value of type[" + typeof value + "] with key [" + key + "]");

  pSet = this._callInstanceMethod("set", arguments).then(function callInstanceHandler() {
    Log.debug("Cache Manager: Setting key [" + key + "] completed successfully");
    oMsr.endAsync();
    
  }, function (e) {
    Log.error("Cache Manager: Setting key [" + key + "] failed. Error:" + e);
    oMsr.endAsync();
    throw e;
  });
  oMsr.endSync();
  return pSet;
}
</cacheData>

<layoutChart>
function(chart, width, height) {
  
  // Setup, calculation, and layout responsibilities are all parts of the larger comprehensive task
  // of laying out the chart, which is a single cohesive responsibility.
  
  if (!chart) {
    return;
  }

  ... // (Omitted for brevity, but all code is part of the single cohesive responsibility of layout function)

  chart.chartArea = {
    left: outerBoxSizes.left,
    top: outerBoxSizes.top,
    right: outerBoxSizes.left + maxChartAreaWidth,
    bottom: outerBoxSizes.top + maxChartAreaHeight
  };

  helpers$1.each(chartAreaBoxes, function(box) {
    box.left = chart.chartArea.left;
    box.top = chart.chartArea.top;
    box.right = chart.chartArea.right;
    box.bottom = chart.chartArea.bottom;

    box.update(maxChartAreaWidth, maxChartAreaHeight);
  });
}
</layoutChart>

<compileTranslations>
function(next){
  if ( !options.translate )
    return next();
  l10ns('compile',  function(err, time){
    console.log("     l10ns compiled...".gray + time.green );
    return next();
  });
}
</compileTranslations>

<clearTimeouts>
function() {
  registerDeviceTimeoutId && clearTimeout(registerDeviceTimeoutId);
  registerServerTimeoutId && clearTimeout(registerServerTimeoutId);
  checkIfSocketHasOpennedTimeoutId && clearTimeout(checkIfSocketHasOpennedTimeoutId);
  socketReconnectCheck && clearTimeout(socketReconnectCheck);
}
</clearTimeouts>

<validateBid>
function(bid) {
  
  // The responsibility of validating the bid object for required properties
  
  let isValid = false;
  if (typeof bid.params !== 'undefined') {
    let isValidPlacementId = _validateId(utils.getValue(bid.params, 'placementId'));
    let isValidPageId = _validateId(utils.getValue(bid.params, 'pageId'));
    isValid = isValidPlacementId && isValidPageId;
  }

  if (!isValid) {
    utils.logError('Teads placementId and pageId parameters are required. Bid aborted.');
  }
  return isValid;
}
</validateBid>

<performMatch>
function match(regexp) {
  
  // The responsibility of matching a string against a regular expression
  
  var O = requireObjectCoercible(this);
  var matcher = regexp == undefined ? undefined : regexp[MATCH];
  return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
}
</performMatch>

<getResourceNameByValue>
function getResourceNameByValue (data, schema) {
  
  // The responsibility of getting a resource name based on the given value and schema
  
  if (schema.type !== "object" && schema.type !== undefined) {
    
    return {
      name: "",
      schema,
      value: data
    };
  }
}
</getResourceNameByValue>
```
All functions have been annotated with single tags around them as they each show SRP compliance. Each function has a single, distinct responsibility, from binding a list to adjusting ranges, to validating some data against criteria. They are examples of well-scoped functions that stick to one task or operation.