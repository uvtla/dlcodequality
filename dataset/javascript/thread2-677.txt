<writeFile>
function writeFile(filename, content) {
  fs.writeFileSync(filename, JSON.stringify(content, null, 2));
}
</writeFile>

<shallowMerge>
function shallowMerge(o1, o2) {
    var o = {},
        k;

    for (k in o1) o[k] = o1[k];
    for (k in o2) o[k] = o2[k];

    return o;
}
</shallowMerge>

<$$core$$ToRawPrecision>
function $$core$$ToRawPrecision (x, minPrecision, maxPrecision) {
        var
        
            p = maxPrecision;

        
        if (x === 0) {
            var
            
                m = $$core$$arrJoin.call(Array (p + 1), '0'),
            
                e = 0;
        }
        
        else {
            
            
            
            
            var
                e = $$core$$log10Floor(Math.abs(x)),

                
                f = Math.round(Math.exp((Math.abs(e - p + 1)) * Math.LN10)),

            
            
                m = String(Math.round(e - p + 1 < 0 ? x * f : x / f));
        }

        
        if (e >= p)
            
            return m + $$core$$arrJoin.call(Array(e-p+1 + 1), '0');

        
        else if (e === p - 1)
            
            return m;

        
        else if (e >= 0)
            
            
            m = m.slice(0, e + 1) + '.' + m.slice(e + 1);

        
        else if (e < 0)
            
            
            m = '0.' + $$core$$arrJoin.call(Array (-(e+1) + 1), '0') + m;

        
        if (m.indexOf(".") >= 0 && maxPrecision > minPrecision) {
            var
            
                cut = maxPrecision - minPrecision;

            
            while (cut > 0 && m.charAt(m.length-1) === '0') {
                
                m = m.slice(0, -1);

                
                cut--;
            }

            
            if (m.charAt(m.length-1) === '.')
                
                m = m.slice(0, -1);
        }
        
        return m;
}
</$$core$$ToRawPrecision>

<_processPathsAndPackages>
function _processPathsAndPackages(paths, packages, options) {
    var result = {
        paths: {},
        packages: []
    };
    _.each(paths, function (path, pathName) {
        result.paths[pathName] = _.contains(options.notMerge, pathName) ? 'empty:' : path;
    });
    _.each(packages, function (pkg, i) {
        if (_.contains(options.notMerge, pkg.name)) {
            result.paths[pkg.name] = 'empty:';
        } else {
            result.packages.push(pkg);
        }
    });
    return result;
}
</_processPathsAndPackages>

<parseNextToken>
function parseNextToken(template, grammar, stack) {
    grammar.some(function(token) {
      var capture = token.test.exec(template);

      
      if (capture && capture[0]) {
        template = template.replace(token.test, "");
        stack.push({ name: token.name, capture: capture });
        return true;
      }
    });

    return template;
}
</parseNextToken>

<join>
function join(args) {
  var arg;
  var i = 0;
  var path = '';

  if (arguments.length === 0) {
    return utils.sep;
  }

  while ((arg = arguments[i++])) {
    if (typeof arg !== 'string') {
      throw new TypeError('utils.join() expects string arguments');
    }

    path += utils.sep + arg;
  }

  path = path.replace(/\/+/g, utils.sep);
  if (path[path.length - 1] === utils.sep) {
    path = path.substring(0, path.length - 1);
  }
  return path;
}
</join>

<getMaxOffset>
function getMaxOffset({ items, slideWidth }) {
    if (!items.length) {
        return 0;
    }
    return Math.max(items[items.length - 1].right - slideWidth, 0) || 0;
}
</getMaxOffset>

<decimal>
function decimal(name) {
  return joi.alternatives().meta({ cql: true, type: name }).try(
    
    joi.string().regex(/^\-?\d+(\.\d+)?$/m),
    
    joi.number()
  );
}
</decimal>

<setPosition>
function(value, type) {
      type = type || "current";
      var pos;
      if(type == "current") {
        pos = this.pos;
      } else if(type == "end") {
        pos = this.endPos;
      } else if(type == "start") {
        pos = this.startPos;
      }
      pos.set(value);
}
</setPosition>

<parseInput>
function(input, remoteData)
{
  if (input instanceof Model)
  {
    return input;
  }

  var discriminatedValue = isValue(input) ? input[this.discriminator] : null;
  var model = this.discriminatorsToModel[discriminatedValue];

  return model ? model.Database.parseModel(input, remoteData) : null;
}
</parseInput>