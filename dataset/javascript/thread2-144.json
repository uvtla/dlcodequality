[["flattenValue", "\nfunction flattenValue(parent, parentProperty, value, subjects) {\n  var flattened = null;\n  \n  <nullCheck>\n  if (value === null) {\n    // No operation performed on null values\n  }\n  </nullCheck>\n  \n  <arrayCheck>\n  else if (value.constructor === Array) {\n    for (var i in value) {\n      _flatten(parent, parentProperty, value[i], subjects);\n    }\n  }\n  </arrayCheck>\n  \n  <objectCheck>\n  else if (value.constructor === Object) {\n    <handleLiteralsOrTypes>\n    if ('@literal' in value || parentProperty === '@type') {\n      flattened = _clone(value);\n    }\n    </handleLiteralsOrTypes>\n    \n    <handleIdArray>\n    else if (value['@id'].constructor === Array) {\n      if (parent !== null) {\n        throw {\n          message: 'Embedded graph literals cannot be flattened.'\n        };\n      }\n      for (var idx in value['@id']) {\n        _flatten(parent, parentProperty, value['@id'][idx], subjects);\n      }\n    }\n    </handleIdArray>\n    \n    <handleRegularObject>\n    else {\n      var subject;\n      if (value['@id'] in subjects) {\n        subject = subjects[value['@id']];\n      } else {\n        subject = { '@id': value['@id'] };\n        subjects[value['@id']] = subject;\n      }\n      flattened = { '@id': subject['@id'] };\n      for (var key in value) {\n        var v = value[key];\n        if (v !== null && key !== '@id') {\n          if (key in subject) {\n            if (subject[key].constructor !== Array) {\n              subject[key] = [subject[key]];\n            }\n          } else {\n            subject[key] = [];\n          }\n          _flatten(subject[key], key, v, subjects);\n          if (subject[key].length === 1) {\n            subject[key] = subject[key][0];\n          }\n        }\n      }\n    }\n    </handleRegularObject>\n    \n  }\n  </objectCheck>\n  \n  <simpleValueCheck>\n  else {\n    flattened = value;\n  }\n  </simpleValueCheck>\n\n  \n  <finalizeFlattening>\n  if (flattened !== null && parent !== null) {\n    if (parent.constructor === Array) {\n      var duplicate = false;\n      if (flattened.constructor === Object && '@id' in flattened) {\n        duplicate = parent.filter(function (e) {\n          return (e.constructor === Object && '@id' in e && e['@id'] === flattened['@id']);\n        }).length > 0;\n      }\n      if (!duplicate) {\n        parent.push(flattened);\n      }\n    } else {\n      parent[parentProperty] = flattened;\n    }\n  }\n  </finalizeFlattening>\n  \n}\n"], ["encryptData", "\nfunction encryptData(password, plaintext, params, rp) {\n  params = params || {};\n  rp = rp || {};\n\n  var j = sjcl.json, p = j._add({ iv: sjcl.random.randomWords(4,0) }, j.defaults), tmp, prp, adata;\n  j._add(p, params);\n  adata = p.adata;\n  \n  <processInputParameters>\n  if (typeof p.salt === \"string\") {\n    p.salt = sjcl.codec.base64.toBits(p.salt);\n  }\n  if (typeof p.iv === \"string\") {\n    p.iv = sjcl.codec.base64.toBits(p.iv);\n  }\n  </processInputParameters>\n\n  <parameterValidation>\n  if (!sjcl.mode[p.mode] || !sjcl.cipher[p.cipher] || (typeof password === \"string\" && p.iter <= 100) || (p.ts !== 64 && p.ts !== 96 && p.ts !== 128) || (p.ks !== 128 && p.ks !== 192 && p.ks !== 256) || (p.iv.length < 2 || p.iv.length > 4)) {\n    throw new sjcl.exception.invalid(\"json encrypt: invalid parameters\");\n  }\n  </parameterValidation>\n\n  <processPassword>\n  if (typeof password === \"string\") {\n    tmp = sjcl.misc.cachedPbkdf2(password, p);\n    password = tmp.key.slice(0, p.ks / 32);\n    p.salt = tmp.salt;\n  } else if (sjcl.ecc && password instanceof sjcl.ecc.elGamal.publicKey) {\n    tmp = password.kem();\n    p.kemtag = tmp.tag;\n    password = tmp.key.slice(0, p.ks / 32);\n  }\n  </processPassword>\n\n  <prepareData>\n  if (typeof plaintext === \"string\") {\n    plaintext = sjcl.codec.utf8String.toBits(plaintext);\n  }\n  if (typeof adata === \"string\") {\n    p.adata = adata = sjcl.codec.utf8String.toBits(adata);\n  }\n  </prepareData>\n\n  <initializeCipher>\n  prp = new sjcl.cipher[p.cipher](password);\n  </initializeCipher>\n\n  <finalizeAndEncrypt>\n  j._add(rp, p);\n  rp.key = password;\n  p.ct = sjcl.mode[p.mode].encrypt(prp, plaintext, p.iv, adata, p.ts);\n  </finalizeAndEncrypt>\n\n  <returnCipherText>\n  return p;\n  </returnCipherText>\n}\n"], ["generateNumber", "\nfunction getNumber(type, min, max, format, options) {\n  var ret;\n\n  <handleOptions>\n  if (!options) {\n    options = format;\n    format = null;\n  }\n  </handleOptions>\n\n  <generateRandomNumber>\n  if (type === 'int') {\n    ret = utils.randomInt(min, max);\n  } else if (type === 'float') {\n    ret = utils.randomFloat(min, max);\n  }\n  </generateRandomNumber>\n\n  <roundNumber>\n  if (typeof options.hash.round === 'number') {\n    ret = Math.round(ret / options.hash.round) * options.hash.round;\n  }\n  </roundNumber>\n\n  <formatNumber>\n  if (format) {\n    ret = numbro(ret).format(format);\n  }\n  </formatNumber>\n\n  <returnResult>\n  return ret;\n  </returnResult>\n}\n"], ["parseConditions", "\nfunction parseConditions(arr, defaultOp) {\n  var ret = [];\n  \n  <generateParsedArray>\n  arr.forEach(function (a) {\n    <convertStringToIdentifier>\n    if (isString(a)) {\n      a = this.stringToIdentifier(a);\n    }\n    </convertStringToIdentifier>\n   \n    <validateIdentifier>\n    if (isInstanceOf(a, Identifier)) {\n      ret.push([a, defaultOp]);\n    }\n    </validateIdentifier>\n    \n    <handleHash>\n    else if (isHash(a)) {\n      ret = ret.concat(array.toArray(a));\n    }\n    </handleHash>\n    \n    <throwErrorOnInvalidSpecifier>\n    else {\n      throw new QueryError(\"Invalid condition specifier \" + a);\n    }\n    </throwErrorOnInvalidSpecifier>\n  }, this);\n  </generateParsedArray>\n\n  <returnParsedArray>\n  return ret;\n  </returnParsedArray>\n}\n"], ["getHelpContents", "\nasync function getHelpContents(args, output) {\n  <handleSpecialArguments>\n  if ('!' in args) {\n    return getAllCommands(output);\n  }\n  </handleSpecialArguments>\n\n  <handleArgumentsLength>\n  if (args._.length == 0) {\n    return getGeneralHelpContents(output);\n  } else if (args._.length == 1) {\n    return getVerbHelp(args._[0], output);\n  } else if (args._.length >= 2) {\n    <provideOperationHelp>\n    const serviceManifest = getServiceManifest(args);\n    if (serviceManifest) {\n      const { operation } = serviceManifest;\n      output.write(`${operation.description}\\n\\n`);\n      output.write(`Usage:\\n${chalk.cyan.bold(operation.command)}\\n\\n`);\n    } else {\n      return getVerbHelp(args._[0], output);\n    }\n    </provideOperationHelp>\n  }\n  </handleArgumentsLength>\n\n  <provideHelpForService>\n  const serviceManifest = getServiceManifest(args);\n  if (serviceManifest) {\n    return getHelpContentsForService(serviceManifest, output);\n  }\n  </provideHelpForService>\n\n  <fallbackToGeneralHelp>\n  return getGeneralHelpContents(output);\n  </fallbackToGeneralHelp>\n}\n"], ["deleteProduct", "\nfunction f_urun_sil(_tahta_id, _urun_id, _kul_id) {\n  <checkProductId>\n  if (!_urun_id) {\n    throw new exception.Istisna(\"\u00dcr\u00fcn Silinemedi!\", \"Silinecek \u00fcr\u00fcn bulunamad\u0131! Tekrar deneyiniz.\");\n  }\n  </checkProductId>\n\n  <setupDeleteOptions>\n  var opts = {};\n  opts.bArrAnahtarKelimeler = false;\n  opts.bArrIliskiliFirmalar = false;\n  opts.bUreticiKurum = false;\n  </setupDeleteOptions>\n\n  <retrieveProductAndPerformDeletion>\n  return f_urun_id(_urun_id, _tahta_id, opts)\n    .then(function (_dbUrun) {\n      <emitDeletionEvent>\n      emitter.emit(schema.SABIT.OLAY.URUN_SILINDI, _dbUrun, _tahta_id, _kul_id);\n      </emitDeletionEvent>\n\n      <removeProductFromSets>\n      return result.dbQ.Q.all([\n        result.dbQ.srem(result.kp.tahta.ssetOzelUrunleri(_tahta_id, true), _urun_id),\n        result.dbQ.sadd(result.kp.tahta.ssetOzelUrunleri(_tahta_id, false), _urun_id)\n      ])</removeProductFromSets>\n        .then(function () {\n          <removeProductBids>\n          return result.dbQ.smembers(result.kp.urun.ssetTeklifleri(_tahta_id, _urun_id))\n            .then(function (_iTeklif_idler) {\n              if (Array.isArray(_iTeklif_idler) && _iTeklif_idler.length > 0) {\n                return [\n                  result.dbQ.hdel(result.kp.teklif.hsetUrunleri, _iTeklif_idler),\n                  result.dbQ.srem(result.kp.urun.ssetTeklifleri(_tahta_id, _urun_id), _iTeklif_idler)\n                ]\n                  .allX()\n                  .then(function () {\n                    return _urun_id;\n                  });\n              }\n              return _urun_id;\n            });\n          </removeProductBids>\n        });\n    });\n  </retrieveProductAndPerformDeletion>\n}\n"], ["computeNavigation", "\nfunction computeNavigation(commands) {\n  <initializeNavigation>\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n  </initializeNavigation>\n  var numberOfDoubleDots = 0;\n  var isAbsolute = false;\n  <reduceCommandsToNavigation>\n  var res = commands.reduce(function (res, cmd, cmdIdx) {\n    <handleObjectsAndOutlets>\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        var outlets_1 = {};\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_collection__[\"d\"])(cmd.outlets, function (commands, name) {\n          outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return res.concat([{ outlets: outlets_1 }]);\n      }\n      if (cmd.segmentPath) {\n        return res.concat([cmd.segmentPath]);\n      }\n    }\n    </handleObjectsAndOutlets>\n    \n    <processStringCommands>\n    if (!(typeof cmd === 'string')) {\n      return res.concat([cmd]);\n    }\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach(function (urlPart, partIndex) {\n        <handleRelativePaths>\n        if (partIndex == 0 && urlPart === '.') {\n          // No operation: retain current directory indication\n        }\n        </handleRelativePaths>\n        <identifyAbsolutePath>\n        else if (partIndex == 0 && urlPart === '') {\n          isAbsolute = true;\n        }\n        </identifyAbsolutePath>\n        <processParentDirectory>\n        else if (urlPart === '..') {\n          numberOfDoubleDots++;\n        }\n        </processParentDirectory>\n        <pushValidUrlPart>\n        else if (urlPart != '') {\n          res.push(urlPart);\n        }\n        </pushValidUrlPart>\n      });\n      return res;\n    }\n    </processStringCommands>\n    return res.concat([cmd]);\n  }, []);\n  </reduceCommandsToNavigation>\n  \n  <finalizeNavigation>\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n  </finalizeNavigation>\n}\n"], ["arraySlice", "\nfunction slice() {\n  <initializeVariables>\n  for (var\n    o = +this,                // Convert to a number\n    i = o,                    // Initialize index\n    l = arguments.length,     // Length of arguments\n    n = l - o,                // New array length calculation\n    a = Array(n < 0 ? 0 : n); // Create new array with calculated length\n    i < l; i++                // Iterate through the rest of the arguments\n  )\n  </initializeVariables>\n  {\n    <assignElements>\n    a[i - o] = arguments[i];\n    </assignElements>\n  }\n  \n  <returnNewArray>\n  return a;\n  </returnNewArray>\n}\n"], ["writeDocumentationFile", "\nfunction writeDocsFile(srcPath, destDir, options) {\n  \n  <setupFilePathsAndNames>\n  var filename = options.slug + '.md';\n  var destPath = path.join(destDir, filename);\n  var promises = [];\n  var filePath;\n  var files;\n  </setupFilePathsAndNames>\n\n  <readSourcePath>\n  if (fs.statSync(srcPath).isDirectory()) {\n    files = fs.readdirSync(srcPath);\n  } else {\n    files = [srcPath];\n  }\n  </readSourcePath>\n\n  <processFiles>\n  for (var i = 0; i < files.length; i++) {\n    if (files[0] !== srcPath) {\n      filePath = path.join(srcPath, files[i]);\n    } else {\n      filePath = srcPath;\n    }\n\n    <parseFile>\n    if (fs.statSync(filePath).isFile()) {\n      promises.push(parseSourceFile(filePath));\n    }\n    </parseFile>\n  }\n  </processFiles>\n\n  <combineAndWriteMarkdown>\n  return RSVP.all(promises)\n    .then(function (markdownArray) {\n      return massageMarkdown(markdownArray.join('\\n'), options);\n    })\n    .then(function (markdown) {\n      return new RSVP.Promise(function (resolve, reject) {\n        \n        <createWriteStream>\n        var stream = fs.createWriteStream(destPath, { flags: 'w' });\n        </createWriteStream>\n\n        <handleStreamEvents>\n        stream.on('finish', resolve);\n        stream.on('error', reject);\n        </handleStreamEvents>\n\n        <writeToFile>\n        stream.write(markdown);\n        </writeToFile>\n\n        <closeStream>\n        stream.end();\n        </closeStream>\n\n        console.log('Wrote Markdown to file ' + destPath);\n      });\n    });\n  </combineAndWriteMarkdown>\n}\n"], ["normalizeValue", "\nfunction normalize(val, safe) {\n  <convertValue>\n  return (\n    val == null ? '' : val === false ? '' : Array.isArray(val) ? val.map(normalize).join('') : safe === false ? $.escapeHTML(val) : String(val)\n  )\n  </convertValue>\n}\n"], "```\n"]