[["breadcrumbWalk", "\nfunction (callback, ctx) {\n    var depth, node;\n    for (depth = 0, node = this; node !== null; node = node.parent(), depth++)\n        ctx = callback(depth, node, ctx);\n    return ctx;\n}\n"], ["StatefulClientChannel", "\nfunction StatefulClientChannel(client, readable, writable, opts) {\n  ClientChannel.call(this, client, opts);\n  this._readable = readable;\n  this._writable = writable;\n  this._connected = !!(opts && opts.noPing);\n  this._readable.on('end', onEnd);\n  this._writable.on('finish', onFinish);\n\n  var self = this;\n  var timer = null;\n  \n  <handleEndOfTransmission>\n  this.once('eot', function () {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    if (!self._connected) {\n      self.emit('_ready');\n    }\n    this._writable.removeListener('finish', onFinish);\n    if (this._endWritable) {\n      debug('ending transport');\n      this._writable.end();\n    }\n    this._readable\n      .removeListener('data', onPing)\n      .removeListener('data', onMessage)\n      .removeListener('end', onEnd);\n  });\n  </handleEndOfTransmission>\n\n  <scheduledPing>\n  var hreq; \n  if (this._connected) {\n    this._readable.on('data', onMessage);\n  } else {\n    this._readable.on('data', onPing);\n    process.nextTick(ping);\n    if (self.timeout) {\n      timer = setTimeout(function () {\n        self.destroy(new Error('timeout'));\n      }, self.timeout);\n    }\n  }\n  </scheduledPing>\n\n  function ping(retry) {\n    <establishConnection>\n    if (self.destroyed) {\n      return;\n    }\n    hreq = self._createHandshakeRequest(self._adapter, !retry);\n    var payload = [\n      HANDSHAKE_REQUEST_TYPE.toBuffer(hreq),\n      utils.bufferFrom([0, 0]) \n    ];\n    self._writable.write({id: self._prefix, payload: payload});\n    </establishConnection>\n  }\n\n  function onPing(obj) {\n    <handleHandshakeResponse>\n    if (!self._matchesPrefix(obj.id)) {\n      debug('discarding unscoped response %s (still connecting)', obj.id);\n      return;\n    }\n    var buf = Buffer.concat(obj.payload);\n    try {\n      var hres = readHead(HANDSHAKE_RESPONSE_TYPE, buf).head;\n      if (hres.serverHash) {\n        self._adapter = self._getAdapter(hres);\n      }\n    } catch (cause) {\n      self.destroy(cause);\n      return;\n    }\n    var match = hres.match;\n    debug('handshake match: %s', match);\n    self.emit('handshake', hreq, hres);\n    if (match === 'NONE') {\n      process.nextTick(function () { ping(true); });\n    } else {\n      debug('successfully connected');\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      self._readable.removeListener('data', onPing).on('data', onMessage);\n      self._connected = true;\n      self.emit('_ready');\n      hreq = null;\n    }\n    </handleHandshakeResponse>\n  }\n\n  function onMessage(obj) {\n    <processIncomingMessage>\n    var id = obj.id;\n    if (!self._matchesPrefix(id)) {\n      debug('discarding unscoped message %s', id);\n      return;\n    }\n    var cb = self._registry.get(id);\n    if (cb) {\n      process.nextTick(function () {\n        debug('received message %s', id);\n        cb(null, Buffer.concat(obj.payload), self._adapter);\n      });\n    }\n    </processIncomingMessage>\n  }\n\n  function onEnd() { self.destroy(true); }\n  function onFinish() { self.destroy(); }\n}\n"], ["buildSideFaces", "\nfunction buildSideFaces() {\n    var layeroffset = 0;\n    sidewalls(contour, layeroffset);\n    layeroffset += contour.length;\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n        sidewalls(ahole, layeroffset);\n        layeroffset += ahole.length;\n    }\n}\n"], ["propsMatch", "\nfunction propsMatch(test, testFields, expected, expectedFields, equals) {\n  var equality = equals || Rekord.equals;\n\n  if (isString(testFields)) {\n    return equality(test[testFields], expected[expectedFields]);\n  } else {\n    for (var i = 0; i < testFields.length; i++) {\n      var testProp = testFields[i];\n      var expectedProp = expectedFields[i];\n\n      if (!equality(test[testProp], expected[expectedProp])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"], ["hasClassInParent", "\nfunction (element, className) {\n    var elemClassName;\n    while (element) {\n        elemClassName = attr(element, 'class');\n        if (elemClassName) {\n            if (elemClassName.indexOf(className) !== -1) {\n                return true;\n            } else if (elemClassName.indexOf(PREFIX + 'container') !== -1) {\n                return false;\n            }\n        }\n        element = element.parentNode;\n    }       \n}\n"], ["getCalendarInstance", "\nfunction(name, language) {\n    name = (name || 'gregorian').toLowerCase();\n    language = language || '';\n    var cal = this._localCals[name + '-' + language];\n    if (!cal && this.calendars[name]) {\n        cal = new this.calendars[name](language);\n        this._localCals[name + '-' + language] = cal;\n    }\n    if (!cal) {\n        throw (this.local.invalidCalendar || this.regionalOptions[''].invalidCalendar)\n            .replace(/\\{0\\}/, name);\n    }\n    return cal;\n}\n"], ["clearCookie", "\nfunction (name, domain, secure, path, jar) {\n    cookie.set(name, \"\", \"-1s\", domain, secure, path, jar);\n    return name;\n}\n"], ["queryAssertion", "\nfunction(query, rootData, scopeData, scopePath) {\n    var pQuery = this.QueryParser.parseQuery(query);\n    return this.QueryRunner.assert(pQuery, rootData, scopeData, scopePath);\n}\n"], ["handleMouseEvent", "\nfunction(eventName, eventData) {\n    var lastEvent = this.lastMouseEvent;\n    lastEvent.eventName = eventName;\n    lastEvent.mouseButton = eventData.mouseButton;\n    lastEvent.target = eventData.target;\n    lastEvent.realX = eventData.realX;\n    lastEvent.realY = eventData.realY;\n    lastEvent.clientX = eventData.clientX; \n    lastEvent.clientY = eventData.clientY; \n    lastEvent.originalEvent = eventData.originalEvent;\n\n    var mouseButton = eventData.mouseButton;\n    if (eventName === \"MouseDown\") {\n        if (this._buttonDown[mouseButton] !== true) {\n            this._buttonDown[mouseButton] = true;\n            this.triggerMouseEvent(eventName, eventData);\n        }\n    } else if (eventName === \"MouseUp\") {\n        if (this._buttonDown[mouseButton] === true) {\n            this._buttonDown[mouseButton] = false;\n            this.triggerMouseEvent(eventName, eventData);\n        }\n    } else {\n        this.triggerMouseEvent(eventName, eventData);\n    }\n\n    return this;\n}\n"], ["pullSiteFiles", "\nfunction(site, uuid, env, newBackup) {\n    app.status('Pulling files.');\n\n    if (firstTime()) {\n        return pullFilesArchive(site, env, newBackup)\n        .then(function() {\n            return pullFilesRsync(uuid, env);\n        });\n    }\n    else {\n        return pullFilesRsync(uuid, env);\n    }\n}\n"], "```\n\nEach function above is annotated as a whole according to SRP, as they all serve a single high-level responsibility. However, it's crucial to note that some of them manage multiple tasks with distinct responsibilities, though the division is not clear cut enough to segment the functions further without additional context."]