[["Aggregation", "\nfunction Aggregation(oClass, name, info) {\n    info = typeof info !== 'object' ? { type: info } : info;\n\n    this.name = name;\n    this.type = info.type || 'sap.ui.core.Control';\n    this.altTypes = Array.isArray(info.altTypes) ? info.altTypes : undefined;\n    this.multiple = typeof info.multiple === 'boolean' ? info.multiple : true;\n    this.singularName = this.multiple ? info.singularName || guessSingularName(name) : undefined;\n    this.bindable = !!info.bindable;\n    this.deprecated = info.deprecated || false;\n    this.visibility = info.visibility || 'public';\n    this.selector = info.selector || null;\n    this.forwarding = info.forwarding;\n    this._doesNotRequireFactory = !!info._doesNotRequireFactory; \n    this.appData = remainder(this, info);\n    this._oParent = oClass;\n    this._sUID = 'aggregation:' + name;\n    this._iKind = this.multiple ? Kind.MULTIPLE_AGGREGATION : Kind.SINGLE_AGGREGATION;\n    this._oForwarder = this.forwarding ? new AggregationForwarder(this) : undefined;\n\n    var N = capitalize(name);\n    this._sGetter = 'get' + N;\n\n    if ( this.multiple ) {\n        var N1 = capitalize(this.singularName);\n        this._sMutator = 'add' + N1;\n        this._sInsertMutator = 'insert' + N1;\n        this._sRemoveMutator = 'remove' + N1;\n        this._sRemoveAllMutator = 'removeAll' + N;\n        this._sIndexGetter = 'indexOf' + N1;\n        this._sUpdater = 'update' + N;\n        this._sRefresher = 'refresh' + N;\n    } else {\n        this._sMutator = 'set' + N;\n        this._sInsertMutator =\n        this._sRemoveMutator =\n        this._sRemoveAllMutator =\n        this._sIndexGetter =\n        this._sUpdater =\n        this._sRefresher = undefined;\n    }\n\n    this._sDestructor = 'destroy' + N;\n\n    if ( this.bindable ) {\n        this._sBind = 'bind' + N;\n        this._sUnbind = 'unbind' + N;\n    } else {\n        this._sBind =\n        this._sUnbind = undefined;\n    }\n}\n"], ["template", "\nfunction template (file, locals) {\n    let fullpath = resolve('views', file);\n    <resolveEngine>\n    const [engine, target] = ex2engine(fullpath);\n    </resolveEngine>\n    <conditionalRendering>\n    if (engine !== 'html') {\n        return render[engine](target, Object.assign({}, locals, {\n            liveReloadHost: process.env.liveReloadHost,\n            isDevelopment: configuration.env !== 'production'\n        }));\n    } else {\n        return new Promise(function (resolve, reject) {\n            try {\n                fs.accessSync(target, fs.constants.R_OK);\n                <readFileSync>\n                resolve(fs.readFileSync(target, 'utf-8'));\n                </readFileSync>\n            } catch (err) {\n                \n                reject(err);\n            }\n        });\n    }\n    </conditionalRendering>\n}\n"], ["resetRepository", "\nfunction(cb) {\n    log.log('git reset --hard ' + repoDir);\n    git(repoDir, ['reset', '--hard'], function(err, stdout, stderr) {\n        if (err) {\n            <handleError>\n            log.warn('Unable to reset at ' + repoDir + \":\", err.msg);\n            </handleError>\n        }\n        cb(null, {reset: {stdout: stdout, stderr: stderr}});\n    });\n}\n"], ["onVolumeChange", "\nfunction onVolumeChange() {\n    const volumePercentage = media.muted ? 0 : media.volume;\n    const isMuted = !volumePercentage;\n\n    $(self.volume, { 'aria-valuenow': volumePercentage, 'aria-valuemin': 0, 'aria-valuemax': 1 });\n\n    const dirIsInline = /^(ltr|rtl)$/i.test(volumeDir);\n    const axisProp = dirIsInline ? 'width' : 'height';\n\n    self.volumeMeter.style[axisProp] = `${volumePercentage * 100}%`;\n\n    $(self.mute, { 'aria-label': isMuted ? lang.unmute || 'unmute' : lang.mute || 'mute' });\n    $(self.muteSymbol, { 'aria-hidden': isMuted });\n    $(self.unmuteSymbol, { 'aria-hidden': !isMuted });\n}\n"], ["isClassMember", "\nfunction isClassMember (options) {\n  var parent = arrayify(options.data.root).find(where({ id: this.memberof }))\n  if (parent) {\n    return parent.kind === 'class'\n  }\n}\n"], ["setValueIfNotUseViewMode", "\nfunction(address, value) {\n    var columnModel = this.columnModel.getColumnModel(address.columnName);\n\n    if (!snippet.pick(columnModel, 'editOptions', 'useViewMode')) {\n        <setValue>\n        this.setValue(address, value);\n        </setValue>\n    }\n}\n"], ["parseRes", "\nfunction parseRes (res, cb) {\n    var body = '';\n    if ('setEncoding' in res) <setDataEncoding>res.setEncoding('utf-8');</setDataEncoding>\n\n    res.on('data', function (data) {\n        body += data;\n        if (body.length > 1e10) {\n            <handleBodyOverflow>\n            res.connection.destroy();\n            res.writeHead(413, {'Content-Type': 'text/plain'});\n            res.end('req body too large');\n            </handleBodyOverflow>\n            return cb(new Error('body overflow'));\n        }\n    });\n\n    res.on('end', function () {\n        <completeResponse>\n        cb(null, body);\n        </completeResponse>\n    });\n}\n"], ["newVector", "\nfunction newVector(array, dtype) {\n  <validateDtypeInput>\n  validateDtype(dtype);\n  </validateDtypeInput>\n  <createVector>\n  var proto = PROTO_MAP[dtype];\n  var vector = Object.create(proto);\n  vector._init(array);\n  </createVector>\n  return vector;\n}\n"], ["Pot", "\nfunction Pot(filename) {\n  if (! (this instanceof Pot)) {\n    <createInstance>\n    return new Pot(filename);\n    </createInstance>\n  }\n\n  this.isOpen = false;\n  this.filename = filename;\n  this.contents = '';\n  this.initialDate = '';\n  this.fingerprint = '';\n}\n"], ["readFileAndParse", "\nfunction(file, options, callback) {\n    fs.readFile(file, options, function(err, data) {\n        if (err) {\n            <handleReadError>\n            return callback(err);\n            </handleReadError>\n        }\n        <parseData>\n        module.exports.parse(data.toString(), function(parseErr, lines) {\n            if (parseErr) {\n                return callback(parseErr);\n            }\n            callback(undefined, lines);\n        });\n        </parseData>\n    });\n}\n"], ""]