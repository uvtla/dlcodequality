[["calculateDifferences", "\nfunction(items) {\n  var hasRelativePositioning = hasNumberProperty(items, 'relativePosition');\n\n  for(var i = 0; i < items.length; i++) {\n      if(i == items.length - 1)\n          items[i].diffWithNextRelativePos = undefined;\n      else\n          items[i].diffWithNextRelativePos = items[i + 1].relativePosition - items[i].relativePosition;\n  }\n}\n"], ["performFFT2D", "\nfunction fft2DArray(data, nRows, nCols) {\n    var iRow, iCol;\n    var ftCols = (nCols / 2 + 1);\n    var ftRows = nRows * 2;\n    var tempTransform = new Array(ftRows * ftCols);\n    FFT.init(nCols);\n    \n    var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n    for (iRow = 0; iRow < nRows / 2; iRow++) {\n        <processRow>\n        // Code to process each row\n        </processRow>\n    }\n    \n    <cleanUpRowVars>\n    row1 = null;\n    row2 = null;\n    </cleanUpRowVars>\n    \n    var finalTransform = new Array(ftRows * ftCols);\n\n    FFT.init(nRows);\n    for (iCol = ftCols - 1; iCol >= 0; iCol--) {\n        <processColumn>\n        // Code to process each column\n        </processColumn>\n    }\n    return finalTransform;\n}\n"], ["extractCertificate", "\nfunction (host, port, cb) {\n    var err,\n        data = {};\n\n    var openssl = spawn('openssl', ['s_client', '-connect', host + ':' + port, '-servername', host]);\n\n    <setupExitHandler>\n    openssl.on('exit', function() {\n        clearTimeout(timeoutTimer);\n    });\n    </setupExitHandler>\n\n    <handleStderrData>\n    openssl.stderr.on('data', function (out) {\n        // Code to handle stderr data\n    });\n    </handleStderrData>\n\n    <handleStdoutData>\n    openssl.stdout.on('data', function (out) {\n        // Code to handle stdout data\n    });\n    </handleStdoutData>\n\n    <endInput>\n    openssl.stdin.end();\n    </endInput>\n\n    <setupTimeoutTimer>\n    var timeoutTimer = setTimeout(function() {\n        openssl.kill();\n        // Code to handle timeout\n    }, 5000);\n    </setupTimeoutTimer>\n}\n"], ["compileSingleAsset", "\nfunction (assetFilePath, cb) {\n    if (this.verbose) {\n        console.log('compileSingleAsset: compiling ' + assetFilePath);\n    }\n    var self = this;\n  \n    assetFilePath = path.resolve(assetFilePath);\n\n    <determineBaseDirectory>\n    // Code to determine the base directory\n    </determineBaseDirectory>\n\n    <processAsset>\n    if (!baseDir) {\n        cb(new Error('Asset must be in one of the asset paths'));\n    } else {\n        // ...\n        async.waterfall([\n            //...\n        ], cb);\n    }\n    </processAsset>\n}\n"], ["createDelimiterRegex", "\nfunction createDelimiterRegex(options) {\n    // Code to create delimiter regex\n}\n"], ["initializeEventStore", "\nfunction (eventStore) {\n    if (!eventStore || !_.isObject(eventStore)) {\n        var err = new Error('Please pass a valid eventStore!');\n        debug(err);\n        throw err;\n    }\n    this.eventStore = eventStore;\n}\n"], ["configureBatchProcessing", "\nfunction(batchSizeOrIteratee, iteratee) {\n    // Code to configure batch processing\n}\n"], ["initializeChart", "\nfunction($super, container) {\n    $super(container);\n\n    <setupChartProperties>\n    // Code to setup chart properties\n    </setupChartProperties>\n}\n"], ["validateNode", "\nfunction validate(options, context, reportContext, node) {\n    <performValidations>\n    // Code to perform validations on node\n    </performValidations>\n    \n    <validateChildrenNodes>\n    if (node.children) {\n        node.children.forEach(validate.bind(this, options, context, reportContext))\n    }\n    </validateChildrenNodes>\n}\n"], ["initializeAudio", "\nfunction(_key){\n  var _cch = _pcache[_key];\n  if (!_cch) return;\n  _cch.audio = _h.__getAudioInst({\n      url:_cch.url,\n      onerror:_doErrorAction._$bind(null,_key),\n      ontimeupdate:_doTimeUpdateCallback._$bind(null,_key),\n      onstatechange:_doStateChangeAction._$bind(null,_key)\n  });\n  _cch.audio._$play();\n}\n"], ""]