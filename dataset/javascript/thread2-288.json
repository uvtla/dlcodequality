[["serializeHash", "\nfunction serializeHash() {\n  var hash = {}\n  eachFormElement.apply(function (name, value) {\n    if (name in hash) {\n      hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])\n      hash[name].push(value)\n    } else hash[name] = value\n  }, arguments)\n  return hash\n}\n"], ["unnamed", "\nfunction(file, regFilter, cb) {\n  <errorHandling>\n  cb = arguments[arguments.length-1];\n  if(!file || !fs.existsSync(file)) {\n    cb(true);\n    return ;\n  }\n  </errorHandling>\n\n  <filteringHandling>\n  var fileName = path.basename(file);\n  if(regFilter && regFilter.test && regFilter.test(fileName)) {\n    return ;\n  }\n  </filteringHandling>\n\n  <traversingHandling>\n  if(fs.lstatSync(file).isFile()) {\n    cb(false, file);\n    return ;\n  } else if(fs.lstatSync(file).isDirectory()) {\n    (fs.readdirSync(file)).forEach(function(item) {\n      utils.traverseFolderSync(path.join(file, item), regFilter, cb);\n    });\n  }\n  </traversingHandling>\n}\n"], ["one", "\nfunction one(node) {\n  <collectWordNodes>\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var values = []\n  var words = []\n  var child\n  while (++index < length) {\n    child = children[index]\n    if (child.type === 'WordNode') {\n      values.push(toString(child))\n      words.push(child)\n    }\n  }\n  </collectWordNodes>\n  <tagWords>\n  var tags = tagger.tag(values)\n  index = -1\n  length = tags.length\n  while (++index < length) {\n    patch(words[index], tags[index][1])\n  }\n  </tagWords>\n}\n"], ["addDecorative", "\nfunction addDecorative(c) {\n  <decorateComponent>\n  if (c.$isDecorative !== true) {\n      c.$$isDecorative = true;\n  }\n  </decorateComponent>\n  <callSuperInsertMethod>\n  this.$getSuper(\"insert\").call(this, this.kids.length, null, c);\n  </callSuperInsertMethod>\n}\n"], ["unnamed", "\nfunction (keyOrList, func) {\n  <addListener>\n  listeners.unshift({ keys: toArray(keyOrList), cb: func,\n    calls: Infinity });\n  return me;\n  </addListener>\n}\n"], ["Manager", "\nfunction Manager(store, channel) {\n  <initializeManager>\n  this.store = store;\n  this.store.on('message', this.handleStoreMessage.bind(this));\n  this.channel = channel;\n  </initializeManager>\n\n  <initializeDataStores>\n  this.flags = {};\n  this.servers = {};\n  this.connections = {};\n  this.connectionCount = 0;\n  </initializeDataStores>\n\n  <registerEventHandlers>\n  channel.on('connection:message', this.handleConnectionMessage.bind(this));\n  channel.on('server:message', this.handleServerMessage.bind(this));\n  </registerEventHandlers>\n}\n"], ["unnamed", "\nfunction (oDraggedControl, iKeyCode) {\n  <initialize>\n  var $DraggedControl = oDraggedControl.$(),\n    aItems = this.getItems(),\n    iBeginDragIndex = this.indexOfItem(oDraggedControl),\n    bRtl = sap.ui.getCore().getConfiguration().getRTL(),\n    iNewDropIndex,\n    $DroppedControl,\n    oKeyCodes = KeyCodes;\n  </initialize>\n\n  <handleKeyOperation>\n  switch (iKeyCode) {\n    // Key handling code omitted for brevity...\n  }\n  </handleKeyOperation>\n\n  <executeDragAndDrop>\n  $DroppedControl = aItems[iNewDropIndex].$();\n  IconTabBarDragAndDropUtil._insertControl(sInsertAfterBeforePosition, $DraggedControl, $DroppedControl);\n  IconTabBarDragAndDropUtil._handleConfigurationAfterDragAndDrop.call(this, oDraggedControl, iNewDropIndex);\n  </executeDragAndDrop>\n\n  <returnResult>\n  return true;\n  </returnResult>\n}\n"], ["unnamed", "\nfunction(mac) {\n  <lookupOrCreateApplianceInstance>\n  if (listOfAppliances[mac]) {\n      return listOfAppliances[mac];\n  }\n  </lookupOrCreateApplianceInstance>\n  \n  <createApplianceInstance>\n  var internal = new (function(mac){ \n    // Internal appliance instance code omitted for brevity...\n  })(mac);\n  </createApplianceInstance>\n\n  <assignApplianceInstance>\n  listOfAppliances[mac] = internal;\n  </assignApplianceInstance>\n\n  <returnApplianceInstance>\n  return internal;\n  </returnApplianceInstance>\n}\n"], ["unwatchFile", "\nfunction unwatchFile(watcher, filename) {\n  <executeUnwatch>\n  if (watcher) {\n      watcher.close && watcher.close();\n  } else {\n      fs.unwatchFile(filename);\n  }\n  </executeUnwatch>\n}\n"], ["maybe_", "\nfunction maybe_(thunk) {\n  <handlingMaybe>\n  return function(f) {\n    return function(maybe) {\n      return maybe.isJust ? f (maybe.value) : thunk ();\n    };\n  };\n  </handlingMaybe>\n}\n"], ""]