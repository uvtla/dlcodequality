[["getter", "\nfunction getter(value, properties) {\n  if (properties.get) {\n    value = properties.get.call(this, value)\n  }\n  return value\n}\n"], ["functionRoute", "\nfunction(uri) {\n  var route = this.defined(uri);\n  if (route !== false) {\n    if (this._routes[route].method === null) {\n      var f = this._routes[route].handler.bind(this._routes[route].handler);\n      f(this.params(route));\n    } else {\n      <navigateRoute>\n      var Obj = this._routes[route].handler;\n      var method = this._routes[route].method;\n      Obj[method](this.params(route));\n      </navigateRoute>\n    }\n  } else {\n    <handleUndefinedRoute>\n    console.error('Route \"' + uri + '\" is not defined.');\n    return false;\n    </handleUndefinedRoute>\n  }\n}\n"], ["updateModel", "\nfunction (prop, val) {\n  can.Observe.prototype.___set.call(this, prop, val)\n  if (prop === this.constructor.id && this._bindings) {\n    <updateStore>\n    this.constructor.store[getId(this)] = this;\n    </updateStore>\n  }\n}\n"], ["getPlural", "\nfunction() {\n  var bundle = this.match(/(\\w+)\\sof\\s\\w+/);\n  if (bundle) return this.replace(bundle[1], bundle[1].getPlural());\n  str = this.replace(/([^aeiou])y$/, '$1ies');\n  if (str == this) str = str.replace(/([ch|sh|x|s|o])$/, '$1es');\n  if (str == this) str += 's';\n  return str;\n}\n"], ["generateNSISScript", "\nfunction generateNSIScript(files, callback) {\n  sys.puts('Generating NSIS script');\n  var installFileList = '  SetOverwrite try\\n',\n      removeFileList  = '',\n      removeDirList   = '';\n\n<filterFiles>\n  files = files.filter(function(file) {\n    if (~file.indexOf('node-builds') && !~file.indexOf('cyg') && !~file.indexOf('tmp') && !~file.indexOf('etc')) {\n      return;\n    }\n    return file;\n  });\n</filterFiles>\n\n<prepareInstallationScripts>\n  var prevDirname, i, len;\n  for (i = 0, len = files.length; i < len; i++) {\n    var file = files[i];\n    var dirname = path.dirname(file);\n    if (dirname != prevDirname) {\n      prevDirname = dirname;\n      installFileList += '  SetOutPath \"$INSTDIR\\\\' + dirname.replace(/\\//g, '\\\\') + '\"\\n';\n      removeDirList  += '  RMDir \"$INSTDIR\\\\' + dirname.replace(/\\//g, '\\\\') + '\"\\n';\n    }\n\n    var m;\n    if ((m = file.match(/\\/?(README|LICENSE)(.md)?$/))) {\n      installFileList += '  File /oname=' + m[1] + '.txt \"${ROOT_PATH}\\\\' + file.replace(/\\//g, '\\\\') + '\"\\n';\n    } else {\n      installFileList += '  File \"${ROOT_PATH}\\\\' + file.replace(/\\//g, '\\\\') + '\"\\n';\n    }\n    removeFileList  += '  Delete \"$INSTDIR\\\\' + file.replace(/\\//g, '\\\\') + '\"\\n';\n  }\n</prepareInstallationScripts>\n\n<compileNSISScript>\n  var tmp = new Template(fs.readFileSync(path.join(__dirname, 'installer_nsi.template'), 'utf8'));\n  var data = tmp.substitute({\n    root_path: path.join(__dirname, '../..'),\n    output_path: OUTPUT_PATH,\n    version: 'v' + VERSION,\n    install_file_list: installFileList,\n    remove_file_list: removeFileList,\n    remove_dir_list: removeDirList\n  });\n</compileNSISScript>\n  callback(data);\n}\n"], ["setWait", "\nfunction setWait(attributes, interval, timeLimit, callback) {\n  if (typeof timeLimit === 'function') {\n    callback  = timeLimit;\n    timeLimit = null;\n  }\n\n  var self  = this,\n      start = Date.now(),\n      fired = false,\n      equalCheckId,\n      current;\n\n<waitLoop>\n  equalCheckId = setInterval(function () {\n    self.refresh(function (err, resource) {\n      if (timeLimit) {\n        current = Date.now();\n        if (current - start > timeLimit) {\n          clearInterval(equalCheckId);\n          if (!fired) {\n            fired = true;\n            callback(err, resource);\n            return;\n          }\n        }\n      }\n\n      if (err) {\n        return;\n      } \n\n      var equal = true,\n          keys  = Object.keys(attributes);\n\n      if (typeof attributes === 'function') {\n        equal = attributes(resource);\n      }\n      else {\n        for (var i = 0; i < keys.length; i++) {\n          if (attributes[keys[i]] !== resource[keys[i]]) {\n            equal = false;\n            break;\n          }\n        }\n      }\n\n      if (equal) {\n        clearInterval(equalCheckId);\n        callback(null, resource);\n      }\n    });\n  }, interval);\n</waitLoop>\n\n  return equalCheckId;\n}\n"], ["httpResponse", "\nfunction httpResponse(response) {\n  if (!response) {\n    throw new Error('Unable to parse response.')\n  }\n  const errorAttrs = response.Chyba && response.Chyba.attributes\n  if (errorAttrs) {\n    throw new Error(`${response.Chyba.$value} (${errorAttrs.kod})`)\n  }\n  const body = response.Potvrzeni && response.Potvrzeni.attributes\n  const header = response.Hlavicka && response.Hlavicka.attributes\n  if (!body || !header) {\n    throw new Error('Unable to read response.')\n  }\n}\n"], ["requireModule", "\nfunction(x, reload){\n  var id = modules[name][1][x];\n  if (_testability_cache_[x]) return _testability_cache_[x];\n  return newRequire(id ? id : x, undefined, reload);\n}\n"], ["filterViews", "\nfunction(p) {\n  p = new g.Point(p);\n  var views = this.model.getElements().map(this.findViewByModel, this);\n  return views.filter(function(view) {\n    return view && view.vel.getBBox({ target: this.viewport }).containsPoint(p);\n  }, this);\n}\n"], ["gulpJsdocJson", "\nfunction(infos, name) {\n  name = name || 'jsdoc.json';\n\n  var firstFile = null;\n  var readme = null;\n\n  var wp = new Parser(infos);\n\n<streamProcessing>\n  var bufferFiles = function(file, enc, next){\n    if (file.isNull()) return; \n    if (file.isStream()) return this.emit('error', new PluginError('gulp-jsdoc', 'Streaming not supported'));\n    \n    if (!firstFile)\n      firstFile = file;\n    \n    if (/[.]js$/i.test(file.path))\n      wp.parse(file);\n    else if(/readme(?:[.]md)?$/i.test(file.path))\n      readme = marked(file.contents.toString('utf8'));\n\n    next();\n  };\n</streamProcessing>\n\n<concludeGulpJsdoc>\n  var endStream = function(conclude){\n    if (!firstFile){\n      conclude();\n      return;\n    }\n\n    var data;\n    try {\n      data = JSON.stringify(wp.complete(), null, 2);\n    } catch(e) {\n      return this.emit('error', new PluginError('gulp-jsdoc',\n        'Oooooh! Failed parsing with jsdoc. What did you do?! ' + e));\n    }\n\n    var vinyl = new File({\n      cwd: firstFile.cwd,\n      base: firstFile.base,\n      path: path.join(firstFile.base, name),\n      contents: new Buffer(data)\n    });\n\n    vinyl.readme = readme;\n\n    this.push(vinyl);\n\n    conclude();\n  };\n</concludeGulpJsdoc>\n\n  return through2.obj(bufferFiles, endStream);\n}\n"], "```"]