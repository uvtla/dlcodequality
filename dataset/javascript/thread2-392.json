[["isProbExpr", "\nfunction isProbExpr (node) {\n  return typeof(node) === 'object' && node.type === 'cond'\n    && node.test.length === 1 && typeof(node.test[0]) === 'object' && node.test[0].type === 'function' && node.test[0].funcname === 'lt' && node.test[0].args.length === 2\n    && typeof(node.test[0].args[0]) === 'object' && node.test[0].args[0].type === 'function' && node.test[0].args[0].funcname === 'random' && node.test[0].args[0].args.length === 1\n    && typeof(node.test[0].args[0].args[0]) === 'string' && node.test[0].args[0].args[0] === '1'\n}\n"], ["putSeeds", "\nfunction putSeeds(arrayPaths){\n  <appendTagyData>\n  arrayPaths.forEach(function(element){\n    var tagy={code:\"\", path:\"\"};\n    tagy.code= element.substr(element.length-2, element.length-1);\n    tagy.path= element.substr(0, element.length-3);\n    taggies.push(tagy);\n  });\n  </appendTagyData>\n}\n"], ["setTag", "\nfunction setTag(key, value, obj) {\n  <validationAndAssignment>\n  if (!obj || !key) return\n  var skey = removeInvalidChars(key)\n  if (value) {\n    value = String(value)\n  }\n  obj[skey] = value\n  </validationAndAssignment>\n  return obj\n}\n"], ["messageSending", "\nfunction(message) {\n\n        <ensureWorkerExists>\n        if (! worker) throw new Error(\"Worker \" + workerId + \" unavailable\");\n        </ensureWorkerExists>\n        \n        var deferred = new Deferred();\n\n        <encodeMessage>\n        var omsg = message;\n        var xid = message.id = lastMessageId ++;\n        message = messages.encode(message);\n        </encodeMessage>\n\n        <validationAfterEncoding>\n        if (message.id == null) {\n          console.warn(\"PROXIES\", messages.reverseProxies);\n          throw new Error(\"GONZO: \" + xid + \" ->\\n\" + JSON.stringify(omsg, null, 2) + \"\\n ->\\n\" + JSON.stringify(message, null , 2));\n        }\n        </validationAfterEncoding>\n\n        <storePendingMessage>\n        pendingMessages[message.id] = deferred;\n        </storePendingMessage>\n\n        <debugLog>\n        if (debug) {\n          console.log(\"Sending to Worker[\" + workerId + \"]\\n\" + JSON.stringify(message, null, 2));\n        }\n        </debugLog>\n\n        <postMessage>\n        worker.postMessage(message);\n        </postMessage>\n\n        <returnPromise>\n        return deferred.promise;\n        </returnPromise>\n      }\n"], ["resolveTemplate", "\nfunction resolveTemplate(file, pathes) {\n    <readAndConcatenateFiles>\n    var filePath = file.path,\n        templateContent = '';\n\n    for(var i = 0, len = pathes.length; i < len; i ++) {\n        templateContent += fs.readFileSync(pathes[i], {encoding: 'utf-8'}) + \"\\r\\n\";\n    }\n    </readAndConcatenateFiles>\n\n    return templateContent;\n}\n"], ["createMarkers", "\nfunction createMarkers() {\n  <generateMarkers>\n\tvar lat, lon;\n\tvar count = 50 + Math.round(Math.random() * 5);\n\tvar jitter = 0.03;\n\tvar markers = [];\n\tfor (var i = 0; i < count; i++) {\n\t\tlat = origin_lat + (Math.random() * jitter - (jitter / 2));\n\t\tlon = origin_lon + (Math.random() * jitter - (jitter / 2));\n\t\tmarkers.push(L.marker([lat, lon], {icon: new MyIcon()}).addTo(map));\n\t}\n  </generateMarkers>\n\n  <removeMarkersAfterLifetime>\n\tvar lifetime = 1000 + Math.round(Math.random() * 2000);\n\tsetTimeout(function() {\n\t\tfor (var i = 0; i < count; i++) {\n\t\t\tmap.removeLayer(markers[i]);\n\t\t}\n\t\tsetTimeout(createMarkers, 10);\n\t}, lifetime);\n  </removeMarkersAfterLifetime>\n}\n"], ["insert", "\nfunction insert(argh, key, value, option) {\n  <parseValue>\n  if ('string' === typeof value && !isNaN(+value)) value = +value;\n  if (value === 'true' || value === 'false') value = value === 'true';\n  </parseValue>\n\n  <handleOptions>\n  var single = option.charAt(1) !== '-'\n    , properties = key.split('.')\n    , position = argh;\n\n  if (single && key.length > 1) return key.split('').forEach(function short(char) {\n    insert(argh, char, value, option);\n  });\n  </handleOptions>\n\n  <buildNestedProperties>\n  if (!properties.length) return argh[key] = value;\n\n  while (properties.length) {\n    var property = properties.shift();\n\n    if (properties.length) {\n      if ('object' !== typeof position[property] && !Array.isArray(position[property])) {\n        position[property] = Object.create(null);\n      }\n    } else {\n      position[property] = value;\n    }\n\n    position = position[property];\n  }\n  </buildNestedProperties>\n}\n"], ["levelConversion", "\nfunction(sArg, defaultLevel) {                  \n\t<handleNullArg>\n\tif(sArg === null) {\n\t\treturn defaultLevel;\n\t}\n\t</handleNullArg>\n\t\n\t<handleStringArg>\n\tif(typeof sArg == \"string\") { \n\t\tvar s = sArg.toUpperCase();\n\t\tif(s == \"ALL\") {return Log4js.Level.ALL;}\n\t\tif(s == \"DEBUG\") {return Log4js.Level.DEBUG;}\n\t\tif(s == \"INFO\") {return Log4js.Level.INFO;}\n\t\tif(s == \"WARN\") {return Log4js.Level.WARN;}\n\t\tif(s == \"ERROR\") {return Log4js.Level.ERROR;}\n\t\tif(s == \"FATAL\") {return Log4js.Level.FATAL;}\n\t\tif(s == \"OFF\") {return Log4js.Level.OFF;}\n\t\tif(s == \"TRACE\") {return Log4js.Level.TRACE;}\n\t\treturn defaultLevel;\n\t}\n\t</handleStringArg>\n\t\n\t<handleNumberArg>\n\telse if(typeof sArg == \"number\") {\n\t\tswitch(sArg) {\n\t\t\tcase ALL_INT: return Log4js.Level.ALL;\n\t\t\tcase DEBUG_INT: return Log4js.Level.DEBUG;\n\t\t\tcase INFO_INT: return Log4js.Level.INFO;\n\t\t\tcase WARN_INT: return Log4js.Level.WARN;\n\t\t\tcase ERROR_INT: return Log4js.Level.ERROR;\n\t\t\tcase FATAL_INT: return Log4js.Level.FATAL;\n\t\t\tcase OFF_INT: return Log4js.Level.OFF;\n\t\t\tcase TRACE_INT: return Log4js.Level.TRACE;\n\t\t\tdefault: return defaultLevel;\n\t\t}\n\t}\n\t</handleNumberArg>\n\telse {\n\t\treturn defaultLevel;\t\n\t}\n}\n"], ["manageInfrastructure", "\nfunction (options, cb) {\n\t<initializeVariables>\n\tlet cluster = options.infra.stack;\n\tlet request = getConnector(options.infra.api);\n\tlet project = request.project;\n\tdelete request.project;\n\trequest.zone = [];\n\t</initializeVariables>\n\t\n\t<anyExtraFunctions>\n\t// Functions like checkIfClusterisReady are omitted for brevity\n\t</anyExtraFunctions>\n\t\n\t<updateEnvironmentRecord>\n\toptions.soajs.log.debug(\"Getting Environment Record:\", options.soajs.registry.code.toUpperCase());\n\t\n\tif (options.soajs.registry.deployer.container.kubernetes.remote.nodes && options.soajs.registry.deployer.container.kubernetes.remote.nodes !== '') {\n\t\tlet machineIp = options.soajs.registry.deployer.container.kubernetes.remote.nodes;\n\t\treturn cb(null, machineIp);\n\t}\n\t// More code with conditional logic to check and update the cluster state, omitted for brevity\n\t</updateEnvironmentRecord>\n}\n"], ["updateDialogsList", "\nfunction updateDialogsList(dialogId, text) {\n\t<updateUnreadCount>\n    var badgeCount = $('#' + dialogId + ' .badge').html();\n    $('#' + dialogId + '.list-group-item.inactive .badge').text(parseInt(badgeCount) + 1).fadeIn(500);\n    </updateUnreadCount>\n    \n    <updateDialogText>\n    $('#' + dialogId + ' .list-group-item-text').text(text);\n    </updateDialogText>\n}\n"], "```"]