[["getLineInfo", "\nfunction getLineInfo(input, offset) {\n  for (var line = 0, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n"], ["CFClientException", "\nfunction CFClientException(err, cause) {\n    var rtn = {\n        name: 'CFClientException',\n        type: 'CFClientException',\n        message: '',\n        cause: cause,\n        fileName: 'cfclient.js',\n        lineNumber: '',\n        stack: '',\n        toString: function () {\n            return this.message + ' ::: ' + this.cause;\n        }\n    };\n    \n    <errorObjectHandling>\n    if (typeof err === 'object' && err.name === 'Error') {\n        rtn.name = err.name;\n        rtn.message = err.message;\n        rtn.fileName = err.fileName || 'cfclient.js';\n        rtn.lineNumber = err.lineNumber;\n        rtn.stack = err.stack;\n    }\n    </errorObjectHandling>\n    return rtn;\n}\n"], ["anonymousFunctionWithCredentials", "\nfunction (credentials) {\n    return function () {\n        <thenOpenAuthentication>\n        return this.thenOpen(globals.adminUrl).then(function () {\n            this.fill('#login-form', credentials || globals.credentials, true);\n        }).waitForResource(/login/).\n        </thenOpenAuthentication>\n        <clearLocalStorage>\n        thenEvaluate(function () {\n            localStorage.clear();\n        });\n        </clearLocalStorage>\n    };\n}\n"], ["DELETE_PROP_SUBPROP", "\nfunction DELETE_PROP_SUBPROP(state) {\n      <splitPropSubprop>\n      var propsArray = PROP_SUBPROP.includes('.') ? PROP_SUBPROP.split('.') : [PROP_SUBPROP];\n      var lastProp = propsArray.pop();\n      var propsWithoutLast = propsArray.join('.');\n      </splitPropSubprop>\n      <getDeepReference>\n      var ref = getDeepRef(state, propsWithoutLast);\n      </getDeepReference>\n      return Vue.delete(ref, lastProp);\n}\n"], ["massageSelector", "\nfunction massageSelector(input) {\n  var result = utils.clone(input);\n  var wasAnded = false;\n  if ('$and' in result) {\n    <mergeAndedSelectors>\n    result = mergeAndedSelectors(result['$and']);\n    wasAnded = true;\n    </mergeAndedSelectors>\n  }\n\n  if ('$not' in result) {\n    <mergeAndedSelectorsForNot>\n    result['$not'] = mergeAndedSelectors([result['$not']]);\n    </mergeAndedSelectorsForNot>\n  }\n\n  <normalizeMatchers>\n  var fields = Object.keys(result);\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    var matcher = result[field];\n\n    if (typeof matcher !== 'object' || matcher === null) {\n      matcher = {$eq: matcher};\n    } else if ('$ne' in matcher && !wasAnded) {\n      matcher.$ne = [matcher.$ne];\n    }\n    result[field] = matcher;\n  }\n  </normalizeMatchers>\n\n  return result;\n}\n"], ["f_kullanici_tahta_idleri", "\nfunction f_kullanici_tahta_idleri(kul_id) {\n    <getUserBoardsQuery>\n    return [\n        result.dbQ.sunion(\n            result.kp.kullanici.ssetSahipOlduguTahtalari(kul_id, true),\n            result.kp.kullanici.ssetUyeOlduguTahtalari(kul_id, true)\n        ),\n        result.dbQ.smembers(result.kp.tahta.ssetSilinen) \n    ].allX().then(function (_arrReplies) {\n        <processBoardQueryResults>\n        var arrAktifTahtalar = _arrReplies[0],\n            arrPasifTahtalar = _arrReplies[1],\n            kullaniciTahtalari = arrAktifTahtalar.differenceXU(arrPasifTahtalar);\n        return kullaniciTahtalari.mapX(null, parseInt);\n        </processBoardQueryResults>\n    }).fail(function (_err) {\n        <handleQueryFailure>\n        extension.ssr = [{\"_err\": _err}];\n        throw _err;\n        </handleQueryFailure>\n    });\n}\n"], ["initWidgetWithBindings", "\nfunction () {\n    this.$InputElement.initWidget.call(this);\n    <handleValueBindings>\n    var bindings = this._cfg.bind;\n    if (bindings.value) {\n        var newValue = this._transform(bindings.value.transform, bindings.value.inside[bindings.value.to], \"toWidget\");\n        if (newValue != null) {\n            this._domElt.value = newValue;\n        }\n    } else {\n        this.$logWarn(this.BINDING_NEEDED, [this.$class, \"value\"]);\n    }\n    </handleValueBindings>\n    <setPlaceholder>\n    this._setPlaceholder();\n    </setPlaceholder>\n}\n"], ["getBaesVsersion", "\nfunction getBaesVsersion(dir, callBack) {\n    <readDirectory>\n    fs.readdir(`${dir}/`, (err, files) => {\n        let dirList = [],\n            baseVersion;\n        <directoryErrorHandling>\n        if (err) {\n            console.log('\u7b2c\u4e00\u6b21\u90e8\u7f72\u4e2d...');\n            fs.mkdir(dir, () => {\n                callBack([1, 1, 1]);\n            });\n        } else {\n        </directoryErrorHandling>\n            <handleExistingDeployment>\n            if (files.length == 0) {\n                files = ['1.1.1'];\n            }\n            console.log('\u90e8\u7f72\u76ee\u6807\u5df2\u5b58\u5728\uff0c\u6b63\u5728\u66f4\u65b0\u4e2d...');\n            files.forEach((v)=> {\n                let intV = v.replace(/\\./g, '');\n                if (!!parseInt(intV)) {\n                    dirList.push(intV);\n                }\n            });\n            baseVersion = Math.max.apply(null, dirList).toString().split('');\n            callBack(baseVersion);\n            </handleExistingDeployment>\n        }\n    });\n    </readDirectory>\n}\n"], ["getExistsSync", "\nfunction getExistsSync(path, exts) {\n    for (var i=0,len=exts.length; i<len; i++) {\n        <checkForFileExistence>\n        if (fs.existsSync(path + exts[i])) {\n            return path + exts[i];\n        }\n        </checkForFileExistence>\n    }\n    return false;\n}\n"], ["timeToTimecode", "\nfunction timeToTimecode(time) {\n\treturn `${`0${Math.floor(time / 60)}`.slice(-2)}:${`0${Math.floor(time % 60)}`.slice(-2)}`;\n}\n"], ""]