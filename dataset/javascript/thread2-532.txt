```javascript
<heamlFunction>
async function heml(contents, options = {}) {
  <parseOptions>
  const results = {}
  const {
    beautify: beautifyOptions = {},
    validate: validateOption = 'soft'
  } = options
  options.elements = flattenDeep(toArray(coreElements).concat(options.elements || []))
  </parseOptions>

  <parseContent>
  const $heml = parse(contents, options)
  </parseContent>

  <validateContent>
  const errors = validate($heml, options)
  if (validateOption.toLowerCase() === 'strict' && errors.length > 0) { throw errors[0] }
  if (validateOption.toLowerCase() === 'soft') { results.errors = errors }
  </validateContent>

  <renderContent>
  const {
    $: $html,
    metadata
  } = await render($heml, options)
  </renderContent>

  <inlineStyles>
  inline($html, options)
  </inlineStyles>

  <beautifyHTML>
  results.html = condition.replace(beautify($html.html(), {
    indent_size: 2,
    indent_inner_html: true,
    preserve_newlines: false,
    extra_liners: [],
    ...beautifyOptions }))
  </beautifyHTML>

  <calculateMetadata>
  metadata.size = `${(byteLength(results.html) / 1024).toFixed(2)}kb`
  results.metadata = metadata
  </calculateMetadata>

  <returnResults>
  return results
  </returnResults>
}
</heamlFunction>


<replaceValuesWithVariableNamesFunction>
function replaceValuesWithVariableNames(variables, prefix) {
  <createMap>
  const map = {}
  Object.keys(variables || {}).forEach((variableName) => {
    <assignVariable>
    map[variableName] = `var(${formatVariableName(variableName, prefix)})`
    </assignVariable>
  })
  </createMap>

  <returnMap>
  return map
  </returnMap>
}
</replaceValuesWithVariableNamesFunction>


<loadListFunction>
function loadList(brain) {
  <retrieveTabooList>
  const taboolist = brain.get("taboo");
  </retrieveTabooList>
  
  <processTabooList>
  if (taboolist != null) {
    for (let topic of taboolist) {
      <createRegExp>
      taboo.set(topic, new RegExp(`\\b${topic}\\b`, "i"));
      </createRegExp>
    }
  }
  </processTabooList>
}
</loadListFunction>


<geometryFunction>
function(points, panLines, smoothFactor) {
  <initializeResult>
  var result = {};
  </initializeResult>

  <processPoints>
  Utils.each(points, function(point, index) {
    <calculateDistance>
    var currentPanLine = panLines[index],
        center = currentPanLine.center,
        distance = {
            x: center.x - point.x,
            y: center.y - point.y
        };
    </calculateDistance>

    <createCurrentResult>
    var currentResult = result[index] = {
        points: [],
        center: {
            x: point.x,
            y: point.y
        }
    };
    </createCurrentResult>

    <applySmoothingFactor>
    Utils.each(currentPanLine.points, function(controlPoint, index) {
        var moved = {
            x: controlPoint.x - distance.x,
            y: controlPoint.y - distance.y
        };
        var vertex = currentResult.center;
        var dx = moved.x - vertex.x;
        var dy = moved.y - vertex.y;
        moved.x = vertex.x + smoothFactor * dx;
        moved.y = vertex.y + smoothFactor * dy;
        currentResult.points.push(moved);
    });
    </applySmoothingFactor>

  });
  </processPoints>

  <returnResult>
  return result;
  </returnResult>
}
</geometryFunction>


<ShadowMaterialFunction>
function ShadowMaterial(parameters) {
  <callBaseConstructor>
  Material.call(this);
  </callBaseConstructor>

  <setDefaultProperties>
  this.type = 'ShadowMaterial';
  this.color = new Color(0x000000);
  this.transparent = true;
  </setDefaultProperties>

  <applyParameters>
  this.setValues(parameters);
  </applyParameters>
}
</ShadowMaterialFunction>


<AssetManifestGeneratorFunction>
function AssetManifestGenerator(inputTrees, options) {
  <setDefaultOptions>
  options = options || {};
  this.prepend = options.prepend || '';
  this.filesToIgnore = options.filesToIgnore || [];
  this.supportedTypes = options.supportedTypes || DEFAULT_SUPPORTED_TYPES;
  this.generateURI = options.generateURI || function generateURI(filePath) {
    return filePath;
  };
  </setDefaultOptions>

  <callBaseConstructor>
  Plugin.call(this, inputTrees, {
    annotation: options.annotation
  });
  </callBaseConstructor>
}
</AssetManifestGeneratorFunction>


<useGatewayAuthenticationFunction>
function useGatewayAuthentication(req) {
  <fastPathCheck>
  if (req.useGateway == true) { return true; }
  </fastPathCheck>

  <determineGatewayUsage>
  var origUrl = req.originalUrl;
  var useGateway = false;
  var idx = origUrl.indexOf(gatewayParameter);
  if (idx >= 0) {
    useGateway = true;
  }
  </determineGatewayUsage>

  <returnDecision>
  return useGateway;
  </returnDecision>
}
</useGatewayAuthenticationFunction>


<getQueryFunction>
function(cb) {
  <executeQuery>
  req.linz.model.getQuery(req, filters, function(err, result) {
    if (err) {
      return cb(err);
    }
    query = result;
    return cb(null);
  });
  </executeQuery>
}
</getQueryFunction>


<normalizeTweenValuesFunction>
function normalizeTweenValues(tween, animatable) {
  <processTweenProperties>
  const t = {};
  for (let p in tween) {
    let value = getFunctionValue(tween[p], animatable);
    if (is.arr(value)) {
      <processArrayValues>
      value = value.map(v => getFunctionValue(v, animatable));
      </processArrayValues>
      if (value.length === 1) value = value[0];
    }
    t[p] = value;
  }
  t.duration = parseFloat(t.duration);
  t.delay = parseFloat(t.delay);
  </processTweenProperties>

  <returnNormalizedValues>
  return t;
  </returnNormalizedValues>
}
</normalizeTweenValuesFunction>


<getStationaryLocationFunction>
function(successFn, errorFn) {
  <setDefaultFunctions>
  successFn = successFn || emptyFn;
  errorFn = errorFn || emptyFn;
  </setDefaultFunctions>

  <invokeNativeModule>
  RNBackgroundGeolocation.getStationaryLocation(successFn, errorFn);
  </invokeNativeModule>
}
</getStationaryLocationFunction>
```

In the annotation process, I've enclosed each function within a set of tags describing the primary responsibility of that function. Within each larger block, responsibilities were identified and annotated when distinct parts of the function represented clear, separate tasks. Functions like `replaceValuesWithVariableNames` and `ShadowMaterial` were straightforward and only required outer tags, as their inner operations were not distinct enough to warrant separate annotations. Other functions, like `heml`, had more complex internal operations, and each significant block was annotated to reflect different responsibilities within the single cohesive function.