[["reinsertPartitionNodes", "\n    var nodes = partition.nodes;\n    if (nodes)\n        for (var i = nodes.length - 1, child; child = nodes[i]; i--)\n            child.parentNode.insertBefore(child, child.nextSibling);\n    "], ["resetUriRouteHandlers", "\n    uriRoutes = [\n        \n        {\n            when: /\\/_pages/,\n            default: assumePublishedUnlessEditing(renderPage),\n            json: assumePublishedUnlessEditing(getDBObject)\n        },\n        \n        {\n            when: /\\/_components/,\n            default: assumePublishedUnlessEditing(renderComponent),\n            json: assumePublishedUnlessEditing(components.get)\n        },\n        \n        {\n            when: /\\/_uris/,\n            isUri: true,\n            html: renderUri,\n            json: db.get\n        }];\n    "], ["encoderImplementation", "\n    let type = geom.getType();\n    const geometryEncoder = GeometryEncoder[type];\n    const enc = geometryEncoder(geom);\n    type = type.toUpperCase();\n    if (typeof (geom).getFlatCoordinates === 'function') {\n        const dimInfo = encodeGeometryLayout((geom));\n        if (dimInfo.length > 0) {\n            type += ' ' + dimInfo;\n        }\n    }\n    if (enc.length === 0) {\n        return type + ' ' + EMPTY;\n    }\n    return type + '(' + enc + ')';\n    "], ["createUserProfileDirectory", "\n    if (self.closed) return done(null);\n\n    temp.mkdir('browser-controller', function (err, dirpath) {\n        if (err) return done(err);\n\n        self.userDir = dirpath;\n\n        done(null);\n    });\n    "], ["columnReorderValidation", "\n    var oTable = oColumn.getParent();\n\n    if (!oTable || iNewIndex === undefined || !TableColumnUtils.isColumnMovable(oColumn)) {\n        \n        return false;\n    }\n\n    iNewIndex = TableColumnUtils.normalizeColumnMoveTargetIndex(oColumn, iNewIndex);\n\n    if (iNewIndex < oTable.getComputedFixedColumnCount() || iNewIndex < oTable._iFirstReorderableIndex) {\n        \n        return false;\n    }\n\n    var iCurrentIndex = oTable.indexOfColumn(oColumn),\n        aColumns = oTable.getColumns();\n\n    if (iNewIndex > iCurrentIndex) {\n        \n        var oBeforeColumn = aColumns[iNewIndex >= aColumns.length ? aColumns.length - 1 : iNewIndex];\n        var oTargetBoundaries = TableColumnUtils.getColumnBoundaries(oTable, oBeforeColumn.getId());\n        if (TableColumnUtils.hasHeaderSpan(oBeforeColumn) || oTargetBoundaries.endIndex > iNewIndex) {\n            return false;\n        }\n    } else {\n        var oAfterColumn = aColumns[iNewIndex]; \n        if (TableColumnUtils.getParentSpannedColumns(oTable, oAfterColumn.getId()).length != 0) {\n            \n            \n            return false;\n        }\n    }\n\n    return true;\n    "], ["eventConstructor", "\n    this.name = name;\n    this.allowPreventDefault = info.allowPreventDefault || false;\n    this.deprecated = info.deprecated || false;\n    this.visibility = 'public';\n    this.allowPreventDefault = !!info.allowPreventDefault;\n    this.enableEventBubbling = !!info.enableEventBubbling;\n    this.appData = remainder(this, info);\n    this._oParent = oClass;\n    this._sUID = 'event:' + name;\n    this._iKind = Kind.EVENT;\n    var N = capitalize(name);\n    this._sMutator = 'attach' + N;\n    this._sDetachMutator = 'detach' + N;\n    this._sTrigger = 'fire' + N;\n    "], ["generateRouterFiles", "\n    var extension = (ts) ? 'ts' : 'js';\n    var router = ft.loadTemplateSync('router.' + extension);\n    router = router.replace(/{controllerName}/g, modelName + 'Controller');\n\n    if (generateMethod === 't') {\n        ft.createDirIfIsNotDefined(path, 'routes', function () {\n            router = router.replace(/{controllerPath}/g, '\\'../controllers/' + modelName + 'Controller.' + extension + '\\'');\n            ft.writeFile(path + '/routes/' + modelName + 'Routes.' + extension, router, null, cb);\n        });\n    } else {\n        ft.createDirIfIsNotDefined(path, modelName, function () {\n            router = router.replace(/{controllerPath}/g, '\\'./' + modelName + 'Controller.' + extension + '\\'');\n            ft.writeFile(path + '/' + modelName + '/' + modelName + 'Routes.' + extension, router, null, cb);\n        });\n    }\n    "], ["sortAndExtractSignature", "\n    function sortObject(input) {\n        if (typeof input !== 'object' || input === null)\n            return input\n        var output = {};\n        Object.keys(input).sort().forEach(function (key) {\n            output[key] = sortObject(input[key]);\n        });\n        return output;\n    }\n    var signature = {};\n    \n    ['balance', 'card', 'id', 'wid', 'email', 'apikey'].forEach(function (key) {\n        signature[key] = source[key];\n    });\n\n    return sortObject(signature);\n    "], ["manageLayoutAfterItemRemoval", "\n    var removedItemSize = contentItem.config[this._dimension], i,\n        index = lm.utils.indexOf(contentItem, this.contentItems),\n        splitterIndex = Math.max(index - 1, 0);\n    \n    if (this._splitter[splitterIndex]) {\n        this._splitter[splitterIndex]._$destroy();\n        this._splitter.splice(splitterIndex, 1);\n    }\n    \n    for (i = 0; i < this.contentItems.length; i++) {\n        if (this.contentItems[i] !== contentItem) {\n            this.contentItems[i].config[this._dimension] += removedItemSize / (this.contentItems.length - 1);\n        }\n    }\n\n    lm.items.AbstractContentItem.prototype.removeChild.call(this, contentItem, keepChild);\n    this.callDownwards('setSize');\n    this.emitBubblingEvent('stateChanged');\n    "], ["formValidationSetup", "\n    var $form = (typeof(formId) != 'undefined') ? { 'id': formId } : null;\n    var fields = {};\n\n    for (var field in data) {\n        fields[field] = data[field]\n    }\n    \n    if (typeof(rules) != 'undefined' && rules.count() > 0) {\n        parseRules(rules, '');\n        checkForRulesImports(rules);\n\n        backendProto.rules = instance.rules;\n\n        return validate($form, fields, null, instance.rules)\n\n    } else {\n        \n        return new FormValidator(fields)\n    }\n    "], "}\n```"]