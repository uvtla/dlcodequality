[["runCalibrationTest", "\nfunction(onCalibrated) {\n  for (var i = 0; i < Test.CALIBRATIONS.length; i++) {\n    var cal = Test.CALIBRATIONS[i];\n    if (cal.running) return true;\n    if (!cal.count) {\n      cal.isCalibration = true;\n      cal.onStop = onCalibrated;\n\n      <startCalibration>\n      cal.run(2e4);\n      </startCalibration>\n      return true;\n    }\n  }\n  return false;\n}\n"], ["formatSchema", "\nfunction stringify(schema) {\n  ... (entire function content)\n}\n"], ["buildBidRequest", "\nfunction(validBidRequests, bidderRequest) {\n  ... (entire function content)\n}\n"], ["broadcastMessage", "\nfunction(msg) {\n  for (var id in openSocketsById) {\n    if (openSocketsById.hasOwnProperty(id)) {\n      openSocketsById[id].send('0|' + msg + '|null');\n    }\n  }\n}\n"], ["executeCommand", "\nfunction execute(id) {\n  var command = _commands[id];\n\n  if (command) {\n      <commandExecutionPreparation>\n      try {\n          exports.trigger(\"beforeExecuteCommand\", id);\n      } catch (err) {\n          console.error(err);\n      }\n      </commandExecutionPreparation>\n\n      return command.execute.apply(command, Array.prototype.slice.call(arguments, 1));\n  } else {\n      return (new $.Deferred()).reject().promise();\n  }\n}\n"], ["formatTemplate", "\nfunction(formatString, value) {\n  ... (entire function content)\n}\n"], ["retrieveCRUDEntities", "\nfunction() {\n  return new Promise(function(resolve, reject) {\n      exec(\"find . ! -name '\" + __filename.split('/').pop() + \"' -iname '*\\.js' | xargs grep 'CRUD.Entity.call(this);' -isl\", {\n          timeout: 3000,\n          cwd: process.cwd()\n      }, function(err, stdout, stdin) {\n          var results = stdout.trim().split('\\n');\n          for (var i = 0; i < results.length; i++) {\n              <readAndEvalFiles>\n              eval(fs.readFileSync(results[i]) + '');\n              </readAndEvalFiles>\n          }\n          resolve(Object.keys(CRUD.entities));\n      });\n  });\n}\n"], ["checkLegacyPackage", "\nfunction legacyPackageCheck(legacyDirectory) {\n  return fs.existsSync(legacyDirectory) && !fs.existsSync(path.join(legacyDirectory, \"package.json\"));\n}\n"], ["initializeWebsocketConnection", "\nfunction(opts) {\n  ... (entire function content)\n}\n"], ["getNativeSelection", "\nfunction() {\n  if ( this._.cache.nativeSel !== undefined )\n    return this._.cache.nativeSel;\n\n  return ( this._.cache.nativeSel = isMSSelection ? this.document.$.selection : this.document.getWindow().$.getSelection() );\n}\n"], "```\nCompliant Function. This function retrieves the native selection object depending on the environment."]