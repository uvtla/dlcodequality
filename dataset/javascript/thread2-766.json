[["getBlock", "\nfunction ( range, root ) {\n  var container = range.startContainer,\n    block;\n\n  <determineBlock>\n  if ( isInline( container ) ) {\n    block = getPreviousBlock( container, root );\n  } else if ( container !== root && isBlock( container ) ) {\n    block = container;\n  } else {\n    block = getNodeBefore( container, range.startOffset );\n    block = getNextBlock( block, root );\n  }\n  </determineBlock>\n\n  return block && isNodeContainedInRange( range, block, true ) ? block : null;\n}\n"], ["replaceObjectWithScripts", "\nfunction replace(obj, prefix) {\n  const retObj = {}\n  const dot = prefix ? '.' : ''\n  for (const key in obj) {\n    <handleDescriptionKey>\n    if (key === 'description') {\n      retObj[key] = obj[key]\n    }\n    </handleDescriptionKey>\n    <handleScriptKey>\n    else if (key === 'script') {\n      retObj[key] = series(\n        `cd ${relativeDir}`,\n        `npm start ${prefix}`,\n        `cd \"${relativeReturn}\"`,\n      )\n    }\n    </handleScriptKey>\n    <handleStringKey>\n    else if (typeof obj[key] === 'string') {\n      retObj[key] = series(\n        `cd ${relativeDir}`,\n        `npm start ${prefix}${dot}${key}`,\n      )\n    }\n    </handleStringKey>\n    <handleObjectKey>\n    else {\n      retObj[key] = Object.assign(\n        {},\n        replace(obj[key], `${prefix}${dot}${key}`, `cd \"${startingDir}\"`),\n      )\n    }\n    </handleObjectKey>\n  }\n  return retObj\n}\n"], ["inheritanceInitialize", "\nfunction(config) {\n        config = config || {};\n        OpenLayers.Layer.Vector.prototype.initialize.apply(this, [config.name, config]);\n}\n"], ["S3ClientValidator", "\nfunction Client(client) {\n  if (this instanceof Client === false) {\n    return new Client(client);\n  }\n\n  <validateClient>\n  if (!client) {\n    throw new Error('Must configure an S3 client before attempting to create an S3 upload stream.');\n  }\n  </validateClient>\n\n  this.cachedClient = client;\n}\n"], ["defineHTMLFile", "\nfunction define(File, utils) {\n  return class HTMLFile extends File {\n    \n    <HTMLFileConstructor>\n    constructor(id, filepath, options) {\n      super(id, filepath, 'html', options);\n\n      this.hasMaps = false;\n      this.map = null;\n      this.workflows.standard = WORKFLOW_STANDARD;\n      this.workflows.writeable = WORKFLOW_WRITEABLE;\n    }\n    </HTMLFileConstructor>\n    \n    <parseContent>\n    parse(buildOptions, fn) {\n      ...\n    }\n    </parseContent>\n    \n    <parseSidecarDependency>\n    parseSidecarDependency() {\n      ...\n    }\n    </parseSidecarDependency>\n    \n    <findSidecarDependency>\n    findSidecarDependency() {\n      ...\n    }\n    </findSidecarDependency>\n    \n    <replaceEnvironment>\n    replaceEnvironment(buildOptions, fn) {\n      ...\n    }\n    </replaceEnvironment>\n    \n    <inlineDependencies>\n    inline(buildOptions, fn) {\n      ...\n    }\n    </inlineDependencies>\n    \n  };\n}\n"], ["binaryOperation", "\nfunction (op, other) {\n  return new(tree.Dimension)\n      (tree.operate(op, this.value, other.value),\n      this.unit || other.unit);\n}\n"], ["createDecayingCounterStore", "\nfunction DecayingCounterStore(options) {\n  if (!(this instanceof DecayingCounterStore)) {\n    return new DecayingCounterStore(options);\n  }\n\n  <initializeOptionsAndCounters>\n  this._options = options || {};\n  this._counters = {};\n  </initializeOptionsAndCounters>\n  \n  <setDecayFactor>\n  this._decayFactor = Math.pow(2, 1/3);\n  </setDecayFactor>\n\n  <scheduleCounterDecay>\n  var self = this;\n  this._decayCountersInterval = setInterval(function() {\n    self._decayCounters();\n  }, self._options.interval / 3);\n  </scheduleCounterDecay>\n}\n"], ["initializeTabClickEvent", "\nfunction initClickEvent (tabheader) {\n  const box = tabheader.box\n\n  <addClickListener>\n  box.addEventListener('click', function (evt) {\n    let target = evt.target\n    ...\n    \n    fireEvent(target, 'select', { index: floor })\n  })\n  </addClickListener>\n}\n"], ["displayMyPieces", "\nfunction getMyPieces(player) {\n  <appendPiecesToDOM>\n  for (var i in player.pieces) {\n    ...\n  }\n  </appendPiecesToDOM>\n\n  <configureDimensions>\n  function setDimensions() {\n    ...\n  }\n\n  setDimensions();\n  setTimeout(setDimensions, 250);\n  </configureDimensions>\n\n  <enablePieceDragging>\n  if (player.has_turn)\n    $(PIECECLS).draggable({\n      ...\n    });\n  </enablePieceDragging>\n}\n"], ["pollCSSLoading", "\nfunction pollWebKit() {\n  \n  var css = pending.css, i;\n  \n  <checkCSSLoaded>\n  if (css) {\n    i = styleSheets.length;\n    \n    while (--i >= 0) {\n      if (styleSheets[i].href === css.urls[0]) {\n        finish('css');\n        break;\n      }\n    }\n    \n    pollCount += 1;\n  }\n  </checkCSSLoaded>\n\n  <handlePollingTimeout>\n  if (css) {\n    if (pollCount < 200) {\n      setTimeout(pollWebKit, 50);\n    } else {\n      finish('css');\n    }\n  }\n  </handlePollingTimeout>\n}\n"], "```"]