[["toArray", "\nfunction toArray(line, delimiter) {\n  var arr = line\n    .split(delimiter)\n    .filter(Boolean)\n  return arr\n}\n"], ["formatNodeValue", "\nfunction formatNodeValue(node, profile) {\n\tif (node.value != null && reNl.test(node.value)) {\n    <splitAndFormat>\n\t\tconst lines = splitByLines(node.value);\n\t\tconst indent = profile.indent(1);\n\t\tconst maxLength = lines.reduce((prev, line) => Math.max(prev, line.length), 0);\n\t\treturn lines.map((line, i) => `${i ? indent : ''}${pad(line, maxLength)} |`).join('\\n');\n    </splitAndFormat>\n\t}\n\n\treturn node.value;\n}\n"], ["loadPathsAndCallback", "\nfunction(paths, callback) {\n        var results = [];\n        for(var path in paths) {\n          <checkOwnPath>\n            if(paths.hasOwnProperty(path)) {\n            </checkOwnPath>\n                <cacheAndCollectResult>\n                acquire.cache[path] = paths[path];\n                results.push(acquire.cache[path]);\n                </cacheAndCollectResult>\n            }\n        }\n        <executeCallback>\n        callback.apply(null, results);\n        </executeCallback>\n\n        return results;\n    }\n"], ["EntryConstructor", "\nfunction Entry(name, hash, status, mode, deed, registrationDate, value, highestBid) {\n  this.name = name;\n  this.hash = hash;\n  this.status = status;\n  this.mode = mode;\n  this.deed = deed;\n  this.registrationDate = registrationDate;\n  this.value = value;\n  this.highestBid = highestBid;\n}\n"], ["objectIcon", "\nfunction objectIcon(object) {\n  if (!object) {\n    return;\n  }\n  <getLocation>\n  var location = getIcon(object);\n  </getLocation>\n\n  if (location) {\n    <generateUrl>\n    return getUrl({\n      location: location,\n      updatedAt: object.updatedAt\n    }, null, agneta.get_media);\n    </generateUrl>\n  }\n}\n"], ["eventTracker", "\nfunction () {\n  if (arguments[0] == \"init\") {\n    <initializeSettings>\n    settings = Pilotfish('extend', {}, settings, arguments[1]);\n    </initializeSettings>\n\n    <bindEvents>\n    if (settings.events) {\n        for (var i = 0; i < settings.events.length; i++) {\n            Pilotfish('on', settings.events[i], function (evt) {\n                recordEvent(evt.type);\n            });\n        }\n    }\n    </bindEvents>\n\n    <monitorHashChanges>\n    if (settings.hashChangePageView) {\n        Pilotfish('on', 'window:hashchange', function (evt) {\n            recordEvent(PAGEVIEW, evt.path);\n        });\n    }\n    </monitorHashChanges>\n\n    <recordClicks>\n    if (settings.recordClicks) {\n        jQuery(settings.recordClicks).click(function recordClicks() {\n            var $this = jQuery(this);\n            if ($this.data(\"event\")) {\n                recordEvent($this.data(\"event\"));\n            } else if ($this.val() && $this.val().length < 25) {\n                recordEvent($this.val());\n            } else if ($this.text().length < 25) {\n                recordEvent($this.text());\n            }\n        });\n    }\n    </recordClicks>\n\n    <recordSessionOnLoad>\n    if (settings.recordSession) {\n        jQuery(window).load(function () {\n            track(\"pilotfish-session\", PAGEVIEW, {path: location.pathname});\n        });\n    }\n    </recordSessionOnLoad>\n\n  } else {\n    <recordArbitraryEvent>\n    recordEvent.apply(this, arguments);\n    </recordArbitraryEvent>\n  }\n}\n"], ["schemaFieldExtractor", "\nfunction(schemaData) {\n    var fields = [];\n    <checkSchemaAndCollectFields>\n    if (schemaData &&\n           'object' === typeof schemaData &&\n           schemaData['fields'] &&\n            Array.isArray(schemaData['fields'])) {\n      schemaData['fields'].forEach((f) => {\n        if (f['field'] && f['type'] && 'nested' !== f['type']) {\n          fields.push(f['field']);\n        }\n      });\n    }\n    </checkSchemaAndCollectFields>\n\n    <filterUniqueFields>\n    if (fields.length) {\n      fields = fields.filter(this.uniqueFilter);\n    }\n    </filterUniqueFields>\n\n    return fields;\n  }\n"], ["sizerFunction", "\nfunction() {\n    var self = this;\n\n    <clearPreviousTimeout>\n    clearTimeout(self.__sizerTimeout);\n    </clearPreviousTimeout>\n\n    var sizer = function() {\n      <resizeAction>\n      self.resize();\n      </resizeAction>\n    };\n\n    <triggerSizerInitiallyAndSetUpTimeout>\n    sizer();\n    self.__sizerTimeout = setTimeout(sizer, 1000);\n    </triggerSizerInitiallyAndSetUpTimeout>\n  }\n"], ["infiniteScrollTrigger", "\nfunction infiniteScroll() {\n    if (infiniteScroll.bound) return;\n    <initializeScrollVariables>\n    var body = o('body');\n    hideLoading();\n    infiniteScroll.bound = true;\n    </initializeScrollVariables>\n\n    <bindScrollEvent>\n    o(window).scroll(function (e) {\n        var top = body.scrollTop()\n            , height = body.innerHeight()\n            , windowHeight = window.innerHeight\n            , pad = 30;\n        <checkScrollPosition>\n        if (top + windowHeight + pad >= height) {\n            to += more;\n            infiniteScroll.bound = false;\n            showLoading();\n            o(window).unbind('scroll');\n        }\n        </checkScrollPosition>\n    });\n    </bindScrollEvent>\n}\n"], ["expandBigInt", "\nfunction expand(x, n) {\n  <createExpandedInt>\n  var ans=int2bigInt(0, (x.length>n ? x.length : n)*bpe, 0);\n  <copyOriginalToInt>\n  copy_(ans, x);\n  </copyOriginalToInt>\n  return ans;\n}\n"], ""]