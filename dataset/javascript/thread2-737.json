[["toggleUntrustedCertificate", "\nfunction (boolActivateUnsecure) {\n    if (cordova.platformId == 'android')\n        cordova.exec(null, null, 'CertificatesPlugin', 'setUntrusted', [boolActivateUnsecure]);\n    else\n        cordova.exec(null, null, 'CDVCertificate', 'setUntrusted', [boolActivateUnsecure]);\n}\n"], ["compareSpecialCases", "\nfunction specialCases(e1, e2, p1, p2) {\n  \n  <comparePositions>\n  if (e1.left !== e2.left)\n    return e1.left ? 1 : -1;\n  </comparePositions>\n\n  <compareSignedArea>\n  if (signedArea(p1, e1.otherEvent.point, e2.otherEvent.point) !== 0) {\n    return (!e1.isBelow(e2.otherEvent.point)) ? 1 : -1;\n  }\n  </compareSignedArea>\n\n  <compareSubject>\n  return (!e1.isSubject && e2.isSubject) ? 1 : -1;\n  </compareSubject>\n}\n"], ["mkdirsRecursive", "\nfunction mkdirs(dirpath, _callback) {\n    <checkDirectoryExists>\n    fs.exists(dirpath, (exists)=> {\n        if (exists) {\n            _callback(dirpath);\n        } else {\n    </checkDirectoryExists>\n\n    <createParentThenCurrent>\n            mkdirs(path.dirname(dirpath), ()=> {\n                fs.mkdir(dirpath, _callback);\n            });\n        }\n    });\n}</createParentThenCurrent>\n"], ["initializeParserInline", "\nfunction ParserInline() {\n  var i;\n  \n  <setupRuler>\n  this.ruler = new Ruler();\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n  </setupRuler>\n\n  <setupRuler2>\n  this.ruler2 = new Ruler();\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n  </setupRuler2>\n}\n"], ["registerCustomEvent", "\nfunction (type, fn, context) {\n    var self = this;\n    <customEventRegistration>\n    Utils.batchForType(function (type, fn, context) {\n        var cfg = Utils.normalizeParam(type, fn, context), customEvent;\n        type = cfg.type;\n        customEvent = self.getCustomEventObservable(type, true);\n        if (customEvent) {\n            customEvent.on(cfg);\n        }\n    }, 0, type, fn, context);\n    return self;   \n    </customEventRegistration> \n}\n"], ["webpackModuleExport", "\nfunction(module, exports, __webpack_require__) {\n  \n  <moduleRenderMethod>\n  module.exports={render:function (){with(this) {\n    return _h('div', {\n      staticClass: \"container-fluid m-a-1 foo\"\n    }, [_m(0), \" \", _h('p', [_s(greeting) + \" world!\"]), \" \", _m(1)])\n  }},staticRenderFns: [function (){with(this) {\n    return _h('h1', [\"foo\"])\n  }},function (){with(this) {\n    return _h('hr')\n  }}]}\n  </moduleRenderMethod>\n  \n  <moduleHotReload>\n  if (false) {\n    module.hot.accept()\n    if (module.hot.data) {\n       require(\"vue-hot-reload-api\").rerender(\"data-v-3d9c874b\", module.exports)\n    }\n  }\n  </moduleHotReload>\n\n}\n"], ["javaWrapperConstructor", "\nfunction (param, value) {\n    var jvmObject;\n    <initializeParam>\n    if (arguments[0] instanceof org.apache.spark.ml.param.ParamPair) {\n        jvmObject = arguments[0];\n    } else {\n        jvmObject = new org.apache.spark.ml.param.ParamPair(param, value);\n    }\n    </initializeParam>\n    \n    <initializeLogger>\n    this.logger = Logger.getLogger(\"ParamPair_js\");\n    JavaWrapper.call(this, jvmObject);\n    </initializeLogger>\n\n}\n"], ["convertDependencies", "\nfunction dependenciesToArray(dependencies) {\n    <zipDependencies>\n    return zipWith((name, version) => ({ name, version }),\n        keys(dependencies),\n        values(dependencies));\n    </zipDependencies>\n}\n"], ["cookieConstructor", "\nfunction Cookie(name, value, attrs){\n  <cookieValidation>\n  if(!(this instanceof Cookie)) \n    return new Cookie(name, value, attrs);\n  if(!name)  throw new TypeError('argument name is invalid');\n  </cookieValidation>\n\n  <cookieInitialization>\n  this.name   = name;\n  this.value  = value;\n  </cookieInitialization>\n\n  <setAttributeProperties>\n  for (var key in attrs) {\n    this[key] = attrs[key];\n  }\n  </setAttributeProperties>\n  return this;\n}\n"], ["generateVariantInfo", "\nfunction(variant){\n    <initializeInfoString>\n    variant = variant ? (' for ' + variant) : '';\n    var info = '\\n';\n    return info;\n    </initializeInfoString>\n}\n"], "```"]