[["jsonInitFunction", "\nfunction() {\n    this.jsonInit({\n      \"message0\": Blockly.Msg.DATA_ITEMOFLIST,\n      \"args0\": [\n        {\n          \"type\": \"input_value\",\n          \"name\": \"INDEX\"\n        },\n        {\n          \"type\": \"field_variable\",\n          \"name\": \"LIST\",\n          \"variableTypes\": [Blockly.LIST_VARIABLE_TYPE]\n        }\n      ],\n      \"output\": null,\n      \"category\": Blockly.Categories.dataLists,\n      \"extensions\": [\"colours_data_lists\"],\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND\n    });\n}\n"], ["iterateStyleRules", "\nfunction iterateStyleRules(argument) {\n    <checkAndCollectStyles>\n\tif (typeof argument === 'string') {\n\t\tcheckStyleExistence(styleDefinitions, argument);\n\t\tcollectedStyles.push(styleDefinitions[argument]);\n\t\treturn;\n\t}\n\t</checkAndCollectStyles>\n\n    <objectStyleIteration>\n\tif (typeof argument === 'object') {\n\t\tObject.keys(argument).forEach(function(styleName) {\n\t\t\tcheckStyleExistence(styleDefinitions, styleName);\n\t\t\tif (argument[styleName]) {\n\t\t\t\tcollectedStyles.push(styleDefinitions[styleName])\n\t\t\t}\n\t\t})\n\t}\n    </objectStyleIteration>\n}\n"], ["baseMatchesProperty", "\nfunction baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n    return function(object) {\n      var objValue = get(object, path);\n      return (objValue === undefined && objValue === srcValue)\n        ? hasIn(object, path)\n        : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n    };\n}\n"], ["parse", "\nfunction parse(data, options, next) {\n    <preprocessArguments>\n\tdata = this.get(data);\n\tif ('function' === typeof options) {\n      next = options;\n      options = {};\n    }\n    </preprocessArguments>\n\n    <checkDataAndCallback>\n\tif (!data) return next();\n\tdebug('found %s in the package contents', data);\n\tnext(undefined, this.normalize(data));\n    </checkDataAndCallback>\n}\n"], ["constructor", "\nfunction (expression, descending, opts) {\n\t<initializeSorting>\n\tdescending = isBoolean(descending) ? descending : true;\n\topts = opts || {};\n\tthis.__expression = expression;\n\tthis.__descending = descending;\n\tvar nulls = isString(opts) ? opts : opts.nulls;\n\tthis.__nulls = isString(nulls) ? nulls.toLowerCase() : null;\n\t</initializeSorting>\n}\n"], ["_VirtualDom_applyAttrsNS", "\nfunction _VirtualDom_applyAttrsNS(domNode, nsAttrs) {\n    <applyNamespaceAttributes>\n\tfor (var key in nsAttrs) {\n      var pair = nsAttrs[key];\n      var namespace = pair.f;\n      var value = pair.o;\n\n      value\n        ? domNode.setAttributeNS(namespace, key, value)\n        : domNode.removeAttributeNS(namespace, key);\n    }\n    </applyNamespaceAttributes>\n}\n"], ["CraftyCoordinateConversion", "\nfunction (x, y) {\n    <conversionFormula>\n\treturn {\n\t\tx: (x - Crafty.stage.x + document.body.scrollLeft + document.documentElement.scrollLeft - Crafty.viewport._x)/Crafty.viewport._zoom,\n\t\ty: (y - Crafty.stage.y + document.body.scrollTop + document.documentElement.scrollTop - Crafty.viewport._y)/Crafty.viewport._zoom\n\t}\n\t</conversionFormula>\n}\n"], ["getUuid", "\nfunction(cacheNum) {\n    <setDefaultCacheNum>\n\tif (cacheNum === undefined) {\n        cacheNum = 1;\n    }\n\t</setDefaultCacheNum>\n\n    <generateUuids>\n\tif (!uuidCache.length) {\n        ajax({url: this.urlPrefix + \"/_uuids\", data: {count: cacheNum}, async: false}, {\n            success: function(resp) {\n              uuidCache = resp.uuids;\n            }\n          },\n          \"Failed to retrieve UUID batch.\"\n        );\n    }\n    </generateUuids>\n\n    <retrieveUuid>\n\treturn uuidCache.shift();\n\t</retrieveUuid>\n}\n"], ["Th", "\nfunction Th(iid, val) {\n    <executeThrowHook>\n\tvar aret;\n\tif (sandbox.analysis && sandbox.analysis._throw) {\n\t\taret = sandbox.analysis._throw(iid, val);\n\t\tif (aret) {\n\t\t\tval = aret.result;\n\t\t}\n\t}\n\t</executeThrowHook>\n\n\t<returnValue>\n\treturn (lastComputedValue = val);\n\t</returnValue>\n}\n"], ["normalizePath", "\nfunction normalizePath(fsPath) {\n\t<normalizeAndConvertPath>\n\tfsPath = path.normalize(fsPath);\n\tif (process.platform === 'win32') {\n\t\tfsPath = fsPath.replace(backwardSlashRegExp, '/');\n\t}\n\t</normalizeAndConvertPath>\n\n\t<returnPath>\n\treturn fsPath;\n\t</returnPath>\n}\n"], ""]