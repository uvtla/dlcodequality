[["Connection", "\nfunction Connection(device) {\n  <setUpEventEmitter>\n  var self = this;\n\n  EventEmitter2.call(this, {\n    wildcard: true,\n    delimiter: ':',\n    maxListeners: 1000,\n  });\n  </setUpEventEmitter>\n\n  <configureLoggingMechanism>\n  if (this.log) {\n    this.log = _.wrap(this.log, function (func, msg) {\n      func(self.constructor.name + ': ' + msg);\n    });\n  } else if (Connection.prototype.log) {\n    Connection.prototype.log = _.wrap(Connection.prototype.log, function (func, msg) {\n      func(self.constructor.name + ': ' + msg);\n    });\n    this.log = Connection.prototype.log;\n  } else {\n    var debug = require('debug')(this.constructor.name);\n    this.log = function (msg) {\n      debug(msg);\n    };\n  }\n  </configureLoggingMechanism>\n\n  <initializeProperties>\n  this.taskQueue = [];\n  this.commandQueue = [];\n  this.isTaskRunning = false;\n  \n  this.id = uuid();\n  this.device = device;\n  \n  this.attributes = { id: this.id, device: this.device };\n\n  this.set('state', 'disconnect');\n  </initializeProperties>\n\n  <setupDeviceEventHandlers>\n  this.device.on('open', this.openHandle = function (callback) {\n    <handleDeviceOpenEvent>\n    if (self.log)\n      self.log('connecting connection with id ' + self.id);\n  \n    <powerManagementSetup>\n    if (pm) {\n      pm.on('wake', self.wakeHandler = function () {\n        if (self.log) self.log('waking up');\n        if (self.onWakeUp) {\n          self.onWakeUp();\n        }\n      });\n      pm.on('sleep', self.sleepHandler = function () {\n        if (self.log) self.log('going to sleep');\n        if (self.onSleep) {\n          self.onSleep();\n        }\n      });\n    }\n    </powerManagementSetup>\n\n    self.set('state', 'connecting');\n    self.device.emit('connecting', self.device);\n    self.emit('connecting', self);\n    \n    if (self.onConnecting) {\n      self.onConnecting(function (err) {\n        if (err) {\n          if (self.log) self.log('could not connect connection with id ' + self.id);\n          self.close(function () {\n            if (callback) callback(err, self);\n          });\n        } else {\n          if (self.log) self.log('connect connection with id ' + self.id);\n          self.device.emit('connect', self.device);\n          self.set('state', 'connect');\n          self.emit('connect', self);\n          if (callback) callback(null, self);\n        }\n      });\n    } else {\n      if (self.log) self.log('connect connection with id ' + self.id);\n      self.device.emit('connect', self.device);\n      self.set('state', 'connect');\n      self.emit('connect', self);\n      if (callback) callback(null, self);\n    }\n    </handleDeviceOpenEvent>\n  });\n\n  this.device.on('closing', this.closingHandle = function (callback) {\n    self.close(callback);\n  });\n\n  this.device.on('close', this.closeHandle = function (callback) {\n    <handleDeviceCloseEvent>\n    if (self.log) self.log('disconnect connection with id ' + self.id);\n    self.device.emit('disconnect', self.device);\n    self.set('state', 'disconnect');\n    self.emit('disconnect', self);\n    self.removeAllListeners();\n    self.removeAllListeners('connect');\n    self.removeAllListeners('connecting');\n    self.removeAllListeners('disconnect');\n    self.removeAllListeners('disconnecting');\n    self.device.removeListener('open', self.openHandle);\n    self.device.removeListener('closing', self.closingHandle);\n    self.device.removeListener('close', self.closeHandle);\n    if (self.device && self.device.connection) {\n      delete self.device.connection;\n      delete self.device;\n    }\n\n    if (pm) {\n      if (self.wakeHandler) pm.removeListener('wake', self.wakeHandler);\n      if (self.sleepHandler) pm.removeListener('sleep', self.sleepHandler);\n    }\n\n    if (self.taskQueue) {\n      self.taskQueue = [];\n    }\n    if (self.commandQueue) {\n      self.commandQueue = [];\n    }\n    </handleDeviceCloseEvent>    \n  });\n  </setupDeviceEventHandlers>\n}\n"], ["BLETransport", "\nfunction BLETransport(opts) {\n  <checkInstance>\n  if (!(this instanceof BLETransport)) {\n    return new BLETransport(opts);\n  }\n  </checkInstance>\n\n  <initializeController>\n  this.configuration = opts.configuration;\n  this.controller = Controllers[this.configuration.controller];\n  if (!this.controller) {\n    throw new Error(\"No valid BLE controller defined\");\n  }\n  </initializeController>\n}\n"], ["generateSlug", "\nfunction generateSlug(title) {\n  <validateTitle>\n  if (typeof title !== 'string') {\n    throw new Error('title is not a string');\n  }\n  </validateTitle>\n\n  <sanitizeSlug>\n  title = title || '';\n  title = title.toLowerCase().replace(/[\\W]/g, '-').replace(/[-]{2,}/g, '-');\n  </sanitizeSlug>\n\n  <returnSlug>\n  return title;\n  </returnSlug>\n}\n"], ["mxGraphExportToXML", "\nfunction (graph, scale, cells, x0, y0) {\n  <initializeDefaults>\n  x0 = x0 != null ? x0 : 0;\n  y0 = y0 != null ? y0 : 0;\n  scale = scale != null ? scale : 1;\n  </initializeDefaults>\n\n  <prepareCellsForExport>\n  if (cells == null) {\n    var model = graph.getModel();\n    cells = [model.getRoot()];\n  }\n  </prepareCellsForExport>\n\n  <disableEventsAndBackupState>\n  var view = graph.getView();\n  var eventsEnabled = view.isEventsEnabled();\n  view.setEventsEnabled(false);\n\n  var drawPane = view.drawPane;\n  var overlayPane = view.overlayPane;\n  </disableEventsAndBackupState>\n\n  <createTemporaryDOM>\n  if (graph.dialect == mxConstants.DIALECT_SVG) {\n    \n    view.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n    view.canvas.appendChild(view.drawPane);\n\n    \n    view.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n    view.canvas.appendChild(view.overlayPane);\n  } else {\n    \n    view.drawPane = view.drawPane.cloneNode(false);\n    view.canvas.appendChild(view.drawPane);\n\n    \n    view.overlayPane = view.overlayPane.cloneNode(false);\n    view.canvas.appendChild(view.overlayPane);\n  }\n  </createTemporaryDOM>\n\n  <setGraphViewState>\n  \n  var translate = view.getTranslate();\n  view.translate = new mxPoint(x0, y0);\n  </setGraphViewState>\n\n  <exportToXML>\n  var result = null;\n  var temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n  try {\n    var enc = new mxCodec();\n    result = enc.encode(graph.getView());\n  } finally {\n    temp.destroy();\n    view.translate = translate;\n    view.canvas.removeChild(view.drawPane);\n    view.canvas.removeChild(view.overlayPane);\n    view.drawPane = drawPane;\n    view.overlayPane = overlayPane;\n    view.setEventsEnabled(eventsEnabled);\n  }\n  </exportToXML>\n\n  <returnResult>\n  return result;\n  </returnResult>\n}\n"], ["scrapeAll", "\nfunction scrapeAll(query, scrapeDetails) {\n  <coWrapper>\n  return co(function* () {\n    <setDefaultScrapeDetails>\n    scrapeDetails = scrapeDetails === undefined ? true : scrapeDetails;\n    </setDefaultScrapeDetails>\n\n    <initialPageScrape>\n    const scrapeURL = makeUrl(SCRAPE_URL, query);\n    const search = yield scrapeSearchPage(scrapeURL);\n    </initialPageScrape>\n\n    <initializeCards>\n    var cards = search.cards;\n    var i;\n    </initializeCards>\n\n    <scrapeAdditionalPages>\n    for (i = 2; i <= search.numPages; i++) {\n      const scrapeURL = makeUrl(Url.resolve(SCRAPE_URL, i.toString()), query);\n      const results = yield scrapeSearchPage(scrapeURL);\n      cards = cards.concat(results.cards);\n    }\n    </scrapeAdditionalPages>\n\n    <scrapeCardsDetails>\n    if (scrapeDetails) {\n      for (i = 0; i < cards.length; i++) {\n        const card = cards[i];\n        _.assign(card, yield scrapeCard(card.url));\n      }\n    }\n    </scrapeCardsDetails>\n\n    <returnCards>\n    return cards;\n    </returnCards>\n  })();\n  </coWrapper>\n}\n"], ["addToScopeList", "\nfunction (item, disabled) {\n  <pushToList>\n  scope.List.push({\n    value: $sce.trustAsHtml(item.value),\n    title: item.title,\n    liClass: disabled ? scope.disabledClass : '',\n    action: function () {\n      if (!disabled) {\n        internalAction(scope, item.page);\n      }\n    },\n  });\n  </pushToList>\n}\n"], ["createPackageContents", "\nfunction (options, dir, callback) {\n  <logCreationStart>\n  options.logger('Creating contents of package');\n  </logCreationStart>\n\n  <runCreationTasks>\n  async.parallel(\n    [\n      async.apply(createDesktop, options, dir),\n      async.apply(createIcon, options, dir),\n      async.apply(createCopyright, options, dir),\n      async.apply(createApplication, options, dir),\n    ],\n    function (err) {\n      <creationCallback>\n      callback(err, dir);\n      </creationCallback>\n    }\n  );\n  </runCreationTasks>\n}\n"], ["returns", "\nfunction returns(error, html, cb) {\n  <setupCallback>\n  var fn = typeof cb === 'function';\n  </setupCallback>\n\n  <handleError>\n  if (error) {\n    debug('Error received: %s', error.message);\n\n    if (fn) cb(error);\n    return minimize.emit('error', error);\n  }\n  </handleError>\n\n  <returnOrCallback>\n  if (fn) return cb(null, html);\n  return html;\n  </returnOrCallback>\n}\n"], ["getDeclarationDeps", "\nfunction getDeclarationDeps($ast, declaration, scope) {\n  <checkScope>\n  if (scope !== SCOPE_EXPLICIT) {\n    return {};\n  }\n  </checkScope>\n\n  <findDependentParentNodes>\n  const depParentNodes = $ast(declaration).parents((node) => {\n    if (node.node.type === 'mixin') {\n      return true;\n    } else if (node.node.type === 'atrule') {\n      const atruleIdentNode = $ast(node).children('atkeyword').children('ident');\n      return atruleIdentNode.length() > 0 && atruleIdentNode.first().value() === 'function';\n    } else {\n      return false;\n    }\n  });\n  </findDependentParentNodes>\n\n  <bailIfNoDependencies>\n  if (depParentNodes.length() === 0) {\n    return {};\n  }\n  </bailIfNoDependencies>\n\n  <getLastDependentParentNode>\n  const depParentNode = depParentNodes.last();\n  const depKeywordNode = depParentNode.children('atkeyword').children('ident');\n\n  if (depKeywordNode.length() === 0) {\n    return {};\n  }\n  </getLastDependentParentNode>\n\n  <getAtKeywordAndValidate>\n  const atKeyword = depKeywordNode.first().value();\n\n  if (!DEP_HOST[atKeyword]) {\n    return {};\n  }\n  </getAtKeywordAndValidate>\n\n  <extractDependencyHostNode>\n  const depHostNode = DEP_HOST[atKeyword](depParentNode);\n  const atKeywordIdentifierNode = depHostNode.children('ident');\n  </extractDependencyHostNode>\n\n  <validateIdentifierNode>\n  if (atKeywordIdentifierNode.length() === 0) {\n    return {};\n  }\n  </validateIdentifierNode>\n\n  <retrieveAndPrepareArgumentsCount>\n  const atIdentifier = atKeywordIdentifierNode.first().value();\n  const argumentsNode = depHostNode.children('arguments');\n\n  const requiredArgsCount = argumentsNode.children('variable').length();\n  const optionalArgsCount = argumentsNode.children('declaration').length();\n  const totalArgsCount = requiredArgsCount + optionalArgsCount;\n  </retrieveAndPrepareArgumentsCount>\n\n  <returnDependencies>\n  if (!DEP_KEYWORDS[atKeyword]) {\n    return {};\n  }\n\n  return {\n    [DEP_KEYWORDS[atKeyword]]: {\n      name: atIdentifier,\n      argsCount: {\n        total: totalArgsCount,\n        required: requiredArgsCount,\n        optional: optionalArgsCount,\n      },\n    },\n  };\n  </returnDependencies>\n}\n"], ["processStripeTransfer", "\nfunction (transfer, cb) {\n  <findOrCreateTransfer>\n  Transfer.findOrCreate(transfer.id, transfer).exec(function (err, foundTransfer) {\n    if (err) return cb(err);\n    if (foundTransfer.lastStripeEvent > transfer.lastStripeEvent) return cb(null, foundTransfer);\n    if (foundTransfer.lastStripeEvent == transfer.lastStripeEvent)\n      return Transfer.afterStripeTransferCreated(foundTransfer, function (err, transfer) {\n        return cb(err, transfer);\n      });\n    </findOrCreateTransfer>\n\n    <updateTransfer>\n    Transfer.update(foundTransfer.id, transfer).exec(function (err, updatedTransfers) {\n      if (err) return cb(err);\n      if (!updatedTransfers) return cb(null, null);\n      Transfer.afterStripeTransferCreated(updatedTransfers[0], function (err, transfer) {\n        cb(err, transfer);\n      });\n    });\n    </updateTransfer>\n  });\n}\n"], "```"]