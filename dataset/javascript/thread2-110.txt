```javascript
<getCookieToken>
function getCookieToken(res) {
  <parseCookieValue>
  var value = res.req.cookies[cookieName(res.req)];
  if (!value)
    return false;

  var parts = value.split('|');
  if (parts.length !== 3)
    return false;
  </parseCookieValue>

  <validateUser>
  if (parts[1] !== getUserData(res.req))
    return false;
  </validateUser>

  <cryptoVerification>
  var hasher = crypto.createHmac(options.algorithm, cookieKey);
  hasher.update(parts[0]);
  hasher.update("|");  
  hasher.update(parts[1]);

  if (parts[2] !== hasher.digest('base64'))
    return false;
  </cryptoVerification>

  return parts[0];
}
</getCookieToken>

<indentation>
function indentation(value, maximum) {
  var values = value.split(lineFeed)
  var position = values.length + 1
  var minIndent = Infinity
  var matrix = []
  var index
  var indentation
  var stops
  var padding

  <initializeMatrix>
  values.unshift(repeat(space, maximum) + exclamationMark)

  while (position--) {
    indentation = getIndent(values[position])
    matrix[position] = indentation.stops
    if (trim(values[position]).length === 0) {
      continue
    }

    if (indentation.indent) {
      if (indentation.indent > 0 && indentation.indent < minIndent) {
        minIndent = indentation.indent
      }
    } else {
      minIndent = Infinity

      break
    }
  }
  </initializeMatrix>

  <applyIndentation>
  if (minIndent !== Infinity) {
    position = values.length

    while (position--) {
      stops = matrix[position]
      index = minIndent

      while (index && !(index in stops)) {
        index--
      }

      if (
        trim(values[position]).length !== 0 &&
        minIndent &&
        index !== minIndent
      ) {
        padding = tab
      } else {
        padding = ''
      }

      values[position] =
        padding + values[position].slice(index in stops ? stops[index] + 1 : 0)
    }
  }

  values.shift()

  return values.join(lineFeed)
  </applyIndentation>
}
</indentation>

<retrieveIndexValue>
function (indexName, key) {
  return new Promise((resolve, reject) => {
    <checkIndexCache>
    if (index[indexName]) {
      resolve(index[indexName][key] || null);
    } else {
    </checkIndexCache>
      <openIndex>
      debug("opening index %s", indexName);
      storage.openIndex(indexName).then(index => {
        index[indexName] = index;
        resolve(index[indexName][key] || null);
      });
      </openIndex>
    }
  });
}
</retrieveIndexValue>

<partitionObject>
function (obj, pred) {
  var t = {};
  var f = {};
  <partitionLogic>
  each(obj, function(x, i) {
    var branch = pred(x, i) ? t : f;
    branch[i] = x;
  });
  </partitionLogic>
  return {
    t: t,
    f: f
  };
}
</partitionObject>

<generateArtifact>
function generate (generatorName, name, flags) {
  let generator

  <generatorSelection>
  switch (generatorName) {
    case 'app':
      generator = new generators.App(name)
      break;
    case 'controller':
      generator = new generators.Controller(name, flags)
      break;
    case 'model':
      generator = new generators.Model(name, flags)
      break;
    case 'view':
      console.log(`generating view ${name} ...`)
      console.log('NotImplemented. View generation not yet available')
      break;
    case 'migration':
      generator = new generators.Migration(name, flags)
      break;
    case 'scaffold':
      console.log(`generating scaffold ${name} ...`)
      console.log('NotImplemented. Scaffold generation not yet available')
      break;
    case 'user':
      console.log(`generating user ${name} ...`)
      console.log('NotImplemented. User generation not yet available')
      break;
    default:
      if (!name) {
        return generate('app', generatorName)
      }
  }
  </generatorSelection>

  <runGenerator>
  if (!generator) {
    return cli.showHelp(0)
  }
  return generator.run()
  </runGenerator>
}
</generateArtifact>

<BaseTexture>
function BaseTexture(source, scaleMode, resolution)
{
  EventEmitter.call(this);

  <initialization>
  this.uuid = utils.uuid();
  this.resolution = resolution || 1;
  this.width = 100;
  this.height = 100;
  this.realWidth = 100;
  this.realHeight = 100;
  this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;
  this.hasLoaded = false;
  this.isLoading = false;
  this.source = null; 
  this.premultipliedAlpha = true;
  this.imageUrl = null;
  this.isPowerOfTwo = false;
  this.mipmap = false;
  this._glTextures = [];
  </initialization>

  <loadSource>
  if (source)
  {
      this.loadSource(source);
  }
  </loadSource>
}
</BaseTexture>

<initializeTracker>
function(config) {
    <initialSetup>
    this._timerID = null;
    this._timerDuration = 0;
    this.config = this._initializeConfig(config);
    this.requestOptions = this._initializeRequestOptions();
    this.serializedContextQueue = [];
    this.eventsBatchSize = 0;
    this.eventFormatter = _defaultEventFormatter;
    this.error = _err;
    </initialSetup>

    <bindMethods>
    this._enableTimer = utils.bind(this, this._enableTimer);
    this._disableTimer = utils.bind(this, this._disableTimer);
    this._initializeConfig = utils.bind(this, this._initializeConfig);
    this._initializeRequestOptions = utils.bind(this, this._initializeRequestOptions);
    this._validateMessage = utils.bind(this, this._validateMessage);
    this._initializeMetadata = utils.bind(this, this._initializeMetadata);
    this._initializeContext = utils.bind(this, this._initializeContext);
    this._makeBody = utils.bind(this, this._makeBody);
    this._post = utils.bind(this, this._post);
    this._sendEvents = utils.bind(this, this._sendEvents);
    this.send = utils.bind(this, this.send);
    this.flush = utils.bind(this, this.flush);
    </bindMethods>
}
</initializeTracker>

<installExtensions>
function installExtensions(extensions, dir, opt_excludeWebDriverExt) {
  var hasWebDriver = !!opt_excludeWebDriverExt;
  var next = 0;
  var extensionDir = path.join(dir, 'extensions');
  var done = promise.defer();

  <ensureExtensionDirExists>
  return io.exists(extensionDir).then(function(exists) {
    if (!exists) {
      return promise.checkedNodeCall(fs.mkdir, extensionDir);
    }
  }).then(function() {
    installNext();
    return done.promise;
  });
  </ensureExtensionDirExists>

  <installExtensionLogic>
  function installNext() {
    if (!done.isPending()) {
      return;
    }

    if (next >= extensions.length) {
      if (hasWebDriver) {
        done.fulfill(dir);
      } else {
        install(WEBDRIVER_EXTENSION_PATH);
      }
    } else {
      install(extensions[next++]);
    }
  }

  function install(ext) {
    extension.install(ext, extensionDir).then(function(id) {
      hasWebDriver = hasWebDriver || (id === WEBDRIVER_EXTENSION_NAME);
      installNext();
    }, done.reject);
 }
 </installExtensionLogic>
}
</installExtensions>

<onProgressEvent>
function ( type, text, numericalValue ) {
  var content = THREE.LoaderSupport.Validator.isValid( text ) ? text: '';
  var event = {
    detail: {
      type: type,
      modelName: this.modelName,
      instanceNo: this.instanceNo,
      text: content,
      numericalValue: numericalValue
    }
  };

  <dispatchEvent>
  if ( THREE.LoaderSupport.Validator.isValid( this.callbacks.onProgress ) ) this.callbacks.onProgress( event );
  </dispatchEvent>

  <debugLog>
  if ( this.logging.enabled && this.logging.debug ) console.debug( content );
  </debugLog>
}
</onProgressEvent>

<initializeRealtime>
async function initializeRealtime({ getApp, onCreate, onDelete, url, token }) {
  const realtimeConfig = { token, url }

  <setRealtimeSubscription>
  try {
    realtime
      .subscribe(realtimeConfig, APPS_DOCTYPE)
      <onRealtimeCreate>
      .onCreate(async app => {
        
        let fullApp
        try {
          fullApp = await getApp(app.slug)
        } catch (error) {
          throw new Error(`Cannot fetch app ${app.slug}: ${error.message}`)
        }

        if (typeof onCreate === 'function') {
          onCreate(fullApp)
        }
      })
      </onRealtimeCreate>
      <onRealtimeDelete>
      .onDelete(app => {
        if (typeof onDelete === 'function') {
          onDelete(app)
        }
      })
      </onRealtimeDelete>
  } catch (error) {
    console.warn(`Cannot initialize realtime in Cozy-bar: ${error.message}`)
  }
  </setRealtimeSubscription>
}
</initializeRealtime>
```