[["canResultsBeSummed", "\nfunction canResultsBeSummed(item) {\n  var result = true;\n  <checkCannotSumProperty>\n  if (defined(item.cannotSum)) {\n    if (typeof item.cannotSum === \"object\") {\n      var conceptItems = item._concepts[0].items;\n      conceptItems.forEach(concept => {\n        var valuesThatCannotDisplayPercent = item.cannotSum[concept.id];\n        if (defined(valuesThatCannotDisplayPercent)) {\n          var activeValueIds = concept.activeItems.map(\n            activeConcept => activeConcept.id\n          );\n          if (\n            valuesThatCannotDisplayPercent.some(\n              cannotValue => activeValueIds.indexOf(cannotValue) >= 0\n            )\n          ) {\n            result = false;\n          }\n        }\n      });\n    } else {\n      result = !item.cannotSum; \n    }\n  }\n  </checkCannotSumProperty>\n  return result;\n}\n"], ["constructPaths", "\nfunction constructPaths(xmlElement) {\n  <initializePath>\n  if (xmlElement['path'] == null) {\n    return ['*'];\n  }\n  </initializePath>\n\n  var paths = [];\n  <buildPaths>\n  xmlElement.path.some(function(pathElement) {\n    var url = pathElement['$']['url'];\n\n    \n    if (url === '*') {\n      paths = ['*'];\n      return true;\n    }\n\n    paths.push(url);\n  });\n  </buildPaths>\n\n  return paths;\n}\n"], ["createExternsFromConstructor", "\nfunction createExternsFromConstructor(className, constructorNode) {\n  <extractStatements>\n  var expressionStatements = getAllExpressionStatements(constructorNode);\n  </extractStatements>\n  var externString = '';\n\n  <createExternString>\n  expressionStatements.forEach(function(statement) {\n    var left = statement.expression.left;\n    var right = statement.expression.right;\n\n    \n    if (statement.expression.type != 'AssignmentExpression' ||\n        left.type != 'MemberExpression' ||\n        left.object.type != 'ThisExpression')\n      return;\n\n    console.assert(left);\n    console.assert(right);\n\n    \n    var comment = getLeadingBlockComment(statement);\n    if (!EXPORT_REGEX.test(comment))\n      return;\n\n    comment = removeExportAnnotationsFromComment(comment);\n\n    console.assert(left.property.type == 'Identifier');\n    var name = className + '.prototype.' + left.property.name;\n    externString += comment + '\\n' + name + ';\\n';\n  });\n  </createExternString>\n\n  return externString;\n}\n"], ["spin", "\nfunction spin(color, amount) {\n    <adjustHue>\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n    </adjustHue>\n}\n"], ["generateWMSURL", "\nfunction( wmsBaseUrl, queryOptions ) {\n\t\t<processBbox>\n    var bbox = queryOptions.bbox;\n\t\tif ( typeof bbox !== 'string' ) {\n\t\t\tbbox = this.extentToBbox( bbox.minx,\n\t\t\t\tbbox.miny,\n\t\t\t\tbbox.maxx,\n\t\t\t\tbbox.maxy );\n\t\t\tdelete queryOptions.bbox;\n\t\t}\n    </processBbox>\n\t\t<buildQueryOptions>\n    queryOptions = extend( {\n\t\t\trequest: 'GetMap',\n\t\t\tversion: this.version,\n\t\t\tservice: 'wms',\n\t\t\tformat: 'image/png',\n\t\t\tstyles: '',\n\t\t\twidth: '256',\n\t\t\theight: '256',\n\t\t\tbbox: bbox\n\t\t}, queryOptions );\n    </buildQueryOptions>\n\t\t<composeURL>\n    var url = new urijs( wmsBaseUrl ).addQuery( queryOptions );\n\t\treturn url.toString();\n    </composeURL>\n\t}\n"], ["flattenObject", "\nfunction flatten(object, options) {\n  <initialize>\n  var i, j, value, result, flattened = {};\n  options = options ||\u00a0{};\n  var check = options.check || isNotObject;\n  var separator = options.separator || '.';\n  var affix = options.affix ? separator + options.affix + separator : separator;\n  </initialize>\n\n  <flattenRecursively>\n  for (i in object) {\n    value = object[i]\n    if (check(value)) {\n      flattened[i] = value;\n      continue;\n    }\n    result = flatten(value, check);\n\n    if (Array.isArray(value)) {\n      for (j in result) {\n        flattened[(i + '[' + j + ']').split(affix).join(separator)] = result[j];\n      }\n    } else {\n      for (j in result) {\n        flattened[(i + separator + j).split(affix).join(separator)] = result[j];\n      }\n    }\n  }\n  </flattenRecursively>\n  return flattened;\n}\n"], ["loginHandlerFactory", "\nfunction login(options) {\n  <setHost>\n  const defaultHost = options.host;\n  </setHost> \n  return <generateLoginHandler> async function loginHandler(ctx) {\n    <setSession>\n    const loginCallbackPath = options.loginCallbackPath;\n    const loginPath = options.loginPath;\n    \n    if (ctx.session) {\n      ctx.session.userauthLoginReferer = formatReferer(ctx, loginPath, options.rootPath);\n      debug('set loginReferer into session: %s', ctx.session.userauthLoginReferer);\n    }\n    </setSession>\n\n    <redirectUser>\n    const host = defaultHost || ctx.host;\n    const protocol = options.protocol || ctx.protocol;\n    const currentURL = protocol + ':\n    const loginURL = options.loginURLFormatter(currentURL, options.rootPath, ctx);\n    debug('login redrect to loginURL: %s', loginURL);\n    redirect(ctx, loginURL);\n    </redirectUser>\n  };\n  </generateLoginHandler>\n}\n"], ["Logo", "\nfunction Logo () {\n  return (\n    <renderSvg>\n    <svg width=\"36px\" height=\"36px\" viewBox=\"0 0 134 134\">\n        \n        {...}\n        \n    </svg>\n    </renderSvg>\n  )\n}\n"], ["dataTypeValueGenerator", "\nfunction (dataType) {\n      \n      <evaluateGenExpression>\n      if (!dataType.defaultValue && dataType.genExpression) {\n        return this._evalExp(dataType.genExpression, dataType, this.ds);\n      }\n      </evaluateGenExpression>\n\n      <defaultValueSwitch>\n      switch (dataType.id.toString()) {\n        case '10001':\n          <getDefaultValue10001>\n          return dataType.defaultValue || this._getStr(null, null, dataType.name);\n          </getDefaultValue10001>\n        case '10002':\n          <getDefaultValue10002>\n          var num = parseFloat(dataType.defaultValue);\n          return isNaN(num) ? this._getNum(null, 0, dataType.name) : num;\n          </getDefaultValue10002>\n        case '10003':\n          <getDefaultValue10003>\n          var dv = dataType.defaultValue;\n          return dv ? !/(^false|0)$/i.test(dv.toLowerCase()) : this._getBool();\n          </getDefaultValue10003>\n        case '10000':\n          <getDefaultValue10000>\n          return this._getVar();\n          </getDefaultValue10000>\n        case '9999':\n          <getDefaultValue9999>\n          return null;\n          </getDefaultValue9999>\n        default:\n          return null;\n      }\n      </defaultValueSwitch>\n    }\n"], ["normalizePath", "\nfunction (path) {\n        <trimTrailingSlash>\n        if (path[path.length - 1] === '/') {\n            path = path.substr(0, path.length - 1);\n        }\n        </trimTrailingSlash>\n        return path;\n    }\n"], "```"]