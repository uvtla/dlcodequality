[["function_handleNodeOperations", "\nfunction(id, type) {\n    var node = OpenLayers.Util.getElement(id);\n    if (node) {\n        <nodeTypeComparison>\n        if (!this.nodeTypeCompare(node, type)) {\n            node.parentNode.removeChild(node);\n            node = this.nodeFactory(id, type);\n        }\n        </nodeTypeComparison>\n    } else {\n        node = this.createNode(type, id);\n    }\n    return node;\n}\n"], ["function_Splice", "\nfunction Splice(object, index, removed, addedCount) {\n    ChangeRecord.call(this, object, 'splice', String(index));\n    this.index = index;\n    this.removed = removed;\n    this.addedCount = addedCount;\n}\n"], ["function_at_type", "\nfunction at_type() {\n  match(/@type/);\n  add_tag(\"type\");\n  skip_horiz_white();\n  <typeDefinitionBranching>\n  if (look(/\\{/)) {\n    var tdf = typedef();\n    current_tag[\"type\"] = tdf[\"type\"];\n    current_tag[\"optional\"] = tdf[\"optional\"] ? true : false;\n  }\n  else if (look(/\\S/)) {\n    current_tag[\"type\"] = match(/\\S+/);\n  }\n  </typeDefinitionBranching>\n  skip_white();\n}\n"], ["function_combinePrefixPatterns", "\nfunction combinePrefixPatterns(regexs) {\n    <initializeVariables>\n    var capturedGroupIndex = 0;\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    </initializeVariables>\n    \n    <determineCaseFolding>\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n    </determineCaseFolding>\n\n    <charsetEscapeHandling>\n    function decodeEscape(charsetPart) {\n      ...\n    }\n    \n    function encodeEscape(charCode) {\n      ...\n    }\n\n    function caseFoldCharset(charSet) {\n      ...\n    }\n    </charsetEscapeHandling>\n\n    <regexGroupRenumbering>\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      ...\n    }\n    </regexGroupRenumbering>\n\n    <regexCombination>\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n    </regexCombination>\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n}\n"], ["function_renderChildrenAndGetHTML", "\nfunction() {\n    this.logger.log(\"completeRender: \" + this.index + \", # of children: \" + this.children.length);\n    var sb = [];\n\n    <accumulateChildrenHTML>\n    for (var i=0; i < this.children.length; ++i) {\n        sb[sb.length] = this.children[i].getHtml();\n    }\n    </accumulateChildrenHTML>\n\n    this.childrenRendered = true;\n\n    return sb.join(\"\");\n}\n"], ["function_setTableSelection", "\nfunction setTableSelection(table, rowData) {\n    if (table.isPanel) {\n        table = table.getView();\n    }\n    var model = this.findRecord(table.getStore(), rowData);\n\n    table.setSelection(model);\n}\n"], ["function_replaceExt", "\nfunction replaceExt(fpath, newExt) {\n  const oldExt = path.extname(fpath);\n  return _nativeExt.includes(oldExt) ? fpath :\n    path.join(path.dirname(fpath), path.basename(fpath, oldExt) + newExt);\n}\n"], ["function_match", "\nfunction match (route) {\n  assert.equal(typeof route, 'string')\n\n  return route.trim()\n    .replace(/[\\?|#].*$/, '')\n    .replace(/^(?:https?\\:)\\/\\\n    .replace(/^.*?(\\/.*)/, '$1')\n    .replace(/\\/$/, '')\n}\n"], ["function_handleMouseEvent", "\nfunction( e ){\n\n    e.preventDefault();\n\n    document.removeEventListener( 'mouseup', this, false );\n    if(this.isDrag) document.removeEventListener( 'mousemove', this, false );\n\n    <handleEditableTarget>\n    if(this.current !== undefined){ \n\n        if( this.current === parseFloat(e.target.name) ){ \n            e.target.contentEditable = true;\n            e.target.focus();\n        }\n\n    }\n    </handleEditableTarget>\n\n}\n"], ["function_checkCache", "\nfunction checkCache() {\n    <cacheStatusInitialization>\n    if(cache) {\n\t    cacheStatusValues[0] = 'uncached';\n\t    cacheStatusValues[1] = 'idle';\n\t    cacheStatusValues[2] = 'checking';\n\t    cacheStatusValues[3] = 'downloading';\n\t    cacheStatusValues[4] = 'updateready';\n\t    cacheStatusValues[5] = 'obsolete';\n    </cacheStatusInitialization>\n    \n    <cacheEventHandling>\n\t    cache.addEventListener('cached', logEvent, false);\n\t    cache.addEventListener('checking', logEvent, false);\n\t    cache.addEventListener('downloading', logEvent, false);\n\t    cache.addEventListener('error', logEvent, false);\n\t    cache.addEventListener('noupdate', logEvent, false);\n\t    cache.addEventListener('obsolete', logEvent, false);\n\t    cache.addEventListener('progress', logEvent, false);\n\t    cache.addEventListener('updateready', logEvent, false);\n    </cacheEventHandling>\n}\n"], "```"]