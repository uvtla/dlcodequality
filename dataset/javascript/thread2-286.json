[["uniqueArray", "\nfunction uniqueArray(item) {\n  const u = {};\n  <arrayDeduplication>\n  const newArray = [];\n  for (let i = 0, l = item.length; i < l; ++i) {\n    if (!{}.hasOwnProperty.call(u, item[i])) {\n      newArray.push(item[i]);\n      u[item[i]] = 1;\n    }\n  }\n  </arrayDeduplication>\n  return newArray;\n}\n"], ["parseXMLNode", "\nfunction parseXMLNode(node) {\n  <initializeParsedNode>\n  const parsedNode = {\n    attributes: {},\n    children: {},\n    value: {},\n  };\n\n  parsedNode.value = parseNodeValue(node);\n  </initializeParsedNode>\n\n  <parseAttributes>\n  if (node.attributes) {\n    [...node.attributes].forEach((nodeAttr) => {\n      if (nodeAttr.nodeName && nodeAttr.nodeValue !== undefined && nodeAttr.nodeValue !== null) {\n        parsedNode.attributes[nodeAttr.nodeName] = nodeAttr.nodeValue;\n      }\n    });\n  }\n  </parseAttributes>\n\n  <parseChildren>\n  if (node.childNodes) {\n    [...node.childNodes]\n      .filter((childNode) => childNode.nodeName.substring(0, 1) !== '#')\n      .forEach((childNode) => {\n        parsedNode.children[childNode.nodeName] = parseXMLNode(childNode);\n      });\n  }\n  </parseChildren>\n\n  return parsedNode;\n}\n"], ["playerStats", "\nfunction playerStats(playerID) {\n  <initializePlayerInfo>\n\tconst apiBase = 'https://example.api.com';\n\tconst playerInfoJson = {/*JSON data structure*/};\n  </initializePlayerInfo>\n  <performApiRequests>\n\treturn new Promise(function (resolve, reject) {\n\t\trequest(apiBase, function (err, res) {/* main api request logic */});\n\t});\n  </performApiRequests>\n}\n"], ["RenderComponent", "\nfunction() {\n  <invokeSuperclassRender>\n  inputEx.MultiSelectField.superclass.renderComponent.call(this);\n  </invokeSuperclassRender>\n  \n  <createListCustomWidget>\n  this.ddlist = new inputEx.widget.ListCustom({/*widget options*/});\n  </createListCustomWidget>\n}\n"], ["nominalLoad", "\nfunction nominalLoad(){\n  <constructAndLoadSnapshot>\n\tvar ARObject = constructAggregate();\n\treturn when.try(snapshotter.loadSnapshot.bind(snapshotter), /*args*/).then(function _applySnapshot(snapshot){/*apply logic*/});\n  </constructAndLoadSnapshot>\n"], ["loadFile", "\nfunction loadFile(fileName, options) {\n  <initializeDeferredAndFileObject>\n  var deferred         = new $.Deferred(),\n      file             = FileSystem.getFileForPath(fileName),\n      currentThemeName = prefs.get(\"theme\");\n  </initializeDeferredAndFileObject>\n  <checkFileAndLoadTheme>\n  file.exists(function (err, exists) {\n    /* logic for checking file existence and loading theme */\n  });\n  </checkFileAndLoadTheme>\n  return deferred.promise();\n}\n"], ["nthRootExponent", "\nfunction nthRootExponent(node) {\n  <initializeAndProcessExponents>\n  let newNode = clone(node);\n  /* logic for processing nth root exponent */\n  </initializeAndProcessExponents>\n  return Node.Status.noChange(node);\n}\n"], ["uninitializeComponents", "\nfunction (id) {\n  <prepareComponentsList>\n  var uninit = [], c = 0, ul, \n  i = 0, l, comps, comp;\n  /* logic for creating a list of components to uninitialize */\n  </prepareComponentsList>\n  <uninitializeAndTrigger>\n  ul = uninit.length;\n  /* logic for uninitializing components */\n  </uninitializeAndTrigger>\n  return this;\n}\n"], ["decodeData", "\nfunction(data, encoding) {\n  <setDefaultEncoding>\n  if (encoding == null) {\n    encoding = 'hex';\n  }\n  </setDefaultEncoding>\n  <validateAndDecodeInput>\n  if (Array.isArray(data)) {\n    return data;\n  }\n  switch (encoding) {\n    /* cases to decode data based on encoding */\n    default:\n      throw new Error(\"Encoding not supported\");\n  }\n  </validateAndDecodeInput>\n}\n"], ["processDir", "\nfunction processDir (err) {\n  <handleErrorOrLogSuccess>\n  if (err) {\n    /* handle error scenario */\n  } else {\n    /* log success message */\n  }\n  </handleErrorOrLogSuccess>\n  <proceedToNextDirectoryOrCallback>\n  ++index;\n  /* logic to continue processing or invoke callback */\n  </proceedToNextDirectoryOrCallback>\n}\n"], "```"]