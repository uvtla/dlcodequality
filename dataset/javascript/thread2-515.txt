<ws_receive>
function ws_receive(raw) {
    <parse_raw_data>
    let data = unpack(raw); 
    let fin = (data[0] & 128) == 128;
    let opcode = data[0] & 15;
    let isMasked = (data[1] & 128) == 128;
    let dataLength = data[1] & 127;
    let start = 2;
    let length = data.length;
    let output = "";
    </parse_raw_data>
    
    <determine_start_index>
    if (dataLength == 126)
        start = 4;
    else if (dataLength == 127)
        start = 10;
    </determine_start_index>
        
    <mask_or_process_data>
    if (isMasked) {
        let i = start + 4;
        let masks = data.slice(start, i);
        let index = 0;
    
        while (i < length) {
            output += String.fromCharCode(data[i++] ^ masks[index++ % 4]);
        }
    } else {
        let i = start;
        while (i < length) {
            output += String.fromCharCode(data[i++]);
        }
    }
    </mask_or_process_data>

    return output;
}
</ws_receive>

<cloneWith>
function cloneWith(value, customizer) {
    customizer = typeof customizer == 'function' ? customizer : undefined;
    return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
}
</cloneWith>

<event_handler>
function(event) {
    <handle_navigation_condition>
    var history, hash;
    if (!$.event.special.navigate.isHashChangeEnabled() ||
        $.event.special.navigate.isPushStateEnabled()) {
        return;
    }
    </handle_navigation_condition>

    <prevent_next_hash_change>
    if (this.preventNextHashChange) {
        this.preventNextHashChange = false;
        event.stopImmediatePropagation();
        return;
    }
    </prevent_next_hash_change>

    <setup_history_and_hash>
    history = this.history;
    hash = path.parseLocation().hash;
    </setup_history_and_hash>

    <direct_history_access>
    this.history.direct({
        url: hash,

        present: function(historyEntry, direction) {
            event.hashchangeState = $.extend({}, historyEntry);
            event.hashchangeState.direction = direction;
        },
        
        missing: function() {
            history.add(hash, {
                hash: hash,
                title: document.title
            });
        }
    });
    </direct_history_access>
}
</event_handler>

<createInjector>
function createInjector(defType, parent, additionalProviders) {
    if (parent === void 0) { parent = null; }
    if (additionalProviders === void 0) { additionalProviders = null; }
    parent = parent || getNullInjector();
    return new R3Injector(defType, additionalProviders, parent);
}
</createInjector>

<isPointInsidePoly>
function isPointInsidePoly(point, polygon) {
    let i,
        nvert = polygon.length,
        j = nvert - 1,
        c = false;
    for (i = 0; i < nvert; j = i++) {
        if (((polygon[i].lon > point.lon) !== (polygon[j].lon > point.lon)) &&
            (point.lat < (polygon[j].lat - polygon[i].lat) * (point.lon - polygon[i].lon) /
            (polygon[j].lon - polygon[i].lon) + polygon[i].lat)) {
            c = !c;
        }
    }
    return c;
}
</isPointInsidePoly>

<update_value_based_on_collection>
function(argument_value) {
    <check_value_is_collection>
    if (argument_value.isCollection) {
        <cleanup_on_own_collection>
        if (this._own_collection) {
            this._value.destroy();
            this._own_collection = false;
            this._value = null;
        }
        </cleanup_on_own_collection>

        <assign_new_value>
        if (this._value != argument_value) {
            this._value = argument_value;
            this._fire('new_enumerable');
        }
        </assign_new_value>

    } else <refresh_or_create_collection>
    if (this._own_collection) {
        this._value.refreshFromDataSource(argument_value);
    } else {
        this._createCollection(argument_value);
    }
    </refresh_or_create_collection>
}
</update_value_based_on_collection>

<getPackageMetaFile>
function getPackageMetaFile(answers) {
    <construct_package_metadata>
    const packageFields = ['name', 'version', 'license', 'category'];
    const packageObject = merge(pick(packageFields, answers),
        { dependencies: { 'rung-cli': '1.0.0' } });
    </construct_package_metadata>

    <create_package_file>
    return {
        filename: path.join(answers.name, 'package.json'),
        content: JSON.stringify(packageObject, null, 2)
    };
    </create_package_file>
}
</getPackageMetaFile>

<MemoryStore_constructor>
function MemoryStore(options) {
    <configure_memory_store>
    options = options || {};
    options.max = Number(options.max);
    if (isNaN(options.max)) options.max = DEFAULT_MAX;
    this._max = options.max;

    options.gcProbability = Number(options.gcProbability);
    if (isNaN(options.gcProbability)) options.gcProbability = DEFAULT_PROBABILITY;
    this._gcProbability = options.gcProbability;

    debug('init: max=%s, gcProbability=%s', this._max, this._gcProbability);

    this._keys = {};
    this._keyTotal = 0;
    </configure_memory_store>

    return this;
}
</MemoryStore_constructor>

<apply_data_view_to_elements>
function(selector, args, cb) {
    <initialize_selector_and_args>
    selector = selector || document;
    args = args || {};
    </initialize_selector_and_args>
    
    <create_views_for_elements>
    var self = this;
    $(selector).find('*[data-view]').each(function() {
        var viewArgs = _.extend({}, args);
        viewArgs.el = this;
        self.getComponent('viewManager').createView($(this).data('view'), viewArgs)
            .then(cb);
    });
    </create_views_for_elements>
}
</apply_data_view_to_elements>

<apiId_flow>
function(apiId) {
    <fetch_and_process_existing_stages>
    return module.exports.fetchExistingStages(apiId).then(function(stages) {
        if (!stages || stages.length === 0) {
            return module.exports.deleteAPI(apiId);
        }
        return apiId;
    });
    </fetch_and_process_existing_stages>
}
</apiId_flow>