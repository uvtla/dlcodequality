```javascript
<resolvePluginPath>
function resolvePluginPath(config, file, mdirs) {
  if (_lodash2.default.size(config.plugins)) {
    config.plugins = _lodash2.default.reduce(config.plugins, (res, p, k) => {
      if (!_path2.default.isAbsolute(p)) {
        if (p[0] === '.') {
          p = _path2.default.join(file, p);
        } else {
          for (let dir of mdirs) {
            p = _path2.default.join(dir, p);
            if ((0, _utils.isDirectory)(p)) {
              break;
            }
          }
        }
      }
      res[k] = p;
      return res;
    }, {});
  }
}
</resolvePluginPath>

<getConstructor>
function getConstructor(type, strict) {
  var result = register.classes[type.qualifiedType] || register.abstracts[type.qualifiedType] ||
    register.classes[type.type] || register.abstracts[type.type] ||
    register.classes[type] || register.abstracts[type];
  if (result) return result;

  if (type.hierarchy != undefined) {
    for (var i = 0; i <= type.hierarchy.length - 1; i++) {
      var result = register.classes[type.hierarchy[i]] || register.abstracts[type.hierarchy[i]];
      if (result) return result;
    };
  }
  if (strict) {
    var error = new SyntaxError("Unknown type '" + type + "'")
    error.type = type

    throw error
  }

  console.warn("Unknown type '", type, "', using MediaObject instead");
  return register.abstracts.MediaObject;
}
</getConstructor>

<processArcXMLResponse>
function processArcXMLResponse(data) {
  <parseData>
  if (typeof data == "string") {
    var newData = new OpenLayers.Format.XML();
    data = newData.read(data);
  }
  </parseData>
  var response = new OpenLayers.Format.ArcXML.Response();

  <parseErrorNode>
  var errorNode = data.getElementsByTagName("ERROR");

  if (errorNode != null && errorNode.length > 0) {
    response.error = this.getChildValue(errorNode, "Unknown error.");
  } 
  </parseErrorNode>
  else {
    <parseResponseNode>
    var responseNode = data.getElementsByTagName("RESPONSE");
    
    if (responseNode == null || responseNode.length == 0) {
      response.error = "No RESPONSE tag found in ArcXML response.";
      return response;
    }
    
    var rtype = responseNode[0].firstChild.nodeName;
    if (rtype == "#text") {
      rtype = responseNode[0].firstChild.nextSibling.nodeName;
    }
    </parseResponseNode>
    
    <parseBasedOnResponseType>
    if (rtype == "IMAGE") {
      <parseImageResponse>
      var envelopeNode = data.getElementsByTagName("ENVELOPE");
      var outputNode = data.getElementsByTagName("OUTPUT");
      
      if (envelopeNode == null || envelopeNode.length == 0) {
        response.error = "No ENVELOPE tag found in ArcXML response.";
      } else if (outputNode == null || outputNode.length == 0) {
        response.error = "No OUTPUT tag found in ArcXML response.";
      } else {
        var envAttr = this.parseAttributes(envelopeNode[0]);
        var outputAttr = this.parseAttributes(outputNode[0]);

        if (typeof outputAttr.type == "string") {
          response.image = {
            envelope: envAttr,
            output: {
              type: outputAttr.type,
              data: this.getChildValue(outputNode[0])
            }
          };
        } else {
          response.image = { envelope: envAttr, output: outputAttr };
        }
      }
      </parseImageResponse>
    } else if (rtype == "FEATURES") {
      <parseFeaturesResponse>
      var features = responseNode[0].getElementsByTagName("FEATURES");
  
      var featureCount = features[0].getElementsByTagName("FEATURECOUNT");
      response.features.featurecount = featureCount[0].getAttribute("count");
  
      if (response.features.featurecount > 0) {
        var envelope = features[0].getElementsByTagName("ENVELOPE");
        response.features.envelope = this.parseAttributes(envelope[0], typeof(0));
        
        var featureList = features[0].getElementsByTagName("FEATURE");
        for (var fn = 0; fn < featureList.length; fn++) {
          var feature = new OpenLayers.Feature.Vector();
          var fields = featureList[fn].getElementsByTagName("FIELD");

          for (var fdn = 0; fdn < fields.length; fdn++) {
            var fieldName = fields[fdn].getAttribute("name");
            var fieldValue = fields[fdn].getAttribute("value");
            feature.attributes[fieldName] = fieldValue;
          }

          var geom = featureList[fn].getElementsByTagName("POLYGON");

          if (geom.length > 0) {
            var ring = geom[0].getElementsByTagName("RING");

            var polys = [];
            for (var rn = 0; rn < ring.length; rn++) {
              var linearRings = [];
              linearRings.push(this.parsePointGeometry(ring[rn]));

              var holes = ring[rn].getElementsByTagName("HOLE");
              for (var hn = 0; hn < holes.length; hn++) {
                linearRings.push(this.parsePointGeometry(holes[hn]));
              }
              holes = null;
              polys.push(new OpenLayers.Geometry.Polygon(linearRings));
              linearRings = null;
            }
            ring = null;

            if (polys.length == 1) {
              feature.geometry = polys[0];
            } else {
              feature.geometry = new OpenLayers.Geometry.MultiPolygon(polys);
            }
          }

          response.features.feature.push(feature);
        }
      }
      </parseFeaturesResponse>
    } else {
      response.error = "Unidentified response type.";
    }
    </parseBasedOnResponseType>
  }
  return response;
}
</processArcXMLResponse>

<reformatFormIdAndName>
function reformatFormIdAndName(submission) {
  var formName = "Unknown";
  <determineFormName>
  if (submission && submission.formId && submission.formId.name) {
    formName = submission.formId.name;
  }

  if (submission && submission.formSubmittedAgainst) {
    formName = submission.formSubmittedAgainst.name;
  }
  </determineFormName>

  <finalizeSubmission>
  submission.formName = formName;
  submission.formId = submission.formId.toString();
  </finalizeSubmission>
  
  return submission;
}
</reformatFormIdAndName>

<initialize>
function initialize() {
  <parseScriptArguments>
  var scripts = document.getElementsByTagName('script');
  var src = (scripts[scripts.length - 1] || {}).src || '';
  var arg = src.indexOf('?') !== -1 ? src.split('?').pop() : '';
  arg.replace(/(\w+)(?:=([^&]*))?/g, function(a, key, value) {
    settings[key] = (value || '').replace(/^(0|false)$/, '');
  });
  </parseScriptArguments>

  <addEventListeners>
  addEvent(eventNamePrefix + 'hashchange', onHashChange, false);
  </addEventListeners>

  <configureAPI>
  var data = [locationDescriptors, locationObject, eventsDescriptors, global, historyDescriptors, historyObject];

  if (isSupportStateObjectInHistory) {
    delete historyDescriptors['state'];
  }
  
  for(var i = 0; i < data.length; i += 2) {
    for(var prop in data[i]) {
      if (data[i].hasOwnProperty(prop)) {
        if (typeof data[i][prop] !== 'object') {
          data[i + 1][prop] = data[i][prop];
        } else {
          var descriptor = prepareDescriptorsForObject(data[i], prop, data[i][prop]);
          if (!redefineProperty(data[i + 1], prop, descriptor, function(n, o) {
            if (o === historyObject) {
              global.history = historyObject = data[i + 1] = n;
            }
          })) {
            removeEvent(eventNamePrefix + 'hashchange', onHashChange, false);
            return false;
          }

          if (data[i + 1] === global) {
            eventsList[prop] = eventsList[prop.substr(2)] = [];
          }
        }
      }
    }
  }

  historyObject['setup']();

  if (settings['redirect']) {
    historyObject['redirect']();
  }

  if (settings["init"]) {
    isUsedHistoryLocationFlag = 1;
  }
  </configureAPI>

  <handleUnsupportedHistoryAPI>
  if (!isSupportStateObjectInHistory && JSON) {
    storageInitialize();
  }

  if (!isSupportHistoryAPI) {
    document[addEventListenerName](eventNamePrefix + "click", onAnchorClick, false);
  }
  </handleUnsupportedHistoryAPI>

  <finalizeInitialization>
  if (document.readyState === 'complete') {
    onLoad(true);
  } else {
    if (!isSupportHistoryAPI && parseURL()._relative !== settings["basepath"]) {
      isFireInitialState = true;
    }
    addEvent(eventNamePrefix + 'load', onLoad, false);
  }
  </finalizeInitialization>

  return true;
}
</initialize>

<jsonInit>
function jsonInit() {
  this.jsonInit({
    "message0": Blockly.Msg.LOOKS_GOTOFRONTBACK,
    "args0": [
      {
        "type": "field_dropdown",
        "name": "FRONT_BACK",
        "options": [
          [Blockly.Msg.LOOKS_GOTOFRONTBACK_FRONT, 'front'],
          [Blockly.Msg.LOOKS_GOTOFRONTBACK_BACK, 'back']
        ]
      }
    ],
    "category": Blockly.Categories.looks,
    "extensions": ["colours_looks", "shape_statement"]
  });
}
</jsonInit>

<bytes2base64>
function bytes2base64(buffer) {
  var str = '';
  var length;
  var i;
  <convertBufferToString>
  if (buffer instanceof ArrayBuffer) {
    length = buffer.byteLength;
    var view = new DataView(buffer, 0, length);
    for (i = 0; i < length; i++) {
      str += String.fromCharCode(view.getUint8(i, false));
    }
  }
  else if (buffer.length) {
    length = buffer.length;
    for (i = 0; i < length; i++) {
      str += String.fromCharCode(buffer[i]);
    }
  }
  </convertBufferToString>
  return btoa(str);
}
</bytes2base64>

<createWrappedRange>
function createWrappedRange(bookmark, paras) {
  var so = bookmark.s.offset;
  var eo = bookmark.e.offset;
  var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);
  var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);

  return new WrappedRange(sc, so, ec, eo);
}
</createWrappedRange>

<processNewMessage>
function processNewMessage(msg, mailMessage) {
  <assignMailMessageData>
  msg.payload = mailMessage.text;
  msg.topic = mailMessage.subject;
  msg.date = mailMessage.date;
  msg.header = mailMessage.headers;
  if (mailMessage.html) {
    msg.html = mailMessage.html;
  }
  </assignMailMessageData>
  <assignRecipientInfo>
  if (mailMessage.to && mailMessage.to.length > 0) {
    msg.to = mailMessage.to;
  }
  if (mailMessage.cc && mailMessage.cc.length > 0) {
    msg.cc = mailMessage.cc;
  }
  if (mailMessage.bcc && mailMessage.bcc.length > 0) {
    msg.bcc = mailMessage.bcc;
  }
  </assignRecipientInfo>
  <assignSenderInfo>
  if (mailMessage.from && mailMessage.from.length > 0) {
    msg.from = mailMessage.from[0].address;
  }
  </assignSenderInfo>
  <handleAttachments>
  if (mailMessage.attachments) {
    msg.attachments = mailMessage.attachments;
  } else {
    msg.attachments = [];
  }
  </handleAttachments>
  n.send(msg); 
}
</processNewMessage>

<AppConstructor>
function App(options) {
  if (!(this instanceof App)) {
    return new App(options);
  }

  <validateOptions>
  if (options.host === undefined || options.port === undefined) {
    var err = new Error('host and port are required to connect');
    err.code = constants.InvalidRequest;
    throw err;
  }
  </validateOptions>

  <setImmutableProperties>
  this.sdkVersion = '1.0.1';
  Object.defineProperty(this, "sdkVersion", { writable: false });

  this.host = options.host;
  Object.defineProperty(this, "host", { writable: false });

  this.port = options.port;
  Object.defineProperty(this, "port", { writable: false });
  </setImmutableProperties>

  <initializeProperties>
  this.authData = null;

  this.acls = null;

  this.lastCts = 0;

  this.operationQueue = [];
  this.queueDraining = false;

  this.listeners = [];

  this.advanceScheduled = {};

  this.rvtsDict = {};

  this.memoryDB = {};
  this.vtsIndex = {};
  </initializeProperties>

  <initializeTransport>
  this.transport = new Transport(this, this.host, this.port);
  this.transport.token = options.token || null;
  if (options.useSSL === false) {
    this.transport.useSSL = false;
  }
  </initializeTransport>
}
</AppConstructor>
```