[["function1", "\nfunction (options, onConnect) {\n    var self = this;\n    EventEmitter.call(this);\n\n    this.options = options;\n\n    \n    this.debug_enabled = options.debug;\n    this.handshook = false;\n\n    \n    this.data = '';\n\n    \n    <connectCallback>\n    var cb = function () {\n        connected.call(self);\n        onConnect.call(self);\n    };\n    </connectCallback>\n    \n    <establishConnection>\n    if (options.path) {\n        this.debug(\"Trying to establish connection to unix socket %s\", options.path);\n        this.client = net.connect(options.path, cb);\n    } else {\n        this.debug(\"Trying to establish connection to %s on port %s\", options.host, options.port);\n        this.client = net.connect(options.port, options.host, cb);\n    }\n    </establishConnection>\n\n    \n    <dataProvider>\n    this.client.on('data', function (data) {\n        var obj = dezeusify.call(self, data.toString('utf8'));\n        obj.forEach(function (item) {\n            received.call(self, item);\n        });\n    });\n    </dataProvider>\n\n    \n    <handleDisconnection>\n    this.client.on('end', function () {\n        disconnected.call(self);\n    });\n    </handleDisconnection>\n\n    <handleConnectionError>\n    this.client.on('error', function (err) {\n        self.debug(\"Whoops, an error occurred: %s\", err.message);\n        throw new Error(util.format(\"A connection error occurred: %s\", err.message));\n    });\n    </handleConnectionError>\n\n    \n    <eventListenerManagement>\n    this.on('newListener', function (evt) {\n        this.debug(\"A new event listener was added\");\n        if (evt.toUpperCase() === evt && !this.subscribedEvents.indexOf(evt) !== -1) {\n            subscribeServerEvent.call(self, evt);\n        }\n    });\n    </eventListenerManagement>\n\n    this.subscribedEvents = [];\n    this.waitingCallbacks = [];\n}\n"], ["function2", "\nfunction() {\n    gui.Broadcast.dispatch(gui.BROADCAST_WILL_SPIRITUALIZE);\n    this._spiritualizeinitially();\n    gui.Broadcast.dispatch(gui.BROADCAST_DID_SPIRITUALIZE);\n}\n"], ["function3", "\nfunction (model, options) {\n    <indexModel>\n    this._index(model);\n    </indexModel>\n    <attachCollectionToModel>\n    if (!model.collection) model.collection = this;\n    </attachCollectionToModel>\n    <attachEventToModel>\n    if (model.on) model.on('all', this._onModelEvent, this);\n    </attachEventToModel>\n}\n"], ["function4", "\nfunction(){\n    var self = this;\n\n    \n    <stateRequirementCheck>\n    self.requireMinState( munit.ASSERT_STATE_SETUP, self.log );\n    self.requireMaxState( munit.ASSERT_STATE_TEARDOWN, self.log );\n    </stateRequirementCheck>\n\n    \n    <logMessage>\n    self._logs.push( Slice.call( arguments ) );\n    </logMessage>\n\n    return self;\n}\n"], ["function5", "\nfunction init(loader) {\n    <loaderSetup>\n    var loaderConfig = loaderUtils.getLoaderConfig(loader, 'web3Loader');\n    web3 = require('./lib/web3')(loaderConfig.provider);\n    config = mergeConfig(loaderConfig);\n    </loaderSetup>\n    <debugFlagSetup>\n    isDebug = loader.debug;\n    </debugFlagSetup>\n}\n"], ["function6", "\nfunction (worldWindow) {\n    \n    this.wwd = worldWindow;\n\n    this.roundGlobe = this.wwd.globe;\n\n    <createProjectionSelection>\n    this.createProjectionList();\n    $(\"#projectionDropdown\").find(\" li\").on(\"click\", function (e) {\n        thisExplorer.onProjectionClick(e);\n    });\n    </createProjectionSelection>\n\n    <layerListSynchronization>\n    this.synchronizeLayerList();\n    </layerListSynchronization>\n\n    <setupSearchInteractivity>\n    $(\"#searchBox\").find(\"button\").on(\"click\", function (e) {\n        thisExplorer.onSearchButton(e);\n    });\n\n    this.geocoder = new WorldWind.NominatimGeocoder();\n    this.goToAnimator = new WorldWind.GoToAnimator(this.wwd);\n    $(\"#searchText\").on(\"keypress\", function (e) {\n        thisExplorer.onSearchTextKeyPress($(this), e);\n    });\n    </setupSearchInteractivity>\n}\n"], ["function7", "\nfunction() {\n    var baseInfo = this.callSuper('toObject');\n    \n    <extensionWithSpecificProperties>\n    var o = extend(baseInfo, {\n        path: this.path\n    });\n    if (this.sourcePath) {\n        o.sourcePath = this.sourcePath;\n    }\n    if (this.transformMatrix) {\n        o.transformMatrix = this.transformMatrix;\n    }\n    </extensionWithSpecificProperties>\n    \n    return o;\n}\n"], ["function8", "\nfunction(obj) {\n    <deepClone>\n    var objType = this.objectType(obj);\n    if(objType == \"array\" || objType == \"object\") {\n      var clone = (objType == \"array\")? [] : {};\n      for(var key in obj) {\n        var val = obj[key];\n        clone[key] = this.deepClone(val);\n      }\n      return clone;\n    }\n    else {\n      return obj;\n    }\n    </deepClone>\n}\n"], ["function9", "\nfunction (result) {\n    item.done = true;\n    \n    <clearTimeoutOnResult>\n    if (timeout_trigger) {\n        clearTimeout(timeout_trigger);\n        timeout_trigger = undefined;\n    }\n    </clearTimeoutOnResult>\n    \n    <processFailureResult>\n    if (result === false) {\n        that.all_passed = false;\n        \n        <triggerEarlyCompletion>\n        if (item.keep === false)\n            return that.done();\n        </triggerEarlyCompletion>\n    }\n    </processFailureResult>\n    \n    <processNextItem>\n    that.curr++;\n    that.next();\n    </processNextItem>\n}\n"], ["function10", "\nfunction Logger(opt) {\n    \n    <loggerInitialization>\n    var self = {};\n    var defaultOptions = {...};\n\n    var init = function(opt) {...};\n    var getInstance = function(opt) {...};\n    var setDefaultLevels = function() {...};\n\n    init(opt);\n    </loggerInitialization>\n    \n    <loggingCapabilityExtension>\n    self.setLevels = function(levels) {...};\n    self.getLogger = function(details) {...};\n    self.log = function() {...};\n    </loggingCapabilityExtension>\n    \n    return self\n}\n"], "```"]