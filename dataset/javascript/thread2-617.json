[["isKeyComparator", "\nfunction isKeyComparator(arg) {\n  let result = __getParameterCount(arg) === 2;\n  const first = self.first();\n  try {\n    const key = keySelector(first);\n    result = result && arg(key, key) && !arg(key, {});\n  }\n  catch (err) {\n    result = false;\n  }\n  return result;\n}\n"], ["log", "\nfunction log(value, title, configs) {\n  var isFmt;\n  function getIsFmt(configs) { /* Helper function, not a separate responsibility */\n    return has(configs, 'isFmt', 'bol') ? configs.isFmt : true;\n  };\n  function getTitle(configs) { /* Helper function, not a separate responsibility */\n    return get(configs, 'title', 'str') || 'funclib(' + version + ')';\n  };\n  /* The block of code below collectively adjusts and formats the title and configuration, unified under the responsibility of configuring and formatting the log message */\n  if (typeVal(title, 'str')) {\n    if (isBol(configs)) {\n      isFmt = configs, configs = {};\n    } else {\n      isFmt = getIsFmt(configs);\n    }\n  }\n  else if (isBol(title)) {\n    isFmt = title, title = getTitle(configs);\n  }\n  else if (isObj(title)) {\n    configs = title, isFmt = getIsFmt(configs), title = getTitle(configs);\n  }\n  else {\n    isFmt = true;\n    title = 'funclib(' + version + ')';\n  }\n  value = pretty(value);\n  var isShowTime = has(configs, 'isShowTime') ? !!configs.isShowTime : true;\n  var _time = fmtDate('hh:mm:ss', new Date());\n  var time = isShowTime ? '[' + _time + '] ' : '';\n  title = title.replace(/\\n/mg, '');\n  var originTtLength = (time + title + '[] ').length;\n  if (!isFmt) {\n    title = '( ' + title + ' )';\n  }\n  if (time) {\n    time = '[' + chalk(_time, 'grey') + '] ';\n  }\n  var valuec = get(configs, 'color');\n  var titlec = get(configs, 'ttColor');\n  value = chalk(value, has(colorList, valuec) ? valuec : 'cyan');\n  title = chalk(title, has(colorList, titlec) ? titlec : 'default');\n  title = time + title;\n  var width = get(configs, 'width', 'num');\n  if (!width || width < 30 || width > 100) width = 66;\n  if (originTtLength > width) {\n    var colorEnd = '\\x1B[0m';\n    var fixLength = title.length - originTtLength - colorEnd.length;\n    title = cutString(title, width + fixLength - 3) + colorEnd;\n  }\n  else if (isFmt) {\n    title = array((width - originTtLength) / 2, ' ').join('') + title;\n  }\n  var isSplit = has(configs, 'isSplit', 'bol') ? configs.isSplit : true;\n  if (!isFmt) {\n    var logMsg = title + ':\\n' + value;\n    console.log(isSplit ? '\\n' + logMsg + '\\n' : logMsg);\n  }\n  else {\n    var sgLine_1 = '', dbLine_1 = '';\n    for(var i = 0; i < width; i ++ ) { sgLine_1 += '-', dbLine_1 += '='; };\n    if (get(configs, 'pre', 'bol')) {\n      console.log('\\n' + dbLine_1);\n      console.log(title);\n      console.log(sgLine_1);\n    }\n    else if (get(configs, '/end', 'bol')) {\n      console.log(dbLine_1 + '\\n');\n    }\n    else {\n      console.log(isSplit ? '\\n' + dbLine_1 : dbLine_1);\n      console.log(title);\n      console.log(sgLine_1);\n      console.log(value);\n      console.log(isSplit ? dbLine_1 + '\\n' : dbLine_1);\n    }\n  }\n}\n"], ["initExpress", "\nfunction initExpress (config) {\n  config.express.disable('x-powered-by')\n  config.express.enable('strict routing')\n  config.express.enable('case sensitive routing')\n  \n  <setupAssets>\n  _.each(_.reverse(config.dir.assets), dir => {\n    config.express.use('/assets', express.static(dir))\n  })\n  </setupAssets>\n  \n  <setupMiddlewares>\n  config.express.use(requestIdMiddleware)\n  config.express.use(bodyParser.json())\n  config.express.use(bodyParser.urlencoded({ extended: true }))\n  config.express.use(cookieParser())\n  </setupMiddlewares>\n  \n  <setupLogging>\n  if (config.log) {\n    config.express.use(morgan(isProd ? 'combined' : 'dev'))\n  }\n  </setupLogging>\n  \n  <setupCustomUse>\n  _.each(config.use, use => {\n    if (_.isArray(use)) config.express.use.apply(config.express, use)\n    else config.express.use(use)\n  })\n  </setupCustomUse>\n}\n"], ["writeSymbol", "\nfunction writeSymbol(symbol) { /* Extensive and highly descriptive function performing XML writing, violates SRP by handling various object members and child objects */\n  // ... omitted for brevity\n}\n"], ["getConfigProperty", "\nfunction (key) {\n  var property = this.config[key.toLowerCase()];\n  if (property && property.event) {\n    return property.value;\n  } else {\n    return undefined;\n  }\n}\n"], ["validateNode", "\nfunction (value, node) {\n  var valid = (typeof value === \"object\" && value instanceof Array);\n  if (valid) {\n    var pos = 0;\n    for (i = 0; i < node.elements.length; i++) {\n      el = node.elements[i];\n      var found = 0;\n      while (found < el.arity[1] && pos < value.length) {\n        if (!this.exec_spec(value[pos], el.element)) break;\n        found++;\n        pos++;\n      }\n      if (found < el.arity[0]) {\n        valid = false;\n        break;\n      }\n    }\n    if (pos < value.length) valid = false;\n  }\n  return valid;\n}\n"], ["destructSpirit", "\nfunction(spirit) {\n  spirit.$debug(false);\n  spirit.life.destructed = true;\n  spirit.life.dispatch(gui.LIFE_DESTRUCT);\n  spirit.ondestruct();\n}\n"], ["setupXmlStream", "\nfunction setup(encoding) {\n  var stream = fs.createReadStream(path.join(__dirname, 'encoding.xml'));\n  var xml = new XmlStream(stream, encoding);\n  xml.on('endElement: node', function (node) {\n    console.log(node);\n  });\n  xml.on('error', function (message) {\n    console.log('Parsing as ' + (encoding || 'auto') + ' failed: ' + message);\n  });\n  return xml;\n}\n"], ["createTodoElement", "\nfunction(id, title, isCompleted) {\n  var todoTemplateEl = moduleEl.querySelector('.todo-template-container li'),\n      newTodoEl = todoTemplateEl.cloneNode(true);\n  \n  newTodoEl.querySelector('label').textContent = title;\n  newTodoEl.setAttribute('data-todo-id', id);\n  if (isCompleted) {\n    newTodoEl.classList.add('completed');\n    newTodoEl.querySelector('input[type=\"checkbox\"]').checked = true;\n  }\n\n  return newTodoEl;\n}\n"], ["inspectNode", "\nfunction inspectNode(node) {\n  if (!node) {\n    return \"[No node]\";\n  }\n  if (crashyTextNodes && isBrokenNode(node)) {\n    return \"[Broken node]\";\n  }\n  if (isCharacterDataNode(node)) {\n    return '\"' + node.data + '\"';\n  }\n  if (node.nodeType == 1) {\n    var idAttr = node.id ? ' id=\"' + node.id + '\"' : \"\";\n    return \"<\" + node.nodeName + idAttr + \">[index:\" + getNodeIndex(node) + \",length:\" + node.childNodes.length + \"][\" + (node.innerHTML || \"[innerHTML not supported]\").slice(0, 25) + \"]\";\n  }\n  return node.nodeName;\n}\n"], "```"]