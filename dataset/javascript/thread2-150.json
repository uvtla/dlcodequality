[["commitCardTransaction", "\nfunction commitCardTransaction(cardId, transactionId, _ref, otp, options) {\n  let message = _ref.message,\n      securityCode = _ref.securityCode;\n\n  options = (0, _lodash2.default)({\n    body: {\n      message: message,\n      securityCode: securityCode\n    },\n    method: 'post'\n  }, options);\n  \n  <prepareHeadersForOTP>\n  if (otp) {\n    options.headers = _extends({\n      'otp-token': otp\n    }, options.headers);\n  }\n  </prepareHeadersForOTP>\n\n  return this.api(`/me/cards/${cardId}/transactions/${transactionId}/commit`, options);\n}\n"], ["dsTextureConfig", "\nfunction dsTextureConfig(gl, stencil) {\n  if (stencil) {\n    return { format: 0x84F9, type: 0x84FA, internal: gl.DEPTH24_STENCIL8 };\n  }\n  \n  return { format: 0x1902, type: 0x1405, internal: gl.DEPTH_COMPONENT24 };\n}\n"], ["installNext", "\nfunction() {\n  var src = this.installArray.shift(); \n  \n  <checkSrc>\n  if (typeof src !== 'undefined') {\n    var parts = src.split('/'); \n    var resourcePath = this.getResourcePath(parts[parts.length-2]); \n    var dest = this.basePath + resourcePath + '/' + parts[parts.length-1]; \n    </checkSrc>\n    \n    <installOrTrigger>\n    if (typeof resourcePath !== 'undefined') {\n      this._install(src, dest); \n    } else {\n      this.triggerNext(); \n    }\n    </installOrTrigger>\n     \n  } else {\n    this.log('all done, get ready to rock!  (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b');\n    rl.close(); \n  }\n}\n"], ["logout", "\nfunction logout(callback) {\n  \n  core.setSession({});\n  \n  core.events.emit('auth.logout');\n  <callCallback>\n  if (typeof callback === 'function') {\n    callback(null);\n  }\n  </callCallback>\n}\n"], ["resetDataTable", "\nfunction() {\n    \n    this._bInit = true;\n    \n    <resetRecordSet>\n    this._oRecordSet.reset();\n    </resetRecordSet>\n\n    <resetPaginator>\n    var pag = this.get('paginator');\n    if (pag) {\n        pag.set('totalRecords', 0);\n    }\n    </resetPaginator>\n\n    <unselectAll>\n    this._unselectAllTrEls();\n    this._unselectAllTdEls();\n    this._aSelections = null;\n    this._oAnchorRecord = null;\n    this._oAnchorCell = null;\n    </unselectAll>\n    \n    <resetSorting>\n    this.set(\"sortedBy\", null);\n    </resetSorting>\n}\n"], ["hierarchy", "\nfunction hierarchy(config) {\n  const templates = _.mapValues(config.templates, augmentSingleFile)\n  const partials = _.mapValues(config.partials, augmentSingleFile)\n  return {\n    children: Object.keys(templates).map((name) => {\n      let template = templates[name]\n      return {\n        name: name,\n        type: 'template',\n        path: template.path,\n        comments: template.comments,\n        children: template.callsPartial\n          \n          .map((callee) => callee.name)\n          \n          .filter((name, index, array) => array.indexOf(name) === index)\n          .map((name) => partialForCallTree(name, partials, {}))\n      }\n    })\n  }\n}\n"], ["JobQueue", "\nfunction JobQueue(options){\n    Event.EventEmitter.call(this);\n    this.targetValue = [];\n    this.state = STATE.IDLE;\n    this.consumer = options.consumer;\n    this.paused = false;\n    this.interval = options.interval || 0;\n    this.timeout = options.timeout || 100;\n    this.timehandle = null;\n    let self = this;\n    <run>\n    this.run = function() {\n        <processQueue>\n        if (this.paused) {\n            if (this.timehandle) {\n                clearTimeout(this.timehandle);\n                this.timehandle = null;\n            }\n            this.timehandle = setTimeout(function() {\n                self.state = STATE.IDLE;\n                self.run();\n            }, this.timeout);\n        } else {\n            if (self.targetValue && self.targetValue.length > 0) {\n                if (self.state === STATE.IDLE) {\n                    let target = self.targetValue.shift();\n                    if (self.consumer) {\n                        self.state = STATE.BUSY;\n\n                        <performWork>\n                        self.__worker = Q().then(function() {\n                            return self.consumer(target.handle);\n                        }).then(<handleSuccess>function(value) {\n                            if (target.uuid) {\n                                self.emit('resp-' + target.uuid, {success: true, result: value});\n                            }\n                            if (self.timehandle) {\n                                clearTimeout(self.timehandle);\n                                self.timehandle = null;\n                            }\n\n                            self.timehandle = setTimeout(function() {\n                                self.state = STATE.IDLE;\n                                self.run();\n                            }, self.interval);\n                        </handleSuccess>).catch(<handleError>function(e) {\n                            if (target.uuid) {\n                                self.emit('resp-' + target.uuid, {success: false, reason: e});\n                            }\n\n                            if (self.targetValue.length > 0) {\n                                if (self.timehandle) {\n                                    clearTimeout(self.timehandle);\n                                    self.timehandle = null;\n                                }\n                                self.timehandle = setTimeout(function() {\n                                    self.state = STATE.IDLE;\n                                    self.run();\n                                }, self.timeout);\n                            } else {\n                                self.state = STATE.IDLE;\n                            }\n                        </handleError>);\n                        </performWork>\n                    }\n                }\n            } else {\n                self.state = STATE.IDLE;\n            }\n        }\n        </processQueue>\n    }\n    </run>\n}\n"], ["matchPathArrayToNameArray", "\nfunction(context) {\n    var parts = context.parts,\n        startPos = context.startPos,\n        endPos = parts.length - 1,\n        array = this.end,\n        len = array.length,\n        idx;\n    <matchEachPart>\n    for (idx = 0; idx < len; ++idx) {\n        if (-1 < endPos && this._matchName(array[idx], parts[endPos])) {\n            if (endPos-- < startPos) {\n                return _GPF_PATHMATCH_KO;\n            }\n        } else {\n            return _GPF_PATHMATCH_KO;\n        }\n    }\n    </matchEachPart>\n    return _GPF_PATHMATCH_UNKNOWN;\n}\n"], ["ProgressBar", "\nfunction ProgressBar(opts) {\n    ProgressBar.superclass.constructor.call(this, opts);\n    var size = new geo.Size(272, 32);\n    this.contentSize = size;\n    this.anchorPoint = new geo.Point(0.5, 0.5);\n\n    <initializeSprites>\n    var s;\n    if (opts.emptyImage) {\n        s = new Sprite({file: opts.emptyImage, rect: new geo.Rect(0, 0, size.width, size.height)});\n        s.anchorPoint = new geo.Point(0, 0);\n        this.emptySprite = s;\n        this.addChild({child: s});\n    }\n    if (opts.fullImage) {\n        s = new Sprite({file: opts.fullImage, rect: new geo.Rect(0, 0, 0, size.height)});\n        s.anchorPoint = new geo.Point(0, 0);\n        this.fullSprite = s;\n        this.addChild({child: s});\n    }\n\n    <setupPropertyListeners>\n    events.addPropertyListener(this, 'maxValue', 'change', this.updateImages.bind(this));\n    events.addPropertyListener(this, 'value', 'change', this.updateImages.bind(this));\n    </setupPropertyListeners>\n\n    this.updateImages();\n    </initializeSprites>\n}\n"], ["verifyPermission", "\nfunction verifyPermission(appId, uaaCredential) {\n\tvar deferred = Q.defer();\n\n\tvar cloudControllerUrl = process.env.cloudControllerUrl;\n\t<validateCloudControllerUrl>\n\tif (!cloudControllerUrl) {\n\t\tvar errMsg = \"The system variable 'cloudControllerUrl' is missing.\";\n\t\tibmlogger.getLogger().error(errMsg);\n\t\tdeferred.reject({code: Constant.MISSING_CLOUDCONTROLLERURL_ERROR, message: errMsg});\n\t\treturn;\n\t}\n\t</validateCloudControllerUrl>\n\n\tif (cloudControllerUrl[cloudControllerUrl.length - 1] != '/') {\n\t\tcloudControllerUrl += '/';\n\t}\n\tcloudControllerUrl += 'v2/apps/' + appId + '/summary';\n\n\tvar requestOptions = {url: cloudControllerUrl, headers: {'Authorization': uaaCredential}};\n\t<verifyAppPermission>\n\trequest.get(requestOptions, function(error, response, body) {\n\t\tif (error || response.statusCode != 200) {\n\t\t\tvar errMsg = error ? \"[\" + error + \"]\" : \"[\" + response.statusCode + \":\" + body + \"] Access Url '\" + requestUrl + \"' failed\";\n\t\t\tibmlogger.getLogger().error(errMsg);\n\n\t\t\treturn deferred.reject(false);\n\t\t} else {\n\t\t\treturn deferred.resolve(true);\n\t\t}\n\t});\n\t</verifyAppPermission>\n\n\treturn deferred.promise;\n}\n"], ""]