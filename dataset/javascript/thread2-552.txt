```javascript
<createTextures>
function createTextures(gl, textureOptions, callback) {
  callback = callback || noop;
  <initializeTexturesAndTrackingVariables>
  let numDownloading = 0;
  const errors = [];
  const textures = {};
  const images = {};
  </initializeTexturesAndTrackingVariables>

  <callCallbackIfReady>
  function callCallbackIfReady() {
    if (numDownloading === 0) {
      setTimeout(function() {
        callback(errors.length ? errors : undefined, textures, images);
      }, 0);
    }
  }
  </callCallbackIfReady>

  <handlingTextureCreation>
  Object.keys(textureOptions).forEach(function(name) {
    const options = textureOptions[name];
    let onLoadFn;
    if (isAsyncSrc(options.src)) {
      onLoadFn = function(err, tex, img) {
        images[name] = img;
        --numDownloading;
        if (err) {
          errors.push(err);
        }
        callCallbackIfReady();
      };
      ++numDownloading;
    }
    textures[name] = createTexture(gl, options, onLoadFn);
  });
  </handlingTextureCreation>

  callCallbackIfReady();

  return textures;
}
</createTextures>

<msetnx>
function msetnx() {
  var args = slice.call(arguments)
    , i
    , req;

  <handleObjectArgument>
  if(typeof args[args.length -1] === 'object') {
    req = args.pop();
  }
  </handleObjectArgument>

  <checkKeyExistence>
  for(i = 0;i < args.length;i += 2) {
    if(this.keyExists(args[i], req)) {
      return 0;
    }
  }
  </checkKeyExistence>

  <setNewKeys>
  for(i = 0;i < args.length;i += 2) {
    this.setKey(args[i], args[i + 1], undefined, undefined, undefined, req);
  }
  </setNewKeys>

  return 1;
}
</msetnx>

<checkForSemicolonForVariableDeclaration>
function checkForSemicolonForVariableDeclaration(node) {
  const parent = node.parent;
  
  <checkForSemicolon>
  if ((parent.type !== "ForStatement" || parent.init !== node) &&
      (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)
  ) {
      checkForSemicolon(node);
  }
  </checkForSemicolon>
}
</checkForSemicolonForVariableDeclaration>

<writev>
function writev(chunks, cb) {
  <convertStringsToBuffers>
  var buffers = new Array(chunks.length)
  for (var i = 0; i < chunks.length; i++) {
    if (typeof chunks[i].chunk === 'string') {
      buffers[i] = Buffer.from(chunks[i], 'utf8')
    } else {
      buffers[i] = chunks[i].chunk
    }
  }
  </convertStringsToBuffers>

  this._write(Buffer.concat(buffers), 'binary', cb)
}
</writev>

<constructFromObject>
function constructFromObject(instance, source) {
  <basicAssigments>
  instance.transmitterId = identifiers.format(source.transmitterId);
  instance.transmitterIdType = source.transmitterIdType;
  instance.rssiSignature = source.rssiSignature || [];

  instance.rssiSignature.forEach(function(entry) {
    entry.receiverIdType = entry.receiverIdType || identifiers.TYPE_UNKNOWN;
    entry.rssi = entry.rssi || -Number.MAX_SAFE_INTEGER;
    entry.numberOfDecodings = entry.numberOfDecodings || 1;
    entry.rssiSum = entry.rssiSum || entry.rssi;
  });
  </basicAssigments>

  <optionalPropertiesAssignment>
  if(source.hasOwnProperty('packets')) {
    instance.packets = source.packets;
  }
  if(source.hasOwnProperty('timestamp')) {
    instance.timestamp = source.timestamp;
  }
  if(source.hasOwnProperty('events')) {
    instance.events = source.events;
  }
  if(source.hasOwnProperty('earliestDecodingTime')) {
    instance.earliestDecodingTime = source.earliestDecodingTime;
  }
  instance.creationTime = new Date().getTime();
  </optionalPropertiesAssignment>
}
</constructFromObject>

<INIT>
function INIT(config) {
  if (__init) return;

  <configurationInitialization>
  CONF = _.extend(CONF, config);
  </configurationInitialization>

  LOG = LOG.use(require('./lib/sentry')(CONF.sentry));

  <jobInitialization>
  JOBS = Q.init(CONF, LOG);
  </jobInitialization>

  <setupAuthentication>
  if (CONF.auth)
    WWW.use('/'+CONF.admin_url_prefix,
            express.basicAuth(CONF.auth.user, CONF.auth.pass));
  </setupAuthentication>

  <expressMiddlewareSetup>
  WWW.use(express.bodyParser());
  WWW.use('/'+CONF.admin_url_prefix, Q.kue.app);
  </expressMiddlewareSetup>

  __init = true;
}
</INIT>

<manufacturerDataParsing>
function(manufacturerDataString){

  let robject = {};
  let data = manufacturerDataString;
  let dataFormat = data[0] & 0xFF;
  <parseTemperature>
  let temperature = (data[1] << 8 | data[2] & 0xFF); 
  if (temperature > 32767) {
    temperature -= 65535;
  }
  temperature /= 200.0;
  </parseTemperature>

  <parseHumidity>
  let humidity =  ((data[3] & 0xFF) << 8 | data[4] & 0xFF) / 400.0;
  </parseHumidity>

  <parsePressure>
  let pressure = ((data[5] & 0xFF) << 8 | data[6] & 0xFF) + 50000;
  </parsePressure>

  <parseAcceleration>
  let accelerationX = (data[7] << 8 | data[8] & 0xFF) / 1000.0;
  let accelerationY = (data[9] << 8 | data[10] & 0xFF) / 1000.0;
  let accelerationZ = (data[11] << 8 | data[12] & 0xFF) / 1000.0;
  </parseAcceleration>

  <parsePowerInformation>
  let powerInfo = (data[13] & 0xFF) << 8 | data[14] & 0xFF;
  let batteryVoltage = (powerInfo >>> 5) / 1000.0 + 1.6;
  let txPower = (powerInfo & 0b11111) * 2 - 40;
  </parsePowerInformation>

  <parseCounterAndSequence>
  let movementCounter = data[15] & 0xFF;
  let measurementSequenceNumber = (data[16] & 0xFF) << 8 | data[17] & 0xFF;
  </parseCounterAndSequence>

  <parseMacAddress>
  let mac = toHexString(data.subarray(18));
  </parseMacAddress>

  robject.destination_endpoint = dataFormat;
  robject.temperature = temperature;
  robject.humidity = humidity;
  robject.pressure = pressure;
  robject.accelerationX = accelerationX;
  robject.accelerationY = accelerationY;
  robject.accelerationZ = accelerationZ;
  robject.batteryVoltage = batteryVoltage;
  robject.txPower = txPower;
  robject.movementCounter = movementCounter;
  robject.measurementSequenceNumber = measurementSequenceNumber;
  robject.mac = mac;

  return robject;
}
</manufacturerDataParsing>

<sdiff>
function sdiff(key) {
  var args = slice.call(arguments, 1)
    , req = typeof args[args.length - 1] === 'object' ? args.pop() : null
    , set = this.getKey(key, req)
    , list
    , src
    , j
    , i;

  <returnIfSetIsEmpty>
  if(!set) return [];
  </returnIfSetIsEmpty>

  <cloneDataSet>
  list = set.data.slice(0);
  </cloneDataSet>

  <computeDifference>
  for(j = 0;j < list.length;j++) {
    for(i = 0;i < args.length;i++) {
      src = this.getKey(args[i], req);
      if(src === undefined) continue;
      if(src.sismember(list[j])) {
        list.splice(j, 1);
        j--;
        break;
      }
    }
  }
  </computeDifference>

  return list;
}
</sdiff>

<init>
function init(collection) {
  <returnInitFunctionBasedOnType>
  switch (true) {
    case isImplemented(collection, 'init'):
      return collection[p.init];
    case isString(collection):
      return () => '';
    case isArray(collection):
      return () => [];
    case isObject(collection):
      return () => ({});
    case isFunction(collection):
      return () => {
        throw Error('init not available');
      };
    default:
      return null;
  }
  </returnInitFunctionBasedOnType>
}
</init>

<updateJaxState>
function (element) {
  if (this.config.disabled) return;
  this.GetContainerWidths(element);
  var jax = HUB.getAllJax(element);
  <initializeState>
  var state = {collapse: [], jax: jax, m: jax.length, i: 0, changed:false};
  </initializeState>
  return this.collapseState(state);
}
</updateJaxState>
```