[["createTextures", "\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  <initializeTexturesAndTrackingVariables>\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n  </initializeTexturesAndTrackingVariables>\n\n  <callCallbackIfReady>\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n  </callCallbackIfReady>\n\n  <handlingTextureCreation>\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n  </handlingTextureCreation>\n\n  callCallbackIfReady();\n\n  return textures;\n}\n"], ["msetnx", "\nfunction msetnx() {\n  var args = slice.call(arguments)\n    , i\n    , req;\n\n  <handleObjectArgument>\n  if(typeof args[args.length -1] === 'object') {\n    req = args.pop();\n  }\n  </handleObjectArgument>\n\n  <checkKeyExistence>\n  for(i = 0;i < args.length;i += 2) {\n    if(this.keyExists(args[i], req)) {\n      return 0;\n    }\n  }\n  </checkKeyExistence>\n\n  <setNewKeys>\n  for(i = 0;i < args.length;i += 2) {\n    this.setKey(args[i], args[i + 1], undefined, undefined, undefined, req);\n  }\n  </setNewKeys>\n\n  return 1;\n}\n"], ["checkForSemicolonForVariableDeclaration", "\nfunction checkForSemicolonForVariableDeclaration(node) {\n  const parent = node.parent;\n  \n  <checkForSemicolon>\n  if ((parent.type !== \"ForStatement\" || parent.init !== node) &&\n      (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)\n  ) {\n      checkForSemicolon(node);\n  }\n  </checkForSemicolon>\n}\n"], ["writev", "\nfunction writev(chunks, cb) {\n  <convertStringsToBuffers>\n  var buffers = new Array(chunks.length)\n  for (var i = 0; i < chunks.length; i++) {\n    if (typeof chunks[i].chunk === 'string') {\n      buffers[i] = Buffer.from(chunks[i], 'utf8')\n    } else {\n      buffers[i] = chunks[i].chunk\n    }\n  }\n  </convertStringsToBuffers>\n\n  this._write(Buffer.concat(buffers), 'binary', cb)\n}\n"], ["constructFromObject", "\nfunction constructFromObject(instance, source) {\n  <basicAssigments>\n  instance.transmitterId = identifiers.format(source.transmitterId);\n  instance.transmitterIdType = source.transmitterIdType;\n  instance.rssiSignature = source.rssiSignature || [];\n\n  instance.rssiSignature.forEach(function(entry) {\n    entry.receiverIdType = entry.receiverIdType || identifiers.TYPE_UNKNOWN;\n    entry.rssi = entry.rssi || -Number.MAX_SAFE_INTEGER;\n    entry.numberOfDecodings = entry.numberOfDecodings || 1;\n    entry.rssiSum = entry.rssiSum || entry.rssi;\n  });\n  </basicAssigments>\n\n  <optionalPropertiesAssignment>\n  if(source.hasOwnProperty('packets')) {\n    instance.packets = source.packets;\n  }\n  if(source.hasOwnProperty('timestamp')) {\n    instance.timestamp = source.timestamp;\n  }\n  if(source.hasOwnProperty('events')) {\n    instance.events = source.events;\n  }\n  if(source.hasOwnProperty('earliestDecodingTime')) {\n    instance.earliestDecodingTime = source.earliestDecodingTime;\n  }\n  instance.creationTime = new Date().getTime();\n  </optionalPropertiesAssignment>\n}\n"], ["INIT", "\nfunction INIT(config) {\n  if (__init) return;\n\n  <configurationInitialization>\n  CONF = _.extend(CONF, config);\n  </configurationInitialization>\n\n  LOG = LOG.use(require('./lib/sentry')(CONF.sentry));\n\n  <jobInitialization>\n  JOBS = Q.init(CONF, LOG);\n  </jobInitialization>\n\n  <setupAuthentication>\n  if (CONF.auth)\n    WWW.use('/'+CONF.admin_url_prefix,\n            express.basicAuth(CONF.auth.user, CONF.auth.pass));\n  </setupAuthentication>\n\n  <expressMiddlewareSetup>\n  WWW.use(express.bodyParser());\n  WWW.use('/'+CONF.admin_url_prefix, Q.kue.app);\n  </expressMiddlewareSetup>\n\n  __init = true;\n}\n"], ["manufacturerDataParsing", "\nfunction(manufacturerDataString){\n\n  let robject = {};\n  let data = manufacturerDataString;\n  let dataFormat = data[0] & 0xFF;\n  <parseTemperature>\n  let temperature = (data[1] << 8 | data[2] & 0xFF); \n  if (temperature > 32767) {\n    temperature -= 65535;\n  }\n  temperature /= 200.0;\n  </parseTemperature>\n\n  <parseHumidity>\n  let humidity =  ((data[3] & 0xFF) << 8 | data[4] & 0xFF) / 400.0;\n  </parseHumidity>\n\n  <parsePressure>\n  let pressure = ((data[5] & 0xFF) << 8 | data[6] & 0xFF) + 50000;\n  </parsePressure>\n\n  <parseAcceleration>\n  let accelerationX = (data[7] << 8 | data[8] & 0xFF) / 1000.0;\n  let accelerationY = (data[9] << 8 | data[10] & 0xFF) / 1000.0;\n  let accelerationZ = (data[11] << 8 | data[12] & 0xFF) / 1000.0;\n  </parseAcceleration>\n\n  <parsePowerInformation>\n  let powerInfo = (data[13] & 0xFF) << 8 | data[14] & 0xFF;\n  let batteryVoltage = (powerInfo >>> 5) / 1000.0 + 1.6;\n  let txPower = (powerInfo & 0b11111) * 2 - 40;\n  </parsePowerInformation>\n\n  <parseCounterAndSequence>\n  let movementCounter = data[15] & 0xFF;\n  let measurementSequenceNumber = (data[16] & 0xFF) << 8 | data[17] & 0xFF;\n  </parseCounterAndSequence>\n\n  <parseMacAddress>\n  let mac = toHexString(data.subarray(18));\n  </parseMacAddress>\n\n  robject.destination_endpoint = dataFormat;\n  robject.temperature = temperature;\n  robject.humidity = humidity;\n  robject.pressure = pressure;\n  robject.accelerationX = accelerationX;\n  robject.accelerationY = accelerationY;\n  robject.accelerationZ = accelerationZ;\n  robject.batteryVoltage = batteryVoltage;\n  robject.txPower = txPower;\n  robject.movementCounter = movementCounter;\n  robject.measurementSequenceNumber = measurementSequenceNumber;\n  robject.mac = mac;\n\n  return robject;\n}\n"], ["sdiff", "\nfunction sdiff(key) {\n  var args = slice.call(arguments, 1)\n    , req = typeof args[args.length - 1] === 'object' ? args.pop() : null\n    , set = this.getKey(key, req)\n    , list\n    , src\n    , j\n    , i;\n\n  <returnIfSetIsEmpty>\n  if(!set) return [];\n  </returnIfSetIsEmpty>\n\n  <cloneDataSet>\n  list = set.data.slice(0);\n  </cloneDataSet>\n\n  <computeDifference>\n  for(j = 0;j < list.length;j++) {\n    for(i = 0;i < args.length;i++) {\n      src = this.getKey(args[i], req);\n      if(src === undefined) continue;\n      if(src.sismember(list[j])) {\n        list.splice(j, 1);\n        j--;\n        break;\n      }\n    }\n  }\n  </computeDifference>\n\n  return list;\n}\n"], ["init", "\nfunction init(collection) {\n  <returnInitFunctionBasedOnType>\n  switch (true) {\n    case isImplemented(collection, 'init'):\n      return collection[p.init];\n    case isString(collection):\n      return () => '';\n    case isArray(collection):\n      return () => [];\n    case isObject(collection):\n      return () => ({});\n    case isFunction(collection):\n      return () => {\n        throw Error('init not available');\n      };\n    default:\n      return null;\n  }\n  </returnInitFunctionBasedOnType>\n}\n"], ["updateJaxState", "\nfunction (element) {\n  if (this.config.disabled) return;\n  this.GetContainerWidths(element);\n  var jax = HUB.getAllJax(element);\n  <initializeState>\n  var state = {collapse: [], jax: jax, m: jax.length, i: 0, changed:false};\n  </initializeState>\n  return this.collapseState(state);\n}\n"], "```"]