[["checkSpacing", "\nfunction checkSpacing(kind, side, leftToken, rightToken) {\n  <calculateSpacing>\n  if (!!(rightToken.range[0] - leftToken.range[1]) !== modes[kind][side]) {\n    const after = leftToken.value === \"*\";\n    const spaceRequired = modes[kind][side];\n    const node = after ? leftToken : rightToken;\n    const messageId = `${spaceRequired ? \"missing\" : \"unexpected\"}${capitalize(side)}`;\n    </calculateSpacing>\n\n    <reportSpacingIssue>\n    context.report({\n      node,\n      messageId,\n      fix(fixer) {\n        if (spaceRequired) {\n          if (after) {\n            return fixer.insertTextAfter(node, \" \");\n          }\n          return fixer.insertTextBefore(node, \" \");\n        }\n        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n      }\n    });\n    </reportSpacingIssue>\n  }\n}\n"], ["mitm", "\nasync function mitm(options) {\n  <validateOptions>\n  const { origin, dest, log = false, host = '0.0.0.0', port = rand(1025, 65535) } = options;\n  if (typeof origin !== 'string' || !origin || typeof dest !== 'string' || !dest) {\n    throw new TypeError('origin and dest in mitm options must set correctly.');\n  }\n  if (origin === dest) {\n    throw new Error('Same origin and dest may cause request loop.');\n  }\n  </validateOptions>\n\n  <parseOptions>\n  const [originHostname, originPort = 80] = origin.trim().toLowerCase().split(':');\n  const [destHostname, destPort = 80] = dest.trim().toLowerCase().split(':');\n  </parseOptions>\n\n  <createServer>\n  const server = new Server();\n  </createServer>\n\n  <handleRequest>\n  server.on('request', (cReq, cRes) => {\n    ...\n  });\n  </handleRequest>\n\n  <handleConnect>\n  server.on('connect', (req, cSocket, header) => {\n    ...\n  });\n  </handleConnect>\n\n  <handleServerError>\n  server.on('error', err => {\n    logger.error(err.message);\n  });\n  </handleServerError>\n\n  <startServer>\n  let resolve = null;\n  const delayLog = new Promise(rs => resolve = rs);\n  server.listen(parseInt(port, 10), host, err => {\n    if (err) {\n      throw err;\n    }\n    resolve();\n  });\n  </startServer>\n\n  <logServerStart>\n  await delayLog;\n  logger.success(`MITM proxy listening on ${chalk.cyan.underline(`http://${host}:${port}`)}`);\n  </logServerStart>\n\n  return server;\n}\n"], ["isArrayWithMax", "\nfunction isArrayWithMax(value, max) {\n  <checkArray>\n  if (!isArray(value)) {\n    return false;\n  }\n  </checkArray>\n\n  <validateMaxValue>\n  for (var i = 0; i < value.length; i++) {\n    if (value[i] > max) {\n      return false;\n    }\n  }\n  </validateMaxValue>\n\n  return true;\n}\n"], ["encloseN", "\nfunction encloseN(L, B) {\n  var circle,\n  ...\n\n  <determineCircle>\n  switch (B.length) {\n    ...\n  }\n  </determineCircle>\n\n  <updateLinkedList>\n  while (l1) {\n    ...\n  }\n  </updateLinkedList>\n\n  <setLinkedListTail>\n  L.tail = l0;\n  </setLinkedListTail>\n\n  return circle;\n}\n"], ["mxKeyHandler", "\nfunction mxKeyHandler(graph, target) {\n  if (graph != null) {\n    <initialize>\n    this.graph = graph;\n    this.target = target || document.documentElement;\n    ...\n    </initialize>\n\n    <bindKeydownHandler>\n    this.keydownHandler = mxUtils.bind(this, function(evt) {\n      this.keyDown(evt);\n    });\n    mxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n    </bindKeydownHandler>\n\n    <bindUnloadHandler>\n    if (mxClient.IS_IE) {\n      mxEvent.addListener(window, 'unload',\n        mxUtils.bind(this, function() {\n          this.destroy();\n        })\n      );\n    }\n    </bindUnloadHandler>\n  }\n}\n"], ["findIndexInSortedIntervals", "\nfunction findIndexInSortedIntervals(ary, mapLoFn, mapWidthFn, loVal) {\n  <findLowIndex>\n  var first = findLowIndexInSortedArray(ary, mapLoFn, loVal);\n  </findLowIndex>\n\n  <determineIndex>\n  if (first == 0) {\n    ...\n  } else if (first < ary.length) {\n    ...\n  } else if (first == ary.length) {\n    ...\n  } else {\n    return ary.length;\n  }\n  </determineIndex>\n}\n"], ["nativeAEAD", "\nfunction nativeAEAD() {\n  <determineAEADSupport>\n  return config.aead_protect && (\n    ...\n  );\n  </determineAEADSupport>\n}\n"], ["mxCompactTreeLayout", "\nfunction mxCompactTreeLayout(graph, horizontal, invert) {\n  <initializeLayout>\n  mxGraphLayout.call(this, graph);\n  this.horizontal = (horizontal != null) ? horizontal : true;\n  this.invert = (invert != null) ? invert : false;\n  </initializeLayout>\n}\n"], ["adjustTimezoneOffset", "\nfunction (date, type, rule) {\n  <calculateOffset>\n  var offset = 0;\n  ...\n  offset *= 60 * 1000; \n  </calculateOffset>\n\n  <applyOffset>\n  return new Date(date.getTime() + offset);\n  </applyOffset>\n}\n"], ["_Wrap", "\nfunction _Wrap(key, setFunction, _cacheGetter, _cacheSetter, ttl) {\n  <performCacheOperation>\n  return new Promise((resolve, reject) => {\n    ...\n  });\n  </performCacheOperation>\n}\n"], "```"]