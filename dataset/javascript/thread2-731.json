[["WebSocketFrame", "\nfunction WebSocketFrame(maskBytes, frameHeader, config) {\n    this.maskBytes = maskBytes;\n    this.frameHeader = frameHeader;\n    this.config = config;\n    this.maxReceivedFrameSize = config.maxReceivedFrameSize;\n    this.protocolError = false;\n    this.frameTooLarge = false;\n    this.invalidCloseFrameLength = false;\n    this.parseState = DECODE_HEADER;\n    this.closeStatus = -1;\n}\n"], ["visitPropertySerialize", "\nfunction visitPropertySerialize (context, parameters, body, fields) {\n    body.forEach(function (node) {\n        \n        if (node.type == 'IfStatement') {\n            \n            var conditional = {\n                type: 'condition',\n                conditions: []\n            }\n            createConditions(context, parameters, conditional.conditions, node)\n            fields.push(conditional)\n            \n        } else {\n            assert(node.type == 'ExpressionStatement')\n            node = node.expression\n            assert(node.type == 'CallExpression')\n            assert(node.callee.name == parameters[0], 'unknown function call')\n\n            var arg = node.arguments[0]\n            if (arg.type == 'ObjectExpression') {\n                assert(arg.type == 'ObjectExpression')\n                var integer = {\n                    type: 'integer',\n                    fields: []\n                }\n                arg.properties.forEach(function (property) {\n                    assert(property.type == 'Property')\n                    integer.fields.push({\n                        type: 'integer',\n                        name: property.key.name,\n                        endianness: 'b',\n                        bits: property.value.value\n                    })\n                })\n                fields.push(integer)\n            } else {\n                assert(arg.type == 'Literal')\n                assert(typeof arg.value == 'string')\n                var name = arg.value\n\n                var arg = node.arguments[1]\n                if (arg.type == 'FunctionExpression') {\n                    var structure = {\n                        name: name,\n                        type: 'structure',\n                        fields: []\n                    }\n                    visitPropertySerialize(name, parameters, arg.body.body, structure.fields)\n                    fields.push(structure)\n                } else if (arg.type == 'ArrayExpression') {\n                    if (\n                        arg.elements.length == 1 &&\n                        arg.elements[0].type == 'Literal' &&\n                        arg.elements[0].value == 8\n                    ) {\n                        var arg = node.arguments[2]\n                        assert(arg.type == 'ArrayExpression')\n                        var terminator = []\n                        for (var i = 0, I = arg.elements.length; i < I; i++) {\n                            assert(arg.elements[i].type == 'Literal')\n                            assert(typeof arg.elements[i].value == 'number')\n                            assert(arg.elements[i].value < 256)\n                            terminator.push(arg.elements[i].value)\n                        }\n                        var arg = node.arguments[3]\n                        var transform = null\n                        if (arg != null) {\n                            assert(arg.type == 'Literal')\n                            assert(typeof arg.value == 'string')\n                            transform = arg.value\n                        }\n                        fields.push({\n                            name: name,\n                            type: 'buffer',\n                            terminator: terminator.slice(),\n                            transform: transform\n                        })\n                    }\n                } else {\n                    var value = arg.value\n\n                    var peek = node.arguments[2]\n                    if (peek != null) {\n                        assert(peek.type == 'ArrayExpression')\n                        assert(peek.elements.length == 1)\n                        var structure = {\n                            name: name,\n                            type: 'structure',\n                            fields: []\n                        }\n                        visitPropertySerialize(name, parameters, peek.elements[0].body.body, structure.fields)\n                        delete structure.name\n                        fields.push({\n                            name: name,\n                            type: 'lengthEncoded',\n                            length: {\n                                name: name,\n                                type: 'integer',\n                                endianness: 'b',\n                                bits: value\n                            },\n                            element: structure\n                        })\n                    } else {\n                        fields.push({\n                            name: name,\n                            type: 'integer',\n                            endianness: 'b',\n                            bits: value\n                        })\n                    }\n                }\n            }\n        }\n    })\n}\n"], ["mergeInto", "\nfunction mergeInto(one, two) {\n  checkMergeObjectArg(one);\n  \n  if (two != null) {\n    checkMergeObjectArg(two);\n    for (var key in two) {\n      if (!two.hasOwnProperty(key)) {\n        continue;\n      }\n      one[key] = two[key];\n    }\n  }\n}\n"], ["urlAndDirectorySetup", "\nfunction (urlpath, dir) {\n    var dirarr = dir.split('/');\n    var url = /\\/$/.test(urlpath) ? urlpath : urlpath + '/';\n    \n    dirarr.forEach(function (val) {\n        addOneDir(url, val);\n        redirectTo(url + val + '/');\n        url += val;\n    });\n}\n"], ["makeBackup", "\nfunction makeBackup(filePath) {\n    var dateString = new Date().toISOString().replace(/:/g, '.').replace('Z', '').replace('T', ' ');\n    \n    try         { fs.mkdirSync(path.join(path.dirname(filePath), 'BACKUP')); }\n    catch(err)  { if (err.code != 'EEXIST') { throw err } }\n    \n    fs.writeFileSync(path.join(path.dirname(filePath), 'BACKUP', dateString + ' ' + path.basename(filePath) ), fs.readFileSync(path.normalize(filePath)));\n}\n"], ["couponManagement", "\nfunction () {\n        var activeCoupons = basketService.getActiveCoupons();\n\n        var oldCouponCodes = activeCoupons.map(function (activeCoupon) {\n            return activeCoupon.code;\n        });\n\n        basketService.clearCoupons();\n\n        oldCouponCodes.forEach(function (couponCode) {\n            self.submitCode(couponCode);\n        });\n    }\n"], ["getHelper", "\nfunction getHelper(helper) {\n\t\t\n\t\tvar wrapped,\n\t\t\tview = this,\n\t\t\tres = (view.ctx || {})[helper];\n\n\t\tres = res === undefined ? view.getRsc(\"helpers\", helper) : res;\n\n\t\tif (res) {\n\t\t\tif (typeof res === \"function\") {\n\t\t\t\t\n\t\t\t\twrapped = function() {\n\t\t\t\t\treturn res.apply(view, arguments);\n\t\t\t\t};\n\t\t\t\t$extend(wrapped, res);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn wrapped || res;\n\t}\n"], ["optimizeCss", "\nfunction (fileName, outFileName, config) {\n            \n            var originalFileContents = file.readFile(fileName),\n                fileContents = flattenCss(fileName, originalFileContents, config.cssImportIgnore),\n                startIndex, endIndex;\n\n            \n            \n                \n                while ((startIndex = fileContents.indexOf(\"<removeComments>\n                startIndex = -1;\n                while ((startIndex = fileContents.indexOf(\"*/\", startIndex + 2)) !== -1) {\n                    endIndex = fileContents.indexOf(\"*/\", startIndex + 2);\n                    if (endIndex === -1) {\n                        throw \"Improper comment in CSS file: \" + fileName;\n                    }\n                    fileContents = fileContents.substring(0, startIndex) + fileContents.substring(endIndex + 2, fileContents.length);\n                }\n                </removeComments>\n                \n                <optimizeWhitespace>\n                if (config.optimizeCss.indexOf(\".keepLines\") === -1) {\n                    fileContents = fileContents.replace(/[\\r\\n]/g, \"\");\n                    fileContents = fileContents.replace(/\\s+/g, \" \");\n                    fileContents = fileContents.replace(/\\{\\s/g, \"{\");\n                    fileContents = fileContents.replace(/\\s\\}/g, \"}\");\n                } else {\n                    fileContents = fileContents.replace(/(\\r\\n)+/g, \"\\r\\n\");\n                    fileContents = fileContents.replace(/(\\n)+/g, \"\\n\");\n                }\n                </optimizeWhitespace>\n            \n            file.saveUtf8File(outFileName, fileContents);\n        }\n"], ["getPropType", "\nfunction getPropType(prop) {  \n\n\n  if ((prop === null) || Array.isArray(prop)) {\n    return exports.PD_TYPE.object;\n  }\n\n  var result = exports.PD_TYPE.none;\n\n  for (var key in prop) {\n    switch (key) {  \n    case 'configurable':\n    case 'enumerable':\n      if (typeof prop[key] !== 'boolean') return exports.PD_TYPE.object;\n      if (result === exports.PD_TYPE.none) result = exports.PD_TYPE.descriptor\n      break;\n    case 'placeholder':\n      if ((result === exports.PD_TYPE.data) || (typeof prop[key] !== 'function')) return exports.PD_TYPE.object;\n      result = exports.PD_TYPE.accessor;\n      break;\n    case 'get':\n    case 'set':\n      if ((result === exports.PD_TYPE.data) || (typeof prop[key] !== 'function')) return exports.PD_TYPE.object;\n      result = exports.PD_TYPE.accessor;\n      break;\n    case 'writable':\n      if (typeof prop[key] !== 'boolean') return exports.PD_TYPE.object;\n      \n    case 'value':\n      if (result === exports.PD_TYPE.accessor) return exports.PD_TYPE.object;\n      result = exports.PD_TYPE.data;\n      break;\n    default:  \n      return exports.PD_TYPE.object;\n    }\n  }\n\n  if (result === exports.PD_TYPE.none) {\n    return exports.PD_TYPE.object;  \n  }\n\n  return result;\n}\n"], ["printServerInfo", "\nasync function printServerInfo() {\n  const settings = await ProjectSettings.readPackagerInfoAsync(process.cwd());\n  \n  <generateQRCode>\n  const address = await UrlUtils.constructManifestUrlAsync(process.cwd());\n  qr.generate(address, qrCode => {\n    log(\n      `To view your app with live reloading, point the Expo app to this QR code.\nYou'll find the QR scanner on the Projects tab of the app.\n\n${indent(qrCode, 2)}\n\nOr enter this address in the Expo app's search bar:\n\n  ${chalk.underline(chalk.cyan(address))}\n\nYour phone will need to be on the same local network as this computer.\nFor links to install the Expo app, please visit ${chalk.underline(chalk.cyan('https:\n    );\n    printUsage();\n  });\n  </generateQRCode>\n}\n"], "```"]