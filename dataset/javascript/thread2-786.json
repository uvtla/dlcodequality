[["validateCompatibleTypes", "\nfunction validateCompatibleTypes(startPos, endPos, x, y) {\n  <checkCompatibility>\n  if (joinTypes(x.type(), y.type()) === null) {\n    fail(startPos, endPos,\n      'expected-values-to-have-compatible-types', [\n        x.type(),\n        y.type(),\n      ]\n    );\n  }\n  </checkCompatibility>\n}\n"], ["buildTree", "\nfunction buildTree(entries, opt_modules) {\n  <sortInitialEntries>\n  sortEntries(entries);\n  </sortInitialEntries>\n\n  const delimiter = opt_modules ? '/' : '.';\n  let roots = [];\n  let stack = [];\n  let allEntries = new Set;\n  \n  let fakeEntries = [];\n  let entriesToResort = new Set;\n\n  <recordEntryFunction>\n  function recordEntry(entry) {\n    //...\n  }\n  </recordEntryFunction>\n  \n  <recordFakeEntryFunction>\n  function recordFakeEntry(name, qualifiedName) {\n    //...\n  }\n  </recordFakeEntryFunction>\n\n  <processEntryFunction>\n  function processEntry(entry, name) {\n    //...\n  }\n  </processEntryFunction>\n\n  <processEntries>\n  entries.forEach(entry => {\n    //...\n  });\n  </processEntries>\n\n  <processFakeEntries>\n  for (let i = fakeEntries.length - 1; i >= 0; i -= 1) {\n    //...\n  }\n  </processFakeEntries>\n\n  <sortFinalEntries>\n  if (fakeEntries.length) {\n    sortEntries(roots);\n  }\n  </sortFinalEntries>\n\n  return roots;\n}\n"], ["editRow", "\nfunction editRow($tr, colIndex) {\n  // Multiple responsibilities are woven together in this function\n  // including conditional column initialization, row editing, form creation,\n  // and event handling. Therefore, separate tags within show distinct responsibilities.\n  \n  <initializeEditingEnvironment>\n  if (colIndex < 0) return;\n  var oThis = this;\n  var isFixedCol = false;\n  if ($tr && $tr.parents('table').attr('id').indexOf('_fixed_') > -1) isFixedCol = true;\n  $tr = $tr || $('#' + this.options.id + '_content_tbody tr[role=\"row\"]:eq(' + this.eidtRowIndex + ')');\n  colIndex = colIndex || 0;\n  var row = this.dataSourceObj.rows[this.eidtRowIndex].value;\n  this.editRowObj = this.cloneObj(row);\n  </initializeEditingEnvironment>\n\n  <defaultEditMode>\n  if (this.options.editType == 'default') {\n    // ...\n  }\n  </defaultEditMode>\n\n  <formEditMode>\n  else if (this.options.editType == 'form') {\n    // ...\n  }\n  </formEditMode>\n}\n"], ["switchMapToFunction", "\nfunction(module, exports, __webpack_require__) {\n  <functionBody>\n  \"use strict\";\n  // ...\n  </functionBody>\n}\n"], ["getClassOf", "\nfunction getClassOf(value) {\n  <determineClass>\n  return value == null\n    ? capitalize(value)\n    : toString.call(value).slice(8, -1);\n  </determineClass>\n}\n"], ["ConnectionServer", "\nfunction ConnectionServer(endpoint, options, connectionListener) {\n  <initiateEventEmitter>\n  events.EventEmitter.call(this);\n  </initiateEventEmitter>\n\n  <argumentNormalization>\n  if (!(endpoint instanceof Endpoint)) {\n    endpoint = new Endpoint(endpoint);\n  }\n  if (typeof options === 'function') {\n    connectionListener = options;\n    options = undefined;\n  }\n  </argumentNormalization>\n\n  <assignProperties>\n  this.endpoint = endpoint;\n  this.options = options || {};\n  if (typeof connectionListener === 'function') {\n    <setupListener>\n    this.on('connection', connectionListener);\n    </setupListener>\n  }\n  </assignProperties>\n\n  <establishConnection>\n  listen.call(this);\n  </establishConnection>\n}\n"], ["getChildrenFunction", "\nfunction(node) {\n  <getChildNodes>\n  node = Y.Dom.get(node);\n  if (!node) {\n    YAHOO.log('getChildren failed: invalid node argument', 'error', 'Dom');\n  }\n\n  return Y.Dom.getChildrenBy(node);\n  </getChildNodes>\n}\n"], ["ViewConstructor", "\nfunction View(template) {\n  <initializeContext>\n  this.context = null;\n  if (!template) template = this;\n  this.template = template;\n  if (!this.template.bindings) this.template.bindings = [];\n  </initializeContext>\n\n  <setupBindings>\n  this.bindings = this.template.bindings.map(mapBinding.bind(this), this);\n  </setupBindings>\n\n  <setViewNodes>\n  this.firstViewNode = this.firstChild;\n  this.lastViewNode = this.lastChild;\n  if (this.firstViewNode) {\n    this.firstViewNode.view = this;\n    this.lastViewNode.view = this;\n  }\n  </setViewNodes>\n}\n"], ["setUpSelectionLayer", "\nfunction(source) {\n  <selectionLayerSetup>\n  var selectionLayer;\n  if (!this.layerCache[source.id]) {\n    // Code to setup selection layer\n  } else {\n    selectionLayer = this.layerCache[source.id];\n  }\n  return selectionLayer;\n  </selectionLayerSetup>\n}\n"], ["TracerConstructor", "\nfunction Tracer(ringpop, config, opts) {\n  <tracerSetup>\n  if (!(this instanceof Tracer)) {\n      return new Tracer(opts);\n  }\n\n  this.ringpop = ringpop;\n  _.extend(this, config);\n  this.opts = _.defaults({}, opts, tracerOptsDefaults);\n  this.listener = null;\n  </tracerSetup>\n}\n"], "```"]