[["function1", "\nfunction( x, y ) {\n  this.element.css( { left: x, top: y } );\n  this._area = this._layoutManager._$getArea( x, y );\n  if( this._area !== null ) {\n    this._lastValidArea = this._area;\n    this._area.contentItem._$highlightDropZone( x, y, this._area );\n  }\n}\n"], ["write_BrtFileVersion", "\nfunction write_BrtFileVersion(data, o) {\n  if(!o) o = new_buf(127);\n  for(var i = 0; i != 4; ++i) o.write_shift(4, 0);\n  write_XLWideString(\"SheetJS\", o);\n  write_XLWideString(XLSX.version, o);\n  write_XLWideString(XLSX.version, o);\n  write_XLWideString(\"7262\", o);\n  o.length = o.l;\n  return o.length > o.l ? o.slice(0, o.l) : o;\n}\n"], ["readCols", "\nfunction readCols(ws, cols, opts) {\n  let contents = {};\n  if (typeof cols === 'string') {\n    cols = cols.split(',');\n  }\n  opts = (opts === undefined) ? {} : opts;\n  let dRange = xlsx.utils.decode_range(ws['!ref']);\n  for (let i = 0; i < cols.length; ++i) {\n    let dCol = xlsx.utils.decode_col(cols[i]);\n    for (let R = dRange.s.r; R <= dRange.e.r; ++R) {\n      let encCell = xlsx.utils.encode_cell({c: dCol, r: R});\n      contents[encCell] = ws[encCell] || {};\n    }\n  }\n  contents['!ref'] = ws['!ref'];\n  if (opts.asis) {\n    return contents;\n  }\n  Object.assign(opts, {\n    header: 1,\n    raw: true,\n    blankrows: true,\n  });\n  opts.header = opts.useLabel ? 'A' : opts.header;\n  let contentsJson = xlsx.utils.sheet_to_json(contents, opts);\n  if (opts.removeEmpty) {\n    contentsJson = contentsJson.filter((col) => {\n      return check.object(col) ? check.nonEmptyObject(col) : check.nonEmptyArray(col);\n    });\n  }\n  return contentsJson;\n}\n"], ["function4", "\nfunction(event, touch) {\n  if($.gestures.stoped) {\n    return;\n  }\n  $.doAction('gestures', function(index, gesture) {\n    if(!$.gestures.stoped) {\n      if($.options.gestureConfig[gesture.name] !== false) {\n        gesture.handle(event, touch);\n      }\n    }\n  });\n}\n"], ["function5", "\nfunction(p_sType, p_aArgs) {\n  if (!this.firstElement) {\n    if (UA.webkit || UA.opera) {\n      if (!this._modalFocus) {\n        this._createHiddenFocusElement();\n      }\n    } else {\n      this.innerElement.tabIndex = 0;\n    }\n  }\n  this.setTabLoop(this.firstElement, this.lastElement);\n  Event.onFocus(document.documentElement, this._onElementFocus, this, true);\n  _currentModal = this;\n}\n"], ["function6", "\nfunction(client){\n  var define_connection_options = lodash.clone(this._connection);\n  define_connection_options.policies = {\n    loadBalancing: new SingleNodePolicy()\n  };\n  this._client = client;\n  this._define_connection = new cql.Client(define_connection_options);\n  for(var i in this._models){\n    this._models[i]._properties.cql = this._client;\n    this._models[i]._properties.define_connection = this._define_connection;\n  }\n}\n"], ["getPreimage", "\nfunction getPreimage (web3, key) {\n  return new Promise((resolve, reject) => {\n    web3.debug.preimage(key.indexOf('0x') === 0 ? key : '0x' + key, function (error, preimage) {\n      if (error) {\n        resolve(null)\n      } else {\n        resolve(preimage)\n      }\n    })\n  })\n}\n"], ["defineSequenceType", "\nfunction defineSequenceType(base, name, overrides) {\n  var ctor = function ctor() {};\n  ctor.prototype = new base();\n  for (var override in overrides) {\n    ctor.prototype[override] = overrides[override];\n  }\n  var factory = function factory() {\n    var sequence = new ctor();\n    sequence.parent = this;\n    if (sequence.init) {\n      sequence.init.apply(sequence, arguments);\n    }\n    return sequence;\n  };\n  var methodNames = typeof name === 'string' ? [name] : name;\n  for (var i = 0; i < methodNames.length; ++i) {\n    base.prototype[methodNames[i]] = factory;\n  }\n  return ctor;\n}\n"], ["function8", "\nfunction(event, rec, prevChild) {\n  var key = this.$$getKey(rec);\n  var changed = false;\n  var curPos;\n  switch(event) {\n    case 'child_added':\n      curPos = this.$indexFor(key);\n      break;\n    case 'child_moved':\n      curPos = this.$indexFor(key);\n      this._spliceOut(key);\n      break;\n    case 'child_removed':\n      changed = this._spliceOut(key) !== null;\n      break;\n    case 'child_changed':\n      changed = true;\n      break;\n    default:\n      throw new Error('Invalid event type: ' + event);\n  }\n  if( angular.isDefined(curPos) ) {\n    changed = this._addAfter(rec, prevChild) !== curPos;\n  }\n  if( changed ) {\n    this.$$notify(event, key, prevChild);\n  }\n  return changed;\n}\n"], ["runDriver", "\nfunction runDriver(location, driver, options) {\n  options.testComplete = options.testComplete || 'return window.TESTS_COMPLETE';\n  options.testPassed = options.testPassed || 'return window.TESTS_PASSED && !window.TESTS_FAILED';\n  var startTime = Date.now();\n  var jobInfo = {\n    name: options.name,\n    build: process.env.TRAVIS_JOB_ID\n  };\n  Object.keys(options.jobInfo || {}).forEach(function (key) {\n    jobInfo[key] = options.jobInfo[key];\n  });\n  return Promise.resolve(null).then(function () {\n    return retry(function () {\n      return driver.sauceJobUpdate(jobInfo);\n    }, 3, '500ms', {debug: options.debug})\n  }).then(function () {\n    return retry(function () {\n      return driver.browser().activeWindow().navigator().navigateTo(location.url)\n    }, 3, '500ms', {debug: options.debug}).catch(err => {\n      err.message += ' (while navigating to url)';\n      throw err;\n    });\n  }).then(function () {\n    return waitForJobToFinish(driver, {\n      allowExceptions: options.allowExceptions,\n      testComplete: options.testComplete,\n      timeout: options.timeout,\n      debug: options.debug\n    });\n  }).then(function () {\n    return retry(function () {\n      if (typeof options.testPassed === 'string') {\n        return driver.browser().activeWindow().execute(options.testPassed);\n      } else {\n        return Promise.resolve(options.testPassed(driver));\n      }\n    }, 5, '500ms', {debug: options.debug});\n  }).then(function (result) {\n    result = {passed: result, duration: Date.now() - startTime};\n    return retry(function () { return driver.dispose({passed: result.passed}); }, 5, {debug: options.debug}).then(function () {\n      return result;\n    });\n  }, function (err) {\n    err.duration = Date.now() - startTime;\n    return retry(function () { return driver.dispose({passed: false}); }, 2, {debug: options.debug}).then(function () {\n      throw err;\n    }, function () {\n      throw err;\n    });\n  });\n}\n"], ""]