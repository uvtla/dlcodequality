[["moduleOrPromise", "\nfunction moduleOrPromise(module) {\n  <checkModuleType>\n  if (module instanceof Module) return module;\n  </checkModuleType>\n\n  <handleStringModule>\n  if (typeof(module) === 'string') {\n    <resolveExistingModule>\n    if (modules[module]) return modules[module];\n    if (deferredModules[module]) return deferredModules[module].promise;\n    </resolveExistingModule>\n    \n    <registerGlobalModule>\n    if (isGlobal(module)) return modules[module] = new GlobalModule(module);\n    </registerGlobalModule>\n\n    <deferModule>\n    var deferred = new Deferred(globalTimeout / 2, new NoModuleError(module));\n    deferredModules[module] = deferred;\n    return deferred.promise;\n    </deferModule>\n  }\n  </handleStringModule>\n\n  <rejectPromise>\n  return Promise.reject(\"Unable to resolve module of type \" + typeof(module));\n  </rejectPromise>\n}\n"], ["valueToMeta", "\nfunction (sender, contextId, value, optimizeSimpleObject = false) {\n  \n  <initializeMetaData>\n  const meta = { type: typeof value }\n  </initializeMetaData>\n\n  <categorizeValue>\n  if (meta.type === 'object') {\n    if (value === null) {\n      meta.type = 'value'\n    } else if (bufferUtils.isBuffer(value)) {\n      meta.type = 'buffer'\n    } else if (Array.isArray(value)) {\n      meta.type = 'array'\n    } else if (value instanceof Error) {\n      meta.type = 'error'\n    } else if (value instanceof Date) {\n      meta.type = 'date'\n    } else if (isPromise(value)) {\n      meta.type = 'promise'\n    } else if (hasProp.call(value, 'callee') && value.length != null) {\n      meta.type = 'array'\n    } else if (optimizeSimpleObject && v8Util.getHiddenValue(value, 'simple')) {\n      meta.type = 'value'\n    }\n  }\n  </categorizeValue>\n\n  <processArrayMeta>\n  if (meta.type === 'array') {\n    meta.members = value.map((el) => valueToMeta(sender, contextId, el, optimizeSimpleObject))\n  }\n  </processArrayMeta>\n\n  <processObjectFunctionMeta>\n  else if (meta.type === 'object' || meta.type === 'function') {\n    meta.name = value.constructor ? value.constructor.name : ''\n    meta.id = objectsRegistry.add(sender, contextId, value)\n    meta.members = getObjectMembers(value)\n    meta.proto = getObjectPrototype(value)\n  }\n  </processObjectFunctionMeta>\n\n  <processBufferMeta>\n  else if (meta.type === 'buffer') {\n    meta.value = bufferUtils.bufferToMeta(value)\n  }\n  </processBufferMeta>\n\n  <processPromiseMeta>\n  else if (meta.type === 'promise') {\n    value.then(function () {}, function () {})\n    meta.then = valueToMeta(sender, contextId, function (onFulfilled, onRejected) {\n      value.then(onFulfilled, onRejected)\n    })\n  }\n  </processPromiseMeta>\n\n  <processErrorMeta>\n  else if (meta.type === 'error') {\n    meta.members = plainObjectToMeta(value)\n    meta.members.push({\n      name: 'name',\n      value: value.name\n    })\n  }\n  </processErrorMeta>\n\n  <processDateMeta>\n  else if (meta.type === 'date') {\n    meta.value = value.getTime()\n  }\n  </processDateMeta>\n\n  <processSimpleValueMeta>\n  else {\n    meta.type = 'value'\n    meta.value = value\n  }\n  </processSimpleValueMeta>\n\n  return meta\n}\n"], ["attachEventHandlers", "\nfunction () {\n  var that    = this;\n  var dt      = this.s.dt;\n  var details = this.c.details;\n\n  <setDetailsTarget>\n  if (details.type === 'inline') {\n    details.target = 'td:first-child';\n  }\n  </setDetailsTarget>\n\n  <resolveSelector>\n  var target   = details.target;\n  var selector = typeof target === 'string' ? target : 'td';\n  </resolveSelector>\n\n  <bindClickEvent>\n  $(dt.table().body()).on('click', selector, function (e) {\n    <checkTableClass>\n    if (!$(dt.table().node()).hasClass('collapsed')) {\n      return;\n    }\n    </checkTableClass>\n\n    <checkRowPresence>\n    if (!dt.row($(this).closest('tr')).length) {\n      return;\n    }\n    </checkRowPresence>\n\n    <checkColumnTarget>\n    if (typeof target === 'number') {\n      var targetIdx = target < 0 ?\n        dt.columns().eq(0).length + target :\n        target;\n      if (dt.cell(this).index().column !== targetIdx) {\n        return;\n      }\n    }\n    </checkColumnTarget>\n\n    <toggleChildRow>\n    var row = dt.row($(this).closest('tr'));\n    if (row.child.isShown()) {\n      row.child(false);\n      $(row.node()).removeClass('parent');\n    } else {\n      var info = that.c.details.renderer(dt, row[0]);\n      row.child(info, 'child').show();\n      $(row.node()).addClass('parent');\n    }\n    </toggleChildRow>\n  });\n  </bindClickEvent>\n}\n"], ["customizer", "\nfunction customizer(destination, source) {\n  <returnSourceDirectly>\n  if (!isPlain(source)) {\n    return source;\n  }\n  </returnSourceDirectly>\n\n  <returnMergedOptions>\n  if (!isPlain(destination)) {\n    return mergeOptions(source);\n  }\n  </returnMergedOptions>\n}\n"], ["partition", "\nfunction partition(collection, fn) {\n  <initializePartitions>\n  var result = { lhs: [], rhs: [] };\n  </initializePartitions>\n\n  <categorizeElements>\n  _.forEach(collection, function(value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  </categorizeElements>\n\n  return result;\n}\n"], ["execute", "\nfunction execute(args) {\n  <parseAndExecuteOptions>\n  try {\n    const currentOptions = options.parse(args)\n    return executeOptions(currentOptions)\n  } catch (error) {\n    console.error(error.message)\n    return 1\n  }\n  </parseAndExecuteOptions>\n}\n"], ["goBin", "\nfunction goBin(opts) {\n  <initializeOptions>\n  opts = opts || {}\n  let tag = typeof opts === 'string' ? opts : opts.version\n  if (!tag) return Promise.reject(new Error('Target version not specified'))\n  let noTag = opts.includeTag === false\n  let baseDir = path.resolve(opts.dir || path.resolve(__dirname, 'vendor'))\n  let goDir = noTag ? baseDir : path.join(baseDir, `go-${tag}`)\n  let pkg = `go${tag}.${platform}-${arch}.${fileType}`\n  let pkgUrl = `${goRelUrl}/${pkg}`\n  let zipDest = path.join(baseDir, pkg)\n  </initializeOptions>\n\n  <downloadAndExtractPackage>\n  return new Promise((resolve, reject) => {\n    <createTargetDirectory>\n    mkdirp(goDir, (err) => {\n      if (err) return Promise.reject(err)\n      </createTargetDirectory>\n      \n      <writeArchiveToFile>\n      let arc = fs.createWriteStream(zipDest)\n      arc.on('error', reject)\n      https.get(pkgUrl, (res) => {\n        res.pipe(arc).on('error', reject).on('close', () => {\n          <decompressArchive>\n          let decompOpts = {strip: 1, plugins: [zip(), tar()]}\n          decompress(zipDest, goDir, decompOpts).then(() => {\n            <cleanupDownloadedArchive>\n            fs.unlink(zipDest, (err) => { if (err) console.warn(err) })\n            </cleanupDownloadedArchive>\n            return resolve(goDir)\n          }).catch(reject)\n          </decompressArchive>\n        })\n      }).on('error', reject)\n      </writeArchiveToFile>\n    })\n  })\n  </downloadAndExtractPackage>\n}\n"], ["initializeTimeComponent", "\nfunction(aSeconds) {\n  <explicitTimeConversionAndInitialization>\n  var secs = Math.abs(aSeconds);\n  this.factor = aSeconds < 0 ? -1 : 1;\n  this.hours = ICAL.helpers.trunc(secs / 3600);\n  secs -= (this.hours * 3600);\n  this.minutes = ICAL.helpers.trunc(secs / 60);\n  return this;\n  </explicitTimeConversionAndInitialization>\n}\n"], ["removeModal", "\nfunction() {\n  <findFrameAndDialog>\n  if (!this.$frame) {\n    return;\n  }\n  if (modalDialogManager.dialog === this) {\n    modalDialogManager.dialog = null;\n  }\n  </findFrameAndDialog>\n\n  <enableFrames>\n  lib.setFramesEnabled(true);\n  </enableFrames>\n\n  <removeBackdrop>\n  if (this._addedBackdrop && this._addedBackdrop.length > 0) {\n    this._addedBackdrop.forEach(function(node) { \n      node.classList.remove(\"modalBackdrop\"); \n    });\n  }\n  </removeBackdrop>\n\n  <removeDialogListenersAndElement>\n  this.$frameParent.removeEventListener(\"focus\", this._modalListener, true); \n  this.$frameParent.removeEventListener(\"click\", this._modalListener, true); \n  this.$frameParent.removeChild(this.$frame);\n  this.$frame = undefined;\n  this.$parent = undefined;\n  </removeDialogListenersAndElement>\n}\n"], ["parsePostfixExpression", "\nfunction parsePostfixExpression() {\n  <parseLeftHandSideExpression>\n  var expr = parseLeftHandSideExpressionAllowCall();\n  </parseLeftHandSideExpression>\n\n  <checkForPostfixOperators>\n  if (lookahead.type === TokenPunctuator) {\n    if ((match('++') || match('--'))) {\n      throw new Error(DISABLED);\n    }\n  }\n  </checkForPostfixOperators>\n\n  return expr;\n}\n"], "```"]