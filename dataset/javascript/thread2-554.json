[["getDockerExecutablePath", "\nfunction getDockerExecutablePath() {\n    \n    var dockerPath = getBinPath();\n    var dockerBin = path.join(dockerPath, 'docker');\n    \n    switch (process.platform) {\n        case 'darwin': return dockerBin;\n        case 'linux': return dockerBin;\n        case 'win32': return dockerBin + '.exe';\n    }\n}\n"], ["_GpfDate", "\nfunction _GpfDate() {\n    var firstArgument = arguments[_GPF_START], values = _gpfIsISO8601String(firstArgument);\n    if (values) {\n        return new _GpfGenuineDate(_GpfGenuineDate.UTC.apply(_GpfGenuineDate.UTC, values));\n    }\n    return _gpfNewApply(_GpfGenuineDate, arguments);\n}\n"], ["buildJS", "\nfunction buildJS(src, filename, dest, applyHeader, forceIncludePaths) {\n  dest = dest || config.dist.jsPath;\n  applyHeader = applyHeader || false;\n  forceIncludePaths = forceIncludePaths || false;\n\n  return gulp.src(src)\n    .pipe(gulpif(\n      forceIncludePaths,\n      include({\n        includePaths: [\n          path.dirname(src),\n          __dirname,\n          config.packagesPath\n        ]\n      }),\n      include()\n    ))\n    .on('error', console.log) \n    .pipe(babel())\n    .pipe(uglify({\n      output: {\n        \n        comments: /^(!|---)/\n      }\n    }))\n    .pipe(gulpif(applyHeader, header(config.prj.header, {\n      config: config\n    })))\n    .pipe(rename(filename))\n    .pipe(gulp.dest(dest));\n}\n"], ["rotatePoint", "\nfunction rotatePoint(point, degrees) {\n    \n    var angle = Math.PI / 180 * degrees;\n    point.x = point.x * Math.cos(angle) - point.y * Math.sin(angle);\n    point.y = point.x * Math.sin(angle) + point.y * Math.cos(angle);\n    return point;\n}\n"], ["encodeHeader", "\nfunction encodeHeader(header) {\n    var cursor = new BufferCursor(new buffer.Buffer(6));\n\n    cursor.writeUInt16BE(header.getFileType());\n    cursor.writeUInt16BE(header._trackCount);\n    cursor.writeUInt16BE(header.getTicksPerBeat() & 0x7FFF);\n\n    return encodeChunk('MThd', cursor.buffer);\n}\n"], ["getYmlsInsideFolder", "\nfunction getYmlsInsideFolder(folderPath) {\n  return new Promise((resolve, reject) => {\n    if (!fs.existsSync(folderPath)) {\n      reject('Cant\\' find syntax templates folder: ' + folderPath)\n    } else {\n      fs.readdir(folderPath, (err, data) => {\n        if (err) reject('Error reading syntax templates folder: ' + folderPath)\n        else {\n          resolve(\n            data\n            .filter(i => path.basename(i) !== path.basename(i, '.yml'))\n            .map(i => path.resolve(folderPath, i))\n          )\n        }\n      })\n    }\n  })\n}\n"], ["uploadHandler", "\nfunction uploadHandler(event) {\n    const target = event.target;\n\n    if (target.files && target.files[0]) {\n      file = target.files[0];\n      const reader = new FileReader();\n\n      reader.addEventListener('load', loadHandler);\n\n      reader.readAsDataURL(file);\n    }\n}\n"], ["getNodeInfo", "\nfunction getNodeInfo(x, y){\n        var nodeInfo = {};\n        var bestNodeInfo = {\n            node: null,\n            boundSize: 0\n        };\n        getBestNode(appTree, x, y, bestNodeInfo);\n        var bestNode = bestNodeInfo.node;\n        if(bestNode){\n            var text = bestNode.text || bestNode.label;\n            if(text){\n                text = text.replace(/\\s*\\r?\\n\\s*/g,' ');\n                text = text.replace(/^\\s+|\\s+$/g, '');\n                var textLen = byteLen(text);\n                text = textLen > 20 ? leftstr(text, 20) + '...' : text;\n                nodeInfo.text = text;\n            }\n            nodeInfo.path = getNodeXPath(bestNode);\n        }\n        else{\n            nodeInfo.x = x;\n            nodeInfo.y = y;\n        }\n        return nodeInfo;\n}\n"], ["add", "\nfunction add(f)  {\n    if (handlers.every(isnt(f)))  handlers.push(f)\n    return notify }\n"], ["getModelProperty", "\nfunction getModelProperty(type, definitions) {\n      var isPrimitive, listType;\n\n      if (type instanceof Array) {\n        listType = true;\n        type = type[0];\n      }\n\n      \n      if (typeof type === 'undefined') {\n        type = 'undefined';\n        isPrimitive = true;\n\n      } else if (definitions[type]){\n        \n        type = definitions[type]; \n        isPrimitive = false;\n\n      } else if (getInlineModel(type)) {\n        type = getInlineModel(type); \n        isPrimitive = false;\n\n      } else {\n        \n        isPrimitive = true;\n      }\n\n      if (isPrimitive) {\n        if (listType) {\n          return 'Array[' + type + ']';\n        } else {\n          return type.toString();\n        }\n      } else {\n        if (listType) {\n          return 'Array[' + getModelSignature(type.name, type.definition, type.models, type.modelPropertyMacro) + ']';\n        } else {\n          return getModelSignature(type.name, type.definition, type.models, type.modelPropertyMacro);\n        }\n      }\n}\n"], "```"]