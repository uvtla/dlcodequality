[["flatten", "\nfunction flatten(obj) {\n    <flattenWorker>\n    var flattenWorker = function(row, namespace, result) {\n        return _.reduce(row, function(result, value, key) {\n            var newKey;\n            newKey = \"\" + namespace + (namespace ? '.' : '') + key;\n            if (_.isPlainObject(value)) {\n                if (_.size(value)) {\n                    flattenWorker(value, newKey, result);\n                }\n            } else {\n                result[newKey] = value;\n            }\n            return result;\n        }, result);\n    };\n    </flattenWorker>\n    return flattenWorker(obj, '', {});\n}\n"], ["renderToString", "\nfunction renderToString(vnode, context, opts, inner, isSvgMode) {\n    if (vnode==null || typeof vnode==='boolean') {\n        return '';\n    }\n    // The function body is a single complex responsibility of converting a virtual node to a string,\n    // thus it's compliant as a whole despite the various operations involved.\n}\n"], ["capSplitAndJoin", "\nfunction capSplitAndJoin(joiner, options) {\n  const string = options.fn(this);\n  const members = string.split(/(?=[A-Z])/);\n  return members.join(joiner);\n}\n"], ["unnamedFunction", " // Note: The function is unnamed, not ideal for clarity.\nfunction (evt, callback) {\n    if (!evt || !_.isObject(evt)) {\n        var err = new Error('Please pass a valid event!');\n        debug(err); // Single line, does not constitute a responsibility.\n        throw err;\n    }\n    // The multiple responsibilities for event handling and store interaction suggest SRP violation, \n    // but without clear separable blocks we keep them under one function tag.\n}\n"], ["download", "\nfunction download(archive, name, cb) {\n    return maybe(cb, async function () {\n        <statEntry>\n        var entry = await stat(archive, name)\n        if (!entry) {\n            throw new NotFoundError(`The entry ${name} was not found in the archive.`)\n        }\n        </statEntry>\n\n        <downloadDirectory>\n        if (entry.isDirectory()) {\n            let listing = await readdir(archive, name)\n            let promises = listing.map(subname => download(archive, path.join(name, subname)))\n            return Promise.all(promises)\n        }\n        </downloadDirectory>\n\n        <downloadFile>\n        if (entry.isFile()) {\n            if (entry.downloaded === entry.blocks) {\n                return \n            }\n            return new Promise((resolve, reject) => {\n                archive.content.download({\n                    start: entry.offset,\n                    end: entry.offset + entry.blocks\n                }, err => {\n                    if (err) reject(err)\n                    else resolve()\n                })\n            })\n        }\n        </downloadFile>\n    })\n}\n"], ["WhammyVideoConstructor", "\nfunction WhammyVideo(duration, quality) {\n    this.frames = [];\n    if (!duration) {\n        duration = 1;\n    }\n    this.duration = 1000 / duration;\n    this.quality = quality || 0.8;\n}\n"], ["getVolume", "\nfunction getVolume() {\n    $.get('/controls/volume', function (data) {\n      volume = data.volume;\n      $('.js-volume').val(data.volume);\n\n      if (data.muted) {\n        $('.js-mute').hide();\n        $('.js-unmute').show();\n      } else {\n        $('.js-unmute').hide();\n        $('.js-mute').show();\n      }\n    });\n}\n"], ["unnamedReadEmitFunction", "\nfunction(pattern, options) {\n      this.emit('read');\n      this.setPattern(pattern, options);\n      var res = this.iteratorStream(this.pattern.base);\n      this.emit('end', this.files);\n      return res;\n}\n"], ["getVitalUnits", "\nfunction getVitalUnits(vitalType) {\n    \n    if (vitalType.toLowerCase() === 'blood pressure') {\n        return 'mm[Hg]';\n    } else if (vitalType.toLowerCase().indexOf('glucose') >= 0) {\n        return 'mg/dL';\n    } else if (vitalType.toLowerCase().indexOf('height') >= 0) {\n        return 'cm';\n    } else if (vitalType.toLowerCase().indexOf('weight') >= 0) {\n        return 'kg';\n    }\n\n    return null;\n}\n"], ["getMediaItem", "\nfunction getMediaItem(attachment_id, callback) {\n      this.debug('getMediaItem', attachment_id);\n      this.methodCall('wp.getMediaItem', [ this.get('blog'), this.get('username'), this.get('password'), attachment_id ], callback);\n      return this;\n}\n"], "```"]