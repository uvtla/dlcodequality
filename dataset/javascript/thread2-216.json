[["startsWith", "\nfunction startsWith(str, test){\n  if(str === test){ return true; }\n  return str.substring(0, test.length+1) === test+'.';\n}\n"], ["getRegExp", "\nfunction getRegExp(node) {\n        if (node.value instanceof RegExp) {\n            return node.value;\n        } else if (typeof node.value === \"string\") {\n\n            <deriveParent>\n            var parent = context.getAncestors().pop();\n            if ((parent.type === \"NewExpression\" || parent.type === \"CallExpression\") &&\n            parent.callee.type === \"Identifier\" && parent.callee.name === \"RegExp\") {\n            </deriveParent>\n\n                <constructRegExp>\n                try {\n                    return new RegExp(node.value);\n                } catch (ex) {\n                    return null;\n                }\n                </constructRegExp>\n\n            }\n        } else {\n            return null;\n        }\n\n    }\n"], ["gamma1_64", "\nfunction gamma1_64(x) {\n\tvar rotr19 = rotr_64(x, 19), rotr61 = rotr_64(x, 61),\n\t\tshr6 = shr_64(x, 6);\n\t\n\treturn new Int_64(\n\t\t\trotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\n\t\t\trotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\n\t\t);\n}\n"], ["CBC", "\nfunction CBC(blockcipher, cipherkeybuf, ivbuf) {\n  if (!(this instanceof CBC)) {\n    return new CBC(blockcipher, cipherkeybuf, ivbuf);\n  }\n\n  this.blockcipher = blockcipher;\n  this.cipherkeybuf = cipherkeybuf;\n  this.ivbuf = ivbuf;\n}\n"], ["countDays", "\nfunction countDays (koyomi, firstDay, length) {\n  var days = 0;\n  var d = firstDay;\n  while(length--){\n    <determineOpenDays>\n    if (koyomi.isOpen(d)) {\n      days++;\n    }\n    </determineOpenDays>\n    <incrementDay>\n    d.setTime(d.getTime() + A_DAY);\n    </incrementDay>\n  }\n  return days;\n}\n"], ["updateValues", "\nfunction (data) {\n        var self = this;\n\n        for (var name in data) {\n          <updateElement>\n          self.find('#' + name).value(data[name]);\n          </updateElement>\n        }\n\n        return self;\n      }\n"], ["getDriver", "\nfunction getDriver(name) {\n  if (!this.drivers[name]) {\n    <logDriverError>\n    log.error(new Error('Driver \"' + name + '\" is not registered.'));\n    </logDriverError>\n    return null;\n  }\n  return this.drivers[name];\n}\n"], ["optionsFunction", "\nfunction(options) {\n        var _this = this,\n            <completeJobCallback>\n            complete = function(job) {\n                completeJob(_this, job, options.callback);\n            },\n            </completeJobCallback>\n            <constructJobOptions>\n            jobOptions = {\n                src: options.src,\n                loadWithAjax: options.loadWithAjax,\n                ajaxHeaders: options.loadWithAjax ? options.ajaxHeaders : null,\n                crossOriginPolicy: options.crossOriginPolicy,\n                ajaxWithCredentials: options.ajaxWithCredentials,\n                callback: complete,\n                abort: options.abort,\n                timeout: this.timeout\n            },\n            </constructJobOptions>\n            <createNewJob>\n            newJob = new ImageJob(jobOptions);\n            </createNewJob>\n\n        <manageJobQueue>\n        if ( !this.jobLimit || this.jobsInProgress < this.jobLimit ) {\n            newJob.start();\n            this.jobsInProgress++;\n        }\n        else {\n            this.jobQueue.push( newJob );\n        }\n        </manageJobQueue>\n    }\n"], ["maintain", "\nfunction maintain() {\n    let ci = ini.get(process.cwd() +  '/config/maintain.json');\n    if (!!ci) {\n        <processMaintenanceTasks>\n        filelist.mapPath('/config/maintain').map(async srv=>{\n            let task = new (require(srv.path))(srv.name);\n            if(!((ci.GetInfo())[task.name])){\n                try{\n                    let result = await task.Execute();\n                    if(result){\n                        (ci.GetInfo())[task.name]= true;\n                        ci.SetInfo(ci.GetInfo()).Save();\n                        console.log(`\u7ef4\u62a4\u4efb\u52a1${task.name}\u7ed3\u675f.`);\n                    }\n                    else{\n                        console.log(`\u56e0\u4e3a\u8fd0\u884c\u9519\u8bef\uff0c\u4efb\u52a1${task.name}\u4e2d\u65ad\u6267\u884c`);\n                    }\n                }\n                catch(e){\n                    console.log(e);\n                    console.log(`\u56e0\u4e3a\u8fd0\u884c\u9519\u8bef\uff0c\u4efb\u52a1${task.name}\u4e2d\u65ad\u6267\u884c`);\n                }\n            }\n        });\n        </processMaintenanceTasks>\n    }\n    else{\n        <logMissingConfig>\n        console.log(\"/config/maintain.json is not exist.\");\n        </logMissingConfig>\n    }\n}\n"], ["normalize", "\nfunction normalize(argumts, offset, chaining) {\n  var args;\n\n  if (argumts.length > 0) {\n    <sliceArguments>\n    args = slice(argumts, offset);\n    </sliceArguments>\n  } else {\n    return undefined;\n  }\n\n  \n  if (args.length === 1) {\n    if (chaining || (Array.isArray(args[0]) && args[0].length > 0)) {\n      return args[0];\n    } else {\n      return [args[0]];\n    }\n  } else {\n    return args;\n  }\n}\n"], ""]