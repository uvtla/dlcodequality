[["decodeJson", "\nfunction decodeJson(basePath, value) {\n    <initializeVariables>\n    var data = {},\n        path = basePath,\n        pathType = cutils.getPathDateType(path),\n        oid = cutils.getPathIdKey(path).oid,\n        rid;\n    </initializeVariables>\n\n    <parseJsonValue>\n    if (_.isBuffer(value) || _.isString(value))\n        value = JSON.parse(value);\n\n    if (!_.isPlainObject(value) || !value.e) \n        throw new TypeError('value should be an object.');\n    </parseJsonValue>\n\n    <processDecodedValue>\n    switch (pathType) {\n        case 'object':         \n            _.forEach(value.e, function (resrc) {\n                <processResourceForObjectType>\n                // ... code block to process each resource for object type\n                </processResourceForObjectType>\n            });\n            break;\n\n        case 'instance':         \n            _.forEach(value.e, function (resrc) {\n                <processResourceForInstanceType>\n                // ... code block to process each resource for instance type\n                </processResourceForInstanceType>\n            });\n            break;\n\n        case 'resource':         \n            _.forEach(value.e, function (resrc) {\n                <processResourceForResourceType>\n                // ... code block to process each resource for resource type\n                </processResourceForResourceType>\n            });\n            break;\n\n        default:\n            break;\n     }\n     </processDecodedValue>\n    \n    return data;\n}\n"], ["_fnSaveState", "\nfunction _fnSaveState(oSettings) {\n    <checkStateSaveRequirement>\n    if (!oSettings.oFeatures.bStateSave || oSettings.bDestroying) {\n        return;\n    }\n    </checkStateSaveRequirement>\n    \n    <prepareStateObject>\n    var i, iLen, bInfinite = oSettings.oScroll.bInfinite;\n    var oState = {\n        // object construction with state data\n    };\n    </prepareStateObject>\n\n    <storeColumnVisibility>\n    for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n        oState.abVisCols.push(oSettings.aoColumns[i].bVisible);\n    }\n    </storeColumnVisibility>\n\n    <saveStateToCallback>\n    _fnCallbackFire(oSettings, \"aoStateSaveParams\", 'stateSaveParams', [oSettings, oState]);\n    \n    oSettings.fnStateSave.call(oSettings.oInstance, oSettings, oState);\n    </saveStateToCallback>\n}\n"], ["URI_comparison", "\nfunction(to) {\n    <parseURI>\n    if ((to instanceof URI) === false) {\n        to = new URI(to);\n    }\n    </parseURI>\n\n    <compareURIs>\n    if (this.isAbsolute() && to.isAbsolute() && this.host === to.host && this.port === to.port &&\n        (this.scheme === to.scheme || (this.isFilePath() && to.isFilePath())) &&\n        (this.path.indexOf(to.path) === 0 && (to.path.length === this.path.length ||\n                                              (to.path.length === 1 && to.path[0] === '/') ||\n                                              this.path[to.path.length] === '/'))) {\n        return (to.path.length === 1 && to.path[0] === '/') ? this.path.substring(to.path.length)\n                                                            : this.path.substring(to.path.length + 1);\n    } else {\n        return null;\n    }\n    </compareURIs>\n}\n"], ["Doughnut", "\nfunction Doughnut(ctx, data, cfg) {\n    <initializeProperties>\n    var canvas = ctx.canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n\n    this.ctx = ctx;\n    this.data = data;\n    this.cfg = cfg;\n    </initializeProperties>\n\n    <calculateDoughnutDimensions>\n    this.doughnutRadius = min([this.height / 2, this.width / 2]) - 5;\n\n    this.cutoutRadius = this.doughnutRadius * (cfg.percentageInnerCutout / 100);\n    </calculateDoughnutDimensions>\n\n    <calculateSegmentTotal>\n    var segmentTotal = 0, i = 0, d;\n    while ((d = data[i++])) {\n        segmentTotal += d.value;\n    }\n    this.segmentTotal = segmentTotal;\n    </calculateSegmentTotal>\n\n    <drawDoughnut>\n    this.draw();\n    </drawDoughnut>\n}\n"], ["resetPointer", "\nfunction() {\n    <resetChartPointer>\n    var chart = charts[hoverChartIndex];\n    if (chart) {\n        chart.pointer.reset();\n        chart.pointer.chartPosition = null;\n    }\n    </resetChartPointer>\n}\n"], ["addPlugin", "\nfunction addPlugin(config, pluginName, version) {\n    <checkAndToggleDefaultPlugin>\n    if (isDefaultPlugin(pluginName, version)) {\n        return togglePlugin(config, pluginName, true);\n    }\n    </checkAndToggleDefaultPlugin>\n\n    <addCustomPlugin>\n    var deps = config.getPluginDependencies();\n    var dep = PluginDependency.create(pluginName, version);\n\n    deps = deps.push(dep);\n    return config.setPluginDependencies(deps);\n    </addCustomPlugin>\n}\n"], ["cacheModification", "\nfunction(key, value) {\n    <retrieveCache>\n    var c = getCache(this.ns);\n    </retrieveCache>\n\n    <updateCache>\n    if (arguments.length === 1 && typeof key === \"object\") {\n        Object.keys(key).forEach(function(k) {\n            c[k] = key[k];\n        }, this);\n    } else {\n        c[key] = value;\n    }\n    </updateCache>\n\n    <saveCache>\n    return setCache(this.ns, c);\n    </saveCache>\n}\n"], ["tryTemplateShorthand", "\nasync function tryTemplateShorthand(templateName: string) {\n    <checkTemplateName>\n    if (templateName.match(FILE_PROTOCOL) || templateName.match(HTTP_PROTOCOL)) {\n        return templateName;\n    }\n    </checkTemplateName>\n\n    <attemptToResolveTemplateName>\n    try {\n        const reactNativeTemplatePackage = `react-native-template-${templateName}`;\n        const response = await fetch(`https:);\n\n        if (JSON.parse(response).name) {\n            return reactNativeTemplatePackage;\n        }\n    } catch (e) {\n        // Error handling if necessary\n    }\n    </attemptToResolveTemplateName>\n\n    return templateName;\n}\n"], ["combineClassNames", "\nfunction combineClassNames(...classNames) {\n    <processClassNames>\n    return classNames.map((value) => {\n        if (!value) {\n            return value;\n        }\n\n        return Array.isArray(value) ?\n            combineClassNames.apply(void 0, value) :\n            value;\n    }).join(` `).replace(/ +/g, ` `).trim();\n    </processClassNames>\n}\n"], ["getRfdData", "\nfunction getRfdData() {\n    <logRetrieval>\n    console.log('getRfdData');\n    </logRetrieval>\n\n    <checkDaemon>\n    if (config.daemons[daemon].type === 'BidCos-RF' || config.daemons[daemon].type === 'HmIP') {\n        $('#load_grid-interfaces').show();\n        if (['BidCos-RF', 'HmIP'].includes(config.daemons[daemon].type)) {\n            $('#load_grid-rssi').show();\n        }\n        </checkDaemon>\n\n        const currentDaemon = daemon;\n        <retrieveListInterfaces>\n        rpcAlert(daemon, 'listBidcosInterfaces', [], (err, data) => {\n            if (daemon === currentDaemon) {\n                listInterfaces = data || [];\n                </retrieveListInterfaces>\n\n                <retrieveListRssi>\n                if (['BidCos-RF', 'HmIP'].includes(config.daemons[daemon].type)) {\n                    rpcAlert(daemon, 'rssiInfo', [], (err, data) => {\n                        listRssi = data;\n                        $('#gbox_grid-rssi').show();\n                        initGridRssi();\n                        refreshGridRssi();\n                        getServiceMessages();\n                    });\n                } else {\n                    $('#gbox_grid-rssi').hide();\n                    getServiceMessages();\n                }\n                </retrieveListRssi>\n\n                <refreshGrid>\n                refreshGridInterfaces();\n                </refreshGrid>\n            }\n        });\n    }\n}\n"], "```"]