[["updateSizeReading", "\nfunction updateSizeReading(size,unit,target) {\n    var emSize, pxSize;\n\n    <convertSizes>\n    if(unit==='em') { \n      emSize = size;\n      pxSize = Math.floor(size*$bodySize);\n    } else { \n      pxSize = size;\n      emSize = size/$bodySize;\n    }\n    </convertSizes>\n\n    <updateDOMElements>\n    if (target === 'updatePxInput') {\n      $sizePx.val(pxSize);\n    } else if (target === 'updateEmInput') {\n      $sizeEms.val(emSize.toFixed(2));\n    } else {\n      $sizeEms.val(emSize.toFixed(2));\n      $sizePx.val(pxSize);\n    }\n    </updateDOMElements>\n}\n"], ["returnDSInvalidError", "\nfunction (errors) {\n    <normalizeErrors>\n    if (typeof errors === 'string' || errors instanceof Error) {\n      errors = {'*': '' + errors};\n    }\n    else if (errors == null) {\n      errors = {'*': 'Unknown error'};\n    }\n    </normalizeErrors>\n\n    <createErrorInstance>\n    return new DS.InvalidError(errors);\n    </createErrorInstance>\n}\n"], ["applyLinkScanner", "\nfunction(text, parent) {\n    var result = parent || document.createElement('div'); \n    var linkScanners = this._registry.getServiceReferences(\"orion.core.linkScanner\");\n\n    <scanAndReplaceLinks>\n    if (linkScanners.length > 0) {\n        var linkScanner = linkScanners[0];\n        var pattern = new RegExp(linkScanner.getProperty(\"pattern\"), \"i\"); \n        var words= linkScanner.getProperty(\"words\"); \n        var anchor = linkScanner.getProperty(\"anchor\"); \n        var index = text.search(pattern);\n        while (index >= 0) {\n            text = this._replaceLink(text, result, pattern, words, anchor);\n            index = text.search(pattern);\n        }\n    }\n    </scanAndReplaceLinks>\n\n    <appendTextToResult>\n    if (text.length > 0) {\n        result.appendChild(document.createTextNode(text));\n    }\n    </appendTextToResult>\n    \n    return result;\n}\n"], ["_doSplit", "\nfunction _doSplit(orientation) {\n    <setupSplitOrientation>\n    if (orientation === _orientation) {\n        return;\n    }\n    </setupSplitOrientation>\n\n    <updateSplitUI>\n    firstPane = _panes[FIRST_PANE];\n    Resizer.removeSizable(firstPane.$el);\n    if (_orientation) {\n        _$el.removeClass(\"split-\" + _orientation.toLowerCase());\n    }\n    _$el.addClass(\"split-\" + orientation.toLowerCase());\n    </updateSplitUI>\n\n    <createSecondPane>\n    _orientation = orientation;\n    newPane = _createPaneIfNecessary(SECOND_PANE);\n    _makeFirstPaneResizable();\n    _initialLayout();\n    </createSecondPane>\n\n    <notifyLayoutChange>\n    exports.trigger(\"paneLayoutChange\", _orientation);\n    </notifyLayoutChange>\n\n    <updateActivePane>\n    if (newPane && getCurrentlyViewedFile(firstPane.id)) {\n        setActivePaneId(newPane.id);\n    }\n    </updateActivePane>\n}\n"], ["delayPromise", "\nfunction(delay) {\n    <setupTimer>\n    var timer,\n        promise = this.then(function(val) {\n            var defer = new Deferred();\n            timer = setTimeout(\n                function() {\n                    defer.resolve(val);\n                },\n                delay);\n\n            return defer.promise();\n        });\n    </setupTimer>\n\n    <clearTimer>\n    promise.always(function() {\n        clearTimeout(timer);\n    });\n    </clearTimer>\n\n    return promise;\n}\n"], ["handleTextInput", "\nfunction (value) {\n    <assignValueIfNull>\n    if (value == null) {\n        value = this._getText();\n    }\n    </assignValueIfNull>\n\n    <updateTextInput>\n    if (!value && !this._isPassword) {\n        this.getTextInputField().value = \"\";\n        this.setHelpText(true);\n    } else if (value) {\n        this.setHelpText(false);\n        this.getTextInputField().value = value;\n    }\n    </updateTextInput>\n}\n"], ["runScriptViaChildProcessSpawn", "\nfunction runScriptViaChildProcessSpawn(script, context) {\n    <initializeCommandAndArgs>\n    var opts = context.opts;\n    var command = script.fullPath;\n    var args = [opts.projectRoot];\n    </initializeCommandAndArgs>\n\n    <handleWindowsInterpreterSelection>\n    if (fs.statSync(script.fullPath).isDirectory()) {\n        events.emit('verbose', 'Skipped directory \"' + script.fullPath + '\" within hook directory');\n        return Q();\n    }\n    if (isWindows) {\n        var interpreter = extractSheBangInterpreter(script.fullPath);\n        if (interpreter) {\n            args.unshift(command);\n            command = interpreter;\n        }\n    }\n    </handleWindowsInterpreterSelection>\n\n    <configureExecOptions>\n    var execOpts = {cwd: opts.projectRoot, printCommand: true, stdio: 'inherit'};\n    execOpts.env = {};\n    execOpts.env.CORDOVA_VERSION = require('../../package').version;\n    execOpts.env.CORDOVA_PLATFORMS = opts.platforms ? opts.platforms.join() : '';\n    execOpts.env.CORDOVA_PLUGINS = opts.plugins ? opts.plugins.join() : '';\n    execOpts.env.CORDOVA_HOOK = script.fullPath;\n    execOpts.env.CORDOVA_CMDLINE = process.argv.join(' ');\n    </configureExecOptions>\n\n    <executeSpawn>\n    return superspawn.spawn(command, args, execOpts)\n    </executeSpawn>\n\n    <handleExecutionError>\n    .catch(function(err) {\n        if (!isWindows && err.code == 'EACCES') {\n            events.emit('verbose', 'Skipped non-executable file: ' + script.fullPath);\n        } else {\n            throw new Error('Hook failed with error code ' + err.code + ': ' + script.fullPath);\n        }\n    });\n    </handleExecutionError>\n}\n"], ["_showHints", "\nfunction _showHints() {\n    <retrieveHints>\n    var hints = this._targetElement.querySelectorAll('.introjs-hint');\n    </retrieveHints>\n\n    <decideToShowHintOrPopulate>\n    if (hints && hints.length > 0) {\n        for (var i = 0; i < hints.length; i++) {\n            _showHint.call(this, hints[i].getAttribute('data-step'));\n        }\n    } else {\n        _populateHints.call(this, this._targetElement);\n    }\n    </decideToShowHintOrPopulate>\n}\n"], ["listS3Objects", "\nfunction(params, cb) {\n    var listData =  [];\n\n    <queryS3>\n    S3Handler.s3.listObjects(params, function(err, data) {\n        if (err) {\n          if (CONSOLE_MESSAGES) console.log(new Date().toISOString(),\"S3.listObjects Error:\", err);\n          cb(err, null);\n        } else {\n          var contents = data.Contents;\n          listData = listData.concat(contents);\n\n          <handleTruncatedList>\n          if (data.IsTruncated) {\n            params.Marker = contents[contents.length-1].Key;\n            s3ListObjects(params, cb);\n          } else {\n            cb(null, listData);\n          }\n          </handleTruncatedList>\n        }\n    });\n    </queryS3>\n}\n"], ["generateIndex", "\nfunction generateIndex(base, files) {\n    <prepareDocument>\n    var document = base.copy();\n    var head = document.find().only().elem('head').toValue();\n    </prepareDocument>\n\n    <setTitle>\n    head.find()\n        .only().elem('title').toValue()\n        .setContent('Mocha Tests - all');\n    </setTitle>\n\n    <addScriptTags>\n    Object.keys(files).forEach(function (relative) {\n      head.append('<script src=\"/test' + relative + '\"></script>');\n    });\n    </addScriptTags>\n\n    <returnDocumentContent>\n    return document.content;\n    </returnDocumentContent>\n}\n"], "```"]