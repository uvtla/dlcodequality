[["extractTravelPlan", "\nfunction extractTravelPlan(data) {\n  let plans = []\n  [<getPlan>\n  let getPlan = searchPlan => plans.find(plan => samePlan(plan, searchPlan))\n  </getPlan>]\n\n  [<dataLoop>\n  data.folders.forEach(folder => {\n    <folderValidation>\n    let cents = folder.cents\n    if (folder.cents === undefined) { return }\n    </folderValidation>\n    \n    <stationInformation>\n    let from = stationDataFromId(folder.departure_station_id, data)\n    let to = stationDataFromId(folder.arrival_station_id, data)\n    </stationInformation>\n    \n    <timeConversions>\n    let departure = (new Date(folder.departure_date)).toISOString()\n    let arrival = (new Date(folder.arrival_date)).toISOString()\n    </timeConversions>\n\n    <tripSegmentMappings>\n    let tripId = folder.trip_ids[0]\n    let trip = data.trips.find(trip => trip.id === tripId)\n    let segments = trip.segment_ids.map(segmentId =>\n      data.segments.find(segment => segment.id === segmentId)\n    )\n    let legs = segments.map(segment => ({\n      from: stationDataFromId(segment.departure_station_id, data),\n      to: stationDataFromId(segment.arrival_station_id, data),\n      departure: (new Date(segment.departure_date)).toISOString(),\n      arrival: (new Date(segment.arrival_date)).toISOString(),\n    }))\n    </tripSegmentMappings>\n    \n    <planCreation>\n    let searchPlan = {fares: [], legs}\n    let plan = getPlan(searchPlan)\n\n    if (plan === undefined) {\n      plan = searchPlan\n      plans.push(plan)\n    </planCreation>\n\n    <fareValidation>\n    } else if (plan.fares.find(fare => fare.price[0].cents === cents) !== undefined) {\n      return\n    }\n    </fareValidation>\n\n    <planFarePush>\n    plan.fares.push({\n      price: [{ cents: folder.cents, currency: folder.currency }],\n      class: travelClass(folder.travel_class),\n      flexibility: flexibility(folder.flexibility),\n    })\n    </planFarePush>\n  })\n  </dataLoop>]\n  return plans\n}\n"], ["prepareSheet", "\nfunction prepareSheet(opts, data, columns, idx) {\n\n  <setupOptions>\n  var opt = {sheetid: 'Sheet ' + idx, headers: true};\n  alasql.utils.extend(opt, opts);\n  </setupOptions>\n\n  <dataLengthCheck>\n  var dataLength = Object.keys(data).length;\n  </dataLengthCheck>\n\n  <columnSetup>\n  if ((!columns || columns.length == 0) && dataLength > 0) {\n    columns = Object.keys(data[0]).map(function(columnid) {\n      return {columnid: columnid};\n    });\n  }\n  </columnSetup>\n\n  <cellInitialization>\n  var cells = {};\n\n  if (wb.SheetNames.indexOf(opt.sheetid) > -1) {\n    cells = wb.Sheets[opt.sheetid];\n  } else {\n    wb.SheetNames.push(opt.sheetid);\n    wb.Sheets[opt.sheetid] = {};\n    cells = wb.Sheets[opt.sheetid];\n  }\n  </cellInitialization>\n\n  <rangeSetup>\n  var range = 'A1';\n  if (opt.range) range = opt.range;\n  </rangeSetup>\n\n  <rangeCalculation>\n  var col0 = alasql.utils.xlscn(range.match(/[A-Z]+/)[0]);\n  var row0 = +range.match(/[0-9]+/)[0] - 1;\n\n  if (wb.Sheets[opt.sheetid]['!ref']) {\n    var rangem = wb.Sheets[opt.sheetid]['!ref'];\n    var colm = alasql.utils.xlscn(rangem.match(/[A-Z]+/)[0]);\n    var rowm = +rangem.match(/[0-9]+/)[0] - 1;\n  } else {\n    var colm = 1,\n      rowm = 1;\n  }\n  var colmax = Math.max(col0 + columns.length, colm);\n  var rowmax = Math.max(row0 + dataLength + 2, rowm);\n  </rangeCalculation>\n\n  <refDefinition>\n  wb.Sheets[opt.sheetid]['!ref'] = 'A1:' + alasql.utils.xlsnc(colmax) + rowmax;\n  </refDefinition>\n\n  <populateHeaders>\n  var i = row0 + 1;\n\n  if (opt.headers) {\n    columns.forEach(function(col, idx) {\n      cells[alasql.utils.xlsnc(col0 + idx) + '' + i] = {v: col.columnid.trim()};\n    });\n    i++;\n  }\n  </populateHeaders>\n\n  <populateCells>\n  for (var j = 0; j < dataLength; j++) {\n    columns.forEach(function(col, idx) {\n      var cell = {v: data[j][col.columnid]};\n      if (typeof data[j][col.columnid] == 'number') {\n        cell.t = 'n';\n      } else if (typeof data[j][col.columnid] == 'string') {\n        cell.t = 's';\n      } else if (typeof data[j][col.columnid] == 'boolean') {\n        cell.t = 'b';\n      } else if (typeof data[j][col.columnid] == 'object') {\n        if (data[j][col.columnid] instanceof Date) {\n          cell.t = 'd';\n        }\n      }\n      cells[alasql.utils.xlsnc(col0 + idx) + '' + i] = cell;\n    });\n    i++;\n  }\n  </populateCells>\n}\n"], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ["ignoredForGoodReason", ""], ""]