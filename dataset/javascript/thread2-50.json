[["ParserError", "\nfunction ParserError(message, spark) {\n  <CaptureStackTrace>\n  Error.captureStackTrace(this, this.constructor);\n  </CaptureStackTrace>\n\n  <SetErrorProperties>\n  this.message = message;\n  this.name = this.constructor.name;\n  </SetErrorProperties>\n\n  if (spark) {\n    <HandleSparkError>\n    if (spark.listeners('error').length) spark.emit('error', this);\n    spark.primus.emit('log', 'error', this);\n    </HandleSparkError>\n  }\n}\n"], ["log", "\nfunction log(str) {\n  <PrepareMessage>\n  const message = str.split(\"::\");\n  </PrepareMessage>\n\n  <ProcessFatalError>\n  if (message[0] === \"fatal\") {\n    message[0] = new Error(message[1]);\n    throw message[0];\n  }\n  </ProcessFatalError>\n\n  <LogMessage>\n  if (message[1]) {\n    signale[message[0]](message[1]);\n    return;\n  }\n  </LogMessage>\n\n  <LogSimpleMessage>\n  signale.log(message[0]);\n  </LogSimpleMessage>\n}\n"], ["split_trim_enumerate", "\nfunction (text, sep) {\n  if (sep && sep.constructor == String) {\n    <PrepareSeparator>\n    sep = $.trim(sep);\n    </PrepareSeparator>\n  }\n  <SplitText>\n  var ar = text.split(sep);\n  var r = [];\n  var ae = new AtomEnumerator(ar);\n  </SplitText>\n  <EnumerateAndTrim>\n  var item;\n  while (ae.next()) {\n    item = ae.current();\n    if (item && item.constructor == String) {\n      item = $.trim(item);\n    }\n    r.push(item);\n  }\n  </EnumerateAndTrim>\n  return r;\n}\n"], ["eventValidator", "\nfunction(evt) {\n  <RetrieveEventElements>\n  var elem = evt.currentTarget;\n  var target = evt.target || evt.originalEvent.srcElement,\n    related = evt.originalEvent.relatedTarget || evt.originalEvent.fromElement;\n  </RetrieveEventElements>\n  <CheckEventValidity>\n  if ((elem === target || contains(elem, target)) && !contains(elem, related)) {\n    return true;\n  }\n  return false;\n  </CheckEventValidity>\n}\n"], ["sendEvents", "\nfunction (events) {\n  \n  <AssignSourceId>\n  _.each(events, function (event) {\n    if (event.sourceId === undefined) {\n      event.setSourceId(this.sourceId);\n    }\n  }, this);\n  </AssignSourceId>\n\n  <ConfigureRequest>\n  var options = {\n    data: events,\n    headers: { \"Content-Type\": \"application/json\" }\n  };\n  </ConfigureRequest>\n\n  <PostEvents>\n  this.restClient.post(this.endpointUrl + \"/events\", options, function (data, response) {\n    print(data);\n  });\n  </PostEvents>\n}\n"], ["Kit", "\nfunction Kit(str, variables, forbiddenPaths) {\n  <InitializeProperties>\n  this._variables = variables || {};\n  this._forbiddenPaths = forbiddenPaths || [];\n  </InitializeProperties>\n\n  <ReadFileIfExist>\n  if (fs.existsSync(str)) {\n    this.fileContents = fs.readFileSync(str).toString();\n    this.filename = path.basename(str);\n    this._fileDir = path.dirname(str);\n    \n    <CheckInfiniteImportLoop>\n    if (this._forbiddenPaths.indexOf(str) !== -1) {\n      throw new Error('Error: infinite import loop detected. (e.g. File A imports File B, which imports File A.) You must fix this before the file can be compiled.');\n    }\n    </CheckInfiniteImportLoop>\n    this._forbiddenPaths.push(str);\n  }\n\n  <HandleInputString>\n  else {\n    this.fileContents = str.toString();\n    this.filename = '<anonymous>';\n    this._fileDir = '';\n  }\n  </HandleInputString>\n}\n"], ["View_setModulesViewsPath", "\nfunction View_setModulesViewsPath(dir) {\n  <LoadModules>\n  var list, name, moduleToLoad, LoadedModule, moduleInstance;\n  if (this.isDir(dir)) {\n    list = this.readDir(dir);\n    while (true) {\n      name = list.shift();\n\n      if (!name) {\n        break;\n      }\n\n      moduleToLoad = dir + '/' + name;\n\n      <LoadModule>\n      try {\n        LoadedModule = di.load(moduleToLoad);\n      } catch (e) {\n        throw new error.HttpError(500, {path: moduleToLoad}, 'Missing module', e);\n      }\n      </LoadModule>\n\n      <AssertModuleFunction>\n      if (!Type.assert(Type.FUNCTION, LoadedModule)) {\n        throw new error.HttpError(500, {path: moduleToLoad}, 'Module must be function type');\n      }\n      </AssertModuleFunction>\n\n      <InstantiateModule>\n      moduleInstance = new LoadedModule(name);\n      </InstantiateModule>\n\n      <CheckModuleInstance>\n      if (!(moduleInstance instanceof ModuleInterface)) {\n        throw new error.HttpError(500, moduleInstance, 'Module must be instance of ModuleInterface \"core/module\"');\n      }\n      </CheckModuleInstance>\n\n      <AddNormalizer>\n      this.normalizers.push(moduleInstance.getViewsPath());\n\n      <AddThemePaths>\n      this.config.themes.forEach(function (name) {\n        this.paths.push(moduleInstance.getViewsPath() + name + '/');\n      }.bind(this));\n      </AddThemePaths>\n      </AddNormalizer>\n    }    \n  }\n  </LoadModules>\n}\n"], ["findPubMedArticle", "\nfunction findPubMedArticle(title, callback) {\n  <BuildUri>\n  var uri = 'http://example.com/api/pubmed/search';\n  </BuildUri>\n  <RetrieveContents>\n  utils.retrieve(uri, function(err, contents) {\n    <ParseContents>\n    var $ = cheerio.load(contents);\n    var absid = $('#absid');\n    if (absid) {\n      var id = $(absid).val();\n      callback(null, id, 'http://example.com/pubmed/' + id);\n    } else {\n      callback(null, null);\n    }\n    </ParseContents>\n  });\n  </RetrieveContents>\n}\n"], ["moveToLayer", "\nfunction(bounds, zoomChanged, dragging) {\n<MoveLayer>\n        OpenLayers.Layer.prototype.moveTo.apply(this, arguments);\n</MoveLayer>\n\n        <RedrawOnZoomOrInitialDraw>\n        if (zoomChanged || !this.drawn) {\n            for(var i=0, len=this.markers.length; i<len; i++) {\n                this.drawMarker(this.markers[i]);\n            }\n            this.drawn = true;\n        }\n        </RedrawOnZoomOrInitialDraw>\n}\n"], ["makeDateStr", "\nfunction makeDateStr(date, sep) {\n\t<DefaultSeparator>\n\tif (sep === undefined) sep = true;\n\t</DefaultSeparator>\n\n\t<RetrieveComponents>\n\tvar year = date.getUTCFullYear().toString(),\n\t\tmonth = padNum(date.getUTCMonth()+1),\n\t\tday = padNum(date.getUTCDate()),\n\t\thours = padNum(date.getUTCHours()),\n\t\tminutes = padNum(date.getUTCMinutes()),\n\t\tseconds = padNum(date.getUTCSeconds());\n\t</RetrieveComponents>\n\n\t<FormatDateStr>\n\tif (sep) {\n\t\treturn year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;\n\t} else {\n\t\treturn year + month + day + hours + minutes + seconds;\n\t}\n\t</FormatDateStr>\n}\n"], "```"]