[["clear", "\nfunction clear() {\n  <removeFiles>\n  temps.forEach(function(f) {\n    if (fs.exists(f)) {\n      fs.remove(f)\n    }\n  })\n  </removeFiles>\n  <resetTempList>\n  temps = []\n  </resetTempList>\n}\n"], ["initResource", "\nfunction initResource (ravelInstance, koaRouter) {\n  <buildRoutes>\n  buildRoute(ravelInstance, this, Routes.GET, 'getAll');\n  buildRoute(ravelInstance, this, Routes.PUT, 'putAll');\n  buildRoute(ravelInstance, this, Routes.DELETE, 'deleteAll');\n  buildRoute(ravelInstance, this, Routes.GET, 'get');\n  buildRoute(ravelInstance, this, Routes.POST, 'post');\n  buildRoute(ravelInstance, this, Routes.PUT, 'put');\n  buildRoute(ravelInstance, this, Routes.DELETE, 'delete');\n  </buildRoutes>\n  \n  <initializeRoutes>\n  initRoutes.call(this, ravelInstance, koaRouter);\n  </initializeRoutes>\n}\n"], ["attribToHtml", "\nfunction attribToHtml(str) {\n  return str.replace(pr_amp, '&amp;')\n      .replace(pr_lt, '&lt;')\n      .replace(pr_gt, '&gt;')\n      .replace(pr_quot, '&quot;');\n}\n"], ["unknownFunctionName", "\nfunction(width) {\n  <evaluateMediaQuery>\n  var foundBrkpt = false;\n  \n  for (var i = 0; i < mediaBreakpoints.length; i++) {\n    if (width >= mediaBreakpoints[i]['enter'] && width <= mediaBreakpoints[i]['exit']) {\n      foundBrkpt = true;\n      break;\n    }\n  }\n  </evaluateMediaQuery>\n\n  <updateCurrentBreakpoint>\n  if (foundBrkpt && curr !== mediaBreakpoints[i]['label']) {\n    prev = curr;\n    curr = mediaBreakpoints[i]['label'];\n    cycleThrough();\n  } else if (!foundBrkpt && curr !== '') {\n    curr = '';\n    cycleThrough();\n  }\n  </updateCurrentBreakpoint>\n}\n"], ["find", "\nfunction find(srcArr, predicate) {\n  return indexOf(srcArr, predicate) > -1 ? srcArr[indexOf(srcArr, predicate)] : UDF;\n}\n"], ["unknownFunctionName", "\nfunction(pos) {\n    return new Complex(this.x*pos.x - this.y*pos.y, this.y*pos.x + this.x*pos.y);\n}\n"], ["toPre", "\nfunction toPre(block, newBlock) {\n  <prepareForTransformation>\n  var bogus = block.getBogus();\n  bogus && bogus.remove();\n  </prepareForTransformation>\n\n  <transformHtmlToPreFormat>\n  var preHtml = block.getHtml();\n  preHtml = replace(preHtml, /(?:^[ \\t\\n\\r]+)|(?:[ \\t\\n\\r]+$)/g, '');\n  preHtml = preHtml.replace(/[ \\t\\r\\n]*(<br[^>]*>)[ \\t\\r\\n]*/gi, '$1');\n  preHtml = preHtml.replace(/([ \\t\\n\\r]+|&nbsp;)/g, ' ');\n  preHtml = preHtml.replace(/<br\\b[^>]*>/gi, '\\n');\n  </transformHtmlToPreFormat>\n\n  <updateNewBlockWithPreHtml>\n  if (CKEDITOR.env.ie) {\n    var temp = block.getDocument().createElement('div');\n    temp.append(newBlock);\n    newBlock.$.outerHTML = '<pre>' + preHtml + '</pre>';\n    newBlock.copyAttributes(temp.getFirst());\n    newBlock = temp.getFirst().remove();\n  } else {\n    newBlock.setHtml(preHtml);\n  }\n  </updateNewBlockWithPreHtml>\n\n  return newBlock;\n}\n"], ["keyboardWaitForResize", "\nfunction keyboardWaitForResize(callback, isOpening) {\n  <initializeMonitoring>\n  clearInterval(waitForResizeTimer);\n  var count = 0;\n  var maxCount;\n  var initialHeight = getViewportHeight();\n  var viewportHeight = initialHeight;\n  </initializeMonitoring>\n\n  <determineMaximumCount>\n  if (ionic.Platform.isAndroid() && ionic.Platform.version() < 4.4) {\n    maxCount = 30;\n  } else if (ionic.Platform.isAndroid()) {\n    maxCount = 10;\n  } else {\n    maxCount = 1;\n  }\n  </determineMaximumCount>\n\n  <startIntervalMonitor>\n  waitForResizeTimer = setInterval(function(){\n    viewportHeight = getViewportHeight();\n\n    <conditionCheck>\n    if (++count < maxCount &&\n        ((!isPortraitViewportHeight(viewportHeight) &&\n        !isLandscapeViewportHeight(viewportHeight)) ||\n        !ionic.keyboard.height)) {\n      return;\n    }\n    </conditionCheck>\n\n    <adjustKeyboardProperties>\n    if (!keyboardHasPlugin()) {\n      ionic.keyboard.height = Math.abs(initialHeight - window.innerHeight);\n    }\n    ionic.keyboard.isOpen = isOpening;\n    </adjustKeyboardProperties>\n\n    clearInterval(waitForResizeTimer);\n    <invokeCallback>\n    callback();\n    </invokeCallback>\n  }, 50);\n  </startIntervalMonitor>\n  return maxCount; \n}\n"], ["gettype", "\nfunction gettype(obj) {\n  <determineSimpleType>\n  var type = typeof obj;\n  if (type !== 'object') {\n    return type;\n  }\n  </determineSimpleType>\n\n  <determineObjectType>\n  return toString.call(obj)\n    .replace(objectRegExp, '$1');\n  </determineObjectType>\n}\n"], ["ElementDataSource", "\nfunction ElementDataSource(config) {\n  <extractHeadings>\n  var headings = config.data.all('tr th');\n  var newColumns = [];\n  headings.each(function(th){\n    newColumns.push(th.getHtml());\n  });\n  </extractHeadings>\n\n  <transformData>\n  var newData = [];\n  config.data.all('tr').each(function(tr){\n    var newRow = {},\n        populated = false;\n    for (var i = 0, numCols = headings.size(); i < numCols; i++) {\n\n      if (!tr.all('td').item(i)) { continue; }\n\n      newRow[headings.item(i).getHtml()] = tr.all('td').item(i).getHtml();\n      populated = true;\n    }\n    if (populated) {\n      newData.push(newRow);\n    }\n  });\n  </transformData>\n\n  <updateConfig>\n  config.columns = newColumns;\n  config.data = newData;\n  </updateConfig>\n\n  return new JSONDataSource(config);\n}\n"], ""]