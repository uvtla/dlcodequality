[["ensureContainerStateIdentifiers", "\nfunction ensureContainerStateIdentifiers (container) {\n  <getElementAndTemplate>\n  const domElement = container[$domElement]\n  const template = getTemplateFromDomElement(domElement)\n  </getElementAndTemplate>\n\n  <processTemplate>\n  const tokens = getTokens(template)\n  const identifiers = getIdentifiersFromTokens(tokens)\n  </processTemplate>\n\n  <updateState>\n  const update = {}\n  const state = container.state\n  if (identifiers) {\n    for (let key in identifiers) {\n      if (undefined === state[key])\n        update[key] = identifiers[key]\n    }\n  </updateState>\n\n  <defineNewState>\n    container.define(update)\n  }\n  </defineNewState>\n\n  return identifiers || null\n}\n"], ["getMatchingFiles", "\nfunction getMatchingFiles(directory, matchPattern, options, callback) {\n  options = options || {};\n  var matchedFiles = [],\n      recurse = options.recurse || false;\n\n  <readDirectory>\n  fs.readdir(directory, function(err, files) {\n    if (err) {\n      callback(null, matchedFiles);\n      return;\n    }\n  </readDirectory>\n\n    <fileEvaluation>\n    async.forEach(files, function(file, callback) {\n      var filePath = path.join(directory, file);\n      fs.stat(filePath, function(err, stats) {\n        if (err) {\n          callback();\n        }\n        else if (stats.isDirectory() && recurse) {\n          getMatchingFiles(filePath, matchPattern, options, callback);\n        }\n        else if (matchPattern.test(file)) {\n          matchedFiles.push(filePath);\n          callback();\n        }\n        else {\n          callback();\n        }\n      });\n    },\n    </fileEvaluation>\n\n    <finalizeResults>\n    function(err) {\n      callback(err, matchedFiles);\n    });\n  </finalizeResults>\n}\n"], ["handleRequest", "\nfunction(url) {\n        if (this.useIFrame === true) {\n            <handleIFrameRequest>\n            if (url) {\n                var form = this.createRequestForm();\n                this.frame.appendChild(form);\n                form.submit();\n                this.frame.removeChild(form);\n            } else if (this.imgDiv.parentNode === this.frame) {\n                \n                this.frame.removeChild(this.imgDiv);\n                this.imgDiv = null;\n            }\n            </handleIFrameRequest>\n        } else {\n            <handleImageRequest>\n            OpenLayers.Tile.Image.prototype.setImgSrc.apply(this, arguments);\n            </handleImageRequest>\n        }\n    }\n"], ["createCustomProperty", "\nfunction(name) {\n    <defineCustomProperty>\n    var CustomProperty = lib.method.createMethod(name,function() {});\n    lib.inherits.inherits(CustomProperty,Property);\n    </defineCustomProperty>\n\n    <extendCustomProperty>\n    lib.extend.extend(CustomProperty,{ name: name });\n    </extendCustomProperty>\n\n    return CustomProperty;\n  }\n"], ["retrieveItem", "\nfunction(key) {\n    <checkExpiry>\n    if (this.isExpired(key)) {\n      <removeExpiredItem>\n      this.remove(key);\n      </removeExpiredItem>\n    }\n    </checkExpiry>\n\n    return decode(this.ls.getItem(this._prefix(key)));\n}\n"], ["normalParseFunction", "\nfunction normal(source, state) {\n        var plug;\n\n        <handleCommands>\n        if (source.match(/^\\\\[a-zA-Z@]+/)) {\n            var cmdName = source.current().slice(1);\n            plug = plugins[cmdName] || plugins[\"DEFAULT\"];\n            plug = new plug();\n            pushCommand(state, plug);\n            setState(state, beginParams);\n            return plug.style;\n        }\n        </handleCommands>\n\n        <handleSpecialCharacters>\n        if (source.match(/^\\\\[$&%#{}_]/)) {\n          return \"tag\";\n        }\n        if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n          return \"tag\";\n        }\n        </handleSpecialCharacters>\n\n        <handleMathMode>\n        if (source.match(\"\\\\[\")) {\n            setState(state, function(source, state){ return inMathMode(source, state, \"\\\\]\"); });\n            return \"keyword\";\n        }\n        if (source.match(\"$$\")) {\n            setState(state, function(source, state){ return inMathMode(source, state, \"$$\"); });\n            return \"keyword\";\n        }\n        if (source.match(\"$\")) {\n            setState(state, function(source, state){ return inMathMode(source, state, \"$\"); });\n            return \"keyword\";\n        }\n        </handleMathMode>\n\n        var ch = source.next();\n        <handleComments>\n        if (ch == \"%\") {\n            if (!source.eol()) {\n              setState(state, inCComment);\n            }\n            return \"comment\";\n        }\n        </handleComments>\n        else if (ch == '}' || ch == ']') {\n            <handleBrackets>\n            plug = peekCommand(state);\n            if (plug) {\n                plug.closeBracket(ch);\n                setState(state, beginParams);\n            } else {\n                return \"error\";\n            }\n            return \"bracket\";\n            </handleBrackets>\n        } else if (ch == '{' || ch == '[') {\n            <handleDefaultPlugin>\n            plug = plugins[\"DEFAULT\"];\n            plug = new plug();\n            pushCommand(state, plug);\n            return \"bracket\";\n            </handleDefaultPlugin>\n        }\n        else if (/\\d/.test(ch)) {\n            <handleNumerics>\n            source.eatWhile(/[\\w.%]/);\n            return \"atom\";\n            </handleNumerics>\n        }\n        else {\n            <handleIdentifiers>\n            source.eatWhile(/[\\w\\-_]/);\n            plug = getMostPowerful(state);\n            if (plug.name == 'begin') {\n                plug.argument = source.current();\n            }\n            return plug.styleIdentifier();\n            </handleIdentifiers>\n        }\n    }\n"], ["initializeChain", "\nfunction Chain(val, name) {\n    if (!(this instanceof Chain)) return new Chain(val, name);\n\n\n\tthis._val = val;\n\tthis._name = name;\n\n\tthis.clear();\n\n\treturn this;\n\n}\n"], ["mergeMutable", "\nfunction mutable()\n{\n  <setupArguments>\n  var args   = Array.prototype.slice.call(arguments)\n    , result = args.shift()\n    ;\n  </setupArguments>\n  \n  <mergeObjects>\n  while (args.length)\n  {\n    result = merge.call(this, result, args.shift());\n  }\n  </mergeObjects>\n\n  return result;\n}\n"], ["getAttributeWrapper", "\nfunction(el, attr) {\n            return Y.Dom.batch(el, Y.Dom._getAttribute, attr);\n        }\n"], ["displayMessageBox", "\nfunction msgBox(messageHTML) {\n        <setupMessageBox>\n        var msgEl = document.querySelector('.msg-box'),\n            rect = this.getBoundingClientRect();\n\n        msgEl.style.top = window.scrollY + rect.bottom + 8 + 'px';\n        msgEl.style.left = window.scrollX + rect.left + 8 + 'px';\n\n        msgEl.style.display = 'block';\n        </setupMessageBox>\n\n        <addCloseEventHandler>\n        msgEl.querySelector('.msg-box-close').addEventListener('click', closeMsgBox);\n        </addCloseEventHandler>\n\n        <setMessageContent>\n        msgEl.querySelector('.msg-box-content').innerHTML = messageHTML;\n        </setMessageContent>\n\n        <addClassToCaller>\n        this.classList.add('filter-box-warn');\n        </addClassToCaller>\n    }\n"], "```"]