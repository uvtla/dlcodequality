[["alternation", "\nfunction alternation() {\n    var ret = this.seq(\n        concatenation,\n        this.manyf(this.seqf(\n            this.manyf(c_wsp),\n            this.stringf('/'),\n            this.manyf(c_wsp),\n            concatenation)));\n    if (ret[2].length === 0) {\n        return ret[1];\n    }\n\n    var alts = ret[2].map(function(el){ return el[4]; });\n    return new ast.Alternation([].concat(ret[1]).concat(alts));\n}\n"], ["xmlNodeCreation", "\nfunction (nodeData, options) {\n\n    <makeNode>\n    var makeNode = function (name, content, attributes, level, hasSubNodes) {\n        // ... code omitted for brevity ...\n    };\n    </makeNode>\n\n    return (function fn(nodeData, nodeDescriptor, level) {\n        // ... code omitted for brevity ...\n    }(nodeData, 0, 0));\n}\n"], ["promiseForFunctionWithDefaultCallback", "\nfunction promiseForFunctionWithDefaultCallback( fun) {\n        return this.promiseForCallback( fun, function( error, result, deferred) {\n            if ( error ) {\n                deferred.reject( error);\n            } else {\n                deferred.resolve(result);\n            }\n        });\n    }\n"], ["construct_store", "\nfunction construct_store(params) {\n        <initialSetup>\n        const store = this;\n        const { state, operations } = validate_params(params);\n        const struct = store.initialize_struct({ store, state });\n\n        const fetch_dict = {};\n        const mutate_dict = {};\n        </initialSetup>\n\n        <add_ops_to_dicts>\n        add_ops_to_dicts();\n        </add_ops_to_dicts>\n\n        <createMethods>\n        store.fetch = create_method({\n            store,\n            method: 'fetch',\n            struct,\n            op_dict: fetch_dict,\n        });\n        store.mutate = create_method({\n            store,\n            method: 'mutate',\n            struct,\n            op_dict: mutate_dict,\n        });\n        </createMethods>\n\n        <finalize>\n        return Object.freeze(store);\n        </finalize>\n    }\n"], ["getHash", "\nfunction getHash (data, depth, index) {\n    <errorHandling>\n    // Error handling logic\n    </errorHandling>\n\n    <processingData>\n    // Data processing logic\n    </processingData>\n    \n    <pushElement>\n    elements.push(element);\n    </pushElement>\n    \n    <returnElementHash>\n    return elementsHash;\n    </returnElementHash>\n  }\n"], ["bookingFormHandler", "\nfunction(form, e, eventData) {\n\n    <preventFormDefault>\n    e.preventDefault();\n    </preventFormDefault>\n\n    <handleFormState>\n    var formElement = $(form);\n    // ... form state checks, shake animation, etc.\n    </handleFormState>\n\n    <serializeFormData>\n    var formData = {};\n    $.each(formElement.serializeArray(), function(i, field) {\n      formData[field.name] = field.value;\n    });\n    </serializeFormData>\n\n    <submitBookingForm>\n    utils.doCallback('submitBookingForm', formData);\n    </submitBookingForm>\n\n    <handleBookingResponse>\n    timekitCreateBooking(formData, eventData).then(function(response){\n      // ... update form state to success\n    }).catch(function(response){\n      showBookingFailed(formElement)\n    });\n    </handleBookingResponse>\n\n  }\n"], ["ngMigrationLoader", "\nfunction loader(content, sourceMap) {\n\n    <prepareLoader>\n    this.cacheable();\n    // ... other preparatory steps ...\n    </prepareLoader>\n\n    <configureMigration>\n    var pending = migrate.processSync(content, {\n      // migration configuration\n    });\n    </configureMigration>\n\n    <handleDeprecationWarning>\n    if ((pending.isChanged) && (options.deprecate)) {\n      // ... emit warning ...\n    }\n    </handleDeprecationWarning>\n\n    <handleMigrationErrors>\n    if (pending.errors.length) {\n      // ... emit errors ...\n    }\n    </handleMigrationErrors>\n\n    <returnContent>\n    if (useMap) {\n      this.callback(null, pending.content, pending.sourceMap);\n    } else {\n      return pending.content;\n    }\n    </returnContent>\n}\n"], ["syncMaps", "\nfunction syncMaps () {\n  <initializeVariables>\n  var maps;\n  // ... initialization logic ...\n  </initializeVariables>\n\n  <linkMapEventHandlers>\n  function on () {\n    // ... link event handlers ...\n  }\n\n  function off () {\n    // ... unlink event handlers ...\n  }\n  </linkMapEventHandlers>\n\n  <synchronizeMaps>\n  function sync (master, clones) {\n    // ... synchronize maps logic ...\n  }\n  </synchronizeMaps>\n\n  <activateHandlers>\n  on();\n  </activateHandlers>\n}\n"], ["dependecyManagement", "\nfunction (config) {\n    \n    <gatherComponentInfo>\n    return function (version, component) {\n        // ... gather component info logic ...\n    };\n    </gatherComponentInfo>\n}\n"], ["objectToArray", "\nfunction objectToArray(o, order) {\n    <orderResolution>\n    order = order || Object.keys(o);\n    </orderResolution>\n\n    <mapToObject>\n    return order.map(function(k) {\n      return o[k];\n    });\n    </mapToObject>\n}\n"], "```"]