[["removeInvalidNodeErrorsInTemplateLiteral", "\nfunction removeInvalidNodeErrorsInTemplateLiteral(node) {\n    if (typeof node.value.raw === \"string\") {\n        if (ALL_IRREGULARS.test(node.value.raw)) {\n            removeWhitespaceError(node);\n        }\n    }\n}\n"], ["buildInputGroup", "\nfunction(parentEl) {\n    this.fieldset = inputEx.cn('fieldset');\n    this.legend = inputEx.cn('legend', {className: 'inputEx-Group-legend'});\n\n    <fieldsetConfiguration>\n    if(this.options.collapsible) {\n        var collapseImg = inputEx.cn('div', {className: 'inputEx-Group-collapseImg'}, null, ' ');\n        this.legend.appendChild(collapseImg);\n        inputEx.sn(this.fieldset,{className:'inputEx-Expanded'});\n    }\n\n    if(!lang.isUndefined(this.options.legend) && this.options.legend !== ''){\n        this.legend.appendChild( inputEx.cn(\"span\", null, null, \" \"+this.options.legend) );\n    }\n\n    if( this.options.collapsible || (!lang.isUndefined(this.options.legend) && this.options.legend !== '') ) {\n        this.fieldset.appendChild(this.legend);\n    }\n    </fieldsetConfiguration>\n\n    <renderFields>\n    for (var i = 0 ; i < this.options.fields.length ; i++) {\n        var input = this.options.fields[i];\n\n        if(!input) {\n            throw new Error(\"inputEx.Form: One of the provided fields is undefined ! (check trailing comma)\");\n        }\n\n        var field = this.renderField(input);\n        this.fieldset.appendChild(field.getEl() );\n    }\n    </renderFields>\n\n    <handleCollapse>\n    if(this.options.collapsed) {\n        this.toggleCollapse();\n    }\n    </handleCollapse>\n\n    parentEl.appendChild(this.fieldset);\n}\n"], ["getLocaleNumberSymbol", "\nfunction getLocaleNumberSymbol(locale, symbol) {\n    var data = findLocaleData(locale);\n    var res = data[13 ][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[13 ][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[13 ][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n"], ["storeInstanceInMap", "\nfunction() {\n    this.constructor.store[this.__get(this.constructor.id)] = this;\n    return can.Map.prototype._bindsetup.apply(this, arguments);\n}\n"], ["findAndUpdateOrHoldFile", "\nfunction find(deleted, file) {\n    var meta = bundle[file].meta;\n    var match = files.some(function some (file) {\n        return file === meta.location || ~meta.location.indexOf(file)\n            || (meta.compiler && ~meta.compiler.imported.join(',').indexOf(file));\n    });\n\n    if (!match) return;\n\n    <handleDeleted>\n    if (!deleted) {\n        self.hold(meta.location); \n        self.package.bundle[file].meta.content = fs.readFileSync(meta.location, 'utf8');\n    }\n    </handleDeleted>\n\n    <recordChanges>\n    extensions.push(meta.output);\n    changes.push(file);\n    </recordChanges>\n}\n"], ["eventStop", "\nfunction () {\n    var suicide = self.suicide;\n    self.suicide = false;\n    self.alive = false;\n    self.emit('stop', suicide);\n}\n"], ["EventConstructor", "\nfunction Event(type, data){\n    this._sender = null;\n    this._type   = type;\n    this._data   = data;\n\n    for(var prop in data) {\n        this[prop] = data[prop];\n    }\n\n    this._stopPropagation = false;\n}\n"], ["determineSchemaType", "\nfunction schemaType(schema) {\n    let type;\n\n    <checkAndAssignType>\n    if (schema.hasOwnProperty('type')) {\n        type = schema.type;\n    } else if (schema.hasOwnProperty('properties') || schema.hasOwnProperty('allOf') || schema.hasOwnProperty('additionalProperties')) {\n        type = 'object';\n    } else if (schema.hasOwnProperty('items')) {\n        type = 'array';\n    }\n    </checkAndAssignType>\n\n    <returnValidType>\n    switch (type) {\n        case 'array':\n        case 'boolean':\n        case 'file':\n        case 'integer':\n        case 'number':\n        case 'object':\n        case 'string':\n            return type;\n    }\n    </returnValidType>\n}\n"], ["parseLinearGradientArguments", "\nfunction(prefix, func, values) {\n    var angle = '180deg';\n\n    <processAngleArgument>\n    if (/^(?:-?\\d*\\.?\\d+(?:deg|rad)|to\\b|top|right|bottom|left)/.test(values[0])) {\n        angle = values.shift();\n        if (angle.indexOf('to ') < 0) {\n            <adjustForModernSyntax>\n            if (angle.indexOf('top') >= 0) {\n                if (angle.indexOf('left') >= 0) {\n                    angle = 'to bottom right';\n                } else if (angle.indexOf('right') >= 0) {\n                    angle = 'to bottom left';\n                } else {\n                    angle = 'to bottom';\n                }\n            } else if (angle.indexOf('bottom') >= 0) {\n                if (angle.indexOf('left') >= 0) {\n                    angle = 'to top right';\n                } else if (angle.indexOf('right') >= 0) {\n                    angle = 'to top left';\n                } else {\n                    angle = 'to top';\n                }\n            } else if (angle.indexOf('left') >= 0) {\n                angle = 'to right';\n            } else if (angle.indexOf('right') >= 0) {\n                angle = 'to left';\n            } else if (prefix) {\n                <convertToLegacySyntax>\n                if (angle.indexOf('deg') >= 0) {\n                    angle = (90 - parseFloat(angle)) + 'deg';\n                } else if (angle.indexOf('rad') >= 0) {\n                    angle = (Math.PI / 2 - parseFloat(angle)) + 'rad';\n                }\n                </convertToLegacySyntax>\n            }\n            </adjustForModernSyntax>\n        }\n    }\n    </processAngleArgument>\n\n    return func + '(' + angle + ',' + values.join(',') + ')';\n}\n"], ["updateTooltipClass", "\nfunction(obj, o, v, p) {\n    this.rendered && this.tooltip.removeClass(p).addClass(v);\n}\n"], "```"]