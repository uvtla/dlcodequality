<serviceLoader>
function ServiceLoader(type, options){
  <serviceLoaderSetup>
  var loadCallbacks = [];
  this.name = type;
  this.cid = $.uniqueId('ServiceLoader');
  this.isHydrated = false;
  this.isComponent = true;
  this.isModel = true;
  this.isLazyComponent = true;
  this.attributes = {};
  this.consumers = [];
  this.set = this.on = this.off = function(){
    return 1;
  };
  this.get = function(path){
    return (path) ? undefined : this;
  };
  </serviceLoaderSetup>

  <hydrateService>
  this.hydrate = function(service){
    SERVICES[this.name] = service;
    this._component = service;
    _.each(this.consumers, function(consumer){
      var component = consumer.component,
          key = consumer.key;
      if(component.attributes && component.set){ component.set(key, service); }
      if(component.services){ component.services[key] = service; }
      if(component.defaults){ component.defaults[key] = service; }
    });
    service.consumers = this.consumers;
    
    _.each(loadCallbacks, (cb)=>{ cb(service); });
    delete this.loadCallbacks;
  };
  </hydrateService>

  <serviceLoaderOnLoad>
  this.onLoad = function(cb){
    loadCallbacks.push(cb);
  };
  </serviceLoaderOnLoad>
}
</serviceLoader>

<cleanup>
function cleanup() {
  <cleanupListeners>
  res.removeListener('finish', makePoint);
  res.removeListener('error', cleanup);
  res.removeListener('close', cleanup);
  </cleanupListeners>
}
</cleanup>

<parse>
function parse (argv, opts, target) {
  <parseSetup>
  if ('string' === typeof argv) argv = argv.split(rSplit).filter(ignore); // Split and filter the argv if it's a string.
  if (!opts) opts = {}; // Ensure there is an opts object to work with.
  opts[don] = true; // Mark the beginning of parsing.
  </parseSetup>

  <parseArrayFirstPass>
  var parsed = parseArray(argv, opts); // First pass parsing of argv.
  </parseArrayFirstPass>

  <parseArraySecondPass>
  opts[don] = false; // Mark the end of the first pass.
  var through = parsed[don].length ? parseArray(parsed[don], opts) : null; // Second pass parsing if needed.
  </parseArraySecondPass>

  <buildTargetObject>
  if (!target) target = {}; // Ensure there is a target object to build upon.
  target.options = parsed; // Assign parsed options to target.
  target.commands = parsed[din]; // Assign parsed commands to target.
  target.input = argv; // Keep the original input for reference.
  if (through) { // If there were 'through' items parsed in the second pass...
    target.through = {
      options: through,
      commands: through[din]
    };
    delete through[din]; // Cleanup intermediate data.
  }
  delete parsed[din];
  delete parsed[don];
  </buildTargetObject>

  return target;

  <ignoreHelper>
  function ignore (s) { // Helper function to ignore empty string values.
    return s && '' !== s;
  }
  </ignoreHelper>
}
</parse>

<field>
function Field (field, name, parent) {
  <fieldInitialization>
  if (!(this instanceof Field)) return new Field(field, name, parent);

  debug('field <%s> being built from <%s>', name, field); // Debug logging for field initialization.
  Entry.call(this, field, name, parent); // Initialize the Entry that Field extends from.
  this._context = parent._context;
  this._this = parent._this;
  </fieldInitialization>

  <fieldCompilation>
  if (typeof this._content !== 'string') { // If the content is not a string, use as is.
    this._compiled = function () {
      return this._content;
    }.bind(this);
  } else { // If the content is a string, use a template function for compilation.
    this._compiled = _.template(this._content);
  }
  </fieldCompilation>
}
</field>

<_main>
function _main() {
  <getPathDifferences>
  const {guides: acGuidePaths, images: acGuideImagesPaths, examples: acExamplePaths} = getPathsFromAioContent(); // Get content paths from AIO.
  const {guides: coGuidePaths, images: coGuideImagesPaths, examples: coExamplePaths} = getPathsFromCodeowners(); // Get content paths from codeowners.

  const guidesDiff = arrayDiff(acGuidePaths, coGuidePaths); // Compute differences between guide paths.
  const imagesDiff = arrayDiff(acGuideImagesPaths, coGuideImagesPaths); // Compute differences between image paths.
  const examplesDiff = arrayDiff(acExamplePaths, coExamplePaths); // Compute differences between example paths.
  const hasDiff = !!(guidesDiff.diffCount || imagesDiff.diffCount || examplesDiff.diffCount); // Determine if there are any differences.
  </getPathDifferences>

  <reportAndExit>
  if (hasDiff) {
    const expectedGuidesSrc = path.relative(PROJECT_ROOT_DIR, AIO_GUIDES_DIR); // Get the expected source paths for guides.
    const expectedImagesSrc = path.relative(PROJECT_ROOT_DIR, AIO_GUIDE_IMAGES_DIR); // Get the expected source paths for images.
    const expectedExamplesSrc = path.relative(PROJECT_ROOT_DIR, AIO_GUIDE_EXAMPLES_DIR); // Get the expected source paths for examples.
    const actualSrc = path.relative(PROJECT_ROOT_DIR, CODEOWNERS_PATH); // Get the actual source path.

    reportDiff(guidesDiff, expectedGuidesSrc, actualSrc); // Report differences for guides.
    reportDiff(imagesDiff, expectedImagesSrc, actualSrc); // Report differences for images.
    reportDiff(examplesDiff, expectedExamplesSrc, actualSrc); // Report differences for examples.
  }

  process.exit(hasDiff ? 1 : 0); // Exit the process based on the presence of differences.
  </reportAndExit>
}
</_main>

<groupByProperty>
function groupByProperty(objects) {
  const groupedObj = objects.reduce((accumulator, obj) => {
      const prop = Object.keys(obj)[0]; // Determine the property to group by.

      accumulator[prop] = accumulator[prop] ? accumulator[prop].concat(obj) : [obj]; // Group objects by that property.
      return accumulator;
  }, {});

  return Object.keys(groupedObj).map(prop => groupedObj[prop]); // Transform the grouped object into the desired array format.
}
</groupByProperty>

<parseBrtCellBool>
function parse_BrtCellBool(data) {
  var cell = parse_XLSBCell(data); // Parse cell information from data.
  var fBool = data.read_shift(1); // Read a boolean value from data.
  return [cell, fBool, 'b']; // Return the parsed data along with type identification.
}
</parseBrtCellBool>

<encodeSample>
function encodeSample(sample) {
  
  <compandingSetup>
  let compandedValue; 
  sample = (sample ==-32768) ? -32767 : sample; // Prevent wrap-around for the lowest value.
  
  let sign = ((~sample) >> 8) & 0x80; // Extract the sign bit.
  if (!sign) {
    sample = sample * -1; // Flip the sample if it's positive.
  }
  if (sample > 32635) {
    sample = 32635; // Clamp the sample to a maximum value.
  }
  </compandingSetup>

  <compandingCalculation>
  if (sample >= 256)  { // If the sample requires companding...
    
    let exponent = LOG_TABLE[(sample >> 8) & 0x7F]; // Look up the exponent from the logarithm table.
    
    let mantissa = (sample >> (exponent + 3) ) & 0x0F; // Calculate the mantissa.
    compandedValue = ((exponent << 4) | mantissa); // Combine exponent and mantissa for the companded value.
  } else {
    compandedValue = sample >> 4; // Use a simpler calculation for smaller samples.
  } 
  </compandingCalculation>
  
  return compandedValue ^ (sign ^ 0x55); // Return the final encoded value after XOR with the sign bit.
}
</encodeSample>

<destroy>
function destroy() {
  <updateParallaxesList>
  Parallax._parallaxes.splice(Parallax._parallaxes.indexOf(this), 1); // Remove this Parallax instance from the global list.
  </updateParallaxesList>
  
  <resetStyles>
  this.$img[0].style.transform = ''; // Reset any transformations applied to the image element.
  </resetStyles>
  
  <removeEventHandlers>
  this._removeEventHandlers(); // Remove event handlers associated with this Parallax instance.
  </removeEventHandlers>

  <clearPluginInstance>
  this.$el[0].M_Parallax = undefined; // Clear the reference to this Parallax instance from the element.
  </clearPluginInstance>
}
</destroy>

<get>
function get(connections, params, cb) {
  <validateParams>
  var failed = validate(params).has(CONSTANTS.DATA_TARGET_ID); // Validate that the required data target ID is present in params.

  if (failed) {
    return cb(buildErrorResponse({error: new Error("An ID Parameter Is Required To Get A Data Target"), code: ERROR_CODES.FH_FORMS_INVALID_PARAMETERS})); // Return an error if validation fails.
  }

  if (!misc.checkId(params._id)) {
    return cb(buildErrorResponse({error: new Error("Invalid ID Paramter"), code: ERROR_CODES.FH_FORMS_INVALID_PARAMETERS})); // Check and return an error if _id is invalid.
  }
  </validateParams>

  <findAndCheckForms>
  async.waterfall([ // Begin an asynchronous waterfall to find data targets and check forms.

    <findDataTargets>
    function findDataTargets(cb) {
      var query = {};
      
      query[CONSTANTS.DATA_TARGET_ID] = params._id; // Construct the query to find the data target.

      lookUpDataTargets(connections, {
        query: query,
        lean: true
      }, function(err, dataTargets) {
        if (err) { // If there's an error during lookup...
          return cb(buildErrorResponse({
            error: err,
            userDetail: "Unexpected Error When Searching For A Data Target",
            code: ERROR_CODES.FH_FORMS_UNEXPECTED_ERROR
          }));
        }

        if (dataTargets.length !== 1) { // If the expected data target was not found or too many were found...
          return cb(buildErrorResponse({
            error: new Error("Data Target Not Found"),
            systemDetail: "Requested ID: "  + params[CONSTANTS.DATA_TARGET_ID],
            code: ERROR_CODES.FH_FORMS_NOT_FOUND
          }));
        }

        return cb(undefined, dataTargets[0]); // Pass the found data target to the next function in the waterfall.
      });
    },
    </findDataTargets>

    <checkFormsUsingDataTarget>
    function checkForms(dataTargetJSON, cb) {
      checkFormsUsingDataTarget(connections, dataTargetJSON, cb); // Check which forms are using the found data target.
    }
    </checkFormsUsingDataTarget>

  ], cb);
  </findAndCheckForms>
}
</get>