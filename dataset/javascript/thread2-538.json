[["replace", "\nfunction replace(script) {\n    var parent = script.parentNode\n    if (!parent) return\n\n    LARGE = /\\?large/.test(script.src)\n    var iframe = document.createElement('iframe')\n    var iframePath = '/iframe' + (LARGE ? '?large' : '')\n    iframe.src = script.src.replace(/\\/slackin\\.js.*/, iframePath)\n    iframe.style.borderWidth = 0\n    iframe.className = '__slackin'\n\n    iframe.style.width = (LARGE ? 190 : 140) + 'px'\n    iframe.style.height = (LARGE ? 30 : 20) + 'px'\n    iframe.style.visibility = 'hidden'\n\n    parent.insertBefore(iframe, script)\n    parent.removeChild(script)\n\n    iframe.onload = function() {\n        setup(iframe)\n    }\n}\n"], ["cloneTransforms", "\nfunction _cloneTransforms(transforms) {\n    transforms = extendObject({}, transforms);\n    transforms.masks = transforms.masks.slice(0);\n    return transforms;\n}\n"], ["toggleMenu", "\nfunction(toggle) {\n    var self = this, menu;\n\n    if (self.menu && self.menu.visible() && toggle !== false) {\n        return self.hideMenu();\n    }\n\n    if (!self.menu) {\n        menu = self.state.get('menu') || [];\n\n        if (menu.length) {\n            menu = {\n                type: 'menu',\n                items: menu\n            };\n        } else {\n            menu.type = menu.type || 'menu';\n        }\n\n        if (!menu.renderTo) {\n            self.menu = Factory.create(menu).parent(self).renderTo();\n        } else {\n            self.menu = menu.parent(self).show().renderTo();\n        }\n\n        self.fire('createmenu');\n        self.menu.reflow();\n        self.menu.on('cancel', function(e) {\n            if (e.control.parent() === self.menu) {\n                e.stopPropagation();\n                self.focus();\n                self.hideMenu();\n            }\n        });\n\n        self.menu.on('select', function() {\n            self.focus();\n        });\n\n        self.menu.on('show hide', function(e) {\n            if (e.control == self.menu) {\n                self.activeMenu(e.type == 'show');\n            }\n            self.aria('expanded', e.type == 'show');\n        }).fire('show');\n    }\n\n    self.menu.show();\n    self.menu.layoutRect({ w: self.layoutRect().w });\n    self.menu.moveRel(self.getEl(), self.isRtl() ? ['br-tr', 'tr-br'] : ['bl-tl', 'tl-bl']);\n    self.fire('showmenu');\n}\n"], ["implicitGrant", "\nfunction implicitGrant(iconfig) {\n    let link = iconfig.link;\n    window.location.href = `${iconfig.host + link.href}?response_type=${link.responseType}&client_id=${iconfig.clientID}`;\n    return new Promise.resolve()\n}\n"], ["initializePlugin", "\nfunction() {\n    $.extend(this.defaultOptions, (this.regionalOptions && this.regionalOptions['']) || {});\n    var jqName = camelCase(this.name);\n    $[jqName] = this;\n    $.fn[jqName] = function(options) {\n        var otherArgs = Array.prototype.slice.call(arguments, 1);\n        if ($[jqName]._isNotChained(options, otherArgs)) {\n            return $[jqName][options].apply($[jqName], [this[0]].concat(otherArgs));\n        }\n        return this.each(function() {\n            if (typeof options === 'string') {\n                if (options[0] === '_' || !$[jqName][options]) {\n                    throw 'Unknown method: ' + options;\n                }\n                $[jqName][options].apply($[jqName], [this].concat(otherArgs));\n            } else {\n                $[jqName]._attach(this, options);\n            }\n        });\n    };\n}\n"], ["fetchAllRows", "\nfunction(rows) {\n    var row;\n    if (!rows) rows = [];\n    while ((row = this.fetchAsArray())) rows.push(row);\n    this.reset();\n    return rows;\n}\n"], ["applyNodeExtensionResolution", "\nfunction applyNodeExtensionResolution(unqualifiedPath, {extensions}) {\n    while (true) {\n        let stat;\n\n        try {\n            stat = statSync(unqualifiedPath);\n        } catch (error) {}\n\n        if (stat && !stat.isDirectory()) {\n            if (lstatSync(unqualifiedPath).isSymbolicLink()) {\n                unqualifiedPath = path.normalize(path.resolve(path.dirname(unqualifiedPath), readlinkSync(unqualifiedPath)));\n            }\n            return unqualifiedPath;\n        }\n\n        if (stat && stat.isDirectory()) {\n            let pkgJson;\n            try {\n                pkgJson = JSON.parse(readFileSync(`${unqualifiedPath}/package.json`, 'utf-8'));\n            } catch (error) {}\n\n            let nextUnqualifiedPath;\n            if (pkgJson && pkgJson.main) {\n                nextUnqualifiedPath = path.resolve(unqualifiedPath, pkgJson.main);\n            }\n            if (nextUnqualifiedPath && nextUnqualifiedPath !== unqualifiedPath) {\n                const resolution = applyNodeExtensionResolution(nextUnqualifiedPath, {extensions});\n                if (resolution !== null) {\n                    return resolution;\n                }\n            }\n        }\n\n        const qualifiedPath = extensions\n            .map(extension => {\n                return `${unqualifiedPath}${extension}`;\n            })\n            .find(candidateFile => {\n                return existsSync(candidateFile);\n            });\n        if (qualifiedPath) {\n            return qualifiedPath;\n        }\n\n        if (stat && stat.isDirectory()) {\n            const indexPath = extensions\n                .map(extension => {\n                    return `${unqualifiedPath}/index${extension}`;\n                })\n                .find(candidateFile => {\n                    return existsSync(candidateFile);\n                });\n            if (indexPath) {\n                return indexPath;\n            }\n        }\n\n        return null;\n    }\n}\n"], ["do_msgid_header", "\nfunction do_msgid_header(cb) {\n    const msgid = trans.header.get('message-id');\n    const mmatch = /@([^>]+)>/.exec(msgid);\n    if (mmatch) {\n        return plugin.do_lookups(connection, cb, mmatch[1], 'msgid');\n    }\n    cb();\n}\n"], ["sortChildren", "\nfunction sortChildren(parent, sortingFunction) {\n    if (!parent.children) return;\n    parent.children = new Map([...parent.children.entries()].sort(sortingFunction));\n    for (var i = 0; i < parent.children.length; ++i)\n        recalculateSiblings(parent.children[i], i);\n    for (var child of parent.children.values())\n        sortChildren(child, sortingFunction);\n}\n"], ["executeNext", "\nfunction executeNext(gremlin, i, callback) {\n    if (stopped) return;\n    if (i >= nb) return callDone();\n    executeInSeries([gremlin], [], horde, function() {\n        setTimeout(function() {\n            executeNext(pickGremlin(gremlins, distribution), ++i, callback);\n        }, config.delay);\n    });\n}\n"], "```"]