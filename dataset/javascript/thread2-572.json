[["nullCharacterInForeignContent", "\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = UNICODE.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\n"], ["formatAwards", "\nfunction formatAwards(raw) {\n    var wins, nominations;\n\n    <parseRawData>\n    if (!raw) {\n        return { wins: 0, nominations: 0, text: '' };\n    }\n\n    wins = raw.match(/(\\d+) wins?/i);\n    nominations = raw.match(/(\\d+) nominations?/i);\n    </parseRawData>\n\n    <formatResponse>\n    return {\n        wins: wins ? +wins[1] : 0,\n        nominations: nominations ? +nominations[1] : 0,\n        text: raw\n    };\n    </formatResponse>\n}\n"], ["result", "\nfunction result(object, property) {\n    \n    if (!object) {\n      return null;\n    }\n    var value = object[property];\n    return toString.call(value) == funcClass ? object[property]() : value;\n}\n"], ["anonymousFunction", "\nfunction (t) {\n      var self  = this;\n      this.node = t.node; // Initializing the node property\n      \n      <configureOptions>\n      var userOpts = this.get('opts');\n      this.opts = extend(defaultOpts, userOpts);\n      </configureOptions>\n\n      <scheduleInitialization>\n      setTimeout(function () {\n        self.s = new IScroll(t.node, self.opts);\n        t.complete();\n      }, 0);\n      </scheduleInitialization>\n}\n"], ["CFFDict_setByKey", "\nfunction CFFDict_setByKey(key, value) {\n      <validateKey>\n      if (!(key in this.keyToNameMap)) {\n        return false;\n      }\n      </validateKey>\n\n      <processValue>\n      if (value.length === 0) {\n        return true;\n      }\n      var type = this.types[key];\n      \n      if (type === 'num' || type === 'sid' || type === 'offset') {\n        value = value[0];\n      }\n      </processValue>\n\n      <setValue>\n      this.values[key] = value;\n      return true;\n      </setValue>\n}\n"], ["clean", "\nfunction clean (args, cb) {\n  <setupParameters>\n  if (!cb) cb = args, args = [];\n  if (!args) args = [];\n  args = args.join(\"/\").split(\"@\").join(\"/\");\n  if (args.substr(-1) === \"/\") args = args.substr(0, args.length - 1);\n  </setupParameters>\n\n  <removeDirectory>\n  rm(path.join(npm.cache, path.normalize(args)), cb);\n  </removeDirectory>\n}\n"], ["sendSessionResponse", "\nfunction sendSessionResponse(req, res, next) {\n  \n  <setCookie>\n  res.cookie('session', req.session.id);\n  </setCookie>\n\n  <setLocation>\n  res.location('/sessions/' + req.session.id);\n  </setLocation>\n\n  <sendJsonResponse>\n  res.status(201).json(req.session);\n  </sendJsonResponse>\n}\n"], ["remotePackages", "\nfunction remotePackages (args, index, doVersion, doTag, recurring, cb) {\n  if (recurring || index < 3) {\n    <setupVariables>\n    var name = (args.length + 1 === index) ? args[args.length - 1] : \"\";\n    if (name === undefined) name = \"\";\n    if (name.indexOf(\"/\") !== -1) return cb(null, []);\n    </setupVariables>\n    \n    <retrieveAndProcessPackages>\n    registry.get(\"/\", null, 3600, function (er, d) {\n      if (er) return cb(er);\n      <processResults>\n      var remoteList = Object.keys(d), ...; // Truncated for brevity\n      \n      // Further processing logic here ...\n\n      return cb(null, list);\n      </processResults>\n    });\n    </retrieveAndProcessPackages>\n  }\n}\n"], ["anonymousFunctionProcessingResults", "\nfunction(results) {\n    <stopWaiting>\n    onWait(false);\n    </stopWaiting>\n    \n    <processMultipleResults>\n    angular.forEach(results, function(result) {\n      self.when(result, true);  \n    });\n    </processMultipleResults>\n\n    <executeCallback>\n    applyCallback();\n    </executeCallback>\n}\n"], ["getNodeDefinitionOverride", "\nfunction() {\n    <callSuperclass>\n    var def = YAHOO.widget.HTMLNode.superclass.getNodeDefinition.call(this);\n    if (def === false) { return false; }\n    </callSuperclass>\n\n    <customizeDefinition>\n    def.html = this.html;\n    </customizeDefinition>\n    \n    return def;\n}\n"], "```"]