<function_markStart>
function _markStart(id, time) {
    <validateTest>
    if (activeTests[id.id]) {
        console.error("Recursive tests with the same id are not supported. Timer id: " + id.id);
    }
    </validateTest>

    <recordStartTime>
    activeTests[id.id] = { startTime: time };
    </recordStartTime>
}
</function_markStart>

<function_resolve>
function _resolve(from, to) {
    <handleUndefinedParameters>
    if (typeof to === 'undefined') {
        to = from;
        from = void(0);
    }
    </handleUndefinedParameters>

    <handleDefaultExtension>
    if (!path.extname(to)) {
        to += '.js';
    }
    </handleDefaultExtension>

    <returnResolvedPath>
    return (typeof from === 'undefined') ? path.resolve(to) : path.resolve(from, to);
    </returnResolvedPath>
}
</function_resolve>

<function_anonymous>
function (contentType, contentDisposition) {
    <detectMime>
    var detected = fileType(this.stream || this.body), 
        source = 'forced',
        mime;
    </detectMime>
    
    <handleContentDisposition>
    !contentDisposition && (contentDisposition = this.headers.one('content-disposition'));
    </handleContentDisposition>
    <inferContentType>
    if (!contentType) {
        contentType = this.headers.one('content-type') && this.headers.one('content-type').value;
        source = HEADER;
    }
    </inferContentType>

    <assignDetectedMimeType>
    if (!contentType && detected) {
        contentType = detected.mime;
        source = BODY;
    }
    </assignDetectedMimeType>

    <setDefaultMimeType>
    if (!contentType) {
        contentType = 'text/plain';
        source = 'default';
    }
    </setDefaultMimeType>

    <initializeMimeInfo>
    mime = Response.mimeInfo(contentType, contentDisposition);
    mime.source = source;
    mime.detected = detected && Response.mimeInfo(detected.mime, contentDisposition);
    </initializeMimeInfo>

    <returnMime>
    return mime;
    </returnMime>
}
</function_anonymous>

<function_core_sha256>
function core_sha256(m, l)
{
    <initializeVariables>
    var HASH = new Array(1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225);
    var W = new Array(64);
    var a, b, c, d, e, f, g, h;
    var i, j, T1, T2;
    </initializeVariables>

    
    <prepareMessageSchedule>
    m[l >> 5] |= 0x80 << (24 - l % 32);
    m[((l + 64 >> 9) << 4) + 15] = l;
    </prepareMessageSchedule>

    <mainHashComputation>
    for(i = 0; i < m.length; i += 16) {
      a = HASH[0];
      b = HASH[1];
      c = HASH[2];
      d = HASH[3];
      e = HASH[4];
      f = HASH[5];
      g = HASH[6];
      h = HASH[7];

      for(j = 0; j < 64; j++)  {
        if (j < 16) W[j] = m[j + i]; else W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]), sha256_Gamma0256(W[j - 15])), W[j - 16]);
        T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)), sha256_K[j]), W[j]);
        T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
        h = g;
        g = f;
        f = e;
        e = safe_add(d, T1);
        d = c;
        c = b;
        b = a;
        a = safe_add(T1, T2);
      }

      HASH[0] = safe_add(a, HASH[0]);
      HASH[1] = safe_add(b, HASH[1]);
      HASH[2] = safe_add(c, HASH[2]);
      HASH[3] = safe_add(d, HASH[3]);
      HASH[4] = safe_add(e, HASH[4]);
      HASH[5] = safe_add(f, HASH[5]);
      HASH[6] = safe_add(g, HASH[6]);
      HASH[7] = safe_add(h, HASH[7]);
    }
    </mainHashComputation>

    <returnFinalHash>
    return HASH;
    </returnFinalHash>
}
</function_core_sha256>

<function_createModalOverlay>
function createModalOverlay() {
  <createOverlayStructure>
  const containerElement = _createModalContainer();
  const defsElement = document.createElementNS(svgNS, 'defs');
  const maskContainer = _createMaskContainer();
  const maskRect = _createMaskRect();
  const maskOpening = _createMaskOpening();
  const maskConsumer = _createMaskConsumer();

  maskContainer.appendChild(maskRect);
  maskContainer.appendChild(maskOpening);
  defsElement.appendChild(maskContainer);
  containerElement.appendChild(defsElement);
  containerElement.appendChild(maskConsumer);
  </createOverlayStructure>

  <returnOverlay>
  return containerElement;
  </returnOverlay>
}
</function_createModalOverlay>

<function_processScalarParam>
function processScalarParam(existedParam: Object, value: Object): Object {
  <handleArrayParam>
  if (Array.isArray(existedParam)) {
    existedParam.push(value);
    return existedParam;
  }
  </handleArrayParam>
  <handleExistingParam>
  if (existedParam !== undefined) {
    return [existedParam, value];
  }
  </handleExistingParam>
  
  <returnNewValue>
  return value;
  </returnNewValue>
}
</function_processScalarParam>

<function_anonymous_2>
function(value)
{
	<parseReference>
	if ( '*' == (value+'').charAt(0) )
	{
		value = (value+'').substr(1);
		if (value.charAt(0) == '#')
		{
			value = value.substr(1, value.indexOf('#') - 1);
		}

		if (this.refs[value] == undefined)
		{
			throw new YamlParseException('Reference "'+value+'" does not exist', this.getRealCurrentLineNb() + 1, this.currentLine);
		}
		return this.refs[value];
	}
	</parseReference>

	<parseFoldedScalar>
	var matches = null;
	if (matches = /^(\||>)(\+|\-|\d+|\+\d+|\-\d+|\d+\+|\d+\-)?( +#.*)?$/.exec(value))
	{
		matches = { separator: matches[1], modifiers: matches[2], comments: matches[3] };
		var modifiers = matches.modifiers ? matches.modifiers : '';

		return this.parseFoldedScalar(matches.separator, modifiers.replace(/\d+/g, ''), Math.abs(parseInt(modifiers)));
	}
	</parseFoldedScalar>

	<parseYamlInline>
	try {
		return new YamlInline().parse(value);
	} catch (e) {
		if (e instanceof YamlParseException) {
			e.setParsedLine(this.getRealCurrentLineNb() + 1);
			e.setSnippet(this.currentLine);
		}
		throw e;
	}
	</parseYamlInline>
}
</function_anonymous_2>

<function_getPt>
function getPt(n1, n2, perc)
{
    <calculateInterpolatedValue>
    const diff = n2 - n1;
    return n1 + (diff * perc);
    </calculateInterpolatedValue>
}
</function_getPt>

<function_getFunctionName>
function getFunctionName(aFunction) {
    <matchFunctionName>
    var regexpResult = aFunction.toString().match(/function (\w*)/);
    if (regexpResult && regexpResult[1]) {
        return regexpResult[1];
    }
    </matchFunctionName>

    <handleAnonymousFunction>
    return 'anonymous';
    </handleAnonymousFunction>
}
</function_getFunctionName>

<function_buildButtonDef>
function buildButtonDef(trumbowyg) {
    <defineButton>
    return {
        fn: function () {
            var $modal = trumbowyg.openModal('Code', [
                <modalContentSetup>
                '<div class="' + trumbowyg.o.prefix + 'highlight-form-group">',
                '   <select class="' + trumbowyg.o.prefix + 'highlight-form-control language">',
                (function () {
                    var options = '';

                    for (var lang in Prism.languages) {
                        if (Prism.languages.hasOwnProperty(lang)) {
                            options += '<option value="' + lang + '">' + lang + '</option>';
                        }
                    }

                    return options;
                })(),
                '   </select>',
                '</div>',
                '<div class="' + trumbowyg.o.prefix + 'highlight-form-group">',
                '   <textarea class="' + trumbowyg.o.prefix + 'highlight-form-control code"></textarea>',
                '</div>',
                '</modalContentSetup>'
            ].join('\n')),
            $language = $modal.find('.language'),
            $code = $modal.find('.code');

            
            <eventConfirm>
            $modal.on('tbwconfirm', function () {
                trumbowyg.restoreRange();
                trumbowyg.execCmd('insertHTML', highlightIt($code.val(), $language.val()));
                trumbowyg.execCmd('insertHTML', '<p><br></p>');

                trumbowyg.closeModal();
            });
            </eventConfirm>

            <eventCancel>
            $modal.on('tbwcancel', function () {
                trumbowyg.closeModal();
            });
            </eventCancel>
        }
    };
    </defineButton>
}
</function_buildButtonDef>