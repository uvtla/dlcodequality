[["oaep_mgf1_str", "\nfunction oaep_mgf1_str(seed, len, hash)\n{\n    <generateMask>\n    var mask = '', i = 0;\n\n    while (mask.length < len)\n    {\n        mask += hash(seed + String.fromCharCode.apply(String, [\n                (i & 0xff000000) >> 24,\n                (i & 0x00ff0000) >> 16,\n                (i & 0x0000ff00) >> 8,\n                i & 0x000000ff]));\n        i += 1;\n    }\n    </generateMask>\n\n    return mask;\n}\n"], ["toastNotification", "\nfunction(content, options) {\n        <optionConfiguration>\n        options = $.extend({}, this.options, options || {});\n        </optionConfiguration>\n\n        <toastCreation>\n        var self = this,\n            toast = this.render(options.template)\n                .addClass(options.animation)\n                .attr('role', 'note')\n                .html(content)\n                .conceal()\n                .prependTo(this.wrapper);\n        </toastCreation>\n\n        <eventFiring>\n        this.fireEvent('create', [toast]);\n        </eventFiring>\n\n        <showToast>\n        \n        setTimeout(function() {\n            self.show(toast);\n        }, 15); \n        </showToast>\n\n        <hideToast>\n        \n        if (options.duration) {\n            setTimeout(function() {\n                self.hide(toast);\n            }, options.duration + 15);\n        }\n        </hideToast>\n    }\n"], ["lastNext", "\nfunction lastNext(date, modifier, unit, base_date) {\n\n        <parseModifier>\n\t\tif (!unit) {\n\t\t\treturn date;\n\t\t}\n\n\t\t\n\t\tunit = unit.toLowerCase();\n\n\t\tif (typeof modifier == 'string') {\n\t\t\tswitch (modifier) {\n\t\t\t\tcase 'next':\n\t\t\t\t\tmodifier = +1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'last':\n\t\t\t\tcase 'previous':\n\t\t\t\t\tmodifier = -1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'this':\n\t\t\t\t\tmodifier = 0;\n\t\t\t}\n\t\t}\n\t\t</parseModifier>\n\n\t\t<calculateNewDate>\n\t\t\n\t\tif (days[unit] != null) {\n\t\t\treturn lastNextDay(date, modifier, unit, base_date);\n\t\t}\n\n\t\tif (unit == 'month') {\n\t\t\t\n\t\t\ttemp = date.getMonth();\n\n\t\t\tdate.setMonth(date.getMonth() + modifier);\n\n\t\t\t\n\t\t\tif (temp == date.getMonth() || temp + 1 != date.getMonth()) {\n\t\t\t\tdate.setDate(0);\n\t\t\t}\n\t\t} else {\n\t\t\tBlast.Bound.Date.add(date, modifier, unit);\n\t\t}\n\t\t</calculateNewDate>\n\n\t\treturn date;\n\t}\n"], ["handleInstallationStatus", "\nfunction handleInstallationStatus(statusObj) {\n        <errorCodeExtraction>\n        var errorCode = \"\",\n            errorline = statusObj.installError;\n        if (errorline) {\n            errorCode = errorline.substr(errorline.lastIndexOf(':') + 2, errorline.length);\n        }\n        </errorCodeExtraction>\n        \n        <sendAnalytics>\n        HealthLogger.sendAnalyticsData(\n            autoUpdateEventNames.AUTOUPDATE_INSTALLATION_FAILED,\n            \"autoUpdate\",\n            \"install\",\n            \"fail\",\n            errorCode\n        );\n        </sendAnalytics>\n    }\n"], ["ResizeController", "\nfunction ResizeController(options) {\n  <controllerInitialization>\n  if (!(this instanceof ResizeController)) {\n    return new ResizeController(options);\n  }\n\n  Emitter.mixin(this);\n\n  options = options || {};\n  </controllerInitialization>\n\n  <setupResizeStream>\n  var resizeStream = ResizeStream.create(options);\n  Stream.onValue(resizeStream, Util.partial(this.trigger, 'resize'));\n  </setupResizeStream>\n\n  <setupDebounceStream>\n  var debounceMs = Util.getOption(options.debounceMs, 200);\n  var resizeEndStream = debounceMs <= 0 ? resizeStream : Stream.debounce(\n    debounceMs,\n    resizeStream\n  );\n  Stream.onValue(resizeEndStream, Util.partial(this.trigger, 'resizeEnd'));\n  </setupDebounceStream>\n\n  <destroyFunction>\n  this.destroy = function() {\n    Stream.close(resizeStream);\n    this.off('resize');\n    this.off('resizeEnd');\n  };\n  </destroyFunction>\n}\n"], ["importing", "\nfunction(progressMeter, traces) {\n      <checkImportingState>\n      if (this.importing_)\n        throw new Error('Already importing.');\n      this.importing_ = true;\n      </checkImportingState>\n\n      \n      \n      \n      <initializeImportTask>\n      var importTask = new tr.b.Task(function prepareImport() {\n        progressMeter.update('I will now import your traces for you...');\n      }, this);\n      </initializeImportTask>\n      <sequentialActionProcessing>\n      var lastTask = importTask;\n      ... // The rest of the code in this function is a long sequence of dependent tasks for the import process and poses multiple responsibilities.\n      </sequentialActionProcessing>\n      return importTask;\n    }\n"], ["forEachTypedProperty", "\nfunction forEachTypedProperty(container, keys, types, copy, context) {\n  <processKeys>\n  let errors;\n  for (const key of keys) {\n    const element = container[key];\n    const type = types(key);\n\n    context.enter(key, container);\n    try {\n      <processElement>\n      const result = type(element, context);\n      if (context.isErrorWrapper(result)) {\n        if (!context.continueAfterError) {\n          return result;\n        }\n        errors = context.tallyErrors(errors, result);\n      } else if (copy !== void 0) {\n        copy[key] = result;\n      }\n      </processElement>\n    } finally {\n      context.exit();\n    }\n  }\n  </processKeys>\n\n  <handleErrors>\n  if (errors !== void 0) {\n    return context.wrapErrors(errors);\n  } else {\n    return context.toValue(copy || container);\n  }\n  </handleErrors>\n}\n"], ["_trim", "\nfunction _trim(sValue, aParams) {\n\t<trimString>\n        var i = 0,\n            \n            aTrims = aParams;\n\n        if (!aTrims) {\n            aTrims = [\" \"];\n        }\n\n        \n        while (i < aTrims.length) {\n            if (_endsWith(sValue, aTrims[i])) {\n                sValue = sValue.substring(0, sValue.length - aTrims[i].length);\n                i = 0;\n                continue;\n            }\n            i++;\n        }\n\n        \n        i = 0;\n        while (i < aTrims.length) {\n            if (_startsWith(sValue, aTrims[i])) {\n                sValue = sValue.substring(aTrims[i].length);\n                i = 0;\n                continue;\n            }\n            i++;\n        }\n\t</trimString>\n\n\treturn sValue;\n}\n"], ["baseAssignValue$1", "\nfunction baseAssignValue$1(object, key, value) {\n  <assignValueSafely>\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n  </assignValueSafely>\n}\n"], ["checksDo", "\nfunction checksDo(listChecks, cb) {\n    <processChecks>\n    if (listChecks.length === 0) {\n      return cb();\n    }\n\n    var check = listChecks.shift();\n    check.func(check.key, function () {\n      <recursiveCheck>\n      \n      \n      setImmediate(checksDo, listChecks, cb);\n      </recursiveCheck>\n    });\n    </processChecks>\n  }\n"], "```"]