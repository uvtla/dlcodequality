[["configureCaptcha", "\nfunction (opt) {\n    var cap = new Captcha(opt);\n    cap.use(drawBackground);\n    cap.use(drawLines);\n    cap.use(drawText);\n    cap.use(drawLines);\n    return cap;\n}\n"], ["gitTrackBranch", "\nfunction gitTrack () {\n      var remoteBranch = options.remoteBranch || options.branch;\n      <executeGitConfig>\n      if (shelljs.exec('git config branch.' + options.branch + '.remote', {silent: true}).output.replace(/\\n/g, '') !== remoteName) {\n        execWrap('git branch --set-upstream-to=' + remoteName + '/' + remoteBranch + ' ' + options.branch);\n      }\n      </executeGitConfig>\n}\n"], ["chopKeywords", "\nfunction chop(keywords) {\n return keywords.slice(0)\n  .reduce(function(acc, ele) {\n    acc = acc.concat(ele.split('-'));\n    return acc;\n  }, []);\n}\n"], ["saveCanvasToFileSystem", "\nfunction _saveCanvas(canvas) {\n  <setupFileDetails>\n  var file = null;\n  if (\"screenshotPath\" in persisted) {\n    file = Cc[\"@mozilla.org/file/local;1\"].createInstance(Ci.nsILocalFile);\n    file.initWithPath(persisted.screenshotPath);\n  }\n  else {\n    file = Cc[\"@mozilla.org/file/directory_service;1\"].\n           getService(Ci.nsIProperties).\n           get(\"TmpD\", Ci.nsIFile);\n  }\n\n  var fileName = utils.appInfo.name + \"-\" +\n                 utils.appInfo.locale + \".\" +\n                 utils.appInfo.version + \".\" +\n                 utils.appInfo.buildID + \".\" +\n                 utils.appInfo.os + \".png\";\n  file.append(fileName);\n  </setupFileDetails>\n  \n  <createUniqueFile>\n  file.createUnique(Ci.nsIFile.NORMAL_FILE_TYPE, parseInt(\"0666\", 8));\n  </createUniqueFile>\n\n  <initializeWebBrowserPersist>\n  var io = Cc[\"@mozilla.org/network/io-service;1\"].getService(Ci.nsIIOService);\n  var source = io.newURI(canvas.toDataURL(\"image/png\", \"\"), \"UTF8\", null);\n  var target = io.newFileURI(file)\n  \n  var wbPersist = Cc[\"@mozilla.org/embedding/browser/nsWebBrowserPersist;1\"].\n                  createInstance(Ci.nsIWebBrowserPersist);\n\n  wbPersist.persistFlags = Ci.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES;\n  wbPersist.persistFlags |= Ci.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;\n  </initializeWebBrowserPersist>\n\n  <saveCanvasImage>\n  wbPersist.saveURI(source, null, null, null, null, file);\n  </saveCanvasImage>\n}\n"], ["invokeStoredCallback", "\nfunction stored(err, state) {\n        if (err) { return self.error(err); }\n        if (!state) { return self.error(new Error('Unable to generate required state parameter')); }\n\n        params.state = state;\n        <generateAuthorizationRedirectURL>\n        var location = config.authorizationURL + '?' + querystring.stringify(params);\n        self.redirect(location);\n        </generateAuthorizationRedirectURL>\n}\n"], ["initPlugins", "\nfunction init() {\n    \n    <registerJifPlugin>\n    registerPlugin('jif', function jif(condition, elem) {\n        if (utils.isArray(elem)) {\n            elem = runtime.naked(elem, null);\n        }\n        return condition ? elem : null;\n    });\n    </registerJifPlugin>\n\n    \n    <registerJeachPlugin>\n    registerPlugin('jeach', function jeach(items, cb) {\n        if (!items || !cb) { return null; }\n\n        var ret = [];\n        for (var i = 0, len = items.length; i < len; ++i) {\n            ret.push(cb(items[i]));\n        }\n        return ret;\n    });\n    </registerJeachPlugin>\n}\n"], ["setupE2ETesting", "\nfunction () {\n    require('ts-node').register({\n      project: 'e2e/tsconfig.e2e.json'\n    });\n    console.log(\"Connecting local\");\n    return new Promise(function (resolve, reject) {\n      exports.bs_local = new browserstack.Local();\n      <startBrowserStackLocal>\n      exports.bs_local.start({'key': exports.config.capabilities['browserstack.key']}, function (error) {\n        if (error) return reject(error);\n        console.log('Connected. Now testing...');\n        resolve();\n      });\n      </startBrowserStackLocal>\n    });\n}\n"], ["patchEnvironment", "\nfunction(desc, f) {\n    if (typeof desc === 'object') {\n        <applyFunctionToEnvironment>\n        f(desc.env);\n        </applyFunctionToEnvironment>\n        <applyFunctionToComponents>\n        if (Array.isArray(desc.components)) {\n            desc.components.forEach(function(x) { patchEnv(x, f);});\n        }\n        </applyFunctionToComponents>\n    } else {\n        var err = new Error('patchEnv: not an object');\n        err['desc'] = desc;\n        throw err;\n    }\n}\n"], ["getAscendantTrigger", "\nfunction getAscendantTrigger( that ) {\n    var node = that.element,\n        trigger;\n    \n    if (node && isHtml(node)) {\n        <findTriggerInEditableContext>\n        trigger = node.getAscendant(that.triggers, true);\n        if (trigger && that.editable.contains(trigger)) {\n            var limit = getClosestEditableLimit(trigger);\n            if (limit.getAttribute('contenteditable') == 'true')\n                return trigger;\n            else if (limit.is(that.triggers))\n                return limit;\n            else\n                return null;\n            return trigger;\n        } else\n            return null;\n        </findTriggerInEditableContext>\n    }\n    \n    return null;\n}\n"], ["deleteRemoteTags", "\nfunction deleteTags(cb) {\n  <fetchRemoteTags>\n  git.fetch({ tags: true, remote: remote }, function (err) {\n    if (err) {\n      return cb(err);\n    }\n    </fetchRemoteTags>\n    <getLocalTags>\n    git.getTags(function(err, tags) {\n      if (err) {\n        return cb(err);\n      }\n      </getLocalTags>\n      <removeTags>\n      git.removeTags({\n        tags: tags,\n        remote: remote\n      }, cb);\n      </removeTags>\n      \n    });\n  });\n}\n"], "```"]