```javascript
<parse>
function parse(path) {
  <handleArrayInput>
  if (t.Array.is(path)) {
    return path.map(parse).filter(Boolean);
  }
  </handleArrayInput>
  var component = getComponent(require(path));
  if (component) {
    var comments = getComments(path);
    var descriptions = getDescriptions(comments);
    var type = toObject(getPropsType(component));
    <extractProps>
    var props = type.kind === 'refinement' ? type.type.props : type.props;
    </extractProps>
    var defaultProps = getDefaultProps(component);
    var name = getComponentName(component);
    <assignDefaultValuesAndDescriptions>
    for (var prop in props) {
      if (props.hasOwnProperty(prop)) {
        if (defaultProps.hasOwnProperty(prop)) {
          props[prop].defaultValue = defaultProps[prop];
        }
        if (descriptions.props.hasOwnProperty(prop)) {
          props[prop].description = descriptions.props[prop];
        }
      }
    }
    </assignDefaultValuesAndDescriptions>
    return {
      name: name,
      description: descriptions.component,
      props: props
    };
  }
}
</parse>

<UrlHelper>
function (rule) {
  var exports = {};

  if (!(this instanceof UrlHelper)) {
    return new UrlHelper(rule);
  }

  this._originalURI = this._extractURI(rule);

  if (!this._originalURI && this._originalURI !== '') {
    return false;
  }

  this._originalRule = rule;

  this.URI = URI(this._originalURI);

  <exportFunctions>
  exports.URI = this.URI;
  exports.getOriginalURI = this.getOriginalURI.bind(this);
  exports.getModifiedRule = this.getModifiedRule.bind(this);
  exports.getOriginalRule = this.getOriginalRule.bind(this);
  </exportFunctions>

  return exports;
}
</UrlHelper>

<shivCssText>
function shivCssText(cssText) {
  var pair,
    parts = cssText.split('{'),
    index = parts.length,
    reElements = RegExp('(^|[\\s,>+~])(' + getElements().join('|') + ')(?=[[\\s,>+~#.:]|$)', 'gi'),
    replacement = '$1' + shivNamespace + '\\:$2';

  while (index--) {
    pair = parts[index] = parts[index].split('}');
    pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);
    parts[index] = pair.join('}');
  }
  return parts.join('{');
}
</shivCssText>

<convertDegreesToDMS>
function (degrees) {
  var sign,
    temp,
    d,
    m,
    s;

  sign = degrees < 0 ? -1 : 1;
  temp = sign * degrees;
  d = Math.floor(temp);
  temp = (temp - d) * 60;
  m = Math.floor(temp);
  temp = (temp - m) * 60;
  s = Math.round(temp);

  if (s == 60) {
    m++;
    s = 0;
  }
  if (m == 60) {
    d++;
    m = 0;
  }

  return (sign == -1 ? "-" : "") + d + "\u00B0" + " " + m + "\u2019" + " " + s + "\u201D";
}
</convertDegreesToDMS>

<crawlLinks>
function crawlLinks(result, $, endCallback) {

  if (!result.links) {
    return endCallback();
  }

  log.debug({ "url": result.url, "step": "analyzeHTML", "message": "CrawlLinks" });

  async.each($('link'), function (linkTag, callback) {
    crawLink($, result, linkTag, callback);
  }, endCallback);
}
</crawlLinks>

<SVGObj>
function SVGObj(file, svg, config) {
  this.file = file;
  this.id = path.basename(this.file, '.svg');

  this.svg = new XMLObject(svg);

  <configureSVG>
  this._config = _.extend({
    maxwidth: 1000,
    maxheight: 1000,
    padding: 0
  }, config);
  this._config.maxwidth = Math.abs(parseInt(this._config.maxwidth || 0, 10));
  this._config.maxheight = Math.abs(parseInt(this._config.maxheight || 0, 10));
  this._config.padding = Math.abs(parseInt(this._config.padding, 10));

  var width = this.svg.root().attr('width'),
    height = this.svg.root().attr('height');

  this.width = width ? parseFloat(width, 10) : false;
  this.height = height ? parseFloat(height, 10) : false;
  </configureSVG>
}
</SVGObj>

<onArg>
function onArg(argName, index) {
  <handleArgumentMatchCases>
  var idxMatch = argName.match(/^\$(\d+)$/);
  var paramMatch = argName.match(/^\$\$([A-Za-z0-9_-]+)$/);
  var flagMatch = argName.match(/^\$([A-Za-z0-9_-]+)$/);
  var paramName, idx;

  if (index === 0) {
    if (secondPass)
      argValues[index] = shell;
  }
  
  else if (argName === "$args") {
    if (secondPass)
      argValues[index] = varArgs;
  }
  
  else if (idxMatch) {
    if (secondPass)
      argValues[index] = varArgs[idxMatch[1]];
    else
      argsRequired = Math.max(argsRequired, idxMatch[1]);
  }
  
  else if (paramMatch) {
    <ExtractParametersAndValidate>
    if (!secondPass) {
      paramName = utils.hyphenate(paramMatch[1]);
      validOptions.push("[" + paramName + " <value>]");
      idx = varArgs.indexOf(paramName);
      if (idx != -1) {
        if (idx >= varArgs.length - 1)
          throw "Missing a value for option " + paramName;
        argValues[index] = varArgs[idx + 1];
        varArgs.splice(idx, 2);
      }
    }
    </ExtractParametersAndValidate>
  }
  
  else if (flagMatch) {
    <ExtractFlagsAndValidate>
    if (!secondPass) {
      paramName = utils.hyphenate(flagMatch[1]);
      validOptions.push("[" + paramName + "]");
      idx = varArgs.indexOf(paramName);
      argValues[index] = idx != -1;
      if (idx != -1)
        varArgs.splice(idx, 1);
    }
    </ExtractFlagsAndValidate>
  }
  else if (argName.indexOf('$') === 0)
    throw new Error("Invalid parametername in nscript function: '" + argName + "', please check the nscript docs for valid parameter names");
  else if (secondPass)
    argValues[index] = shell.alias(argName);
  </handleArgumentMatchCases>
}
</onArg>

<Class>
function Class(name, options) {

  this.name = name || "";
  this.mixins = [];
  this.methods = {};
  this.properties = {};

  if (lib.type.isObject(options)) {
    <applyOptionsToClass>
    var keys = Object.keys(options);
    var length = keys.length;
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      var value = options[key];
      if (key === "constructor") {
        this.addConstructor(value);
      } else if (key === "inherits") {
        this.inherit(value);
      } else if (key === "mixins") {
        this.mixin(value);
      } else if (lib.type.isFunction(value) && lib.inherits.superOf(value, Property)) {
        this.addProperty(key, value);
      } else {
        this.addMethod(key, value);
      }
    }
    </applyOptionsToClass>
  }

}
</Class>

<finishCallback>
function finishCallback(callback, f, res) {
  return function callbackWithArgs() {
    const response = f.apply(this, arguments);
    if (res && !isEmptyObject(res.headers)) {
      response.headers = res.headers;
    }
    callback(response);
  };
}
</finishCallback>

<normalizeProperty>
function normalizeProperty(name, value, isStyle) {
  var temp = new CKEDITOR.dom.element('span');
  temp[isStyle ? 'setStyle' : 'setAttribute'](name, value);
  return temp[isStyle ? 'getStyle' : 'getAttribute'](name);
}
</normalizeProperty>
```