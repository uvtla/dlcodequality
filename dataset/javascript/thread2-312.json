[["closePopup", "\nfunction (domEvent) {\n    if (this.isOpen) {\n        <createCloseEvent>\n        var event = {\n            name : \"onBeforeClose\",\n            cancelClose : false,\n            domEvent : domEvent\n        };\n        this.$raiseEvent(event);\n        </createCloseEvent>\n        if (!event.cancelClose) {\n            <hideModal>\n            this._hide();\n            this._modalNavigationInterceptor.destroyElements();\n            this.isOpen = false;\n            </hideModal>\n            \n            <handlePopupClosure>\n            ariaPopupsPopupManager.onPopupClose(this);\n            if (!this.conf.animateOut) {\n                this._onAfterClose();\n            } else {\n                this._getAnimator().$onOnce({\n                    \"animationend\" : this._onAfterClose,\n                    scope : this\n                });\n            }\n            </handlePopupClosure>\n        }\n    }\n}\n"], ["persistentStorageWrapper", "\nfunction(key, type, callback) {\n    return function(value) {\n        <storageOperations>\n        try {\n            if ( value != null || type === 'string' ) {\n                if (value) {\n                    localStorage.setItem(key, type === 'boolean' ? 'X' : value);\n                } else {\n                    localStorage.removeItem(key);\n                }\n                callback(value);\n            }\n            value = localStorage.getItem(key);\n            return type === 'boolean' ? value === 'X' : value;\n        } catch (e) {\n            Log.warning(\"Could not access localStorage while accessing '\" + key + \"' (value: '\" + value + \"', are cookies disabled?): \" + e.message);\n        }\n        </storageOperations>\n    };\n}\n"], ["pagerInitialization", "\nfunction Pager(page, sortby, desc, limit) {\n    this.page = page || 1;\n    this.count = 0;\n    this.sortby = sortby || null;\n    this.desc = desc || true;\n    this.limit = limit || 30;\n    this.name = \"\";\n    this.lastKey = null;\n}\n"], ["saveAndNavigate", "\nfunction (sLayer, sNameSpace, sFileName, sFileType, sData, sTransportId, sPackageName) {\n    return LRepConnector.saveFile(sLayer, sNameSpace, sFileName, sFileType, sData, sTransportId, sPackageName).then(this._navToDisplayMode.bind(this));\n}\n"], ["stripCDataContent", "\nfunction stripCData(original) {\n    <stripCDataLogic>\n    var left = '<![CDATA[',\n        right = ']]>',\n        copy = trim(original),\n        changed = false,\n        leftLength = left.length,\n        rightLength = right.length;\n\n    if (copy.indexOf(left) == 0) {\n        copy = copy.substring(leftLength);\n        changed = true;\n    }\n\n    var copyLength = copy.length;\n\n    if (copy.indexOf(right) == copyLength - rightLength) {\n        copy = copy.substring(0, copyLength - rightLength);\n        changed = true;\n    }\n    </stripCDataLogic>\n\n    return changed ? copy : original;\n}\n"], ["checkSpacingAroundFirstToken", "\nfunction checkSpacingAroundFirstToken(node) {\n    <checkFirstTokenSpacing>\n    const firstToken = node && sourceCode.getFirstToken(node);\n\n    if (firstToken && firstToken.type === \"Keyword\") {\n        checkSpacingAround(firstToken);\n    }\n    </checkFirstTokenSpacing>\n}\n"], ["intmaxValidation", "\nfunction intmax( type ) {\n    if ( !arguments.length ) {\n        return TYPES.int32;\n    }\n    if ( !isString( type ) ) {\n        throw new TypeError( 'intmax()::invalid input argument. Must provide an input string primitive. Value: `' + type + '`.' );\n    }\n    if ( !TYPES.hasOwnProperty( type ) ) {\n        throw new Error( 'intmax()::invalid input argument. Unrecognized integer type. Must be one of the following: \\\"' + Object.keys( TYPES ).join( '\\\", \\\"' ) + '\\\". Value: `' + type + '`.' );\n    }\n    return TYPES[ type ];\n}\n"], ["handleRouting", "\nfunction (context, transition) {\n    var controller;\n    <initControllerLogic>\n    var controllerName = this.controllerName || this.routeName;\n    var definedController = this.controllerFor(controllerName, true);\n\n    if (!definedController) {\n        controller = this.generateController(controllerName, context);\n    } else {\n        controller = definedController;\n    }\n    </initControllerLogic>\n    \n    <setupController>\n    if (!this.controller) {\n        var propNames = _emberMetalProperty_get.get(this, '_qp.propertyNames');\n        addQueryParamsObservers(controller, propNames);\n        this.controller = controller;\n    }\n\n    var queryParams = _emberMetalProperty_get.get(this, '_qp');\n    var states = queryParams.states;\n    if (transition) {\n        _emberRoutingUtils.stashParamNames(this.router, transition.state.handlerInfos);\n\n        var params = transition.params;\n        var allParams = queryParams.propertyNames;\n        var cache = this._bucketCache;\n\n        allParams.forEach(function (prop) {\n            var aQp = queryParams.map[prop];\n            aQp.values = params;\n            var cacheKey = _emberRoutingUtils.calculateCacheKey(aQp.prefix, aQp.parts, aQp.values);\n\n            if (cache) {\n                var value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);\n                _emberMetalProperty_set.set(controller, prop, value);\n            }\n        });\n    }\n\n    controller._qpDelegate = states.allowOverrides;\n\n    if (transition) {\n        var qpValues = getQueryParamsFor(this, transition.state);\n        controller.setProperties(qpValues);\n    }\n\n    this.setupController(controller, context, transition);\n    </setupController>\n\n    <renderTemplateBlock>\n    if (!this._environment || this._environment.options.shouldRender) {\n        this.renderTemplate(controller, context);\n    }\n    </renderTemplateBlock>\n}\n"], ["validateOptionsAndSetLog", "\nfunction(options) {\n    options = options || {};\n\n    this.validateRunOptions(options);\n\n    if (_.has(options, 'log') && this.logger.level && this.logger.level.toString() != options.log.toUpperCase()) {\n        this.logger.setLevel(options.log.toUpperCase());\n    }\n}\n"], ["parseVersionToInt", "\nfunction parseIntVersion(vstr) {\n    <parseIntVersionLogic>\n    if (!vstr || vstr=='') return 0;\n    var ar = vstr.split('.');\n    var iVer = 0;\n    for (var i=0; i<ar.length; i++) {\n        iVer *= 1000;\n        iVer += ar[i] >> 0;\n    }\n    </parseIntVersionLogic>\n    return iVer;\n}\n"], "```"]