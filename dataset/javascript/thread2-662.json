[["executeFunction", "\nfunction(func, args){\n    var object;\n    <checkForMoreRows>\n    if (this.hasMoreRows()){</checkForMoreRows>\n        object = func.call(this, args);\n        this.nextRow();\n    }\n    else object = false;\n    return object;\n}\n"], ["calculatePolarCoordinates", "\nfunction(simple) {\n    var rho = this.norm();\n    var atan = Math.atan2(this.y, this.x);\n    if(atan < 0) atan += Math.PI * 2;\n    if(simple) return { 'theta': atan, 'rho': rho };\n    return new Polar(atan, rho);\n}\n"], ["registerQuickAction", "\nfunction(type, callback) {\n    var deferred = $q.defer();\n\n    <checkAvailability>\n    this.isAvailable().then(function() {</checkAvailability>\n        quickActionHandler[type] = callback;\n        window.ThreeDeeTouch.onHomeIconPressed = createQuickActionHandler(quickActionHandler);\n        deferred.resolve(true);\n    },\n    function(err) {\n        deferred.reject(err);\n    });\n\n    return deferred.promise;\n}\n"], ["compareAscending", "\nfunction compareAscending(a, b) {\n    return baseCompareAscending(a.criteria, b.criteria) || a.index - b.index;\n}\n"], ["constructPutRolePolicyParam", "\nfunction constructPutRolePolicyParamForDDB(dataSource){\n    let result = {\n        RoleName: dataSource.serviceRoleDetails.Role.RoleName,\n        PolicyName: dataSource.serviceRoleDetails.Role.RoleName,\n        <constructPolicyDocument>\n        PolicyDocument: constructPolicyDocumentForDDB(dataSource)\n        </constructPolicyDocument>\n    }\n    return result\n}\n"], ["parseAndFormatBrokerConfig", "\nfunction brokerConfigLines (brokerListResponse) {\n  var brokers = JSON.parse(brokerListResponse).brokers\n  return brokers.map(function (broker) {\n    return broker.guid + '=' + [broker.guid, broker.port,\n      broker.hostName, broker.ipAddress].join(';')\n  })\n}\n"], ["addClassWithDelay", "\nfunction setLoaderClass(c, t) {\n    timeouts.push(\n        setTimeout(() => {\n            loadbar.classList.add(c);\n        }, t)\n    );\n}\n"], ["appendStatusToOutput", "\nfunction reportStatus(status, outputFile) {\n  let log = [''];\n  <formatLog>\n  log.push('Suites passed:');\n  status.passed.forEach(function (val) {\n    log.push('  ' + val);\n  });\n\n  if (status.failed.length == 0) {\n    log.push('All tests passed');\n  } else {\n    log.push('Suites failed:');\n    status.failed.forEach(function (val) {\n      log.push('  ' + val);\n    });\n  }\n  log.push('\\nElapsed time: ' + status.elapsedTime + ' seconds');\n  log = log.join('\\n');\n  </formatLog>\n  console.log(log);\n  fs.appendFileSync(outputFile, log);\n}\n"], ["initializeYouTubeModal", "\nfunction YouTubeModal(config) {\n  this.config = config;\n  this.parentElement = document.querySelector(this.config.parentSelector);\n  this.closeEventListener_ = this.setActive_.bind(this, false);\n  this.popstateListener_ = this.onHistoryChange_.bind(this);\n  this.el_ = null;\n  this.closeEl_ = null;\n  this.attributionEl_ = null;\n  <initializeDOMSetup>\n  this.initDom_();\n  </initializeDOMSetup>\n  this.lastActiveVideoId_ = null;\n  this.scrollY = 0;\n\n  <setupDelegationListener>\n  this.delegatedListener_ = function(targetEl) {\n    var data = 'data-' + this.config.className + '-video-id';\n    var videoId = targetEl.getAttribute(data);\n    var startDataAttribute = 'data-' + this.config.className + '-video-start-seconds';\n    var startTime = +targetEl.getAttribute(startDataAttribute);\n    var attributionAttribute = 'data-' + this.config.className + '-attribution';\n    var attribution = targetEl.getAttribute(attributionAttribute);\n    if (videoId) {\n      this.play(videoId, true , startTime, attribution);\n    }\n  }.bind(this);\n  </setupDelegationListener>\n\n  <addDelegatedClickListener>\n  events.addDelegatedListener(document, 'click', this.delegatedListener_);\n  </addDelegatedClickListener>\n\n  <integrateYouTubeScript>\n  var scriptTag =\n    document.querySelector('script[src=\"https://www.youtube.com/iframe_api\"]');\n  if (!scriptTag) {\n    var tag = document.createElement('script');\n    tag.setAttribute('src', 'https://www.youtube.com/iframe_api');\n    this.parentElement.appendChild(tag);\n  }\n  </integrateYouTubeScript>\n}\n"], ["generateAccessorFunctions", "\nfunction() {\n    var attrNames;\n    attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    <createAccessors>\n    return attrNames.each(function(attrName) {\n        return self[attrName] = function() {\n            return I[attrName];\n        };\n    });\n    </createAccessors>\n}\n"], "```\n\nEach function has been annotated based on the blocks of code that represent cohesive responsibilities within the functions."]