[["mapUrlChangeHandlersToProps", "\nfunction mapUrlChangeHandlersToProps(props) {\n  return {\n    onChangeFoo: (value) => replaceInUrlQuery('fooInUrl', encode(UrlQueryParamTypes.number, value)),\n    onChangeBar: (value) => replaceInUrlQuery('bar', value),\n  }\n}\n"], ["newVisState", "\nfunction newVisState(state, percentage, previous) {\n    if (previous) {\n      delete previous.previous;\n    }\n\n    return {\n      code: state[0],\n      state: state[1],\n      percentage: percentage,\n      previous: previous || {},\n      fullyvisible: state[0] === STATES.FULLY_VISIBLE[0],\n      visible: state[0] === STATES.VISIBLE[0] ||\n      state[0] === STATES.FULLY_VISIBLE[0],\n      hidden: state[0] === STATES.HIDDEN[0]\n    };\n}\n"], ["Program", "\nfunction Program(gl, codes, includes) {\n    if (!typeof codes.vert === 'string') {\n        throw Error('[tfw.webgl.Program] Missing attribute `vert` in argument `codes`!');\n    }\n    if (!typeof codes.frag === 'string') {\n        throw Error('[tfw.webgl.Program] Missing attribute `frag` in argument `codes`!');\n    }\n\n    codes = parseIncludes(codes, includes);\n\n    <createAndLinkShaders>\n    var shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, getVertexShader(gl, codes.vert));\n    gl.attachShader(shaderProgram, getFragmentShader(gl, codes.frag));\n    gl.linkProgram(shaderProgram);\n    </createAndLinkShaders>\n\n    this.program = shaderProgram;\n    Object.freeze(this.program);\n\n    this.use = function() {\n        gl.useProgram(shaderProgram);\n    };\n    this.use();\n\n    <setupAttributes>\n    var index, item;\n    var attribs = {};\n    var attribsCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_ATTRIBUTES);\n    for (index = 0; index < attribsCount; index++) {\n        item = gl.getActiveAttrib(shaderProgram, index);\n        attribs[item.name] = gl.getAttribLocation(shaderProgram, item.name);\n        this['$' + item.name] = attribs[item.name];\n    }\n    Object.freeze(attribs);\n    this.attribs = attribs;\n    </setupAttributes>\n\n    <setupUniforms>\n    var uniforms = {};\n    var uniformsCount = gl.getProgramParameter(shaderProgram, gl.ACTIVE_UNIFORMS);\n    for (index = 0; index < uniformsCount; index++) {\n        item = gl.getActiveUniform(shaderProgram, index);\n        uniforms[item.name] = gl.getUniformLocation(shaderProgram, item.name);\n        Object.defineProperty(this, '$' + item.name, {\n            set: createUniformSetter(gl, item, uniforms[item.name]),\n            get: createUniformGetter(item),\n            enumerable: true,\n            configurable: true\n        });\n    }\n    Object.freeze(uniforms);\n    this.uniforms = uniforms;\n    </setupUniforms>\n}\n"], ["webpackModuleExports", "\nfunction(module,exports,__webpack_require__) { /* webpack specific function, too complex to annotate for SRP compliance within given context */ }\n"], ["needleStyle", "\nfunction needleStyle(context, options, length, isRight) {\n    return options.colorNeedleEnd ?\n        drawings.linearGradient(context,\n            isRight ? options.colorNeedleEnd : options.colorNeedle,\n            isRight ? options.colorNeedle : options.colorNeedleEnd,\n            length,\n            !context.barDimensions.isVertical\n        ) : options.colorNeedle;\n}\n"], ["Logger", "\nfunction Logger(category) {\n    if (category === undefined) {\n        throw new Error('Cannot create logger. Log \"category\" name must be specified.');\n    }\n    this.category = category;\n\n    <configureLogLevel>\n    function stringToLogLevel(logLevelId) {\n        if (!logLevelId || logLevelId === '_') {\n            return undefined;\n        }\n        return Level[logLevelId];\n    }\n\n    var logLevelId = categories.get(category);\n    if (logLevelId === undefined) {\n        categories.set(category, '_');\n    }\n\n    this.logLevel = stringToLogLevel(logLevelId);\n    if (!this.logLevel) {\n        logLevelId = categories.get(category, {checkDotParent: LEVEL_PARENTDOTCHECK_CONSTRAINTS});\n        this.logLevel = stringToLogLevel(logLevelId);\n        if (!this.logLevel) {\n            \n            this.logLevel = Level.ERROR;\n        }\n    }\n    </configureLogLevel>\n}\n"], ["white", "\nfunction white() {\n    var c = walker.ch,\n        token = '';\n\n    while (c === \" \" || c === \"\\t\") {\n        token += c;\n        c = walker.nextChar();\n    }\n\n    tokener(token, 'white');\n}\n"], ["onImagesLoaded", "\nfunction onImagesLoaded(images, callback) {\n    var unloaded = images.length;\n\n    if (unloaded === 0) {\n      callback();\n    }\n\n    <handleImageLoadEvents>\n    images.each(function () {\n      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {\n        singleImageLoaded();\n      } else {\n          <forceImageReload>\n          var src = $(this).attr('src');\n          $(this).attr('src', src + (src.indexOf('?') >= 0 ? '&' : '?') + new Date().getTime());\n          </forceImageReload>\n          $(this).one('load', function () {\n            singleImageLoaded();\n          });\n        }\n    });\n    </handleImageLoadEvents>\n\n    function singleImageLoaded() {\n      unloaded--;\n      if (unloaded === 0) {\n        callback();\n      }\n    }\n}\n"], ["markStateInactive", "\nfunction (state) {\n    inactiveStates[state.self.name] = state;\n    state.self.status = 'inactive';\n    <onStateInactivate>\n    if (state.self.onInactivate)\n        $injector.invoke(state.self.onInactivate, state.self, state.locals.globals);\n    </onStateInactivate>\n}\n"], ["cleanItem3", "\nfunction cleanItem3(value, parent) {\n    if (Array.isArray(value)) {\n        <prepareArrayForCleaning>\n        var newvalue = [];\n        var isAllNumbers = value.every(item => typeof item === 'number');\n        var isAllStrings = value.every(item => typeof item === 'string');\n        if (isAllNumbers) return [cleanItem3(value[0], parent)];\n        if (isAllStrings) {\n            <handleEnumValuesForArray>\n            // ...\n            </handleEnumValuesForArray>\n            return [enumKey];\n        }\n        </prepareArrayForCleaning>\n        \n        <cleanArray>\n        value.forEach(function (item) {\n            newvalue.push(cleanItem3(item, parent));\n        })\n        </cleanArray>\n\n        return newvalue;\n    }\n\n    <cleanNonObjectValues>\n    if ((typeof value !== \"object\") || (value == null)) {\n        // ...\n        return 'String'; // example of conversion\n    }\n    </cleanNonObjectValues>\n\n    <cleanObjectValues>\n    var newvalue = {};\n    Object.keys(value).forEach(function (key) {\n        newvalue[key] = cleanItem3(value[key], parent + key.substr(0, 1).toUpperCase() + key.substr(1));\n    });\n    </cleanObjectValues>\n\n    return newvalue;\n}\n"], "```"]