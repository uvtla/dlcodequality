[["removeItemFromStorage", "\nfunction (key) {\n  var oldValue = this.getItem(key);\n\n  if (oldValue !== null) {\n    ariaStorageEventBus.stop = true;\n    this._remove(this.namespace + key);\n    ariaStorageEventBus.stop = false;\n\n    ariaStorageEventBus.notifyChange(this.type, key, null, oldValue, this.namespace);\n  }\n}\n"], ["configureCommander", "\nfunction command(base, actions, opts) {\n\n<loadConfigurations>\n  actions = actions || {};\n  opts = opts || {};\n\n  var commands = JSON.parse(fs.readFileSync(p.join(base, opts.commandFile || '../conf/commands.json'))),\n    pkg = JSON.parse(fs.readFileSync(p.join(base, '../package.json')));</loadConfigurations>\n\n  if (actions.commands && commands.commands) {\n    _.each(actions.commands, function (command, name) {\n      if (commands.commands[name]) {\n        commands.commands[name].action = command.action;\n      }\n    });\n  }\n\n  commander.version(pkg.version);\n\n  if (commands.options) {\n    _.each(commands.options, function (option) {\n      commander.option(option.arg, option.desc, option.action);\n    });\n  }\n\n  _.each(commands.commands, function (command, name) {\n    var program = commander\n      .command(name)\n      .description(command.desc);\n\n    _.each(command.options, function (option) {\n      program.option(option.arg, option.desc, option.action);\n    });\n\n    program.action(command.action);\n  });\n\n<prePostCommands>\n  _preCommand(commands.commands);\n\n  commander.parse(process.argv);\n\n  _postCommand(commander.args, commands.commands, commands.options);</prePostCommands>\n}"], ["injectStylesheet", "\nfunction getStylesheet(data, isUrl, cb) {\n<createStylesheetElement>\n  var el = document.createElement(isUrl ? 'link' : 'style'),\n    head = document.getElementsByTagName('head')[0];\n\n  el.type = 'text/css';</createStylesheetElement>\n\n<configureStylesheetLink>\n  if (isUrl) {\n    el.href = data;\n    el.rel = 'stylesheet';</configureStylesheetLink>\n\n<setLoadEvent>\n    el.onload = el.onreadystatechange = function() {\n      if ((!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {\n        el.onload = el.onreadystatechange = null;\n\n        if (typeof cb === 'function')\n          cb();\n      }\n    };\n  }</setLoadEvent>\n  else {\n<insertStyles>\n    el.innerHTML = data;</insertStyles>\n  }\n\n<appendToHead>\n  head.appendChild(el);</appendToHead>\n}"], ["processResponse", "\nfunction process_response(raw_response) {\n  const { item_preparer, query_result_preparer } = params;\n  const raw_data = raw_response.data;\n  if (Array.isArray(raw_data)) {\n<resolveArrayItems>\n    return resolve_promise(raw_data.map(item_preparer));</resolveArrayItems>\n  } else if (raw_data instanceof Query_result) {\n<processQueryResult>\n    const query_result = new Query_result(raw_data);\n    query_result.items = raw_data.items.map(query_result_preparer);</processQueryResult>\n<resolveQueryResult>\n    return resolve_promise(query_result);</resolveQueryResult>\n  }\n<resolveRawData>\n  return resolve_promise(item_preparer(raw_data));</resolveRawData>\n}"], ["getExtensionEngine", "\nfunction(ext) {\n  ext = ext || this.option('view engine');\n  if (ext && ext[0] !== '.') {\n    ext = '.' + ext;\n  }\n  return this._.engines.getEngine(ext);\n}"], ["createSQLiteRecordStream", "\nfunction createSQLiteRecordStream(dbPaths, importPlace) {\n  const sqliteStream = combinedStream.create();\n\n<defineSQLiteStatement>\n  const sqliteStatement = importPlace ?\n    SQLiteStream.findGeoJSONByPlacetypeAndWOFId(getPlacetypes(), importPlace) :\n    SQLiteStream.findGeoJSONByPlacetype(getPlacetypes());</defineSQLiteStatement>\n\n<appendDBStreams>\n  dbPaths.forEach((dbPath) => {\n    sqliteStream.append( (next) => {\n      logger.info(`Loading ${path.basename(dbPath)} database from ${path.dirname(dbPath)}`);\n      next(new SQLiteStream(dbPath, sqliteStatement));\n    });\n  });</appendDBStreams>\n\n  return sqliteStream;\n}"], ["murmurhash", "\nfunction (h) {\n  h = x64Xor(h, [0, h[0] >>> 1])\n  h = x64Multiply(h, [0xff51afd7, 0xed558ccd])\n  h = x64Xor(h, [0, h[0] >>> 1])\n  h = x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53])\n  h = x64Xor(h, [0, h[0] >>> 1])\n  return h\n}"], ["classStringForValue", "\nfunction (parsedPath) {\n  return View._classStringForValue(parsedPath.path, parsedPath.stream.value(), parsedPath.className, parsedPath.falsyClassName);\n}"], ["makeHref", "\nfunction makeHref(to, params, query) {\n  return this.context.router.makeHref(to, params, query);\n}"], ["createProxies", "\nfunction createProxies(config, map, parentPath) {\n<initializeProxyCreation>\n  parentPath = parentPath || [];\n\n  var isBase = parentPath.length === 0;\n  var proxies = {};\n  var path;</initializeProxyCreation>\n\n<processMapping>\n  for (var key in map) {\n    if (map.hasOwnProperty(key)) {\n      if (isObject(map[key])) {\n<createProxiesRecursively>\n        proxies[key] = createProxies(config, map[key], parentPath.concat([key]));</createProxiesRecursively>\n      }\n      else if (isBoolean(map[key])) {\n<createProxiedMethod>\n        path = parentPath.join('/') + (isBase ? '' : '/') + key;\n        proxies[key] = createProxiedMethod(config, path);</createProxiedMethod>\n      }\n    }\n  }</processMapping>\n\n  return proxies;\n}"], "```"]