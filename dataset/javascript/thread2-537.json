[["calculateOffsets", "\nfunction(curve, location, length, distance) {\n\tdistance = distance == null ? 0 : distance;\n\tvar p = _pointAlongPath(curve, location, distance),\n\t\tm = _gradientAtPoint(curve, p.location),\n\t\t_theta2 = Math.atan(-1 / m),\n\t\ty =  length / 2 * Math.sin(_theta2),\n\t\tx =  length / 2 * Math.cos(_theta2);\n\treturn [{x:p.point.x + x, y:p.point.y + y}, {x:p.point.x - x, y:p.point.y - y}];\n}\n"], ["createClass", "\nfunction () {\n  var Class = makeCtor();\n  var proto;\n  Class.ClassMixin = _emberMetalMixin.Mixin.create(this.ClassMixin);\n  Class.PrototypeMixin = _emberMetalMixin.Mixin.create(this.PrototypeMixin);\n\n  Class.ClassMixin.ownerConstructor = Class;\n  Class.PrototypeMixin.ownerConstructor = Class;\n\n  reopen.apply(Class.PrototypeMixin, arguments);\n\n  Class.superclass = this;\n  Class.__super__ = this.prototype;\n\n  proto = Class.prototype = Object.create(this.prototype);\n  proto.constructor = Class;\n  _emberMetalUtils.generateGuid(proto);\n  _emberMetalMeta.meta(proto).proto = proto; \n\n  Class.ClassMixin.apply(Class);\n  return Class;\n}\n"], ["logMessage", "\nfunction logMessage(messageType, message) {\n  if (Object.values(messageTypes).includes(messageType)) {\n    console[messageType](message)\n  } else {\n    console.info(message)\n  }\n}\n"], ["SpinnerComponent", "\nfunction(module,exports,__webpack_require__){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var _react=__webpack_require__(0);var _react2=_interopRequireDefault(_react);var _propTypes=__webpack_require__(1);var _propTypes2=_interopRequireDefault(_propTypes);var _Css=__webpack_require__(2);var _Css2=_interopRequireDefault(_Css);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Spinner=function Spinner(_ref){var cssMap=_ref.cssMap,className=_ref.className,size=_ref.size;return _react2.default.createElement(_Css2.default,{cssMap:cssMap,cssProps:{size:size}},_react2.default.createElement('div',{className:className}));};Spinner.propTypes={size:_propTypes2.default.oneOf(['small','big'])};Spinner.defaultProps={cssMap:__webpack_require__(164),size:'small'};exports.default=Spinner;}\n"], ["wrapRuleForUrlCheck", "\nfunction wrap (rule) {\n  return ($) => {\n    let value = rule($)\n    if (typeof value !== 'string') return\n\n    value = value.trim()\n    if (!isUrl(value)) return\n\n    return value\n  }\n}\n"], ["modifyPlaylist", "\nfunction(\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    return WebApiRequest.builder(this.getAccessToken())\n      .withPath('/v1/playlists/' + playlistId + '/tracks')\n      .withHeaders({ 'Content-Type': 'application/json' })\n      .withBodyParameters(\n        {\n          range_start: rangeStart,\n          insert_before: insertBefore\n        },\n        options\n      )\n      .build()\n      .execute(HttpManager.put, callback);\n  }\n"], ["generateSessionState", "\nfunction sessionState (client, origin, state) {\n  var salt = crypto.randomBytes(16).toString('hex')\n  var value = [client._id, client.client_uri, state, salt].join(' ')\n  var sha256 = crypto.createHash('sha256')\n  sha256.update(value)\n  var hash = sha256.digest('hex')\n  return [hash, salt].join('.')\n}\n"], ["CreatorConstructor", "\nfunction Creator(view) {\n    var self = this;\n    var dragging = false;\n\n    this.node = null;\n    this.lineColor = null;\n\n    var $wrapper = $(\"<div/>\", {\n      id : \"creator-wrapper\"\n    }).bind(\"remove\", function(e) {\n      \n      self.detach();\n      \n      e.stopImmediatePropagation();\n\n      console.debug(\"creator detached.\");\n      return false;\n    });\n\n    \n    var $nub = $(\"<div/>\", {\n      id : \"creator-nub\"\n    }).appendTo($wrapper);\n\n    var $fakeNode = $(\"<div/>\", {\n      id : \"creator-fakenode\"\n    }).appendTo($nub);\n\n    \n    var $canvas = $(\"<canvas/>\", {\n      id : \"creator-canvas\",\n      \"class\" : \"line-canvas\"\n    }).hide().appendTo($wrapper);\n\n    \n    $wrapper.draggable({\n      revert : true,\n      revertDuration : 0,\n      start : function() {\n        dragging = true;\n        \n        $canvas.show();\n        if (self.dragStarted) {\n          self.lineColor = self.dragStarted(self.node);\n        }\n      },\n      drag : function(e, ui) {\n        \n        var offsetX = ui.position.left / view.zoomFactor;\n        var offsetY = ui.position.top / view.zoomFactor;\n\n        \n        var $node = $getNode(self.node);\n        drawLineCanvas($canvas, self.depth + 1, offsetX, offsetY,\n            $fakeNode, $node, self.lineColor);\n      },\n      stop : function(e, ui) {\n        dragging = false;\n        \n        $canvas.hide();\n        if (self.dragStopped) {\n          var $wp = $wrapper.position();\n          var $wpLeft = $wp.left / view.zoomFactor;\n          var $wpTop = $wp.top / view.zoomFactor;\n          var nubLeft = ui.position.left / view.zoomFactor;\n          var nubTop = ui.position.top / view.zoomFactor;\n\n          var distance = mindmaps.Util.distance($wpLeft - nubLeft,\n              $wpTop - nubTop);\n          self.dragStopped(self.node, nubLeft, nubTop, distance);\n        }\n\n        \n        $wrapper.css({\n          left : \"\",\n          top : \"\"\n        });\n      }\n    });\n\n    \n    this.attachToNode = function(node) {\n      if (this.node === node) {\n        return;\n      }\n      this.node = node;\n\n      \n      $wrapper.removeClass(\"left right\");\n      if (node.offset.x > 0) {\n        $wrapper.addClass(\"right\");\n      } else if (node.offset.x < 0) {\n        $wrapper.addClass(\"left\");\n      }\n\n      \n      this.depth = node.getDepth();\n      var w = view.getLineWidth(this.depth + 1);\n      $fakeNode.css(\"border-bottom-width\", w);\n\n      var $node = $getNode(node);\n      $wrapper.appendTo($node);\n    };\n\n    \n    this.detach = function() {\n      $wrapper.detach();\n      this.node = null;\n    };\n\n    \n    this.isDragging = function() {\n      return dragging;\n    };\n  }\n"], ["checkIceComponentState", "\nfunction checkIceComponentState(key, value)\n{\n  if(typeof value != 'string')\n    throw SyntaxError(key+' param should be a String, not '+typeof value);\n\n  if(!value.match('DISCONNECTED|GATHERING|CONNECTING|CONNECTED|READY|FAILED'))\n    throw SyntaxError(key+' param is not one of [DISCONNECTED|GATHERING|CONNECTING|CONNECTED|READY|FAILED] ('+value+')');\n}\n"], ["flushPendingData", "\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  \n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n"], "```"]