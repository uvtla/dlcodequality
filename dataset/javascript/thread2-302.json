[["set", "\nfunction set(key, value, lineno, child) {\n  \n  <normalizeKey>\n  key = '' + key;\n  </normalizeKey>\n\n  <initializeVariables>\n  var typedef = Types[key]\n    , exists = this._data[key]\n    , val = exists || {value: null, lineno: !child ? lineno : undefined}\n    , changed = false;\n  </initializeVariables>\n\n  <checkAndUpdateExistence>\n  if(!lineno && !child) {\n    changed = !exists || exists && exists.value !== value;\n  }\n  </checkAndUpdateExistence>\n\n  <handleTypedefRepeats>\n  if(typedef && typedef.repeats) {\n    if(!lineno && !child) changed = true;\n    if(!exists) {\n      val.value = [value];\n      this._data[key] = val;\n    }else{\n      exists.value.push(value);\n    }\n  </handleTypedefRepeats>\n  <setValue>\n  else{\n    val.value = value;\n    this._data[key] = val;\n  }\n  </setValue>\n\n  <processLinesModification>\n  if(lineno === undefined && !child) {\n    if(typedef.repeats || !exists) {\n      if(!Object.keys(this._added).length) {\n        this._lines.push(GENERATED);\n      }\n      this._added[key] = value;\n      this._lines.push(this.encode(key, value));\n    }\n\n    if(exists && !this._added[key]) {\n      this._modified[exists.lineno] = key;\n      this._lines[exists.lineno - 1] = this.encode(key, value);\n    }\n  }\n  </processLinesModification>\n\n  <emitChangeEvents>\n  if(changed) {\n    this.emit('change',\n      key, value, (exists ? exists.value : undefined), val, exists);\n\n    this.emit(key,\n      key, value, (exists ? exists.value : undefined), val, exists);\n  }\n  </emitChangeEvents>\n\n  <handleIncludeKey>\n  if(key === Types.INCLUDE && value) {\n    this.emit('include', value, this._file, lineno);\n  }\n  </handleIncludeKey>\n}\n"], ["getKinesisShardIdAndEventNoFromEventID", "\nfunction getKinesisShardIdAndEventNoFromEventID(eventID) {\n  if (eventID) {\n    const sepPos = eventID.indexOf(':');\n    return sepPos !== -1 ?\n      [eventID.substring(0, sepPos), eventID.substring(sepPos + 1),] : ['', ''];\n  }\n  return ['', ''];\n}\n"], ["guessAtomElementFromName", "\nfunction guessAtomElementFromName(fourLetterName) {\n  if (fourLetterName[0] !== ' ') {\n    var trimmed = fourLetterName.trim();\n    if (trimmed.length === 4) {\n      <findValidChar>\n      var i = 0;\n      var charCode = trimmed.charCodeAt(i);\n      while (i < 4 && (charCode < 65 || charCode > 122 ||\n             (charCode > 90 && charCode < 97))) {\n        ++i;\n        charCode = trimmed.charCodeAt(i);\n      }\n      </findValidChar>\n      return trimmed[i];\n    }\n    \n    <processNumericPrefix>\n    var firstCharCode = trimmed.charCodeAt(0);\n    if (firstCharCode >= 48 && firstCharCode <= 57) {\n      return trimmed[1];\n    }\n    </processNumericPrefix>\n    return trimmed.substr(0, 2);\n  }\n  return fourLetterName[1];\n}\n"], ["DepNodeConstructor", "\nfunction DepNode(id, options) {\n  \n  <validateInput>\n  debug('new DepNode(%s)', id);\n  if('string' != typeof id) {\n    throw new Error('Invalid argument : id must be a string');\n  }\n  checkOptions(options);\n  </validateInput>\n\n  <initializeProperties>\n  this.parent = null;\n  this.children = [];\n  this.id = id;\n  this.modules = [];\n  this.options = options\n  this.fromSize = 0;\n  this.toSize = 0;\n  </initializeProperties>\n}\n"], ["modelSaveMethod", "\nfunction(_options){\n  <validateModel>\n  if(this.validate() !== true) return false;\n  </validateModel>\n\n  <saveModel>\n  var self = this, \n      options = _options || {},\n      success = options.success, \n      method = this.isNew() ? 'create' : 'update';\n\n  options.success = function(data){\n    if(method === 'create') self.id(data[self.idAttribute]);\n    if(success) success(self, data);\n  };\n  </saveModel>\n\n  <performSync>\n  return this.sync.call(this, method, this, options);\n  </performSync>\n}\n"], ["struct", "\nfunction struct (type, stateDefinitions, contractName, location) {\n  <parseType>\n  var match = type.match(/struct (\\S*?)( storage ref| storage pointer| memory| calldata)?$/)\n  if (match) {\n    if (!location) {\n      location = match[2].trim()\n    }\n  </parseType>\n\n  <getMemberDetails>\n    var memberDetails = getStructMembers(match[1], stateDefinitions, contractName, location) \n    if (!memberDetails) return null\n    return new StructType(memberDetails, location, match[1])\n  </getMemberDetails>\n  } else {\n    return null\n  }\n}\n"], ["getWidgetsByName", "\nfunction(name) {\n  <findWidgets>\n  var result = [],\n      i = 0;\n\n  for (; i < this._count; i++) {\n    if (this._content[i].isWidget && this._content[i].name == name) {\n      result.push(this._content[i]);\n    }\n  }\n  </findWidgets>\n  return result;\n}\n"], ["getHelpContentsForService", "\nfunction getHelpContentsForService(serviceManifest) {\n  const { operation } = serviceManifest;\n\n  <initializeSections>\n  const sections = [];\n  </initializeSections>\n  \n  <buildHelpSections>\n  if (serviceManifest.operation) {\n    let paramsHelp = { head: '', table: [] };\n    if (serviceManifest.operation.params) {\n      <buildParamsHelp>\n      const { params } = operation;\n      paramsHelp = {\n        head: `Command arguments are:`,\n        table: params.map(param => [chalk.cyan.bold(`--${param.alias || param.name} <${param.type}>${param.required ? ' (required)' : ''}`), param.description])\n      };\n      if (operation.entityName) {\n        paramsHelp.table.unshift([chalk.cyan.bold(`--in ${operation.entityType}.json`), `The ${operation.entityType} object to send in the body of the request`],\n            ['', chalk.dim(getEntityTypeExample(operation.entityType))]);\n      }\n      </buildParamsHelp>\n    } else if (operation.entityName) {\n      <processEntityOnly>\n      paramsHelp = {\n        head: `Command arguments are:`,\n        table: [\n          [chalk.cyan.bold(`--in ${operation.entityType}.json`), `The ${operation.entityType} object to send in the body of the request`],\n          ['', chalk.dim(getEntityTypeExample(operation.entityType))]\n        ]\n      };\n      </processEntityOnly>\n    }\n    if (operation.name == 'createKnowledgebase' || operation.name == 'getKnowledgebaseDetails') {\n      <msbotOption>\n      paramsHelp.table.push([chalk.cyan.bold(`--msbot`), `(OPTIONAL) Format the output as json for piping into msbot connect qna command`]);\n      </msbotOption>\n    }\n    if (paramsHelp.table.length > 0)\n      sections.push(paramsHelp);\n  }\n  <addConfigAndGlobal>\n  sections.push(configSection);\n  sections.push(globalArgs);\n  </addConfigAndGlobal>\n  </buildHelpSections>\n  \n  return sections;\n}\n"], ["MIDIParserErrorConstructor", "\nfunction MIDIParserError(actual, expected, byte) {\n  <initErrorInstance>\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.actual = actual;\n  this.expected = expected;\n  </initErrorInstance>\n\n  <formatAndSetMessage>\n  actual = format(actual);\n  expected = format(expected);\n  this.message = 'Invalid MIDI file: expected ' +\n      expected + ' but found ' + actual;\n  if (byte !== undefined) {\n    this.byte = byte;\n    this.message += ' (at byte ' + byte + ')';\n  }\n  </formatAndSetMessage>\n}\n"], ["setEventMappings", "\nfunction (mappings) {\n  <validateMappings>\n  if (!mappings || !_.isObject(mappings)) {\n    var err = new Error('Please pass a valid mapping values!');\n    debug(err);\n    throw err;\n  }\n  </validateMappings>\n\n  <setMappings>\n  this.eventMappings = mappings;\n  </setMappings>\n\n  return this;\n}\n"], "```"]