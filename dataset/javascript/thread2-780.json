[["authorizeApp", "\nfunction authorizeApp(user, tokenName, scope) {\n  return new Promise((resolve, reject) => {\n    <createAuthorizationRequest>\n    request.post('https://api.authorizationendpoint.com', {\n      auth: {\n        user: user.username,\n        pass: user.password,\n        sendImmediately: true\n      },\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded',\n        'User-Agent': tokenName\n      },\n      body: JSON.stringify({\n        scopes: scope,\n        note: tokenName\n      })\n    }, </createAuthorizationRequest>\n    (err, response, body) => {\n      if (err) {\n        <handleAuthorizationError>reject(err);</handleAuthorizationError>\n      } else {\n        const returnBody = <parseAuthorizationResponse>JSON.parse(body);</parseAuthorizationResponse>\n        if (returnBody.token) {\n          <resolveWithToken>resolve(returnBody.token);</resolveWithToken>\n        }\n        else if (returnBody.errors) {\n          <handleAuthorizationErrors>\n          console.log(returnBody.errors);\n          reject(returnBody.errors);\n          </handleAuthorizationErrors>\n        }\n      }\n    });\n  });\n}\n"], ["arrayIntersection", "\nfunction arrayIntersection(arr1, arr2) {\n  if (_.isEqual(arr1, arr2)) {\n    return arr1;\n  }\n  <filterArray>\n  return arr1.filter(v => arrayIncludes(arr2, v));\n  </filterArray>\n}\n"], ["trim", "\nfunction trim(x, k) {\n  <prepareArrayForTrimming>\n  var i, y;\n  for (i = x.length; i > 0 && !x[i - 1]; i--);\n  y = new Array(i + k);\n  </prepareArrayForTrimming>\n  <copyArray>\n  copy_(y, x);\n  </copyArray>\n  return y;\n}\n"], ["deepGet", "\nfunction deepGet(obj, deepKey, defaultVal) {\n  let parts = <splitDeepKey>deepKey.split('.')</splitDeepKey>\n  let t = obj\n  for (let k of parts) {\n    if (<checkPropertyAvailability>typeof t !== 'object' || t === null || !(k in t)</checkPropertyAvailability>)\n      return defaultVal\n    <assignValueToT>t = t[k]</assignValueToT>\n  }\n  return t\n}\n"], ["getRequestHref", "\nfunction (req) {\n  var location = <getLocationFromRequest>getLocation(req)</getLocationFromRequest>,\n      href = location.origin + location.search;\n  return href;\n}\n"], ["lint", "\nfunction lint(options) {\n  if (!<validateOptionsLanguage>options.language</validateOptionsLanguage>) {\n    throw new Error('options.language missing')\n  }\n\n  if (!<validateOptionsArgumentsArray>Array.isArray(options.arguments)</validateOptionsArgumentsArray>) {\n    throw new TypeError('options.arguments has to be an array')\n  }\n\n  <setDevelopmentEnvironmentVariable>\n  process.env.NODE_ENV = 'development'\n  </setDevelopmentEnvironmentVariable>\n\n  if (<lintCSSFlow>options.language === 'css'</lintCSSFlow>) {\n    process.env.PANGOLIN_ENV = 'lint:css'\n\n    <executeLinting>\n    lintCSS(options.arguments)\n      ? process.exit(0)\n      : process.exit(1)\n    </executeLinting>\n  }\n\n  if (<lintJSFlow>options.language === 'js'</lintJSFlow>) {\n    process.env.PANGOLIN_ENV = 'lint:js'\n\n    <executeLinting>\n    lintJS(options.arguments)\n      ? process.exit(0)\n      : process.exit(1)\n    </executeLinting>\n  }\n}\n"], ["openPage", "\nfunction (openUrl, callbackFn) {\n  var self = this,\n      url = self.options.hostAndPort + '/page/functions/open';\n\n  <logDebugInfo>self.options.debug && console.log('calling url: %s', url);</logDebugInfo>\n  <sendOpenPageRequest>\n  request.post(url, {\n    form: {\n      args: JSON.stringify([openUrl], null, 4)\n    }\n  },\n    function (error, response, body) {\n      <logDebugInfo>self.options.debug && console.log(body);</logDebugInfo>\n      if (<checkResponseSuccess>response && response.statusCode === 200</checkResponseSuccess>) {\n        body === 'success' ?\n          callbackFn && callbackFn.call(self, true) : <invokeCallbackOnFailure>callbackFn && callbackFn.call(self, false);</invokeCallbackOnFailure>\n      }\n      else {\n        <invokeCallbackOnError>callbackFn && callbackFn.call(self, false, body);</invokeCallbackOnError>\n      }\n    }\n  );\n  </sendOpenPageRequest>\n}\n"], ["transitionGroupWeb", "\nfunction transitionGroupWeb(Component, createElement) {\n  return (function (Component) {\n    <extendComponentToTransitionGroup>\n    function TransitionGroup() {\n      Component.apply(this, arguments);\n    }\n\n    if (Component) TransitionGroup.__proto__ = Component;\n    TransitionGroup.prototype = Object.create(Component && Component.prototype);\n    TransitionGroup.prototype.constructor = TransitionGroup;\n    </extendComponentToTransitionGroup>\n\n    <renderTransitionGroup>\n    TransitionGroup.prototype.render = function render() {\n      var tag = this.props.tag || 'span';\n      return createElement(tag, null)\n    };\n    </renderTransitionGroup>\n\n    return TransitionGroup;\n  }(Component))\n}\n"], ["splitPagesPromise", "\nfunction splitPagesPromise(content) {\n  var pages = <splitContentIntoPages>content.split(/\\f/)</splitContentIntoPages>\n  if (!pages) {\n    var ex = {\n      message: 'pdf-text-extract failed',\n      error: 'no text returned from the pdftotext command',\n      filePath: this.filePath,\n      stack: new Error().stack\n    }\n    <throwExceptionForSplitFailure>throw ex</throwExceptionForSplitFailure>\n  }\n  \n  var lastPage = pages[pages.length - 1]\n  if (!lastPage) {\n    <removeLastEmptyPage>pages.pop()</removeLastEmptyPage>\n  }\n  <resolvePromiseWithPages>resolve(pages)</resolvePromiseWithPages>\n}\n"], ["setAxisExtremes", "\nfunction (newMin, newMax, redraw, animation, eventArguments) {\n  var axis = this,\n    chart = axis.chart;\n\n  redraw = <assignRedrawDefault>pick(redraw, true);</assignRedrawDefault>\n\n  eventArguments = <extendEventArguments>extend(eventArguments, {\n    min: newMin,\n    max: newMax\n  });</extendEventArguments>\n\n  <triggerSetExtremesEvent>\n  fireEvent(axis, 'setExtremes', eventArguments, function () {\n    axis.userMin = newMin;\n    axis.userMax = newMax;\n    axis.eventArgs = eventArguments;\n\n    axis.isDirtyExtremes = true;\n\n    if (redraw) {\n      chart.redraw(animation);\n    }\n  });\n  </triggerSetExtremesEvent>\n}\n"], ""]