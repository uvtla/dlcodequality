[["generateReport", "\nfunction (incremental) {\n        <checkPrerequisites>\n        if (!reportHolder || !results) {\n            return; \n        }\n        </checkPrerequisites>\n\n        var table = '<table><thead><tr><th>Selector</th><th> </th><th>ms</th><th>Total</th></tr></thead><tbody>';\n\n        <processResults>\n        var resultsArray = [];\n        for (var res in results) {\n            if (results.hasOwnProperty(res) && res !== \"__baseline__\") {\n                resultsArray.push(results[res]);\n            }\n        }\n        </processResults>\n\n        <sortResults>\n        var sorted = resultsArray.sort(function (a, b) {\n            if (a.baseline === b.baseline) {\n                return 0;\n            }\n            if (incremental) {\n                return a.baseline > b.baseline ? 1 : -1;\n            } else {\n                return a.baseline > b.baseline ? -1 : 1;\n            }\n        }).slice(0, 20);\n        </sortResults>\n\n        <generateTableMarkup>\n        for (var i = 0, len = sorted.length; i < len; i += 1) {\n            var item = sorted[i];\n            table += '<tr><td style=\"font:11px monospace\">Removing <strong>'\n                    + item.name\n                    + '</strong></td><td style=\"text-align:right\">'\n                    + (item.baseline > 0\n                            ? '<span style=\"color:green\">saves</span>'\n                            : '<span style=\"color:red\">adds</span>')\n                    + '</td><td style=\"text-align:right; font:11px monospace\">' + Math.abs(item.baseline) + 'ms</td>'\n                    + '<td style=\"text-align:right; font:11px monospace\">' + item.runTime + 'ms</td></tr>\\n';\n        }\n        </generateTableMarkup>\n\n        table += '</tbody></table><hr/>';\n        \n        <addSummaryToTable>\n        table += '<table><tr><td style=\"text-align:right; font:10px monospace\">Selectors Tested:</td><td style=\"font:10px monospace\">'\n                + resultsArray.length\n                + '</td></tr>'\n                + '<tr><td style=\"text-align:right; font:10px monospace\">Baseline Time:</td><td style=\"font:10px monospace\">'\n                + results[\"__baseline__\"].runTime + 'ms</td></tr>';\n        </addSummaryToTable>\n\n        <applyStylesToHolder>\n        style(reportHolder, {\n            width : 600\n        });\n        </applyStylesToHolder>\n\n        <displayReport>\n        logHolder.innerHTML = table;\n        </displayReport>\n    }\n"], ["initializeComponent", "\nfunction ( options ) {\n            \n            <calculateInitialValues>\n            this._baseAngle = options.baseAngle? this._correctDegree( options.baseAngle ) : 0;\n            this._resetOptions( options );\n    \n            \n            var center = this._centerPoint,\n                point = this._getPoint( this._baseAngle, center );\n    \n            this._pageX = point.x;\n            this._pageY = point.y;\n            this._pointX = point.x;\n            this._pointY = point.y;\n            this._centerX = center.x;\n            this._centerY = center.y;\n            </calculateInitialValues>\n\n            <handlePrefixCompatibily>\n            if ( navigator.pointerEnabled ) {\n                this._msTouchAction = 'touch-action';\n            } else if ( navigator.msPointerEnabled ) {\n                this._msTouchAction = '-ms-touch-action';\n            }\n            </handlePrefixCompatibily>\n        }\n"], ["augmentFunction", "\nfunction augmenter(object, subject, hookCb)\n{\n  var unaugment, originalCb = object[subject];\n\n  <restoreOriginal>\n  unaugment = function()\n  {\n    \n    object[subject] = originalCb;\n  };\n  </restoreOriginal>\n\n  <hookCallback>\n  object[subject] = function()\n  {\n    var args   = Array.prototype.slice.call(arguments)\n      , result = originalCb.apply(this, args)\n      ;\n\n    \n    unaugment();\n\n    \n    \n    return hookCb.call(this, [result].concat(args));\n  };\n  </hookCallback>\n\n  <returnUnaugmenter>\n  return unaugment;\n  </returnUnaugmenter>\n}\n"], ["parseIntValue", "\nfunction parseIntValue(input) {\n\n    <parseInteger>\n    let value = input.buf.readInt32LE(input.i);\n    input.i += 4;\n    </parseInteger>\n    \n    <returnValue>\n    return value;\n    </returnValue>\n}\n"], ["extractBits", "\nfunction(a, bstart, blength) {\n    \n    \n    <determineExtractionAlgorithm>\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      \n      <calculateMultipleSegments>\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n      </calculateMultipleSegments>\n    } else {\n      \n      <calculateSingleSegment>\n      x = a[bstart/32|0] >>> sh;\n      </calculateSingleSegment>\n    }\n    </determineExtractionAlgorithm>\n\n    <returnExtractedValue>\n    return x & ((1<<blength) - 1);\n    </returnExtractedValue>\n  }\n"], ["callAction", "\n```javascript\n<callAction>\nfunction callAction(request, response, callback) {\n    <handleCallback>\n    if (typeof callback == 'function') {\n      return Promise.resolve()\n        .then(callback.bind(null, request, response));\n    }\n    </handleCallback>\n\n    <loadAndInstantiateAction>\n    try {\n      var Action = require(ACTION_PATH + '/' + callback.action + '.js');\n    } catch (error) {\n      if (error.message == 'Cannot find module \\'' + ACTION_PATH + '/' + callback.action + '.js\\'') {\n        return Promise.reject('Action ' + callback.action + ' does not exist.')\n          .catch(this.onPageNotFound.bind(this, request, response));\n      }\n      return Promise.reject(error)\n        .catch(this.onError.bind(this, request, response));\n    }\n\n    var instance = new Action(request, response);\n    </loadAndInstantiateAction>\n    \n    <validateActionMethod>\n    if (!instance[callback.method]) {\n      return Promise.reject(new Error('Method \"' + callback.method + '\" not found in action \"' + callback.action + '\"'));\n    }\n    </validateActionMethod>\n\n    <executeActionMethod>\n    var promise = Promise.resolve();\n    if (instance.init && 'function' == typeof instance.init) {\n      promise = promise.then(function () {\n        return instance.init();\n      });\n    }\n\n    promise = promise.then(function () {\n      return instance[callback.method].apply(instance, callback.arguments);\n    });\n    </executeActionMethod>\n\n    <handleActionError>\n    if (instance.onError && 'function' == typeof instance.onError) {\n      promise = promise.catch(function (error) {\n        return instance.onError.call(instance, error)\n      });\n    }\n\n    promise = promise.catch(this.onError.bind(this, request, response));\n    </handleActionError>\n\n    <returnActionPromise>\n    return promise;\n    </returnActionPromise>\n  }\n"], ["processVisualizationData", "\n```javascript\n<processVisualizationData>\nfunction(prepareTiles, rendererHelper,\n        visited, flowEvents, sortedRasterizerSlices) {\n      <verifyInitialConditions>\n      if (!prepareTiles.args.prepare_tiles_id)\n        return;\n\n      if (!rendererHelper || !rendererHelper.rasterWorkerThreads)\n        return;\n      </verifyInitialConditions>\n\n      var rasterWorkerThreads = rendererHelper.rasterWorkerThreads;\n      var prepare_tile_id = prepareTiles.args.prepare_tiles_id;\n      var pendingEventQueue = [];\n\n      <sortRasterizerSlices>\n      if (sortedRasterizerSlices.length === 0)\n        this.sortRasterizerSlices(rasterWorkerThreads, sortedRasterizerSlices);\n      </sortRasterizerSlices>\n\n      <processTasks>\n      var numFinishedTasks = 0;\n      var RASTER_TASK_TITLE = 'RasterizerTaskImpl::RunOnWorkerThread';\n      var IMAGEDECODE_TASK_TITLE = 'ImageDecodeTaskImpl::RunOnWorkerThread';\n      var FINISHED_TASK_TITLE = 'TaskSetFinishedTaskImpl::RunOnWorkerThread';\n\n      for (var i = 0; i < sortedRasterizerSlices.length; i++) {\n        var task = sortedRasterizerSlices[i];\n\n        if (task.title === RASTER_TASK_TITLE ||\n            task.title === IMAGEDECODE_TASK_TITLE) {\n          if (task.args.source_prepare_tiles_id === prepare_tile_id)\n            this.addEntireSliceHierarchy(task.mostTopLevelSlice);\n        } else if (task.title === FINISHED_TASK_TITLE) {\n          if (task.start > prepareTiles.start) {\n            pendingEventQueue.push(task.mostTopLevelSlice);\n            if (++numFinishedTasks === 3)\n              break;\n          }\n        }\n      }\n      </processTasks>\n\n      <handlePendingEvents>\n      while (pendingEventQueue.length != 0) {\n        var event = pendingEventQueue.pop();\n\n        this.addEntireSliceHierarchy(event);\n        this.followSubsequentSlices(event, pendingEventQueue, visited,\n            flowEvents);\n      }\n      </handlePendingEvents>\n    }\n"], ["popupHandler", "\n```javascript\n<popupHandler>\nfunction (conf) {\n            <checkIfOpen>\n            if (!this.isOpen) {\n                this._applyConfig(conf);\n                this.$raiseEvent(\"onBeforeOpen\");\n                this._show();\n                </checkIfOpen>\n                \n                <updateStateAndNotify>\n                this.isOpen = true;\n                ariaPopupsPopupManager.onPopupOpen(this);\n                this.refreshProcessingIndicators();\n                </updateStateAndNotify>\n\n                <handleAnimation>\n                if (!this.conf.animateIn) {\n                    this._onAfterOpen();\n                } else {\n                    this._getAnimator().$onOnce({\n                        \"animationend\" : this._onAfterOpen,\n                        scope : this\n                    });\n                }\n                </handleAnimation>\n            }\n        }\n"], ["processFileContent", "\n```javascript\n<processFileContent>\nfunction (filepath, options) {\n    <readFileAndDetermineType>\n    var content = grunt.file.read(filepath);\n    if (isPugTemplate(filepath)) {\n      var pug = require('pug');\n      options.pug.filename = filepath;\n      content = pug.render(content, options.pug);\n    }\n    </readFileAndDetermineType>\n\n    <processContent>\n    var process = options.process;\n    if (typeof process === 'function') {\n      content = process(content, filepath);\n    } else if (process) {\n      if (process === true) {\n        process = {};\n      }\n      content = grunt.template.process(content, process);\n    }\n    </processContent>\n\n    <minifyContent>\n    if (Object.keys(options.htmlmin).length) {\n      try {\n        content = minify(content, options.htmlmin);\n      } catch (err) {\n        grunt.warn(filepath + '\\n' + err);\n      }\n    }\n    </minifyContent>\n\n    <prepareContentForProcessing>\n    content = content.replace(/(^\\s*)/g, '');\n    </prepareContentForProcessing>\n\n    <escapeAndReturnContent>\n    return escapeContent(content, options.quoteChar, options.indentString, options.templatePathInComment ? filepath : '');\n    </escapeAndReturnContent>\n  }\n"], ["updateClassForElement", "\n```javascript\n<updateClassForElement>\nfunction updateClassProp(context, index, addOrRemove) {\n    <adjustIndex>\n    var adjustedIndex = index + context[4];\n    </adjustIndex>\n\n    <updateStyleBasedOnClassChange>\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n    </updateStyleBasedOnClassChange>\n}\n"], "```\nThis function updates a class property by adjusting an index and then updating a style property based on the class change. These are steps within a single task of updating a class property, which makes it compliant with SRP."]