[["initialize", "\nfunction(serviceRegistry, commandRegistry) {\n    this._serviceRegistry = serviceRegistry;\n    this._commandRegistry = commandRegistry;\n    this._dumbHover = new mDebugDumbHover.DebugDumbHover();\n\n    \n    this._debugSockets = {};\n\n    this._debugPanes = null;\n\n    \n    serviceRegistry.registerService(\"orion.project.deploy\", this, {\n        id: \"org.eclipse.orion.client.debug.deploy\",\n        deployTypes: [\"Native\"],\n        priorityForDefault: 8,\n        name: messages[\"createNew\"],\n        tooltip: messages[\"createNewTooltip\"]\n    });\n}\n"], ["getFmtmap", "\nfunction getFmtmap(fmt_info){\n    var fmtmap = [];\n    if(fmt_info){\n        if(fmt_info.indexOf('%')!==-1)  fmt_info = decodeURIComponent(fmt_info);\n\n        var dset = fmt_info.split(',');\n        for (var i = 0; i < dset.length; i++){\n            var sub_inf = parse_info(dset[i]);\n            \n            for(var k in sub_inf){\n                if(sub_inf[k].indexOf('%')!==-1) sub_inf[k] = decodeURIComponent(sub_inf[k]);\n            }\t\t\t\n\n            if(sub_inf.stream) {\n                var stream_info = parse_info(sub_inf.stream);\n\n                if(stream_info.s) stream_info.s = re_hash(stream_info.s);\n                if(sub_inf.conn) sub_inf.url = sub_inf.conn+\"?\";\n\n                for(var k in stream_info){\n                    if(stream_info[k].indexOf('%')!==-1) stream_info[k] = decodeURIComponent(stream_info[k]);\n                    sub_inf.url += k+\"=\"+stream_info[k]+\"&\";\n                }\n            }\n            \n            if(sub_inf.s) sub_inf.s = re_hash(sub_inf.s);\n            if(sub_inf.url) sub_inf.url = decodeURIComponent(sub_inf.url);\n            if(sub_inf.itag) sub_inf.itag = parseInt(sub_inf.itag);\n            if(!mdata.data[sub_inf.itag])mdata.data[sub_inf.itag]=decodeURIComponent(sub_inf.type);\n            fmtmap.push( sub_inf );\n        }\n    }\n    return fmtmap;\n}\n"], ["checkHandlerAttached", "\nfunction(name, action) {\n    var handlers = this.__handlers__;\n\n    if (! handlers ||\n        ! handlers[name]) {\n        return false;\n    }\n    var hdls = handlers[name];\n    for (var i = 0; i < hdls.length; i++) {\n        if (hdls[i].action === action) {\n            return true;\n        }\n    }\n}\n"], ["dragStartEvents", "\nfunction(x, y) {\n    if (this.dragCurrent && this.dragCurrent.useShim) {\n        this._shimState = this.useShim;\n        this.useShim = true;\n    }\n    this._activateShim();\n    YAHOO.log(\"firing drag start events\", \"info\", \"DragDropMgr\");\n    clearTimeout(this.clickTimeout);\n    var dc = this.dragCurrent;\n    if (dc && dc.events.b4StartDrag) {\n        dc.b4StartDrag(x, y);\n        dc.fireEvent('b4StartDragEvent', { x: x, y: y });\n    }\n    if (dc && dc.events.startDrag) {\n        dc.startDrag(x, y);\n        dc.fireEvent('startDragEvent', { x: x, y: y });\n    }\n    this.dragThreshMet = true;\n}\n"], ["removeMenuItemEventListeners", "\nfunction removeMenuItemEventListeners(menuItem) {\n    menuItem._command\n        .off(\"enabledStateChange\", menuItem._enabledChanged)\n        .off(\"checkedStateChange\", menuItem._checkedChanged)\n        .off(\"nameChange\", menuItem._nameChanged)\n        .off(\"keyBindingAdded\", menuItem._keyBindingAdded)\n        .off(\"keyBindingRemoved\", menuItem._keyBindingRemoved);\n}\n"], ["setupAndRunMochaTests", "\nfunction() {\n    require('coffee-script')\n    var path = require('path')\n    var fs = require('fs')\n    var Mocha = require('mocha')\n\n    \n    process.setMaxListeners(0)\n\n    var testDir = path.resolve(__dirname, '../test')\n    var files = fs.readdirSync(testDir).filter(function(f) {\n        return f.match(/\\.js$/)\n    })\n\n    var mocha = new Mocha({\n        reporter: 'spec'\n    })\n\n    for (var i = 0; i < files.length; i++) {\n        var file = files[i]\n        mocha.addFile(path.resolve(testDir, file))\n    }\n\n    mocha.run(function(failures) {\n        var exitCode = failures === 0 ? 0 : 1\n\n        process.send({\n            type: 'shutdown',\n            code: exitCode\n        })\n        process.exit(failures)\n    })\n}\n"], ["updateInViewport", "\nfunction updateInViewport(cm, from, to) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    from = isNaN(from) ? vp.from : from;\n    to = isNaN(to) ? vp.to : to;\n\n    if (!state) { return; }\n    cm.operation(function () {\n        updateFoldInfo(cm, from, to);\n    });\n    state.from = from;\n    state.to = to;\n}\n"], ["composeAnimationProperty", "\nfunction compose(property) {\n    var settings = Glide.settings;\n\n    if (!disabled) {\n        return property + ' ' + this.duration + 'ms ' + settings.animationTimingFunc;\n    }\n\n    return property + ' 0ms ' + settings.animationTimingFunc;\n}\n"], ["triangulatePolygon", "\nfunction ( contour, indices ) {\n    var n = contour.length;\n\n    if ( n < 3 ) return null;\n\n    <triangulationPreparation>\n    var result = [],\n        verts = [],\n        vertIndices = [];\n    \n    var u, v, w;\n    if ( area( contour ) > 0.0 ) {\n        for ( v = 0; v < n; v ++ ) verts[ v ] = v;\n    } else {\n        for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n    }\n\n    var nv = n;\n    </triangulationPreparation>\n\n    var count = 2 * nv;   \n    for ( v = nv - 1; nv > 2; ) {\n        if ( ( count -- ) <= 0 ) {\n            console.log( 'Warning, unable to triangulate polygon!' );\n            if ( indices ) return vertIndices;\n            return result;\n        }\n\n        u = v; \t \tif ( nv <= u ) u = 0;     \n        v = u + 1;  if ( nv <= v ) v = 0;     \n        w = v + 1;  if ( nv <= w ) w = 0;     \n\n        if ( snip( contour, u, v, w, nv, verts ) ) {\n            var a, b, c, s, t;\n\n            a = verts[ u ];\n            b = verts[ v ];\n            c = verts[ w ];\n\n            result.push( [ contour[ a ],\n                contour[ b ],\n                contour[ c ] ] );\n\n            vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n            for ( s = v, t = v + 1; t < nv; s++, t++ ) {\n                verts[ s ] = verts[ t ];\n            }\n\n            nv --;\n\n            count = 2 * nv;\n        }\n    }\n\n    if ( indices ) return vertIndices;\n    return result;\n}\n"], ["findFocusableElements", "\nfunction(root) {\n    root = root || this.innerElement;\n    var focusable = {};\n\n    <populateFocusableList>\n    for (var i = 0; i < Panel.FOCUSABLE.length; i++) {\n        focusable[Panel.FOCUSABLE[i]] = true;\n    }\n    </populateFocusableList>\n\n    function isFocusable(el) {\n        if (el.focus && el.type !== \"hidden\" && !el.disabled && focusable[el.tagName.toLowerCase()]) {\n            return true;\n        }\n        return false;\n    }\n\n    \n    return Dom.getElementsBy(isFocusable, null, root);\n}\n"], "```"]