[["ws_receive", "\nfunction ws_receive(raw) {\n    <parse_raw_data>\n    let data = unpack(raw); \n    let fin = (data[0] & 128) == 128;\n    let opcode = data[0] & 15;\n    let isMasked = (data[1] & 128) == 128;\n    let dataLength = data[1] & 127;\n    let start = 2;\n    let length = data.length;\n    let output = \"\";\n    </parse_raw_data>\n    \n    <determine_start_index>\n    if (dataLength == 126)\n        start = 4;\n    else if (dataLength == 127)\n        start = 10;\n    </determine_start_index>\n        \n    <mask_or_process_data>\n    if (isMasked) {\n        let i = start + 4;\n        let masks = data.slice(start, i);\n        let index = 0;\n    \n        while (i < length) {\n            output += String.fromCharCode(data[i++] ^ masks[index++ % 4]);\n        }\n    } else {\n        let i = start;\n        while (i < length) {\n            output += String.fromCharCode(data[i++]);\n        }\n    }\n    </mask_or_process_data>\n\n    return output;\n}\n"], ["cloneWith", "\nfunction cloneWith(value, customizer) {\n    customizer = typeof customizer == 'function' ? customizer : undefined;\n    return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n}\n"], ["event_handler", "\nfunction(event) {\n    <handle_navigation_condition>\n    var history, hash;\n    if (!$.event.special.navigate.isHashChangeEnabled() ||\n        $.event.special.navigate.isPushStateEnabled()) {\n        return;\n    }\n    </handle_navigation_condition>\n\n    <prevent_next_hash_change>\n    if (this.preventNextHashChange) {\n        this.preventNextHashChange = false;\n        event.stopImmediatePropagation();\n        return;\n    }\n    </prevent_next_hash_change>\n\n    <setup_history_and_hash>\n    history = this.history;\n    hash = path.parseLocation().hash;\n    </setup_history_and_hash>\n\n    <direct_history_access>\n    this.history.direct({\n        url: hash,\n\n        present: function(historyEntry, direction) {\n            event.hashchangeState = $.extend({}, historyEntry);\n            event.hashchangeState.direction = direction;\n        },\n        \n        missing: function() {\n            history.add(hash, {\n                hash: hash,\n                title: document.title\n            });\n        }\n    });\n    </direct_history_access>\n}\n"], ["createInjector", "\nfunction createInjector(defType, parent, additionalProviders) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\n"], ["isPointInsidePoly", "\nfunction isPointInsidePoly(point, polygon) {\n    let i,\n        nvert = polygon.length,\n        j = nvert - 1,\n        c = false;\n    for (i = 0; i < nvert; j = i++) {\n        if (((polygon[i].lon > point.lon) !== (polygon[j].lon > point.lon)) &&\n            (point.lat < (polygon[j].lat - polygon[i].lat) * (point.lon - polygon[i].lon) /\n            (polygon[j].lon - polygon[i].lon) + polygon[i].lat)) {\n            c = !c;\n        }\n    }\n    return c;\n}\n"], ["update_value_based_on_collection", "\nfunction(argument_value) {\n    <check_value_is_collection>\n    if (argument_value.isCollection) {\n        <cleanup_on_own_collection>\n        if (this._own_collection) {\n            this._value.destroy();\n            this._own_collection = false;\n            this._value = null;\n        }\n        </cleanup_on_own_collection>\n\n        <assign_new_value>\n        if (this._value != argument_value) {\n            this._value = argument_value;\n            this._fire('new_enumerable');\n        }\n        </assign_new_value>\n\n    } else <refresh_or_create_collection>\n    if (this._own_collection) {\n        this._value.refreshFromDataSource(argument_value);\n    } else {\n        this._createCollection(argument_value);\n    }\n    </refresh_or_create_collection>\n}\n"], ["getPackageMetaFile", "\nfunction getPackageMetaFile(answers) {\n    <construct_package_metadata>\n    const packageFields = ['name', 'version', 'license', 'category'];\n    const packageObject = merge(pick(packageFields, answers),\n        { dependencies: { 'rung-cli': '1.0.0' } });\n    </construct_package_metadata>\n\n    <create_package_file>\n    return {\n        filename: path.join(answers.name, 'package.json'),\n        content: JSON.stringify(packageObject, null, 2)\n    };\n    </create_package_file>\n}\n"], ["MemoryStore_constructor", "\nfunction MemoryStore(options) {\n    <configure_memory_store>\n    options = options || {};\n    options.max = Number(options.max);\n    if (isNaN(options.max)) options.max = DEFAULT_MAX;\n    this._max = options.max;\n\n    options.gcProbability = Number(options.gcProbability);\n    if (isNaN(options.gcProbability)) options.gcProbability = DEFAULT_PROBABILITY;\n    this._gcProbability = options.gcProbability;\n\n    debug('init: max=%s, gcProbability=%s', this._max, this._gcProbability);\n\n    this._keys = {};\n    this._keyTotal = 0;\n    </configure_memory_store>\n\n    return this;\n}\n"], ["apply_data_view_to_elements", "\nfunction(selector, args, cb) {\n    <initialize_selector_and_args>\n    selector = selector || document;\n    args = args || {};\n    </initialize_selector_and_args>\n    \n    <create_views_for_elements>\n    var self = this;\n    $(selector).find('*[data-view]').each(function() {\n        var viewArgs = _.extend({}, args);\n        viewArgs.el = this;\n        self.getComponent('viewManager').createView($(this).data('view'), viewArgs)\n            .then(cb);\n    });\n    </create_views_for_elements>\n}\n"], ["apiId_flow", "\nfunction(apiId) {\n    <fetch_and_process_existing_stages>\n    return module.exports.fetchExistingStages(apiId).then(function(stages) {\n        if (!stages || stages.length === 0) {\n            return module.exports.deleteAPI(apiId);\n        }\n        return apiId;\n    });\n    </fetch_and_process_existing_stages>\n}\n"], ""]