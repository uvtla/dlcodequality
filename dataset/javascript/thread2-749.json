[["startDispatching", "\nfunction startDispatching(action) {\n  require('./debug.es6').logDispatch(action);\n  \n  Object.keys(this[CALLBACKS]).forEach((id) => {\n    this[IS_PENDING][id] = false;\n    this[IS_HANDLED][id] = false;\n  });\n\n  this[PENDING_ACTION] = action;\n  this[IS_DISPATCHING] = true;\n}\n"], ["anonymous", "\nfunction(\n  component,\n  keys_to_watch_for_changes,\n  additonal_callback = null\n) {\n  if (!Array.isArray(keys_to_watch_for_changes)) {\n    throw keys_to_watch_for_changes + ' must be an array'\n  }\n  component.state = component.state || {} \n  \n  <_callback>\n  function _callback(changed_keys) {\n    if (intersection(keys_to_watch_for_changes, changed_keys).length) {\n      let state_update_obj = {}\n      keys_to_watch_for_changes.forEach(k => (state_update_obj[k] = store._store[k]))\n      this.setState(state_update_obj)\n      \n      if (additonal_callback) {\n        additonal_callback(changed_keys)\n      }\n    }\n  }\n  </_callback>\n  \n  let callback_bound_to_component = _callback.bind(component)\n  \n  for (let k of keys_to_watch_for_changes) {\n    if (!store._store.hasOwnProperty(k)) {\n      throw 'Store does not have key ' + k\n    }\n    if (component.state.hasOwnProperty(k)) {\n      console.warn('Overwriting existing state key ' + k)\n    }\n    component.state[k] = store._store[k]\n\n    store._recordKeySubscriber(k, component.constructor.name)\n  }\n  return store.subscribe(callback_bound_to_component)\n}\n"], ["wrapFailCB", "\nfunction wrapFailCB(cb, result) {\n  let errorCode = 3; \n  if (result && result.errorCode !== undefined) {\n    if (result.errorCode === -1) {\n      errorCode = 6; \n    } else {\n      ({ errorCode } = result);\n    }\n  }\n\n  const newResult = assign({\n    errorMessage: '',\n  }, (result || {}), {\n    errorCode,\n  });\n\n  if (cb) {\n    cb(newResult);\n  }\n}\n"], ["focusElement", "\nfunction focusElement(tabStopElements, direction) {\n  let start = 0;\n  let end = tabStopElements.length - 1;\n  let increment = 1;\n  if (direction === \"previous\") {\n    start = tabStopElements.length - 1;\n    end = 0;\n    increment = -1;\n  }\n\n  let current = document.activeElement.tabIndex;\n  if (current === -1 && direction === \"previous\") {\n    current = tabStopElements[tabStopElements.length - 1].tabIndex + 1;\n  }\n\n  for (let i = start; i * increment <= end * increment; i += increment) {\n    if (tabStopElements[i].tabIndex * increment > current * increment && isTabStopElement(tabStopElements[i])) {\n      tabStopElements[i].focus();\n      return;\n    }\n  }\n  for (let i = start; i * increment <= current * increment; i += increment) {\n    if (isTabStopElement(tabStopElements[i])) {\n      tabStopElements[i].focus();\n      return;\n    }\n  }\n}\n"], ["anonymous", "\nfunction(property) {\n  var prop = $.splat(property || [ 'current', 'start', 'end' ]);\n  <NodeDimComputeAndLevel>\n  NodeDim.compute(this.graph, prop, this.config);\n  this.graph.computeLevels(this.root, 0, \"ignore\");\n  </NodeDimComputeAndLevel>\n  var lengthFunc = this.createLevelDistanceFunc();\n  <computeAngularWidths>\n  this.computeAngularWidths(prop);\n  </computeAngularWidths>\n  <computePositions>\n  this.computePositions(prop, lengthFunc);\n  </computePositions>\n}\n"], ["viewNotFound", "\nfunction (viewId, requirePath, err) {\n  var that = this,\n      message = 'View Not Found. Searched for \"' + viewId + '\" via path \"' + requirePath + '\".';\n\n  return system.defer(function(dfd) {\n      dfd.resolve(that.processMarkup('<div class=\"durandal-view-404\">' + message + '</div>'));\n  }).promise();\n}\n"], ["set", "\nfunction set(appName, keyValues, keyLimits, callback) {\n  var config = {};\n\n  if (!isObject(keyValues)) {\n    return callback(new Error('To set a variable pass an object'));\n  }\n\n  config.values = keyValues;\n\n  if (isObject(keyLimits)) {\n    if (keyLimits.hasOwnProperty('memory')) {\n      config.memory = keyLimits.memory;\n    }\n    if (keyLimits.hasOwnProperty('cpu')) {\n      config.cpu = keyLimits.cpu;\n    }\n  } else {\n    callback = keyLimits;\n  }\n\n  var uri = format('/%s/apps/%s/config/', deis.version, appName);\n  <postConfig>\n  commons.post(uri, config, function onSetResponse(err, result) {\n    callback(err, result ? result.values : null);\n  });\n  </postConfig>\n}\n"], ["moveFile", "\nfunction(filePath, targetPath, callback) {\n  client\n    .moveFile(filePath, targetPath)\n    .then(function() {\n      __executeCallbackAsync(callback, [null]);\n    })\n    .catch(callback);\n}\n"], ["fromData", "\nfunction fromData(aData) {\n  var propsToCopy = [\"weeks\", \"days\", \"hours\",\n                     \"minutes\", \"seconds\", \"isNegative\"];\n\n  for (var key in propsToCopy) {\n    if (!propsToCopy.hasOwnProperty(key)) {\n      continue;\n    }\n    var prop = propsToCopy[key];\n    if (aData && prop in aData) {\n      this[prop] = aData[prop];\n    } else {\n      this[prop] = 0;\n    }\n  }\n}\n"], ["AvrYamahaNodePut", "\nfunction AvrYamahaNodePut(config) {\n  RED.nodes.createNode(this, config);\n\n  this.device = config.device;\n  this.deviceNode = RED.nodes.getNode(this.device);\n  this.name = config.name;\n  this.topic = config.topic;\n  this.payload = config.payload;\n\n  var node = this;\n  if (this.deviceNode) {\n\n  \tthis.on('input', function(msg) {\n\n      var topic = (node.topic) ? node.topic : msg.topic;\n      if (!topic) {\n        node.error('No topic given. Specify either in the config or via msg.topic!');\n        return;\n      }\n\n      var payload = (node.payload) ? node.payload : msg.payload;\n      if (payload === null || payload === undefined) {\n        node.error('invalid payload: ' + payload.toString());\n        return;\n      }\n\n      var jsonPayload = tryParseJSON(payload);\n      if (jsonPayload !== false) {\n        payload = jsonPayload\n      } else {\n        var addPayloadFormat = references.hasAdditionalPayload(topic);\n        if (addPayloadFormat) {\n          payload = JSON.parse(addPayloadFormat.replace('%s', payload).trim());\n        }\n      }\n\n      <sendPutCommand>\n      node.deviceNode.sendPutCommand(topic, payload).then(function(value) {\n        node.send(msg);\n      }).catch(function(error) {\n        node.error(\"Failed to put data to AVR with error: \" + error);\n      });\n      </sendPutCommand>\n\n  \t});\n\n  } else {\n    this.error(RED._(\"avr-yamaha.errors.missing-config\"));\n  }\n}\n"], "```"]