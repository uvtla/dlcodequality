[["getHtml", "\nfunction getHtml(methods) {\n    return [\n        '<!doctype html>',\n        '<html lang=\"en\">',\n            '<head>',\n                '<title>API Index</title>',\n                '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>',\n                '<link rel=\"stylesheet\" href=\"\n            '</head>',\n            '<body class=\"container\">',\n                '<div class=\"col-md-7\">',\n                    Object.keys(methods).map(function (name) {\n                        <generateMethodHtml>\n                        return getMethodHtml(methods[name]);\n                        </generateMethodHtml>\n                    }).join(''),\n                '</div>',\n            '</body>',\n        '</html>'\n    ].join('');\n}\n"], ["extendJQueryDatepicker", "\nfunction (o) {\n            o = o || {};\n            var tmp_args = arguments;\n            \n\t\t\t<handleStringIdentifier>\n            if (typeof(o) === 'string') {\n                <handleSpecificStringCases>\n                if (o === 'getDate'  || (o === 'option' && tmp_args.length === 2 && typeof (tmp_args[1]) === 'string')) {\n                    return $.fn.datepicker.apply($(this[0]), tmp_args);\n                } else {\n                </handleSpecificStringCases>\n                    <applyDatepickerEachElement>\n                    return this.each(function () {\n                        var $t = $(this);\n                        $t.datepicker.apply($t, tmp_args);\n                    });\n                    </applyDatepickerEachElement>\n                }\n\t\t\t</handleStringIdentifier>\n            else {\n                <applyDatepickerWithNewInstanceEachElement>\n                return this.each(function () {\n                    var $t = $(this);\n                    $t.datepicker($.timepicker._newInst($t, o)._defaults);\n                });\n                </applyDatepickerWithNewInstanceEachElement>\n            }\n        }\n"], ["checkForMatch", "\nfunction(match) {\n    <simpleComparisonBlock>\n    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);\n    if (matches)\n        iFormat++;\n    return matches;\n    </simpleComparisonBlock>\n}\n"], ["ResponseCache", "\nfunction ResponseCache(appName, ttl) {\n    this.enabled = false;\n    this.ttl = undefined;\n\n    <validateTTLAndSetupCache>\n    if (typeof ttl === 'number') {\n        if (ttl < 1) {\n            throw new Error('Response cache *must* expire, 0 TTL not accepted.');\n        }\n\n        if (mage.core.archivist.topicExists('ucResponseMeta') || mage.core.archivist.topicExists('ucResponseData')) {\n            \n\t\t\t<assertArchivistAbilities>\n            mage.core.archivist.assertTopicAbilities('ucResponseMeta', ['session'], ['set', 'get', 'touch']);\n            mage.core.archivist.assertTopicAbilities('ucResponseData', ['session'], ['set', 'get', 'touch']);\n\t\t\t</assertArchivistAbilities>\n\n            this.ttl = ttl;\n\n            this.enabled = true;\n\n            <logInformation>\n            logger.info('User command response enabled for app', appName, 'with TTL:', ttl, 'sec');\n            </logInformation>\n        } else {\n            <logWarningIfTopicsNotConfigured>\n            logger.warning(\n                'Archivist topics \"ucResponseMeta\" and \"ucResponseData\" not configured.',\n                'User command response cache disabled for app:', appName\n            );\n            </logWarningIfTopicsNotConfigured>\n        }\n    } else {\n        <logWarningIfFalsyTTLOrUndefined>\n        logger.warning('Falsy Response Cache TTL configured. User command response cache disabled for app:', appName);\n        </logWarningIfFalsyTTLOrUndefined>\n    }\n    </validateTTLAndSetupCache>\n}\n"], ["evalFilter", "\nfunction evalFilter(filters, results, pos = {value: 0}) {\n    <evaluateFilterCriteria>\n  const key = Object.keys(filters)[0];\n\n  if (['and', 'or', 'not'].indexOf(key) === -1 || filters._isLeaf) {\n    pos.value++;\n    return results[pos.value - 1];\n  }\n\n  if (key === 'not') {\n    return !evalFilter(filters[key], results, pos);\n  }\n\n  return filters[key].reduce((p, c) => {\n    const r = evalFilter(c, results, pos);\n\n    if (p === null) {\n      return r;\n    }\n\n    return key === 'and' ? p && r : p || r;\n  }, null);\n  </evaluateFilterCriteria>\n}\n"], ["onMessage", "\nfunction onMessage(message) {\n    <guardClauses>\n\tif (done) return\n    if (message.type != \"utf8\") return sendConnectFailed(wsConn)\n    </guardClauses>\n\n    <parseIncomingMessage>\n    try {\n      message = JSON.parse(message.utf8Data)\n    }\n    catch(err) {\n      return sendConnectFailed(wsConn)\n    }\n    </parseIncomingMessage>\n\n    <validateMessageContent>\n    var id  = message.id\n\n    if (message.type != \"request\") return sendConnectFailed(wsConn)\n    if (message.name != \"connect\") return sendConnectFailed(wsConn)\n    if (message.to   != \"server\") return sendConnectFailed(wsConn)\n    </validateMessageContent>\n\n    <getOrCreateSession>\n    var body = message.body || {}\n\n    if (!body.key) return sendConnectFailed(wsConn)\n\n    var session = sessions.getSession(body.key)\n    </getOrCreateSession>\n\n    <createAndSendMessage>\n    var channel = channels.createChannel(session, wsConn)\n\n    message = {\n      type: \"response\",\n      name: \"connect\",\n      from: \"server\",\n      id:   message.id,\n      body: null\n    }\n\n    wsConn.sendUTF(JSON.stringify(message))\n    </createAndSendMessage>\n\n    <cleanUpConnection>\n    cleanUp()\n    </cleanUpConnection>\n  }\n"], ["cloneLayerHTTPRequest", "\nfunction (obj) {\n        \n        <handleNullInput>\n        if (obj == null) {\n            obj = new OpenLayers.Layer.HTTPRequest(this.name,\n                                                   this.url,\n                                                   this.params,\n                                                   this.getOptions());\n        }\n        </handleNullInput>\n        \n        <applyPrototypeClone>\n        obj = OpenLayers.Layer.prototype.clone.apply(this, [obj]);\n        </applyPrototypeClone>\n        \n        return obj;\n    }\n"], ["createDefaultDisplayedArea", "\nfunction createDefaultDisplayedArea () {\n    <initializeDisplayedArea>\n    return {\n        tlhc: {\n            x: 1,\n            y: 1\n        },\n        \n        brhc: {\n            x: 1,\n            y: 1\n        },\n        rowPixelSpacing: 1,\n        columnPixelSpacing: 1,\n        presentationSizeMode: 'NONE'\n    };\n    </initializeDisplayedArea>\n}\n"], ["defaultMetaDataBuilder", "\nfunction defaultMetaDataBuilder(spec, descriptions, results, capabilities) {\n\t\n\t<constructMetaDataObject>\n    var metaData = {\n            description: descriptions.join(' ')\n            , passed: results.passed()\n            , os: capabilities.caps_.platform\n            , sessionId: capabilities.caps_['webdriver.remote.sessionid']\n            , browser: {\n                name: capabilities.caps_.browserName\n                , version: capabilities.caps_.version\n            }\n        };\n    </constructMetaDataObject>\n\n    <handleTestResults>\n    if(results.items_.length > 0) {\n\t\tvar result = results.items_[0];\n\t\tif(!results.passed()){\n            <handleFailedTest>\n\t\t\tvar failedItem = _.where(results.items_,{passed_: false})[0];\n\t\t\tif(failedItem){\n\t\t\t\tmetaData.message = failedItem.message || 'Failed';\n\t\t\t\tmetaData.trace = failedItem.trace? (failedItem.trace.stack || 'No Stack trace information') : 'No Stack trace information';\n\t\t\t}\n            </handleFailedTest>\n\n\t\t}else{\n            <handlePassedTest>\n\t\t\tmetaData.message = result.message || 'Passed';\n\t\t\tmetaData.trace = result.trace.stack;\n            </handlePassedTest>\n\t\t}\n\n\t}\n    </handleTestResults>\n\n\treturn metaData;\n}\n"], ["arraySplice", "\nfunction arraySplice(a1, from, to, a2) {\n    <performArraySplicing>\n    var aL = a1.slice(0, from);\n    var aR = a1.slice(to);\n\n    return aL.concat(a2).concat(aR);\n    </performArraySplicing>\n}\n"], ""]