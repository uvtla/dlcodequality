[["ErrorLocked", "\nfunction ErrorLocked(message) {\n  Error.call(this);\n  \n  <setErrorProperties>\n  this.name    = 'ErrorLocked';\n  this.type    = 'client';\n  this.status  = 423;\n  if (message) {\n    this.message = message;\n  }\n  </setErrorProperties>\n}\n"], ["checkKeyframesSelector", "\nfunction checkKeyframesSelector(i) {\n  const start = i;\n  let l;\n\n  <checkTokenLength>\n  if (i >= tokensLength) return 0;\n  </checkTokenLength>\n\n  <identifyKeyframeSelector>\n  if (l = checkIdent(i)) {\n    \n    <getKeyframeSelector>\n    const selector = joinValues2(i, l);\n    </getKeyframeSelector>\n\n    <validateSelector>\n    if (selector !== 'from' && selector !== 'to') return 0;\n    </validateSelector>\n\n    i += l;\n    tokens[start].keyframesSelectorType = 1;\n  } else if (l = checkPercentage(i)) {\n    i += l;\n    tokens[start].keyframesSelectorType = 2;\n  } else if (l = checkInterpolation(i)) {\n    i += l;\n    tokens[start].keyframesSelectorType = 3;\n  } else {\n    return 0;\n  }\n  </identifyKeyframeSelector>\n\n  return i - start;\n}\n"], ["tvp", "\nfunction tvp(name, tvpParamName, tvpParams, config, done) {\n  <validateParameters>\n  if(!name || (typeof name != 'string')){\n    throw new Error('Node-SQL: stored procedure name was not in the correct format.');\n    return;\n  }\n  if(!tvpParamName || (typeof tvpParamName != 'string')){\n    throw new Error('Node-SQL: stored procedure tvpParamName was not in the correct format.');\n    return;\n  }\n  if(!config || (typeof config != 'object')){\n    throw new Error('Node-SQL: config was not in the correct format.');\n    return;\n  }\n  if(!done || (typeof done != 'function')){\n    done = function(a, b){};\n  }\n  </validateParameters>\n\n  <establishConnection>\n  var connection = new Connection(config);\n  connection.on('connect', function(err) {\n    if(err){\n      done(err, null);\n      return;\n    }\n    <executeStoredProcedure>\n    var request = new Request(name, function(_err) {\n      if (_err) {\n        done(_err, null);\n        return;\n      }\n      connection.close();\n    });\n\n    request.addParameter(tvpParamName, TYPES.TVP, tvpParams);\n    </executeStoredProcedure>\n\n    <processResults>\n    var result = [];\n    request.on('row', function(columns) {\n      var row = {};\n      columns.forEach(function(column) {\n        row[column.metadata.colName] = column.value;\n      });\n      result.push(row);\n    });\n    request.on('doneProc', function(rowCount, more, returnStatus) {\n      if(returnStatus == 0) done(null, result);\n    });\n    </processResults>\n\n    connection.callProcedure(request);\n  });\n  </establishConnection>\n}\n"], ["ClassHelper", "\nfunction ClassHelper(name, properties, template) {\n  \n  <validateProperties>\n  if (!properties) {\n    throw new Error('\u30d8\u30eb\u30d1\u30fc\u3092\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u8a2d\u5b9a\u304c\u5b58\u5728\u3057\u307e\u305b\u3093');\n  }\n  </validateProperties>\n  this.name = name || '';\n  this.props = properties;\n  \n  <processTemplate>\n  this.tpl = null;\n  if (typeof template === 'string') {\n    this.tpl = template.split(EOL);\n  } else if (Array.isArray(template)) {\n    this.tpl = template;\n  }\n  </processTemplate>\n}\n"], ["hwarning", "\nfunction hwarning(){\n        \n  <dispatchWarningOrError>\n  if (firstHeader) {\n    error.apply(this, arguments);\n  } else {\n    warning.apply(this, arguments);\n    mode = MCONTENT;\n  }\n  </dispatchWarningOrError>\n}\n"], ["getPluginResourcePackInfo", "\nfunction getPluginResourcePackInfo(pluginResources, packedFiles) {\n    <initializeResult>\n    var result = {};\n    var notPackRes = [];\n    </initializeResult>\n\n    <processResources>\n    pluginResources.forEach(function (item) {\n        var packFile = findPackFile(item, packedFiles);\n        <handlePackedResource>\n        if (packFile) {\n            result[item.id] = {\n                file: item,\n                packTo: packFile\n            };\n        }\n        </handlePackedResource>\n        <handleNonPackedResource>\n        else {\n            notPackRes.push(item);\n        }\n        </handleNonPackedResource>\n    });\n    </processResources>\n\n    return {\n        pack: result,\n        notPacks: notPackRes\n    };\n}\n"], ["trigger", "\nfunction trigger(event, a, b) {\n    <invokeEventHandlers>\n    listeners[event].forEach(function(handler) {\n      handler.call(instance, a, b);\n    });\n    </invokeEventHandlers>\n}\n"], ["AnonymousFunction", "\nfunction() {\n        <preparation>\n        var options = this.options;\n\n        this.$main.find('.select-col :checkbox').bizCheckbox('destroy');\n        </preparation>\n\n        <updateDOMElements>\n        this.$tableHead.html(this.createTableHead(options));\n        this.$tableBody.html(this.createTableBody(options));\n        </updateDOMElements>\n\n        <manageTableFoot>\n        if (options.foot && options.data.length > 0) {\n            var tbody = this.$tableBody.find('tbody'),\n                foot = this.createFoot(options);\n            if (options.foot === 'top') {\n                tbody.prepend(foot);\n            }\n            if (options.foot === 'bottom') {\n                tbody.append(foot);\n            }\n        }\n        </manageTableFoot>\n\n        <handleNoDataCase>\n        if (options.data.length === 0) {\n            this.createNoDataContent();\n        }\n        </handleNoDataCase>\n\n        <initializeSelection>\n        if (options.selectable && options.data.length > 0) {\n            this.createSelect(options.data);\n        }\n        </initializeSelection>\n\n        <resetScrollAndSyncWidth>\n        this.$headWrap[0].scrollLeft = this.$bodyWrap[0].scrollLeft = 0;\n\n        this.syncWidth();\n        </resetScrollAndSyncWidth>\n\n        <readyTableContent>\n        this.$tableBody.find('td').prop('tabindex', 1);\n        </readyTableContent>\n    }\n"], ["filterWithQueryAndMatcher", "\nfunction filterWithQueryAndMatcher(hints, matcher) {\n    <performMatch>\n    var matchResults = $.map(hints, function (hint) {\n        var searchResult = matcher.match(hint.value, query);\n        if (searchResult) {\n            <populateSearchResult>\n            searchResult.value = hint.value;\n            searchResult.guess = hint.guess;\n            searchResult.type = hint.type;\n\n            if (hint.keyword !== undefined) {\n                searchResult.keyword = hint.keyword;\n            }\n\n            if (hint.literal !== undefined) {\n                searchResult.literal = hint.literal;\n            }\n\n            if (hint.depth !== undefined) {\n                searchResult.depth = hint.depth;\n            }\n\n            if (hint.doc) {\n                searchResult.doc = hint.doc;\n            }\n\n            if (hint.url) {\n                searchResult.url = hint.url;\n            }\n\n            if (!type.property && !type.showFunctionType && hint.origin &&\n                    isBuiltin(hint.origin)) {\n                searchResult.builtin = 1;\n            } else {\n                searchResult.builtin = 0;\n            }\n            </populateSearchResult>\n        }\n\n        return searchResult;\n    });\n    </performMatch>\n\n    return matchResults;\n}\n"], ["WebStorageSessionStore", "\nfunction WebStorageSessionStore(webStore) {\n  <validateWebStore>\n  this.store = webStore;\n  if (!utils.isFunction(webStore.getItem) ||\n      !utils.isFunction(webStore.setItem) ||\n      !utils.isFunction(webStore.removeItem) ||\n      !utils.isFunction(webStore.key) ||\n      typeof(webStore.length) !== 'number'\n     ) {\n    throw new Error(\n        \"Supplied webStore does not meet the WebStorage API interface\",\n    );\n  }\n  </validateWebStore>\n}\n"], ""]