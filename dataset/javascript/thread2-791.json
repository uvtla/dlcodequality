[["normalizeOption", "\n  if (option.name && option.alias && option.name.length > option.alias.length) {\n    var name = option.alias;\n    option.alias = option.name;\n    option.name = name;\n  }\n\n  var defaults = {\n    alias: null,\n    kind: 'boolean'\n  };\n  var keys = Object.keys(option);\n  _.each(defaults, function(val, key) {\n    if (!_.contains(keys, key)) {\n      option[key] = val;\n    }\n  });\n  "], ["ModuleResource", "\nfunction ModuleResource( pkg, config ) {\n  ModuleResource.super.call( this, pkg, config );\n  this.imports = config.imports || null;\n  this.exports = config.exports || null;\n  this.propertyNamePattern = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\n}\n"], ["getNearestDataPoint", "\nfunction getNearestDataPoint(mouseX) {\n  let adjustedMouseX = mouseX - margin.left,\n      epsilon = xScale2.bandwidth(),\n      nearest = [];\n\n  layers.forEach(function (data) {\n    let found = data.values.find((d2) => Math.abs(adjustedMouseX >= xScale(d2[nameLabel]) + xScale2(d2[groupLabel])) && Math.abs(adjustedMouseX - xScale2(d2[groupLabel]) - xScale(d2[nameLabel]) <= epsilon));\n\n    if (found) {\n      found.values = data.values;\n      found.key = found.name;\n      nearest.push(found);\n    }\n  });\n\n  return nearest.length ? nearest[0] : undefined;\n}\n"], ["setToolMode", "\n<globalToolModeChange>\n_trackGlobalToolModeChange(mode, toolName, options);\n</globalToolModeChange>\n<updateToolModeForElements>\nstore.state.enabledElements.forEach(element => {\n  setToolModeForElement(mode, changeEvent, element, toolName, options);\n});\n</updateToolModeForElements>\n"], ["findValueByPath", "\nfunction findValueByPath(jsonData, path){\n    var errorParts = false;\n    path.split('.').forEach(function(part){\n        if(!errorParts){\n            jsonData = jsonData[part];\n            if(!jsonData) errorParts = true;\n        }\n    });\n    return errorParts ? 0 : parseFloat(jsonData);\n}\n"], ["calculateDistanceFromPointToLine", "\nfunction(x1, y1, x2, y2, px, py) {\n  return Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n      Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n}\n"], ["parse", "\n<dataRetrieval>\ndata = this.get(data);\n\nif ('function' === typeof options) {\n  next = options;\n  options = {};\n}\n</dataRetrieval>\n<processData>\nif (!data) return next();\n\nif (data.file && /readme/i.test(data.file)) {\n  data.content.split('\\n')\n    .some(function some(line, index, lines) {\n      if (\n        /^.{0,7}\\s{0,}(?:licen[cs]e[s]?|copyright).{0,2}\\s{0,}$/gim.test(\n          line.trim())\n      ) {\n        data.content = lines.slice(index).join('\\n');\n        debug('matched %s as license header, slicing data', JSON.stringify(line));\n      return true;\n    }\n\n    return false;\n  });\n}\n</processData>\n<detectLicense>\nvar license = this.scan(data.content);\nif (!license) {\n  license = this.test(data.content);\n\n  if (license) debug('used regexp to detect %s in content', license);\n} else {\n  debug('license file scan resulted in %s as matching license', license);\n}\n\nnext(undefined, this.normalize(license));\n</detectLicense>\n"], ["ModuleResource", "\n<startTraversal>\nthis.direction = gui.Crawler.ASCENDING;\nvar supports = gui.hasModule('gui-spirits@wunderbyte.com');\nvar isspirit = supports && start instanceof gui.Spirit;\n</startTraversal>\n<traverseDOM>\nvar win, elm = isspirit ? start.element : start;\ndo {\n  // Each iteration is looking at a different aspect (node types, global handlers, and elements),\n  // representing different responsibilities within traversal logic.\n  // ...\n} while (elm);\n</traverseDOM>\n"], ["removeContainerBlob", "\n<deleteBlob>\nblob.svc.deleteBlobIfExists(blob.container, path, function(error, result, response) {\n  if (error) {\n    __log('Cannot delete ' + path + 'on container ' + blob.container);\n  }\n</deleteBlob>\n<handleCallback>\n  return callback(error);\n</handleCallback>\n"], ["isEntity", "\nfunction isEntity (d) {\n  return isText(d.type) && Array.isArray(d.params) && Array.isArray(d.content)\n}\n"], "```"]