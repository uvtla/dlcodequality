[["checkChildNodes", "\nfunction(node) {\n    var hasNodes = false;\n\n    if (node.hasChildNodes()) {\n        for (var i = 0, len = node.childNodes.length; i < len; i++) {\n            if (node.childNodes[i].nodeType === 1) {\n                hasNodes = true;\n                break;\n            }\n        }\n    }\n\n    return hasNodes;\n}\n"], ["updateGestureState", "\nfunction (gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const nextDX = gestureState.dx + (x - prevX);\n    const nextDY = gestureState.dy + (y - prevY);\n    \n    const dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n}\n"], ["getCookieValue", "\nfunction() {\n    <checkCookies>\n    if (document.cookie.length > 0) {\n        var cookies = document.cookie.split('; ');\n        \n        <defineTrimIfExists>\n        if (typeof String.prototype.trim !== 'function') {\n            String.prototype.trim = function() {\n                return this.replace(/^\\s+|\\s+$/g, ''); \n            }\n        }\n        </defineTrimIfExists>\n\n        <parseCookies>\n        for (var i in cookies) {\n            var cookieParts = cookies[i].split('=');\n            var cookieName = decodeURIComponent(cookieParts.shift()).trim();\n            var cookieContent = cookieParts.join('=');\n\n            <matchCookieToName>\n            if (obj.name === cookieName) {\n                <parseCookieValue>\n                if (obj.json && cookieContent.length > 0) {\n                    cookieContent = JSON.parse(cookieContent);\n                } else if (! obj.raw) {\n                    cookieContent = decodeURIComponent(cookieContent);\n                }\n                </parseCookieValue>\n\n                return cookieContent;\n            }\n            </matchCookieToName>\n        }\n        </parseCookies>\n        \n        return undefined;\n    }\n    </checkCookies>\n}\n"], ["browserifySwap", "\nfunction browserifySwap(file) {\n    var env = process.env.BROWSERIFYSWAP_ENV\n    , data = ''\n    , swapFile;\n    \n    <checkCachedConfig>\n    if (!env || cachedConfig === -1) return through();\n    </checkCachedConfig>\n\n    <useCachedConfig>\n    if (cachedConfig) {\n        swapFile = swap(cachedConfig, env, file);\n        \n        <pipeThroughSwapFile>\n        return swapFile ? through(write, end) : through();\n        </pipeThroughSwapFile>\n    } else {\n        return through(write, end)\n    }\n    </useCachedConfig>\n\n    function write(d, enc, cb) { data += d; cb(); }\n    function end(cb) {\n        \n      var self = this;\n\n      <handleSwapFile>\n      if (swapFile) {\n          swapFile = swapFile.replace(/\\\\/g, '/');\n          debug.inspect({ file: file, swapFile: swapFile });\n          self.push(requireSwap(swapFile));\n          return cb();\n      }\n      </handleSwapFile>\n\n      <resolveSwapsAndHandle>\n      resolveSwaps(root, function (err, config) {\n          if (config && config.packages) viralifyDeps(config.packages);\n          var swaps = config && config.swaps;\n\n          \n          cachedConfig = swaps || -1;\n\n          if (err) return cb(err);\n\n          debug.inspect({ swaps: swaps, env: env });\n          swapFile = swap(swaps, env, file);\n          debug.inspect({ file: file, swapFile: swapFile });\n\n          var src = swapFile ? requireSwap(swapFile.replace(/\\\\/g, '/')) : data;\n          self.push(src);\n          cb();\n      });\n      </resolveSwapsAndHandle>\n    }\n}\n"], ["basicGithubId", "\nfunction basicGithubId (text) {\n    return text\n        .toLowerCase()\n        .replace(/\\s+/g, '-')         \n        .replace(/%25|%/ig, '')       \n        .replace(RE_ENTITIES, '')     \n        .replace(RE_SPECIALS_DOT, '') \n        .replace(RE_CJK, '')          \n}\n"], ["handleSelectionByMouse", "\nfunction(oArgs) {\n    var sMode = this.get(\"selectionMode\");\n    <handleSelectionMode>\n    if(sMode == \"cellblock\") {\n        this._handleCellBlockSelectionByMouse(oArgs);\n    }\n    else if(sMode == \"cellrange\") {\n        this._handleCellRangeSelectionByMouse(oArgs);\n    }\n    else {\n        this._handleSingleCellSelectionByMouse(oArgs);\n    }\n    </handleSelectionMode>\n}\n"], ["getFirst", "\nfunction (str) {\n    <validateString>\n    if (typeof(str) !== 'string') {\n        throw new Error(-1, \"\u51fd\u6570getFisrt\u9700\u8981\u5b57\u7b26\u4e32\u7c7b\u578b\u53c2\u6570!\");\n    }\n    </validateString>\n    var chars = []; \n    for (var i = 0, len = str.length; i < len; i++) {\n        <processCharacter>\n        var ch = str.charAt(i);\n        chars.push(this._getChar(ch));\n        </processCharacter>\n    }\n    \n    return this._getResult(chars);\n}\n"], ["defaultComp", "\nfunction defaultComp(a,b) {\n    var as = '' + a,\n        bs = '' + b;\n\n    if (as < bs) {\n        return -1;\n    } else if (as > bs) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n"], ["convertToKeyValueArray", "\nfunction(options) {\n    var newArray = [],\n        keyIdentifier = (options && options.key) || \"key\",\n        valueIdentifier = (options && options.value) || \"value\";\n    <convertEachKeyValue>\n    this.itsa_each(function(value, key) {\n        var obj = {};\n        obj[keyIdentifier] = key;\n        obj[valueIdentifier] = value;\n        newArray[newArray.length] = obj;\n    });\n    </convertEachKeyValue>\n    return newArray;\n}\n"], ["ensureEvaluated", "\nfunction ensureEvaluated(moduleName, entry, seen, loader) {\n    \n    <checkEntry>\n    if (!entry || entry.evaluated || !entry.declarative)\n        return;\n    </checkEntry>\n\n    seen.push(moduleName);\n\n    <processDependencies>\n    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {\n        var depName = entry.normalizedDeps[i];\n        if (indexOf.call(seen, depName) == -1) {\n            if (!loader.defined[depName])\n                loader.get(depName);\n            else\n                ensureEvaluated(depName, loader.defined[depName], seen, loader);\n        }\n    }\n    </processDependencies>\n\n    if (entry.evaluated)\n        return;\n\n    entry.evaluated = true;\n    entry.module.execute.call(__global);\n}\n"], "```"]