[["getAttribute", "\nfunction getAttribute(path, attrNode, context) {\n    path.forEach((attributeName, i) => {\n        <checkAttributeExistence>\n        if (!(attrNode.attributes && attrNode.attributes[attributeName])) {\n            <handleOriginNodes>\n            if (attrNode._origNodes) {\n                let subAttrNode = null;\n                attrNode._origNodes.forEach((origNode, inheritDepth) => {\n                    if (!origNode || !origNode.attributes || !origNode.attributes[attributeName]) return;\n\n                    let origSubAttrNode = origNode.attributes[attributeName];\n\n                    <handleAttributeInheritance>\n                    if (subAttrNode) {\n                        if (subAttrNode.inherit === 'inherit') {\n                            \n                        } else if (subAttrNode.inherit === 'replace') {\n                            return; \n                        } else {\n                            let attrPath = context.attrPath.join('.');\n                            throw new ImplementationError(\n                                `Cannot overwrite attribute \"${attributeName}\" in \"${attrPath}\" (maybe use \"inherit\"?)`\n                            );\n                        }\n                    } else {\n                        subAttrNode = {};\n                    }\n                    </handleAttributeInheritance>\n\n                    <copyAttribueOptions>\n                    Object.keys(origSubAttrNode).forEach(optionName => {\n                        if (subAttrNode.hasOwnProperty(optionName)) return; \n\n                        if (optionName === 'attributes') {\n                            subAttrNode[optionName] = {};\n                        } else if (optionName === 'dataSources') {\n                            subAttrNode[optionName] = origSubAttrNode[optionName];\n                        } else if (typeof origSubAttrNode[optionName] === 'object') {\n                            subAttrNode[optionName] = cloneDeep(origSubAttrNode[optionName]);\n                        } else {\n                            subAttrNode[optionName] = origSubAttrNode[optionName];\n                        }\n                    });\n                    </copyAttribueOptions>\n\n                    <setOriginalNodes>\n                    subAttrNode._origNodes = subAttrNode._origNodes || Array(attrNode._origNodes.length);\n                    subAttrNode._origNodes[inheritDepth] = origSubAttrNode;\n                    </setOriginalNodes>\n\n                    <updateAttributeNode>\n                    attrNode.attributes[attributeName] = subAttrNode;\n                    </updateAttributeNode>\n                });\n            }\n            </handleOriginNodes>\n\n            <throwErrorOnMissingAttribute>\n            if (!(attrNode.attributes && attrNode.attributes[attributeName])) {\n                throw new RequestError(\n                    'Unknown attribute ' + `\"${context.attrPath.concat(path.slice(0, i + 1)).join('.')}\"`\n                );\n            }\n            </throwErrorOnMissingAttribute>\n        }\n        </checkAttributeExistence>\n\n        <updateAttributeNodeReference>\n        attrNode = attrNode.attributes[attributeName];\n        </updateAttributeNodeReference>\n\n        <resolveResourceIncludes>\n        if (attrNode.resource) {\n            const subContext = Object.assign({}, context);\n            subContext.attrPath = subContext.attrPath.concat(path.slice(0, i + 1));\n            resolveIncludes(attrNode, subContext);\n        }\n        </resolveResourceIncludes>\n    });\n\n    return attrNode;\n}\n"], ["inherits", "\nfunction inherits (ctorA, ctorB) {\n    <setupPrototypeChain>\n    function f() {}\n    f.prototype = ctorB.prototype;\n    ctorA.prototype = new f();\n    </setupPrototypeChain>\n}\n"], ["profile", "\nfunction profile(excludeRegex) {\n  var categories = [];\n  return {\n    forCategory: forCategory,\n    toArray    : toArray,\n    toString   : toString\n  };\n\n  <toArray>\n  function toArray() {\n    return categories;\n  }\n  </toArray>\n\n  <toString>\n  function toString() {\n    return categories\n      .map(String)\n      .filter(Boolean)\n      .join('\\n');\n  }\n  </toString>\n\n  <forCategory>\n  function forCategory(label) {\n    var eventsByFilename = {},\n        isUsed           = false,\n        self             = {\n          forCategory: forCategory,\n          start      : start,\n          stop       : stop,\n          report     : report,\n          toString   : toString\n        };\n\n    label = label || ('category-' + String.fromCharCode(65 + categories.length));\n    categories.push(self);\n    return self;\n\n    <start>\n    function start(key) {\n      return createEventTransform(key);\n    }\n    </start>\n\n    <stop>\n    function stop() {\n      return createEventTransform(null);\n    }\n    </stop>\n\n    <createEventTransform>\n    function createEventTransform(data) {\n      return inspect(onComplete);\n\n      function onComplete(filename) {\n        isUsed = true;\n        var now = Date.now();\n        var events = eventsByFilename[filename] = eventsByFilename[filename] || [];\n        events.push(now, data);\n      }\n    }\n    </createEventTransform>\n\n    <report>\n    function report() {\n      return Object.keys(eventsByFilename)\n        .filter(testIncluded)\n        .reduce(reduceFilenames, {});\n\n      function testIncluded(filename) {\n        return !excludeRegex || !excludeRegex.test(filename);\n      }\n\n      function reduceFilenames(reduced, filename) {\n        var totalsByKey = {},\n            list        = eventsByFilename[filename],\n            lastKey     = null,\n            lastTime    = NaN;\n\n        for (var i = 0; i < list.length; i += 2) {\n          var time = list[i],\n              key  = list[i + 1];\n          if (lastKey) {\n            var initial = totalsByKey[key] || 0,\n                delta   = ((time - lastTime) / 1000) || 0;\n            totalsByKey[lastKey] = initial + delta;\n          }\n          lastKey = key;\n          lastTime = time;\n        }\n\n        var total = 0;\n        for (var key in totalsByKey) {\n          total += totalsByKey[key];\n        }\n        totalsByKey.total = total;\n\n        var short = path.relative(process.cwd(), filename);\n        reduced[short] = totalsByKey;\n        return reduced;\n      }\n    }\n    </report>\n\n    <toString>\n    function toString() {\n      var json            = report(),\n          filenames       = Object.keys(json),\n          longestFilename = filenames.reduce(reduceFilenamesToLength, 0),\n          columnOrder     = orderColumns(),\n          headerRow       = [label].concat(columnOrder).map(leftJustify).join(' '),\n          delimiter       = (new Array(headerRow.length + 1)).join('-');\n\n      if (isUsed) {\n        return [delimiter, headerRow, delimiter]\n          .concat(rows())\n          .concat(delimiter)\n          .filter(Boolean)\n          .join('\\n');\n      } else {\n        return '';\n      }\n\n      <orderColumns>\n      function orderColumns() {\n        var keyTotals = filenames.reduce(reduceFilenamesToKeyTotal, {});\n        return sort(keyTotals);\n\n        function reduceFilenamesToKeyTotal(reduced, filename) {\n          var item = json[filename];\n          return Object.keys(item)\n            .reduce(reducePropToLength.bind(item), reduced);\n        }\n      }\n      </orderColumns>\n\n      <rows>\n      function rows() {\n        var fileTotals = filenames.reduce(reducePropToLength.bind(json), {}),\n            fileOrder  = sort(fileTotals);\n        return fileOrder.map(rowForFile);\n\n        function rowForFile(filename) {\n          var data = json[filename];\n          return [filename]\n            .concat(columnOrder\n              .map(dataForColumn)\n              .map(formatFloat))\n            .map(leftJustify)\n            .join(' ');\n\n          function dataForColumn(column) {\n            return data[column];\n          }\n\n          function formatFloat(number) {\n            var padding  = '000',\n                warning  = ((number > 99) ? '>' : ' '),\n                integer  = (padding + Math.min(99, Math.floor(number))).slice(-2),\n                fraction = (padding + Math.round(1000 * number)).slice(-3);\n            return warning + integer + '.' + fraction;\n          }\n        }\n      }\n      </rows>\n\n      <reduceFilenamesToLength>\n      function reduceFilenamesToLength(reduced, filename) {\n        return Math.max(filename.length, reduced);\n      }\n      </reduceFilenamesToLength>\n\n      <leftJustify>\n      function leftJustify(name, i) {\n        var length = i ? Math.max(7, columnOrder[i - 1].length) : longestFilename;\n        var padding = (new Array(length + 1)).join(' ');\n        return (name + padding).slice(0, length);\n      }\n      </leftJustify>\n\n      <reducePropToLength>\n      function reducePropToLength(reduced, key) {\n        var value = (typeof this[key] === 'object') ? this[key].total : this[key];\n        reduced[key] = (reduced[key] || 0) + value;\n        return reduced;\n      }\n      </reducePropToLength>\n\n      <sort>\n      function sort(object) {\n        return Object.keys(object)\n          .reduce(createObjects.bind(object), [])\n          .sort(sortTimeDescending)\n          .map(getColumnName);\n\n        function createObjects(reduced, field) {\n          reduced.push({\n            name: field,\n            time: Math.round(this[field] * 1000) / 1000  \n          });\n          return reduced;\n        }\n\n        function sortTimeDescending(a, b) {\n          return b.time - a.time;\n        }\n\n        function getColumnName(object) {\n          return object.name;\n        }\n      }\n      </sort>\n    }\n    </toString>\n  }\n}\n</forCategory>\n"], ["cacheResults", "\nfunction cacheResults (result) {\n    <stringifyResult>\n    try {\n        var cacheValue = JSON.stringify(result)\n    }\n    catch (err) {\n        // Handles JSON stringify errors, but it's an empty catch block.\n    }\n    </stringifyResult>\n\n    <checkCacheValueDefined>\n    if (defined(cacheValue)) {\n        <logCacheSet>\n        debug('view:id:collection:set', this.idCacheKey)\n        </logCacheSet>\n\n        <setCache>\n        return this.cache.redis.setAsync(this.idCacheKey, cacheValue)\n        </setCache>\n    }\n    </checkCacheValueDefined>\n}\n"], ["anonymousFunction1", "\nfunction (setting) {\n    <resetDataRoots>\n    var r = data.getRoot(setting), rs = data.getRoots();\n    r.curEditNode = null;\n    r.curEditInput = null;\n    r.curHoverNode = null;\n    r.dragFlag = 0;\n    r.dragNodeShowBefore = [];\n    r.dragMaskList = new Array();\n    rs.showHoverDom = true;\n    </resetDataRoots>\n}\n"], ["_findPaneForDocument", "\nfunction _findPaneForDocument(document) {\n    <getPaneFromElement>\n    var pane = _getPaneFromElement($(document._masterEditor.$el.parent().parent()));\n    </getPaneFromElement>\n\n    <findInWorkingSets>\n    if (!pane) {\n        var info = findInAllWorkingSets(document.file.fullPath).shift();\n        if (info) {\n            pane = _panes[info.paneId];\n        }\n    }\n    </findInWorkingSets>\n\n    return pane;\n}\n"], ["anonymousFunction2", "\nfunction() {\n  var self = this;\n  \n  <extendBindings>\n  this.bindings = _.extend({}, this._bindings);\n  </extendBindings>\n\n  <generateBindingsForEachElement>\n  _.each(this.$('[data-model]'), function(element) {\n    var attr = $(element).data('model'),\n        options = self.__getFieldOptions(attr),\n        fieldBinding = self.__generateModelFieldBinding(attr, options);\n\n    <handleSelectOptions>\n    if ($(element).is('select')) {\n      fieldBinding.selectOptions = self.__generateSelectOptions(element, options);\n    }\n    </handleSelectOptions>\n\n    <bindDataModel>\n    self.bindings['[data-model=\"' + attr + '\"]'] = fieldBinding;\n    </bindDataModel>\n  });\n  </generateBindingsForEachElement>\n}\n"], ["findUrlToken", "\nfunction findUrlToken(node, pos) {\n    <searchForUrlToken>\n    for (let i = 0, il = node.parsedValue.length, url; i < il; i++) {\n        iterateCSSToken(node.parsedValue[i], token => {\n            if (token.type === 'url' && containsPoint(token, pos)) {\n                url = token;\n                return false;\n            }\n        });\n\n        if (url) {\n            return url;\n        }\n    }\n    </searchForUrlToken>\n}\n"], ["Response", "\nfunction Response(statusCode, headers, body) {\n    <setStatusCode>\n    this.statusCode = statusCode;\n    </setStatusCode>\n\n    <normalizeHeaders>\n    this.headers = {};\n    for (var key in headers) {\n        this.headers[key.toLowerCase()] = headers[key];\n    }\n    </normalizeHeaders>\n\n    <setBody>\n    this.body = body;\n    </setBody>\n}\n"], ["mapPrototypes", "\nfunction mapPrototypes(vendor, protos, funcs) {\n    <iterateOverPrototypes>\n    var p, f, proto, func;\n\n    for (p = 0; (proto = protos[p]); p++) {\n\n        <checkAndAssignFunctions>\n        for (f = 0; (func = funcs[f]); f++) {\n\n            <skipOverwriting>\n            if (!vendor[func] || proto[func] || proto.prototype[func]) {\n                continue;\n            }\n            </skipOverwriting>\n\n            <extendProtoWithVendorFunc>\n            if (proto === Object) {\n                proto[func] = vendor[func];\n            } else {\n                extendPrototype.call(this, vendor, proto, func);\n            }\n            </extendProtoWithVendorFunc>\n        }\n        </checkAndAssignFunctions>\n    }\n    </iterateOverPrototypes>\n}\n"], "```\nGiven the size of the functions, particularly the profile function, it's challenging to encapsulate all responsibilities neatly. Where complex inner functions or operations perform tasks related to but distinct from the outer function, additional tags have been used to indicate these responsibilities. However, in some cases such as cacheResults, where try-catch can be considered a part of the responsibility to handle caching, additional tags for error handling are not used. This approach ensures balance without over-segmenting responsibilities within the overall task of the function."]