[["build", "\nasync function build(inputOpts, outputOpts) {\n  \n  <bundleCreation>\n  const bundle = await rollup.rollup(inputOpts);\n  </bundleCreation>\n  \n  <bundleGeneration>\n  const { code, map } = await bundle.generate(outputOpts);\n  </bundleGeneration>\n\n  <logging>\n  console.log('Writing file: ' + outputOpts.file);\n  </logging>\n  \n  <writeFileToSystem>\n  writeFile(outputOpts.file, code);\n  </writeFileToSystem>\n\n  <logBundleTimings>\n  console.log('Generated bundle: ', bundle.getTimings()[ '# GENERATE' ]);\n  </logBundleTimings>\n\n}\n"], ["CommandEventListener", "\nfunction CommandEventListener(event, handler, capture) {\n    this.event = event;\n    this.handler = handler;\n    this.capture = capture || false;\n}\n"], ["extendInstance", "\nfunction extendInstance(ctx) {\n  \n  <addPropertiesGetter>\n  if (!this.properties) {\n    Object.defineProperty(this, 'properties', {\n      get() {\n        return this.props\n      }\n    });\n    </addPropertiesGetter>\n\n    <addCreateSelectorQuery>\n    defineProperty(this, 'createSelectorQuery', () => createSelectorQuery({\n      context: this\n    }));\n    </addCreateSelectorQuery>\n\n    <addTriggerEvent>\n    defineProperty(this, 'triggerEvent', triggerEvent);\n    </addTriggerEvent>\n\n    <addIdGetter>\n    Object.defineProperty(this, 'id', {\n      get() {\n        return this.props.id || this.$id\n      }\n    });\n    </addIdGetter>\n\n    <addSelectAllComponents>\n    defineProperty(this, 'selectAllComponents', selectAllComponents);\n    </addSelectAllComponents>\n\n    <addSelectComponent>\n    defineProperty(this, 'selectComponent', selectComponent);\n    </addSelectComponent>\n\n    <handleComponentInstanceFunctions>\n    cannotAchieveComponentInstanceFunctions(this);\n    </handleComponentInstanceFunctions>\n\n  }\n}\n"], ["getIssuerModule", "\nfunction getIssuerModule(parent) {\n  let issuer = parent;\n\n  <findIssuer>\n  while (issuer && (issuer.id === '[eval]' || issuer.id === '<repl>' || !issuer.filename)) {\n    issuer = issuer.parent;\n  }\n  </findIssuer>\n\n  return issuer;\n}\n"], ["resizeEditor", "\nfunction resizeEditor(psize) {\n    <calculateSizeAndDetermineForce>\n    var force = false;\n    if (psize === -1) {\n      force = true;\n      psize = max(10, editorSize || Number(localStorage.editorSize) || 50);\n    } else {\n      psize = psize % 100;\n    }\n    </calculateSizeAndDetermineForce>\n\n    <resizeIfNecessary>\n    if (force || editorSize !== psize) {\n      if (psize) { localStorage.editorSize = editorSize = psize; }\n      if (isLeftRight) {\n        <styleLeftRightLayout>\n        $('.left.col').css({ width: psize + '%', height: '100%' });\n        $('.right.col').css({ width: (100 - psize) + '%', height: '100%' });\n        $('.handle').css({ left: psize + '%', top: '0' });\n        </styleLeftRightLayout>\n      } else {\n        <styleTopBottomLayout>\n        $('.top.row').css({ height: psize + '%', width: '100%' });\n        $('.bottom.row').css({ height: 100 - psize + '%', width: '100%' });\n        $('.handle').css({ left: '0', top: ((psize / 100 * ($outer.clientHeight - 25)) + 25) + 'px' });\n        </styleTopBottomLayout>\n      }\n    }\n    </resizeIfNecessary>\n    \n}\n"], ["insertLine", "\nfunction insertLine(interactive = true) {\n  <checkStoryContinuation>\n  if (!story.canContinue) {\n    return Promise.resolve(false);\n  }\n  </checkStoryContinuation>\n\n  <generateLineElement>\n  const line = story.Continue();\n  const {elementType, classes} = decodeTags(story.currentTags);\n  const elem = createLineElement(line, elementType, classes);\n  </generateLineElement>\n\n  if (interactive) {\n    <handleInteractiveLineInsertion>\n    return new Promise(resolve => {\n      const cb = oneTimeCB(resolve);\n      elem.addEventListener('animationend', cb);\n      setTimeout(cb, 2000);\n      stageDiv.appendChild(elem);\n    });\n    </handleInteractiveLineInsertion>\n  } else {\n    <appendLineElement>\n    stageDiv.appendChild(elem);\n    return Promise.resolve(true);\n    </appendLineElement>\n  }\n}\n"], ["needsDeps", "\nfunction needsDeps(name) {\n  return name.charAt(0) === \"$\" &&\n    !(/\\$[0-9]+/.test(name)) &&\n    name !== \"$global\" &&\n    name !== \"$match\" &&\n    name !== \"$tmp\" &&\n    name !== \"$error\";\n}\n"], ["getUniqueIdentifierName", "\nfunction getUniqueIdentifierName(scopes, prefix, num) {\n  if (!scopes) {\n    return prefix;\n  }\n\n  <collatePropertiesFromScopes>\n  var props = scopes.reduce(function(props, scope) {\n    return _.union(props, _.keys(scope.props));\n  }, []);\n  </collatePropertiesFromScopes>\n\n  if (!props) {\n    return prefix;\n  }\n\n  num = num || \"1\";\n  var name;\n\n  <calculateUniqueName>\n  while (num < 100) {\n    name = prefix + num;\n    if (props.indexOf(name) === -1) {\n      break;\n    }\n    ++num;\n  }\n  </calculateUniqueName>\n\n  return name;\n}\n"], ["findLCA", "\nfunction findLCA(node1, node2, layoutInfo) {\n  \n  <findLCA_auxCall>\n  var res = findLCA_aux(node1, node2, 0, layoutInfo);\n  </findLCA_auxCall>\n\n  if (2 > res.count) {\n    \n    \n    return 0;\n  } else {\n    return res.graph;\n  }\n}\n"], ["getSockets", "\nfunction getSockets() {\n  <initializeSockets>\n  let _sub = zmq.socket('sub');\n  let _pub = zmq.socket('pub');\n  _pub.linger = 0;\n  </initializeSockets>\n\n  <configureSubscriberSocket>\n  _sub.subscribe('');\n  _sub.on('message', (...args) => _pub.send(args));\n  </configureSubscriberSocket>\n\n  return {sub: _sub, pub: _pub};\n}\n"], ""]