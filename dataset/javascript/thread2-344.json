[["createServer", "\nfunction createServer () {\n    <createExpressServer>\n    var server = express.createServer();\n    </createExpressServer>\n\n    <serverConfiguration>\n    server.configure(function () {\n        <middlewareSetup>\n        server.use(express.methodOverride());                          \n        server.use(express.bodyDecoder()); \t                          \n        server.use(express.staticProvider(__dirname + '/files'));     \n        server.use(setResponseHeader());                               \n        server.use(logConsole());                                      \n        server.use(auth([auth.Mac({ realm: \"Example\",\n                                   getTokenAttributes: getToken,\n                                   checkNonce: nonceCheck,\n                                   bodyHashMode: \"require\" })]));    \n        </middlewareSetup>\n    });\n    </serverConfiguration>\n\n    <specialOptionsRouting>\n    server.options(/.+/, function (req, res) {\n        res.send(' ');\n    });\n    </specialOptionsRouting>\n\n    return server;\n}\n"], ["areArrays", "\nfunction areArrays () {\n  <checkAllArgumentsAreArrays>\n  for (let i = 0; i < arguments.length; i++) {\n    if (!Array.isArray(arguments[i])) {\n      return false;\n    }\n  }\n  </checkAllArgumentsAreArrays>\n  \n  return true;\n}\n"], ["resize", "\nfunction resize() {\n    <updateDimensions>\n    var w = $(window).width(), h = $(window).height();\n    </updateDimensions>\n\n    <updateCanvasAndScene>\n    canvas.attr({ width: w, height: h });\n    scene.getCamera().setAspect(w / h);\n    </updateCanvasAndScene>\n\n    <clearRenderer>\n    renderer.clearViewport();\n    </clearRenderer>\n}\n"], ["addSuggestionClassName", "\nfunction (suggestionNode, className) {\n    <modifySuggestionNodeClass>\n    var suggestionNodeClassList = new aria.utils.ClassList(suggestionNode);\n    suggestionNodeClassList.add(className);\n    suggestionNodeClassList.$dispose();\n    </modifySuggestionNodeClass>\n}\n"], ["configureElasticsearchMapping", "\nfunction (next) {\n    <buildElasticsearchRequestBody>\n            \n    var body = {\n        settings: {...},\n        mappings: {}\n    };\n    // Dynamic assignments within the settings object have been omitted for brevity\n    body.mappings[options.type] = indexMap\n    </buildElasticsearchRequestBody>\n\n    <configureRequestOptions>\n    var reqOpts = {\n        method: 'PUT',\n        url: versionedUri,\n        body: JSON.stringify(body)\n    }\n    if(options.auth) {\n        reqOpts.auth = {\n            user: options.auth.user,\n            pass: options.auth.password,\n            sendImmediately: false\n        };\n    }\n    </configureRequestOptions>\n\n    <performElasticsearchRequest>\n    helpers.backOffRequest(reqOpts, function (err, res, body) {\n        if (err) {\n            return next(err)\n        }\n        if (!helpers.elasticsearchBodyOk(body)) {\n            var error = new Error('Unexpected index creation reply: '+util.inspect(body, true, 10, true))\n            error.body = body\n            return next(error)\n        }\n        return next()\n    })\n    </performElasticsearchRequest>\n}\n"], ["insertBuffer", "\nfunction(tagName) {\n    <getAndInsertBuffer>\n    var parentBuffer = get(this, 'parentBuffer');\n    return this.newBuffer(tagName, parentBuffer, function(buffer) {\n      var siblings = parentBuffer.childBuffers;\n      var index = indexOf.call(siblings, this);\n      siblings.splice(index + 1, 0, buffer);\n    });\n    </getAndInsertBuffer>\n}\n"], ["getViews", "\nfunction(plural) {\n      <resolveAndValidateViewCollection>\n      if (lazy.isObject(plural)) return plural;\n      if (!this.views.hasOwnProperty(plural)) {\n        plural = this.inflections[plural];\n      }\n      if (!this.views.hasOwnProperty(plural)) {\n        throw new Error('getViews cannot find collection' + plural);\n      }\n      </resolveAndValidateViewCollection>\n      \n      return this.views[plural];\n}\n"], ["getBodyAsBuffer", "\nfunction getBodyAsBuffer(body, encoding) {\n  <convertBodyToBuffer>\n  return body instanceof Buffer\n    ? body\n    : Buffer.from(`${body || ''}`, normalizeBodyEncoding(encoding));\n  </convertBodyToBuffer>\n}\n"], ["validateAndPopulateUUID", "\nfunction (uuid) {\n    <validateUUID>\n    var check = UUID.check(uuid);\n    if (!check) {\n        throw \"not a UUID\";\n    }\n    </validateUUID>\n\n    <setUUIDProperties>\n    this.version = check.version;\n    this.variant = check.variant;\n    this[check.format] = uuid;\n    </setUUIDProperties>\n}\n"], ["createOrRetrieveProfile", "\nfunction(name, options) {\n\t<handleProfileCreation>\n\tif (arguments.length == 2)\n\t\treturn createProfile(name, options);\n\telse\n\t\treturn new OutputProfile(utils.defaults(name || {}, defaultProfile));\n\t</handleProfileCreation>\n}\n"], "```"]