[["function_1", "\nfunction (expr, sup, sub) {\n    <generateOperator_applyScriptHandler>\n    var opShape = generateOperator.call(this), \n        expBox = expr.getFixRenderBox(), \n        scriptHanlder = this.parentExpression.isSideScript() ? \"applySide\" : \"applyUpDown\", \n        space = new ScriptController(this, opShape, sup, sub, {zoom: .5})[scriptHanlder](), \n        padding = 5, \n        diff = (space.height + space.top + space.bottom - expBox.height) / 2;\n    </generateOperator_applyScriptHandler>\n    \n    <translateShapes>\n    opShape.translate(0, space.top);\n    sup.translate(0, space.top);\n    sub.translate(0, space.top);\n    </translateShapes>\n    \n    <positionExpression>\n    if (diff >= 0) {\n        expr.translate(space.width + padding, diff);\n    } else {\n        diff = -diff;\n        opShape.translate(0, diff);\n        sup.translate(0, diff);\n        sub.translate(0, diff);\n        expr.translate(space.width + padding, 0);\n    }\n    </positionExpression>\n    \n    <expandTranslateParentExpression>\n    this.parentExpression.expand(padding, padding * 2);\n    this.parentExpression.translateElement(padding, padding);\n    </expandTranslateParentExpression>\n}\n"], ["function_2", "\nfunction (obj, options) {\n    obj = this.toContext(obj);\n    return OpenLayers.Format.XML.VersionedOGC.prototype.write.apply(this, arguments);\n}\n"], ["function_3", "\nfunction (hashrate) {\n    <processHashrate>\n    if (hashrate <= 0 || _.isNaN(hashrate)) {\n        return 'N/A';\n    }\n    if (hashrate < 1e3) {\n        return hashrate.toFixed(2) + 'MH/s';\n    }\n    if (hashrate < 1e6) {\n        return (hashrate / 1e3).toFixed(2) + 'GH/s';\n    }\n    if (hashrate < 1e9) {\n        return (hashrate / 1e6).toFixed(2) + 'TH/s';\n    }\n    </processHashrate>\n    \n    return (hashrate / 1e9).toFixed(2) + 'PH/s';\n}\n"], ["function_4", "\nfunction domToCSS(name) {\n    return name.replace(/([A-Z])/g, function (str, m1) {\n        return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n}\n"], ["function_5", "\nfunction isIterable(was) {\n    <checkIterable>\n    return _.isObject(was) && !_.isFunction(was) && !_.isArray(was);\n    </checkIterable>\n}\n"], ["function_6", "\nfunction (data, opts) {\n    <processDataAndOptions>\n    var i, triples, url, script, parser, docElem,\n        format = (opts && opts.format),\n        async = (opts && opts.async) || $.rdf.databank.defaults.async,\n        success = (opts && opts.success) || $.rdf.databank.defaults.success,\n        error = (opts && opts.error) || $.rdf.databank.defaults.error,\n        proxy = (opts && opts.proxy) || $.rdf.databank.defaults.proxy,\n        depth = (opts && opts.depth) || $.rdf.databank.defaults.depth;\n    url = (typeof data === 'string' && data.substring(1, 7) === 'http:');\n    </processDataAndOptions>\n    \n    <handleURL>\n    if (url.scheme) {\n        if (!queue(this, url, { success: success, error: error })) {\n            script = '<script type=\"text/javascript\" src=\"' + proxy + '?id=' + this.id + '&amp;depth=' + depth + '&amp;url=' + encodeURIComponent(url.resolve('').toString()) + '\"></script>';\n            if (async) {\n                setTimeout(\"$('head').append('\" + script + \"')\", 0);\n            } else {\n                $('head').append(script);\n            }\n        }\n        return this;\n    } else {\n    </handleURL>\n    \n        <determineFormat>\n        if (format === undefined) {\n            // Determining the format based on the string content or the document element\n        }\n        </determineFormat>\n        \n        <parseData_AddTriples>\n        parser = $.rdf.parsers[format];\n        if (typeof data === 'string') {\n            data = parser.parse(data);\n        }\n        triples = parser.triples(data);\n        for (i = 0; i < triples.length; i += 1) {\n            this.add(triples[i], opts);\n        }\n        </parseData_AddTriples>\n        \n        return this;\n    }\n}\n"], ["function_7", "\nfunction (id_token) {\n    var jws = new KJUR.jws.JWS();\n    jws.parseJWS(id_token);\n    return [jws.parsedJWS.headS, jws.parsedJWS.payloadS, jws.parsedJWS.si];\n}\n"], ["function_8", "\nfunction constructMongoLink(dbName, prefix, servers, params, credentials) {\n    <constructMongoURL>\n    if (dbName && Array.isArray(servers)) {\n        // Constructing the MongoDB connection URL based on various parameters\n    </constructMongoURL>\n    return null;\n}\n"], ["function_9", "\nfunction usagePercent(opts, cb) {\n    <initializeVariables>\n    var cpus = os.cpus();\n    var timeUsed;\n    var timeUsed0 = 0;\n    var timeUsed1 = 0;\n    var timeIdle;\n    var timeIdle0 = 0;\n    var timeIdle1 = 0;\n    var cpu1;\n    var cpu0;\n    var time;\n    </initializeVariables>\n\n    <handleOptions_Callback>\n    if (typeof opts === 'function') {\n        // Handling case when opts is actual a callback function\n    } else {\n        // Initializing options if they are provided as an object\n    }\n    </handleOptions_Callback>\n\n    <validateCoreIndex>\n    if (opts.coreIndex < -1 ||\n        opts.coreIndex >= cpus.length ||\n        typeof opts.coreIndex !== 'number' ||\n        Math.abs(opts.coreIndex % 1) !== 0\n    ) {\n        // Error handling for invalid coreIndex\n    }\n    </validateCoreIndex>\n\n    <calculateUsage>\n    if (opts.coreIndex === -1) {\n        // Calculating usage for all cores\n    } else {\n        // Calculating usage for a specific core\n    }\n    </calculateUsage>\n}\n"], ["function_10", "\nfunction insert(editable, type, data) {\n    <prepareInsertion>\n    var editor = editable.editor,\n        selection = editor.getSelection(),\n        range = selection.getRanges()[ 0 ],\n        dontFilter = false;\n\n    if (type == 'unfiltered_html') {\n        type = 'html';\n        dontFilter = true;\n    }\n\n    if (range.checkReadOnly())\n        return;\n\n    var path = new CKEDITOR.dom.elementPath(range.startContainer, range.root),\n        blockLimit = path.blockLimit || range.root,\n        that = {\n            type: type,\n            dontFilter: dontFilter,\n            editable: editable,\n            editor: editor,\n            range: range,\n            blockLimit: blockLimit,\n            mergeCandidates: [],\n            zombies: []\n        };\n    </prepareInsertion>\n\n    <executeInsertion>\n    prepareRangeToDataInsertion(that);\n    if (data && processDataForInsertion(that, data)) {\n        insertDataIntoRange(that);\n    }\n    cleanupAfterInsertion(that);\n    </executeInsertion>\n\n    <finalizeInsertion>\n    range.select();\n    afterInsert(editable);\n    </finalizeInsertion>\n}\n"], "```"]