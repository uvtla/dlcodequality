[["parseMetadataAndMedia", "\nfunction (body, options) {\n  <initializeObjects>\n  var ogObject = {};\n  var $ = cheerio.load(body);\n  var meta = $('meta');\n  var keys = Object.keys(meta); </initializeObjects>\n\n  <processMetaTags>\n  keys.forEach(function (key) {\n    <metaTagExists>\n    if (!(meta[key].attribs && (meta[key].attribs.property || meta[key].attribs.name))) {\n      return;\n    } </metaTagExists>\n    <getPropertyContent>\n    var property = meta[key].attribs.property || meta[key].attribs.name;\n    var content = meta[key].attribs.content || meta[key].attribs.value; </getPropertyContent>\n    <iterateFields>\n    fields.forEach(function (item) {\n      if (property === item.property) {\n        if (!item.multiple) {\n          ogObject[item.fieldName] = content;\n        } else if (!ogObject[item.fieldName]) {\n          ogObject[item.fieldName] = [content];\n        } else if (Array.isArray(ogObject[item.fieldName])) {\n          ogObject[item.fieldName].push(content);\n        }\n      }\n    }); </iterateFields>\n  }); </processMetaTags>\n\n  <setDefaultImages>\n  ogObject.ogImage = ogObject.ogImage ? ogObject.ogImage : (ogObject.ogImageURL ? ogObject.ogImageURL : (ogObject.ogImageSecureURL ? ogObject.ogImageSecureURL : []));\n  if (!ogObject.ogImage || !ogObject.ogImage.length) {\n    delete ogObject.ogImage;\n  } </setDefaultImages>\n\n  <mediaSetup>\n  ogObject = media.mediaSetup(ogObject, options); </mediaSetup>\n\n  <additionalMediaInfo>\n  if (!options.onlyGetOpenGraphInfo) {\n    <setOgTitle>\n    if (!ogObject.ogTitle && $('head > title').text() && $('head > title').text().length > 0) {\n      ogObject.ogTitle = $('head > title').text();\n    } </setOgTitle>\n    <setOgDescription>\n    if (!ogObject.ogDescription && $('head > meta[name=\"description\"]').attr('content') && $('head > meta[name=\"description\"]').attr('content').length > 0) {\n      ogObject.ogDescription = $('head > meta[name=\"description\"]').attr('content');\n    } </setOgDescription>\n    <addFallbackImages>\n    var ogImageFallback = options.ogImageFallback === undefined ? true : options.ogImageFallback;\n    if (!ogObject.ogImage && ogImageFallback) {\n      ogObject.ogImage = [];\n      var supportedImageExts = ['jpg', 'jpeg', 'png'];\n      \n      <appendFallbackImages>\n      $('img').map(function (i, elem) {\n        if ($(elem).attr('src') && $(elem).attr('src').length > 0 && supportedImageExts.indexOf($(elem).attr('src').split('.').pop()) !== -1) {\n          ogObject.ogImage.push({\n            url: $(elem).attr('src')\n          });\n          return false;\n        }\n      }); </appendFallbackImages>\n    } </addFallbackImages>\n  } </additionalMediaInfo>\n\n  <cleanupEmptyImages>\n  if (ogObject.ogImage === []) {\n    delete ogObject.ogImage;\n  } </cleanupEmptyImages>\n\n  return ogObject;\n} "], ["createMaskRect", "\nfunction _createMaskRect() {\n  <createElement>\n  const element = document.createElementNS(svgNS, 'rect'); </createElement>\n\n  <setAttributes>\n  _setAttributes(element, {\n    fill: '#FFFFFF',\n    height: '100%',\n    id: elementIds.modalOverlayMaskRect,\n    width: '100%',\n    x: '0',\n    y: '0'\n  }); </setAttributes>\n\n  return element;\n} "], ["convertLiteralType", "\nfunction convertLiteral(oLiteral, oOtherOperand) {\n  <declareVariables>\n  var vModelValue,\n    oTypeInfo = getType(oOtherOperand); </declareVariables>\n\n  <convertNonStrings>\n  if (oTypeInfo.$Type !== \"Edm.String\") {\n    vModelValue = _Helper.parseLiteral(oLiteral.value, oTypeInfo.$Type, oTypeInfo.path);\n    oLiteral.value = that.formatPropertyAsLiteral(vModelValue, oTypeInfo);\n  } </convertNonStrings>\n} "], ["setClippingRectangle", "\nfunction clipRect(x, y, width, height) {\n  <canvasSetup>\n  var canvas = this.backBufferCanvas;\n  var gl = this.gl; </canvasSetup>\n\n  <checkAndUpdateScissorTest>\n  if (x !== 0 || y !== 0 || width !== canvas.width || height !== canvas.height) {\n    var currentScissor = this.currentScissor;\n\n    <sameScissorTest>\n    if (gl.isEnabled(gl.SCISSOR_TEST)) {\n      if (currentScissor[0] === x && currentScissor[1] === y && currentScissor[2] === width && currentScissor[3] === height) {\n        return;\n      }\n    } </sameScissorTest>\n\n    <flushAndSetupScissor>\n    this.flush(); \n    gl.enable(this.gl.SCISSOR_TEST); \n    gl.scissor( \n    x + this.currentTransform.tx, canvas.height - height - y - this.currentTransform.ty, width, height); \n    currentScissor[0] = x;\n    currentScissor[1] = y;\n    currentScissor[2] = width;\n    currentScissor[3] = height;\n    </flushAndSetupScissor>\n  } else {\n    <disableScissorIfDefaults>\n    gl.disable(gl.SCISSOR_TEST);\n    </disableScissorIfDefaults>\n  }\n} "], ["createTestLoaderConfig", "\nfunction createConf(sourceFile, loaders) {\n\n  var allLoaders = [];\n  var testFilesPattern = 'src*.test.js';\n\n  <concatLoaders>\n  if (loaders) {\n      allLoaders.concat(loaders);\n  } </concatLoaders>\n\n  <defineConfiguration>\n  var conf = {\n    <defineBrowsers>\n    browsers: ['PhantomJS'],\n    </defineBrowsers>\n\n    <defineFiles>\n    files: [\n      'node_modules/phantomjs-polyfill/bind-polyfill.js',\n      testFilesPattern\n    ], </defineFiles>\n\n    <defineFrameworks>\n    frameworks: ['jasmine'], </defineFrameworks>\n\n    <definePlugins>\n    plugins: [\n        karmaWebpackPlugin,\n        'karma-jasmine',\n        'karma-phantomjs-launcher'\n    ], </definePlugins>\n\n    <definePreprocessors>\n    preprocessors: {}, </definePreprocessors>\n\n    <defineReporters>\n    reporters: [\n        'dots'\n    ], </defineReporters>\n\n    <setupWebpack>\n    webpack: {\n      module: {\n          loaders: allLoaders\n      },\n      resolve: {\n          alias: {}\n      }\n    }, </setupWebpack>\n\n    <webpackMiddlewareOptions>\n    webpackMiddleware: {\n      noInfo: true\n    }\n    </webpackMiddlewareOptions>\n  }; </defineConfiguration>\n\n  <setWebpackAlias>\n  conf.webpack.resolve.alias[webpackConfig.library.projectName] =\n      path.join(__dirname, sourceFile); </setWebpackAlias>\n\n  <setPreprocessors>\n  conf.preprocessors[testFilesPattern] = ['webpack'];\n  </setPreprocessors>\n\n  return conf;\n} "], ["createConfigurationInstance", "\nfunction create(options) {\n  <defaultOptions>\n  options = options || {};\n  var filename = path.resolve('', options.filename || '');\n  var tags = options.tags || {};\n  var clean = options.clean;\n  var removeList = options.removeList || [];\n  var fromString = options.fromString;\n  var contentString = options.content;\n  var instance = {};\n  var argv = options.argv || {};\n  var env = options.env || global.process.env;\n  var rootScope = options.rootScope || instance;\n  var scopes = options.scopes || {};\n  var processors = options.processors || {};\n  var variants = options.variants || {};\n  var cacheKeys = options.cacheKeys || {};\n  var tokens = options.tokens;\n  var excludeList = options.excludeList || []; </defaultOptions>\n\n  <defineHelperFunctions>\n  function cleanContent(content) {\n    // ... omitted for brevity\n  }\n  function cleanDefine(content) {\n    // ... omitted for brevity\n  }\n  function init() {\n    // ... omitted for brevity\n  }\n  function compile(content) {\n    // ... omitted for brevity\n  }\n  instance.compile = compile;\n  function getArgument(name) {\n    // ... omitted for brevity\n  }\n  instance.getArgument = getArgument;\n  function getEnvironment(name) {\n    // ... omitted for brevity\n  }\n  instance.getEnvironment = getEnvironment;\n  function getVariant(name) {\n    // ... omitted for brevity\n  }\n  instance.getVariant = getVariant;\n  function setVariant(name, value) {\n    // ... omitted for brevity\n  }\n  instance.setVariant = setVariant;\n  instance.getRootScope = function () {\n    return rootScope;\n  };\n  function getDirname() {\n    // ... omitted for brevity\n  }\n  instance.getDirname = getDirname;\n  function getFilename() {\n    // ... omitted for brevity\n  }\n  instance.getFilename = getFilename;\n  function fileScope(filename) {\n    // ... omitted for brevity\n  }\n  instance.fileScope = fileScope;\n  instance.getScope = fileScope; \n  function contentScope(content, file) {\n    // ... omitted for brevity\n  }\n  instance.contentScope = contentScope;\n  function process(content, encoding, attrs, node) {\n    // ... omitted for brevity\n  }\n  instance.process = process;\n  function getProcessor(encoding) {\n    // ... omitted for brevity\n  }\n  function querySelector(selector) {\n    // ... omitted for brevity\n  }\n  instance.querySelector = querySelector;\n  function execTrigger(trigger) {\n    // ... omitted for brevity\n  }\n  instance.execTrigger = execTrigger;\n  function execExclude(file) {\n    // ... omitted for brevity\n  }\n  function execImport(importation, froms) {\n    // ... omitted for brevity\n  }\n  instance.execImport = execImport;\n  function execExport(exportation, content) {\n    // ... omitted for brevity\n  }\n  instance.execExport = execExport;\n  function isYes(text) {\n    // ... omitted for brevity\n  }\n  instance.isYes = isYes;\n  function isNo(text) {\n    // ... omitted for brevity\n  }\n  instance.isNo = isNo;\n  function buildBlock(node, isImport) {\n    // ... omitted for brevity\n  }\n  instance.buildBlock = buildBlock;\n  function build() {\n    // ... omitted for brevity\n  }\n  instance.build = build;\n  </defineHelperFunctions>\n\n  return instance;\n} "], ["getValueForValidation", "\nfunction() {\n  <initializeValue>\n  var value = this.inputValue; </initializeValue>\n\n  <handleArray>\n  if (value instanceof Array) {\n    return value.length;\n  } </handleArray>\n\n  <handleNumber>\n  if (typeof value === 'number') {\n    return value;\n  } </handleNumber>\n\n  <handleNumericRule>\n  if (this.validator._hasNumericRule(this.attribute)) {\n    return parseFloat(value, 10);\n  } </handleNumericRule>\n\n  <defaultTextCase>\n  return value.length; </defaultTextCase>\n} "], ["MultilineConstructor", "\nfunction MultiLine(type, fold, applicable, options) {\n  <setProperties>\n  this.type = type;\n  this.fold = !!fold;\n  this.applicable = !!applicable;\n  this.options = options;\n  this.lines = []; </setProperties>\n} "], ["defineProperty", "\nfunction(object, key, def) {\n  <validateAccessor>\n  if (this._isaccessor(def)) {\n    <definePropertyWithAccessor>\n    return Object.defineProperty(object, key, {\n      enumerable: true,\n      configurable: true,\n      get: def.getter || this._NOGETTER,\n      set: def.setter || this._NOSETTER\n    }); </definePropertyWithAccessor>\n  } else {\n    <throwTypeError>\n    throw new TypeError(\"Expected getter and/or setter method\");\n    </throwTypeError>\n  } </validateAccessor>\n} "], ["setupAddBoxBehavior", "\nfunction setupAddBox() {\n  <selectAddBox>\n  var addBox = document.querySelector('.addRow input'); </selectAddBox>\n  <addBoxOnInput>\n  addBox.oninput = function() {\n    <handleEmptyInput>\n    if (addBox.value == '') {\n      clearError();\n      return;\n    } </handleEmptyInput>\n    <makeFetchRequest>\n    fetchAddonManifest(addBox.value); </makeFetchRequest>\n  }; </addBoxOnInput>\n  <fetchAddonManifest>\n  function fetchAddonManifest(url) {\n    <setupXHR>\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true); </setupXHR>\n    <handleXHRError>\n    xhr.onerror = function() {\n      setError();\n    }; </handleXHRError>\n    <handleXHRSuccess>\n    xhr.onload = function() {\n      <validateManifest>\n      var contentType = xhr.getResponseHeader('content-type') || '';\n      if (xhr.status != 200 || contentType.indexOf('/json') == -1) {\n        setError();\n        return;\n      } </validateManifest>\n\n      var manifest;\n      <parseManifest>\n      try {\n        manifest = JSON.parse(xhr.responseText);\n      } catch (e) {\n      } </parseManifest>\n      <validateParsedManifest>\n      if (!manifest) {\n        setError();\n        return;\n      } </validateParsedManifest>\n\n      <clearErrorAfterFetching>\n      clearError();\n      addAddon(url, manifest); </clearErrorAfterFetching>\n    }; </handleXHRSuccess>\n    <sendXHR>\n    try {\n      xhr.send(null);\n    } catch (e) {\n      setError();\n    } </sendXHR>\n  }; </fetchAddonManifest>\n  <setErrorFunction>\n  function setError() {\n    addBox.classList.add('kTextFieldError');\n  }; </setErrorFunction>\n  <clearErrorFunction>\n  function clearError() {\n    addBox.classList.remove('kTextFieldError');\n  }; </clearErrorFunction>\n  <addAddonFunction>\n  function addAddon(url, manifest) {\n    <trackAddonAdded>\n    _gaq.push(['_trackEvent', 'popup', 'addon_added']);\n    </trackAddonAdded>\n    \n    <clearAddBoxValue>\n    addBox.value = '';\n    </clearAddBoxValue>\n    <sendMessageToAddAddon>\n    port.postMessage({\n      command: 'add_addon',\n      url: url,\n      manifest: manifest\n    }); </sendMessageToAddAddon>\n    <sendMessageToToggleAddon>\n    port.postMessage({\n      command: 'toggle_addon',\n      enabled: true,\n      url: url\n    }); </sendMessageToToggleAddon>\n  }; </addAddonFunction>\n} "], "```"]