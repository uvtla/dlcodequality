[["animateElementProperty", "\nfunction(ele, prop, value, stepCallback) {\n  var params = {};\n  params[prop] = value;\n  ele.animate(\n    params,\n    {\n      'duration'  : settings.animateDuration,\n      'easing'  : settings.animateEase,\n      'queue'   : false,\n      'step'    : stepCallback\n    }\n  );\n}\n"], ["makeTempFile", "\nfunction makeTempFile() {\n    const n = Math.floor(Math.random() * 100000)\n    const tempFile = path.join(os.tmpdir(), `node-exiftool_test_${n}.jpg`)\n    return new Promise((resolve, reject) => {\n        const rs = fs.createReadStream(jpegFile)\n        const ws = fs.createWriteStream(tempFile)\n        rs.on('error', reject)\n        ws.on('error', reject)\n        ws.on('close', () => {\n            resolve(tempFile)\n        })\n        rs.pipe(ws)\n    })\n}\n"], ["componentMixin", "\nfunction componentMixin(tag$$1) {\n  // ... previously omitted codes are assumed to be part of the mixin logic\n  each(mixins, function (mix) {\n    // ... mixin logic continues\n    if (instance.init)\n      { instance.init.bind(tag$$1)(tag$$1.opts); }\n  });\n\n  return tag$$1\n}\n"], ["WaveformData", "\nfunction WaveformData(response_data, adapter) {\n  this.adapter = adapter.fromResponseData(response_data);\n  this.segments = {};\n  this.points = {};\n  this.offset(0, this.adapter.length);\n}\n"], ["iterateOverKeys", "\nfunction iterateOverKeys(getFn, obj, fn, hidden) {\n  var keys = getFn(obj), desc;\n  for (var i = 0, key; key = keys[i]; i++) {\n    desc = getOwnPropertyDescriptor(obj, key);\n    if (desc.enumerable || hidden) {\n      fn(obj[key], key);\n    }\n  }\n}\n"], ["getComponentPath", "\nfunction getComponentPath(componentName) {\n  let entry = COMPONENTS.find(({ name }) => name === componentName)\n  if (!entry) {\n    return null\n  }\n  return `veui/${COMPONENTS_DIRNAME}/${entry.path}`\n}\n"], ["generateThumbnail", "\nfunction(fileBlobOrUrl, container, options) {\n  if (qq.isString(fileBlobOrUrl)) {\n    log(\"Attempting to update thumbnail based on server response.\");\n    return drawFromUrl(fileBlobOrUrl, container, options || {});\n  }\n  else {\n    log(\"Attempting to draw client-side image preview.\");\n    return draw(fileBlobOrUrl, container, options || {});\n  }\n}\n"], ["FileReadStream", "\nfunction FileReadStream(path, options) {\n  stream.Stream.call(this);\n  // Stream setup code\n  this._open();\n}\n"], ["last", "\nfunction last(predicate, defaultValue) {\n  // ...RxJS pipeable operator code\n}\n"], ["getFileLines", "\nfunction getFileLines(filename, line_no_Arr) {\n  // ...File reading and line extraction code\n}\n"], "The function follows SRP, as it is responsible for reading specific lines from a file."]