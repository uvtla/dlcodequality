[["defaultOptions", "\nfunction defaultOptions() {\n    return {\n        optimistic: false,\n        directive: false,\n        nodejsScope: false,\n        impliedStrict: false,\n        sourceType: \"script\",  \n        ecmaVersion: 5,\n        childVisitorKeys: null,\n        fallback: \"iteration\"\n    };\n}\n"], ["generateRandomString", "\nfunction (min, max) {\n    <calculateStringLength>\n    var len = range(3, 10, min, max)\n    </calculateStringLength>\n    var result = ''\n    for (var i = 0; i < len; i++) {\n      result += Basic.character('lower')\n    }\n    return result\n}\n"], ["punif", "\nfunction punif(a, b, lowerTail, logp) {\n      logp = logp === true;\n      lowerTail = lowerTail !== false;\n\n      <validateInput>\n      if (b < a || !utils.isFinite(a) || !utils.isFinite(b)) {\n         return function(x) { return NaN; };\n      }\n      </validateInput>\n\n      <returnProbFunction>\n      return function(x) {\n         if (utils.hasNaN(x)) { return NaN; }\n         if (x >= b) { return utils.adjustLower(1, lowerTail, logp); }\n         if (x <= a) { return utils.adjustLower(0, lowerTail, logp); }\n\n         return utils.adjustLower(\n            (lowerTail ? x - a : b - x) / (b - a), true, logp\n         );\n      };\n      </returnProbFunction>\n}\n"], ["roundCeil", "\nfunction roundCeil(num, precision) {\n    return Math.ceil(num * Math.pow(10, precision)) / Math.pow(10, precision);\n}\n"], ["flushEvents", "\nfunction flushEvents() {\n  var tmp = PENDING_QUEUE;\n  PENDING_QUEUE = [];\n  for (var i = 0; i < tmp.length; i++) {\n    clientObj.send('log', tmp[i].item, tmp[i].fn);\n  }\n}\n"], ["formatProp", "\nfunction formatProp(obj) {\n\t\tvar out      = {};\n\n\t\t<setupProps>\n\t\tvar props    = _.get(obj, 'propSet');\n\t\tvar moRef    = _.has(obj, 'obj') ? util.moRef(obj.obj) : util.moRef(obj);\n\t\tout.id       = moRef.id;\n\t\tout.type     = moRef.type;\n\t\t</setupProps>\n\t\t\n\t\t<mapProps>\n\t\tif (Array.isArray(props)) {\n\t\t\t_.forEach(props, function(prop) {\n\t\t\t\tout[prop.name] = formatValue(prop.val);\n\t\t\t});\n\t\t}\n\t\telse if (_.has(props, 'name')) {\n\t\t\tout[props.name] = formatValue(props.val);\n\t\t}\n\t\t</mapProps>\n\n\t\treturn out;\n}\n"], ["parseVariableDeclarations", "\nfunction parseVariableDeclarations(string) {\n  \n  <validateString>\n  if (!string) {\n    return [];\n  }\n  </validateString>\n\n  var out = [],\n      <setupAST>\n      ast = gonzales.parse(string, {\n        syntax: syntax\n      }),\n      </setupAST>\n\n      <setupVisitor>\n      visitor = {\n        test: function(name, nodes) {\n          if (name !== 'declaration') {\n            return false;\n          }\n\n          if (\n              nodes.content[0] &&\n              nodes.content[0].content &&\n              nodes.content[0].content[0] &&\n              nodes.content[0].content[0].type &&\n              nodes.content[0].content[0].type === 'variable'\n            ) {\n            return true;\n          }\n        },\n        process: function(nodes) {\n          var varName = nodes.content[0].content[0].content[0].content;\n\n          \n          var content = nodes.content.filter(function(item) {\n            return (item.type !== 'space');\n          });\n\n          if (content[2] && content[2].type && content[2].type === 'value') {\n            out.push({\n              name: varName,\n              value: content[2].toString(syntax),\n              line: content[2].start.line\n            });\n          }\n        }\n      };\n      </setupVisitor>\n\n  <traverseAST>\n  traverser.traverse(ast, visitor);\n  </traverseAST>\n\n  return out;\n}\n"], ["generateHash", "\nfunction() {\n  \n  <prepareFactors>\n  var factors = {\n    creationDate: (new Date()).getTime(),\n    random: Math.random() * (Math.random() * 1000),\n    nodeVersion: process.version\n  };\n  var basestring = '';\n  _.each(factors, function (val) {\n    basestring += val;\n  });\n  </prepareFactors>\n\n  <generateMD5Hash>\n  var hash =  crypto.\n        createHash('md5').\n        update(basestring).\n        digest('hex');\n  </generateMD5Hash>\n\n  return hash;\n}\n"], ["DataTypeValidator", "\nfunction DataTypeValidator(type) {\n    DataTypeValidator.super_.call(this);\n    \n    <defineProperty>\n    Object.defineProperty(this, 'dataType', {\n        get: function() {\n            if (typeof type === 'string') {\n                return this.getContext().getConfiguration().getStrategy(DataConfigurationStrategy).dataTypes[type];\n            }\n            else {\n                return type;\n            }\n        }\n    });\n    </defineProperty>\n}\n"], ["handRank", "\nfunction handRank(val) {\n  if (val > 6185) return HIGH_CARD        \n  if (val > 3325) return ONE_PAIR         \n  if (val > 2467) return TWO_PAIR         \n  if (val > 1609) return THREE_OF_A_KIND  \n  if (val > 1599) return STRAIGHT         \n  if (val > 322)  return FLUSH            \n  if (val > 166)  return FULL_HOUSE       \n  if (val > 10)   return FOUR_OF_A_KIND   \n  return STRAIGHT_FLUSH                   \n}\n"], "```"]