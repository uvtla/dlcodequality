[["checkFolder", "\nfunction checkFolder(ffs, fld) {\n    let fldBits = fld.split('/'), mkfld = '';\n    fldBits.forEach(toBit => {\n        mkfld = mkfld ? mkfld + '/' + toBit : toBit;\n        if (mkfld && !ffs.existsSync(mkfld)) {\n            ffs.mkdirSync(mkfld);\n        }\n    });\n}\n"], ["registerInteractionHandler", "\nfunction registerInteractionHandler(fnHandler) {\n    var aSuppressHandler = [],\n        oParentDOM = this.$parent.get(0),\n        oBlockLayerDOM = this.$blockLayer.get(0);\n\n    for (var i = 0; i < aPreventedEvents.length; i++) {\n\n        oParentDOM.addEventListener(aPreventedEvents[i], fnHandler, {\n            capture: true,\n            passive: false\n        });\n        aSuppressHandler.push(EventTriggerHook.suppress(aPreventedEvents[i], oParentDOM, oBlockLayerDOM));\n    }\n\n    this.$blockLayer.bind('keydown', fnHandler);\n\n    return aSuppressHandler;\n}\n"], ["haveDifferentKeys", "\nfunction haveDifferentKeys(object1, object2) {\n    var keys1 = Object.keys(object1);\n    var keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n        return true;\n    }\n\n    return !keys1.every(function existsInKeys2(key) {\n        return keys2.indexOf(key) !== -1;\n    });\n}\n"], ["isValidJSON", "\nfunction isValidJSON(arg) {\n    var parsed;\n    if (!lodash.isString(arg)) {\n        return false;\n    }\n    try {\n        parsed = JSON.parse(arg);\n    } catch (e) {\n        return false;\n    }\n    if (typeof(parsed) === 'object') {\n        return true;\n    }\n    return false;\n}\n"], ["TiledElevationCoverage", "\nfunction () {\n    TiledElevationCoverage.call(this, {\n        coverageSector: Sector.FULL_SPHERE,\n        resolution: 0.008333333333333,\n        retrievalImageFormat: \"image/tiff\",\n        minElevation: -11000,\n        maxElevation: 8850,\n        urlBuilder: new WcsTileUrlBuilder(\"https://ows.jpl.nasa.gov/wcs\", \"NASA_SRTM30_900m_Tiled\", \"1.0.0\")\n    });\n\n    this.displayName = \"WCS Earth Elevation Coverage\";\n}\n"], ["linearDependencies", "\nfunction linearDependencies(matrix, options = {}) {\n    const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n\n    var n = matrix.rows;\n    var results = new Matrix$1(n, n);\n\n    for (var i = 0; i < n; i++) {\n        var b = Matrix$1.columnVector(matrix.getRow(i));\n        var Abis = matrix.subMatrixRow(xrange(n, i)).transposeView();\n        var svd = new SingularValueDecomposition$$1(Abis);\n        var x = svd.solve(b);\n        var error = max(\n            Matrix$1.sub(b, Abis.mmul(x))\n                .abs()\n                .to1DArray()\n        );\n        results.setRow(\n            i,\n            dependenciesOneRow(error, x, i, thresholdValue, thresholdError)\n        );\n    }\n    return results;\n}\n"], ["handleCustomClick", "\nfunction handleCustomClick(e, d) {\n    let [mouseX, mouseY] = getMousePosition(e);\n    let dataPoint = isHorizontal ? getNearestDataPoint2(mouseY) : getNearestDataPoint(mouseX);\n\n    dispatcher.call('customClick', e, dataPoint, d3Selection.mouse(e));\n}\n"], ["addBoundsToArray", "\nfunction addBoundsToArray(bounds, array) {\n    if (!bounds) return;\n    var bound;\n\n    for (var j = 0; j < bounds.length; j++) {\n        bound = bounds[j];\n        if (bound.type === 'UBM' || bound.type === 'LBM') {\n            array.push(bound);\n        }\n    }\n}\n"], ["addCard", "\nfunction addCard(contentType, currentActivity, rest) {\n    let card = { buttons: [] };\n    let lines = rest.split('\\n');\n    for (let line of lines) {\n        let start = line.indexOf('=');\n        let property = line.substr(0, start).trim().toLowerCase();\n        let value = line.substr(start + 1).trim();\n        switch (property) {\n            // handle each card property\n            <handleCardProperty>\n            case 'title':\n            case 'subtitle':\n            case 'text':\n            case 'aspect':\n            case 'value':\n            case 'connectioname':\n                card[property] = value;\n                break;\n            case 'image':\n                card.image = { url: value };\n                break;\n            case 'images':\n                if (!card.images) {\n                    card.images = [];\n                }\n                card.images.push({ url: value });\n                break;\n            case 'media':\n                if (!card.media)\n                    card.media = [];\n                card.media.push({ url: value });\n                break;\n            case 'buttons':\n                for (let button of value.split('|')) {\n                    card.buttons.push({ title: button.trim(), type: \"imBack\", value: button.trim() });\n                }\n                break;\n            case 'autostart':\n            case 'sharable':\n            case 'autoloop':\n                card[property] = value.toLowerCase() == 'true';\n                break;\n            case '':\n                break;\n            default:\n                console.warn(chalk.red.bold(`Skipping unknown card property ${property}\\n${line}`));\n                break;\n            </handleCardProperty>\n        }\n    }\n    // attach the card to the activity\n    <attachCardToActivity>\n    let attachment = { contentType: contentType, content: card };\n    (currentActivity.attachments || (currentActivity.attachments = [])).push(attachment);\n    </attachCardToActivity>\n}\n"], ["calculateScrollBarSize", "\nfunction calculateScrollBarSize() {\n    if ($scrollContainer.length) {\n        if (opts.support && opts.support.perfectScrollbar && $scrollContainer.data().perfectScrollbar) {\n            scrollbarOffset = { horizontal: 0, vertical: 0 };\n        } else {\n            if ($scrollContainer.css('overflow-x') == 'scroll') {\n                scrollbarOffset.horizontal = scrollbarWidth;\n            } else {\n                var sw = $scrollContainer.width(), tw = tableWidth($table, $fthCells);\n                var offsetv = sh < th ? scrollbarWidth : 0;\n                scrollbarOffset.horizontal = sw - offsetv < tw ? scrollbarWidth : 0;\n            }\n            if ($scrollContainer.css('overflow-y') == 'scroll') {\n                scrollbarOffset.vertical = scrollbarWidth;\n            } else {\n                var sh = $scrollContainer.height(), th = $table.height();\n                var offseth = sw < tw ? scrollbarWidth : 0;\n                scrollbarOffset.vertical = sh - offseth < th ? scrollbarWidth : 0;\n            }\n        }\n    }\n}\n"], ""]