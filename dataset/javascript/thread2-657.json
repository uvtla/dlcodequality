[["downloadProjectCompilations", "\nfunction downloadProjectCompilations(project, outputDir) {\n\t<const promises = [];>\n\tconst promises = [];\n\t<for (const platform in project.compilations) {>\n\tfor (const platform in project.compilations) {\n\t\t<if (!project.compilations.hasOwnProperty(platform)) {>\n\t\tif (!project.compilations.hasOwnProperty(platform)) {\n\t\t\tcontinue;\n\t\t}\n\t\t</if (!project.compilations.hasOwnProperty(platform)) {>\n\t\t<promises.push(downloadProjectCompilation(project, platform, outputDir).catch(() => {>\n\t\tpromises.push(downloadProjectCompilation(project, platform, outputDir).catch(() => {\n\t\t\treturn undefined;\n\t\t}));\n\t\t</promises.push(downloadProjectCompilation(project, platform, outputDir).catch(() => {>\n\t}\n\t</for (const platform in project.compilations) {>\n\t<return Promise.all(promises);>\n\treturn Promise.all(promises);\n\t</return Promise.all(promises);>\n}\n"], ["anonymous_function_1", "\nfunction (modelName, typesUpdated) {\n      <var _this3 = this;>\n      var _this3 = this;\n      <var klass = this._nameToClass(modelName);\n      var records = this.getRecords(klass, modelName);\n\n      var onChange = function () {\n        typesUpdated([_this3.wrapModelType(klass, modelName)]);\n      };\n      var observer = {\n        didChange: function () {\n          _emberMetalRun_loop.default.scheduleOnce('actions', this, onChange);\n        },\n        willChange: function () {\n          return this;\n        }\n      };\n\n      _emberRuntimeMixinsArray.addArrayObserver(records, this, observer);\n\n      var release = function () {\n        _emberRuntimeMixinsArray.removeArrayObserver(records, _this3, observer);\n      };\n\n      return release;>\n      var klass = this._nameToClass(modelName);\n      var records = this.getRecords(klass, modelName);\n\n      var onChange = function () {\n        typesUpdated([_this3.wrapModelType(klass, modelName)]);\n      };\n      var observer = {\n        didChange: function () {\n          _emberMetalRun_loop.default.scheduleOnce('actions', this, onChange);\n        },\n        willChange: function () {\n          return this;\n        }\n      };\n\n      _emberRuntimeMixinsArray.addArrayObserver(records, this, observer);\n\n      var release = function () {\n        _emberRuntimeMixinsArray.removeArrayObserver(records, _this3, observer);\n      };\n\n      return release;\n}\n"], ["anonymous_function_2", "\nfunction(content, idx, removedCnt, addedCnt) {\n    <var keys = this._keys, key, lim;\n\n    lim = removedCnt>0 ? idx+removedCnt : -1;\n    Ember.beginPropertyChanges(this);\n\n    for(key in keys) {\n      if (!keys.hasOwnProperty(key)) { continue; }\n\n      if (lim>0) removeObserverForContentKey(content, key, this, idx, lim);\n\n      Ember.propertyWillChange(this, key);\n    }\n\n    Ember.propertyWillChange(this._content, '@each');\n    Ember.endPropertyChanges(this);>\n    var keys = this._keys, key, lim;\n\n    lim = removedCnt>0 ? idx+removedCnt : -1;\n    Ember.beginPropertyChanges(this);\n\n    for(key in keys) {\n      if (!keys.hasOwnProperty(key)) { continue; }\n\n      if (lim>0) removeObserverForContentKey(content, key, this, idx, lim);\n\n      Ember.propertyWillChange(this, key);\n    }\n\n    Ember.propertyWillChange(this._content, '@each');\n    Ember.endPropertyChanges(this);\n}\n"], ["truncateNearestSibling", "\nfunction truncateNearestSibling($element, $rootNode, $clipNode, options) {\n    <$element.remove();>\n    $element.remove();\n    </$element.remove();>\n    \n    <var clipLength = $clipNode ? $clipNode.length : 0;\n\n    if ($parent.contents().length > clipLength) {\n      $prevSibling = $parent.contents().eq(-1 - clipLength);\n      return truncateTextContent($prevSibling, $rootNode, $clipNode, options);\n  \n    } else {\n      var $parentSibling = $parent.prev();\n      $prevSibling = $parentSibling.contents().eq(-1);\n\n      if ($prevSibling.length) {\n        setText($prevSibling[0], $prevSibling.text() + options.ellipsis);\n        $parent.remove();\n\n        if ($clipNode.length) {\n          $parentSibling.append($clipNode);\n        }\n        return true;\n      }\n    }\n\n    return false;>\n    var clipLength = $clipNode ? $clipNode.length : 0;\n\n    if ($parent.contents().length > clipLength) {\n      $prevSibling = $parent.contents().eq(-1 - clipLength);\n      return truncateTextContent($prevSibling, $rootNode, $clipNode, options);\n\n    } else {\n      var $parentSibling = $parent.prev();\n      $prevSibling = $parentSibling.contents().eq(-1);\n\n      if ($prevSibling.length) {\n        setText($prevSibling[0], $prevSibling.text() + options.ellipsis);\n        $parent.remove();\n\n        if ($clipNode.length) {\n          $parentSibling.append($clipNode);\n        }\n        return true;\n      }\n    }\n\n    return false;\n}\n"], ["npmDependencyHandling", "\nfunction(loader, packageJSON, isRoot){\n\t\t<const config = utils.pkg.config(packageJSON);\n\t\tvar hasConfig = !!config;\n\n\t\tvar npmIgnore = hasConfig && config.npmIgnore;\n\t\tvar npmDependencies = hasConfig && config.npmDependencies;\n\t\tnpmIgnore = npmIgnore || {};>\n\t\tvar config = utils.pkg.config(packageJSON);\n\t\tvar hasConfig = !!config;\n\t\tvar npmIgnore = hasConfig && config.npmIgnore;\n\t\tvar npmDependencies = hasConfig && config.npmDependencies;\n\t\tnpmIgnore = npmIgnore || {};\n\t\t\n\t\t<function convertToMap(arr) {\n\t\t\tvar npmMap = {};\n\t\t\tfor(var i = 0; i < arr.length; i++) {\n\t\t\t\tnpmMap[arr[i]] = true;\n\t\t\t}\n\t\t\treturn npmMap;\n\t\t}\n\t\tif(npmIgnore && typeof npmIgnore.length === 'number') {\n\t\t\tnpmIgnore = config.npmIgnore = convertToMap(npmIgnore);\n\t\t}\n\t\tif(npmDependencies && typeof npmDependencies.length === \"number\") {\n\t\t\tconfig.npmDependencies = convertToMap(npmDependencies);\n\t\t}>\n\t\tfunction convertToMap(arr) {\n\t\t\tvar npmMap = {};\n\t\t\tfor(var i = 0; i < arr.length; i++) {\n\t\t\t\tnpmMap[arr[i]] = true;\n\t\t\t}\n\t\t\treturn npmMap;\n\t\t}\n\t\tif(npmIgnore && typeof npmIgnore.length === 'number') {\n\t\t\tnpmIgnore = config.npmIgnore = convertToMap(npmIgnore);\n\t\t}\n\t\tif(npmDependencies && typeof npmDependencies.length === \"number\") {\n\t\t\tconfig.npmDependencies = convertToMap(npmDependencies);\n\t\t}\n\t\t\n\t\t<var deps = {};\n\n\t\taddDeps(packageJSON, packageJSON.peerDependencies || {}, deps,\n\t\t\t\t\"peerDependencies\", {_isPeerDependency: true});\n\n\t\taddDeps(packageJSON, packageJSON.dependencies || {}, deps, \"dependencies\");\n\n\t\tif(isRoot) {\n\t\t\taddDeps(packageJSON, packageJSON.devDependencies || {}, deps,\n\t\t\t\t   \"devDependencies\");\n\t\t}\n\n\t\treturn deps;>\n\t\tvar deps = {};\n\n\t\taddDeps(packageJSON, packageJSON.peerDependencies || {}, deps,\n\t\t\t\t\"peerDependencies\", {_isPeerDependency: true});\n\n\t\taddDeps(packageJSON, packageJSON.dependencies || {}, deps, \"dependencies\");\n\n\t\tif(isRoot) {\n\t\t\taddDeps(packageJSON, packageJSON.devDependencies || {}, deps,\n\t\t\t\t   \"devDependencies\");\n\t\t}\n\n\t\treturn deps;\n}\n"], ["getBrowserInformation", "\nfunction getBrowserInformation(userAgent) {\n  <var browserInfo = _bowser2.default._detect(userAgent);\n\n  for (var browser in prefixByBrowser) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      var prefix = prefixByBrowser[browser];\n\n      browserInfo.jsPrefix = prefix;\n      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';\n      break;\n    }\n  }\n\n  browserInfo.browserName = getBrowserName(browserInfo);\n\n  if (browserInfo.version) {\n    browserInfo.browserVersion = parseFloat(browserInfo.version);\n  } else {\n    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);\n  }\n\n  browserInfo.osVersion = parseFloat(browserInfo.osversion);\n\n  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {\n    browserInfo.browserName = 'and_chr';\n  }\n\n  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {\n    browserInfo.browserName = 'and_chr';\n    browserInfo.browserVersion = 44;\n  }>\n\n  var browserInfo = _bowser2.default._detect(userAgent);\n\n  for (var browser in prefixByBrowser) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      var prefix = prefixByBrowser[browser];\n\n      browserInfo.jsPrefix = prefix;\n      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';\n      break;\n    }\n  }\n\n  browserInfo.browserName = getBrowserName(browserInfo);\n\n  if (browserInfo.version) {\n    browserInfo.browserVersion = parseFloat(browserInfo.version);\n  } else {\n    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);\n  }\n\n  browserInfo.osVersion = parseFloat(browserInfo.osversion);\n\n  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {\n    browserInfo.browserName = 'and_chr';\n  }\n\n  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {\n    browserInfo.browserName = 'and_chr';\n    browserInfo.browserVersion = 44;\n  }\n\n  return browserInfo;\n}\n"], ["cleanUpElement", "\nfunction cleanUpElement(element) {\n\t<const childNodes = element.childNodes;\n    \tfor (let i = 0; i < childNodes.length; i++) {\n\t\tconst node = childNodes[i];\n\n\t\tlet isVisible = node.nodeType === 1 ? window.getComputedStyle(node).display !== 'none' : true;\n\t\tif (isVisible && ['input', 'textarea', 'script', 'noscript', 'style', 'select', 'option', 'button'].indexOf(node.nodeName.toLowerCase()) >= 0) isVisible = false;\n\n\t\tif (!isVisible) {\n\t\t\telement.removeChild(node);\n\t\t} else {\n\t\t\tcleanUpElement(node);\n\t\t}\n\t}>\n\t\tconst childNodes = element.childNodes;\n\n\t\tfor (let i = 0; i < childNodes.length; i++) {\n\t\t\tconst node = childNodes[i];\n\n\t\t\tlet isVisible = node.nodeType === 1 ? window.getComputedStyle(node).display !== 'none' : true;\n\t\t\tif (isVisible && ['input', 'textarea', 'script', 'noscript', 'style', 'select', 'option', 'button'].indexOf(node.nodeName.toLowerCase()) >= 0) isVisible = false;\n\n\t\t\tif (!isVisible) {\n\t\t\t\telement.removeChild(node);\n\t\t\t} else {\n\t\t\t\tcleanUpElement(node);\n\t\t\t}\n\t\t}\n}\n"], ["loadFile", "\nfunction (classpath, cb) {\n            <var logicalPath = Aria.getLogicalPath(classpath, \".tpl\", true);\n            this.loadFile(logicalPath, {\n                fn : this._onTplFileContentReceive,\n                scope : this,\n                args : {\n                    origCb : cb\n                }\n            }, null);>\n            var logicalPath = Aria.getLogicalPath(classpath, \".tpl\", true);\n            this.loadFile(logicalPath, {\n                fn : this._onTplFileContentReceive,\n                scope : this,\n                args : {\n                    origCb : cb\n                }\n            }, null);\n}\n"], ["getReferenceIndexedByCSS", "\nfunction getReferenceIndexedByCSS(ref) {\n    <var newRef = {};\n    for (var symb in ref.symbolizers) {\n        for (var property in ref.symbolizers[symb]) {\n            newRef[ref.symbolizers[symb][property].css] = ref.symbolizers[symb][property];\n        }\n    }>\n    var newRef = {};\n    for (var symb in ref.symbolizers) {\n        for (var property in ref.symbolizers[symb]) {\n            newRef[ref.symbolizers[symb][property].css] = ref.symbolizers[symb][property];\n        }\n    }\n    return newRef;\n}\n"], ["onload", "\nfunction onload() {\n\t\t\n\t\t<pattern = ctx.createPattern(img, params.repeat);\n\t\t\n\t\tif (params.load) {\n\t\t\tparams.load.call($canvases[0], pattern);\n\t\t}>\n\t\tpattern = ctx.createPattern(img, params.repeat);\n\t\t\n\t\tif (params.load) {\n\t\t\tparams.load.call($canvases[0], pattern);\n\t\t}\n\t}\n"], "```"]