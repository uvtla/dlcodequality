```javascript
<fetchAndPrepareEntityData>
function (aData) {
	var oEntityData,
		oMasterController,
		sTopicId = this._sTopicid;

	this._aApiIndex = aData;

	<findSymbolRef>
	function findSymbol (a) {
		return a.some(function (o) {
			var bFound = o.name === sTopicId;
			if (!bFound && o.nodes) {
				return findSymbol(o.nodes);
			} else if (bFound) {
				oEntityData = o;
				return true;
			}
			return false;
		});
	}
	</findSymbolRef>
	findSymbol(aData);

	if (oEntityData) {
		
		this._oEntityData = oEntityData;

		<handleDeprecatedEntity>
		if (oEntityData.deprecated) {
			oMasterController = this.getOwnerComponent().getConfigUtil().getMasterView("apiId").getController();
			oMasterController.selectDeprecatedSymbol(this._sTopicid);
		}
		</handleDeprecatedEntity>

		<getLibraryElementsPromise>
		return APIInfo.getLibraryElementsJSONPromise(oEntityData.lib).then(function (aData) {
			return Promise.resolve(aData); 
		});
		</getLibraryElementsPromise>
	}

	return Promise.reject(this.NOT_FOUND);
}
</fetchAndPrepareEntityData>

<applyTransformationsGroup>
function applyTransformationsGroup( filter, element, group ) {
	var i, rule;

	for ( i = 0; i < group.length; ++i ) {
		rule = group[ i ];

		
		if ( ( !rule.check || filter.check( rule.check, false ) ) &&
			( !rule.left || rule.left( element ) ) ) {
			<executeTransformationRule>
			rule.right( element, transformationsTools );
			return;
			</executeTransformationRule> 
		}
	}
}
</applyTransformationsGroup>

<updateDeprecatedProperties>
function() {
	if (!ariaCoreBrowser.supportsPropertyDescriptors()) {
		ariaUtilsArray.forEach(this._deprecatedProperties, function(property) {
			var type = property.type;

			if (type == "attribute") {
				var name = property.name;
				var prefixedName = "_" + name;

				this[name] = this[prefixedName];
			}
		}, this);
	}
}
</updateDeprecatedProperties>

<checkAndUpdateApp>
function update() {
	mui.getJSON(server, {
		"appid": plus.runtime.appid,
		"version": plus.runtime.version,
		"imei": plus.device.imei
	}, <handleUpdateResponse>
	function(data) {
		if (data.status) {
			plus.nativeUI.confirm(data.note, function(event) {
				if (0 == event.index) {
					plus.runtime.openURL(data.url);
				}
			}, data.title, ["立即更新", "取　　消"]);
		}
	}
	</handleUpdateResponse>);
}
</checkAndUpdateApp>

<calculateLabelBounds>
function () {
	var bBox = this.label.getBBox(),
	  axis = this.axis,
	  horiz = axis.horiz,
	  options = axis.options,
	  labelOptions = options.labels,
	  size = horiz ? bBox.width : bBox.height,
	  leftSide = horiz ?
	  labelOptions.x - size * { left: 0, center: 0.5, right: 1 }[axis.labelAlign] :
		0,
	  rightSide = horiz ?
	  size + leftSide :
		size;

	return [leftSide, rightSide];
}
</calculateLabelBounds>

<ecp_add_aff>
function ecp_add_aff(R, N1, N2, a, p, l) {
	<initializeVariables>
	var x1 = N1[0], y1 = N1[1], z1 = N1[2], x2 = N2[0], y2 = N2[1];
	var xr = R[0], yr = R[1], zr = R[2];
	var t0 = _ecp_t0, t1 = _ecp_t1, t2 = _ecp_t2, t3 = _ecp_t3, t4 = _ecp_t4;
	</initializeVariables>

	<performPointAddition>
	fp_sqr(t0, z1, p, l);
	fp_mul(t1, x2, t0, p, l);
	fp_mul(t2, z1, t0, p, l);
	fp_mul(t0, y2, t2, p, l);
	if (mpn_cmp(t1, x1, l) == 0) {
		if (mpn_cmp(t0, y1, l) == 0) {
			return ecp_dbl(R, N1, a, p, l);
		}
		mpn_zero(xr, l), mpn_zero(yr, l), mpn_zero(zr, l);
		xr[0] = yr[0] = 1;
		return R;
	}
	fp_sub(t2, t1, x1, p, l);
	fp_sub(t1, t0, y1, p, l);
	fp_sqr(t0, t2, p, l);
	fp_mul(t3, t0, t2, p, l);
	fp_mul(t4, x1, t0, p, l);
	fp_sub(xr, fp_sub(xr, fp_sqr(xr, t1, p, l), t3, p, l), fp_dbl(t0, t4, p, l), p, l);
	fp_sub(yr, fp_mul(yr, t1, fp_sub(t4, t4, xr, p, l), p, l), fp_mul(t0, y1, t3, p, l), p, l);
	fp_mul(zr, z1, t2, p, l);
	return R;
	</performPointAddition>
}
</ecp_add_aff>

<initializeOAuthClientCredentialsAuthenticator>
function OAuthClientCredentialsAuthenticator(application) {
	if (!(this instanceof OAuthClientCredentialsAuthenticator)) {
		return new OAuthClientCredentialsAuthenticator(application);
	}

	OAuthClientCredentialsAuthenticator.super_.apply(this, arguments);

	this.application = application;
}
</initializeOAuthClientCredentialsAuthenticator>

<toUpperCaseFunction>
function(string) {
	<initializeCharConversion>
	var chars = new Array(string.length);

	var charCode;
	for (var i = 0, len = chars.length; i < len; ++i) {
		charCode = string.charCodeAt(i);
		if (charCode > 96 && charCode < 123) {
			charCode -= 32;
		}
		chars[i] = String.fromCharCode(charCode);
	}
	</initializeCharConversion>

	return chars.join('');
}
</toUpperCaseFunction>

<renderFormatDirectories>
function( dir ) {
	render._mkdir( dir, <handleRootDirCreation>
	function( e ) {
		if ( e ) {
			return munit.exit( 1, e, "Failed to make root results directory" );
		}
		</handleRootDirCreation>

		
		async.each( render._formats,
			function( format, callback ) {
				
				var path = dir + format.name + '/';
				<createFormatDir>
				render._mkdir( path, function( e ) {
					if ( e ) {
						callback( e );
					}
					else {
						format.callback( path, callback );
					}
				});
				</createFormatDir>
			},
			<completeRendering>
			function( e ) {
				if ( e ) {
					munit.exit( 1, e );
				}
				else {
					render._complete();
				}
			}
			</completeRendering>
		);
	});
}
</renderFormatDirectories>

<deleteAppByIdOrSlug>
function (appIdOrSlug) {
	<validateAndConstructPath>
	var path;
	if (appIdOrSlug) {
		path = this.constructPath(constants.APPS, appIdOrSlug);
		return this.Core.DELETE(path);
	} else {
		return this.rejectRequest('Bad Request: An app id or slug is required.');
	}
	</validateAndConstructPath>
}
</deleteAppByIdOrSlug>
```