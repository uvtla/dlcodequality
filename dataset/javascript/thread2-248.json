[["processLogicalOr", "\nfunction processLogicalOr(tokenizer, scope) {\n  let node = processLogicalAnd(tokenizer, scope);\n\n  while (tokenizer.token.match(types.LOGICAL_OR)) {\n    node = createOperatorNode(tokenizer.token.value, [node, processLogicalAnd(tokenizer.skipToken(), scope)]);\n  }\n\n  return node;\n}\n"], ["function", "\nfunction(target) {\n\t\t\tvar id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\\\\\$1');\n\t\t\treturn {\n\t\t\t\tid: id,\n\t\t\t\tinput: target,\n\t\t\t\tuid: Math.floor(Math.random() * 99999999),\n\t\t\t\tisOpen: FALSE,\n\t\t\t\tisDisabled: FALSE,\n\t\t\t\tsettings: {}\n\t\t\t};\n\t\t}\n"], ["main", "\nfunction main(env, cb) {\n    <parseOptions>\n    var options = {\n        port: ~~env.args.shift(),\n        context: util.parseCsvObj(env.opts.context),\n        perf: env.opts.perf\n    };\n    </parseOptions>\n\n    <configureLogging>\n    if (env.opts.loglevel) {\n        log.level = env.opts.loglevel;\n    }\n    </configureLogging>\n\n    <validateEnvironment>\n    if (!env.app) {\n        cb(util.error(1, 'No package.json, please re-try from your application\u2019s directory.'));\n        return;\n    }\n    </validateEnvironment>\n    \n    <validateDependencies>\n    if (!(env.app.dependencies && env.app.dependencies.mojito)) {\n        log.error('The current directory doesn\u2019t appear to be a Mojito application.');\n        cb(util.error(3, 'Mojito isn\u2019t a dependency in package.json. Try `npm i --save mojito`.'));\n        return;\n    }\n    </validateDependencies>\n    \n    <validateInstallation>\n    if (!env.mojito) {\n        cb(util.error(3, 'Mojito is not installed locally. Try `npm i mojito`'));\n        return;\n    }\n    </validateInstallation>\n    \n    <getAppConfiguration>\n    appConfig = getAppConfig(env.mojito.path, env.cwd, options.context);\n    </getAppConfiguration>\n    \n    <handleAppConfigErrors>\n    if (!appConfig) {\n        cb(util.error(3, 'Cannot read application.json.'));\n        return;\n    }\n    </handleAppConfigErrors>\n    \n    <setDefaultPort>\n    if (!options.port) {\n        options.port = process.env.PORT || appConfig.appPort || 8666;\n    }\n    </setDefaultPort>\n\n    <executeApplication>\n    exec(env, options, cb);\n    </executeApplication>\n}\n"], ["addOnce", "\nfunction (listener, listenerContext, priority) {\n            validateListener(listener, 'addOnce');\n            return this._registerListener(listener, true, listenerContext, priority);\n        }\n"], ["LocalStorage", "\nfunction (options, storage, throwIfMissing) {\n        this.$AbstractStorage.constructor.call(this, options);\n\n        this.type = storage;\n        this.storage = Aria.$window[storage];\n        this._browserEventCb = null;\n\n        <handleStorageAvailability>\n        if (!this.storage && throwIfMissing !== false) {\n            if (this._disposeSerializer && this.serializer) {\n                this.serializer.$dispose();\n            }\n\n            this.$logError(this.UNAVAILABLE, [this.type]);\n            throw new Error(this.type);\n        }\n        </handleStorageAvailability>\n}\n"], ["toCamelCase", "\nfunction(dashed) {\n  var i;\n  var camel = '';\n  var nextCap = false;\n  for (i = 0; i < dashed.length; i++) {\n    if (dashed[i] !== '-') {\n      camel += nextCap ? dashed[i].toUpperCase() : dashed[i];\n      nextCap = false;\n    } else {\n      nextCap = true;\n    }\n  }\n  return camel;\n}\n"], ["ZDuplex", "\nfunction ZDuplex(options) {\n\t<processOptions>\n\tif(options) {\n\t\tif(options.objectMode) {\n\t\t\toptions.readableObjectMode = true;\n\t\t\toptions.writableObjectMode = true;\n\t\t}\n\t\tif(options.readableObjectMode && options.writableObjectMode) {\n\t\t\toptions.objectMode = true;\n\t\t}\n\t\t\n\t\tif(typeof options.read === 'function') {\n\t\t\tthis._read = options.read;\n\t\t}\n\t\tif(typeof options.write === 'function') {\n\t\t\tthis._write = options.write;\n\t\t}\n\t\tif(typeof options.flush === 'function') {\n\t\t\tthis._flush = options.flush;\n\t\t}\n\t}\n\t</processOptions>\n\t<initializeDuplex>\n\tDuplex.call(this, options);\n\t</initializeDuplex>\n\t\n\t<setupDuplex>\n\tthis._duplexFinished = false;\n\tthis.once('finish', this._duplexPrefinish.bind(this));\n\tthis.once('prefinish', this._duplexPrefinish.bind(this));\n\t</setupDuplex>\n\t\n\t<adjustObjectModes>\n\tif(options && !options.objectMode && (!options.readableObjectMode) !== (!options.writableObjectMode)) {\n\t\tthis._writableState.objectMode = !!options.writableObjectMode;\n\t\tthis._readableState.objectMode = !!options.readableObjectMode;\n\t}\n\tif(options && options.readableObjectMode) {\n\t\tthis._readableState.highWaterMark = 16;\n\t}\n\tif(options && options.writableObjectMode) {\n\t\tthis._writableState.highWaterMark = 16;\n\t}\n\t</adjustObjectModes>\n\t<applyMixins>\n\tstreamMixins.call(this, Duplex.prototype, options);\n\treadableMixins.call(this, options);\n\twritableMixins.call(this, options);\n\t</applyMixins>\n}\n"], ["once", "\nfunction once(eventName, handler, context, args) {\n    this.on(eventName, handler, context, args, true);\n}\n"], ["updateAndroidManifest", "\nfunction updateAndroidManifest(targetFilePath, configItems) {\n        var tempManifest = fileUtils.parseElementtreeSync(targetFilePath),\n            root = tempManifest.getroot();\n\n        <processConfigItems>\n        _.each(configItems, function (item) {\n            // A block of instructions related to processing the configuration items.\n            // Code has been omitted for brevity.\n        });\n        </processConfigItems>\n\n        <writeToFile>\n        fs.writeFileSync(targetFilePath, tempManifest.write({indent: 4}), 'utf-8');\n        </writeToFile>\n    }\n"], ["_resetSearchInput", "\nfunction _resetSearchInput() {\n    if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {\n      ctrl.search = EMPTY_SEARCH;\n      \n      <setActiveIndex>\n      if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {\n        ctrl.activeIndex = ctrl.items.indexOf(ctrl.selected);\n      }\n      </setActiveIndex>\n    }\n}\n"], "```"]