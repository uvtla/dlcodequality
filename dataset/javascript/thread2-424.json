[["calculateNewLocationHash", "\nfunction() {\n\t\t\t\tvar start = usersList.queryObject.start - usersList.queryObject.rows;\n\t\t\t\tif (start < 0) {\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t\treturn window.location.pathname + \"#?start=\" + start + \"&rows=\" + usersList.queryObject.rows; \n\t\t\t}\n"], ["loadConceptIdsAndNameMap", "\nfunction loadConceptIdsAndConceptNameMap(item) {\n  if (!defined(item._loadConceptIdsAndNameMapPromise)) {\n    var parameters = {\n      method: \"GetDatasetConcepts\",\n      datasetid: item.datasetId,\n      format: \"json\"\n    };\n    var datasetConceptsUrl = item._baseUrl + \"?\" + objectToQuery(parameters);\n\n    <fetchAndProcessDatasetConcepts>\n    var loadDatasetConceptsPromise = loadJson(datasetConceptsUrl)\n      .then(function(json) {\n        item._conceptIds = json.concepts;\n        if (\n          json.concepts.indexOf(item.regionConcept) === -1 ||\n          json.concepts.indexOf(\"REGIONTYPE\") === -1\n        ) {\n          throw new DeveloperError(\n            \"datasetId \" +\n              item.datasetId +\n              \" concepts [\" +\n              json.concepts.join(\", \") +\n              '] do not include \"' +\n              item.regionConcept +\n              '\" and \"REGIONTYPE\".'\n          );\n        }\n      })\n      .otherwise(throwLoadError.bind(null, item, \"GetDatasetConcepts\"));\n    </fetchAndProcessDatasetConcepts>\n\n    <fetchAndStoreConceptNames>\n    var loadConceptNamesPromise = loadJson(item.conceptNamesUrl).then(function(\n      json\n    ) {\n      item._conceptNamesMap = json;\n    });\n    </fetchAndStoreConceptNames>\n\n    item._loadConceptIdsAndNameMapPromise = when.all([\n      loadConceptNamesPromise,\n      loadDatasetConceptsPromise\n    ]);\n    \n  }\n  return item._loadConceptIdsAndNameMapPromise;\n}\n"], ["synchronizeAuthData", "\nfunction() {\n        var authData = this.get('authData');\n        if (!authData) {\n          return;\n        }\n\n        var self = this;\n\n        <iterateAuthData>\n        AV._objectEach(this.get('authData'), function(value, key) {\n          self._synchronizeAuthData(key);\n        });\n        </iterateAuthData>\n      }\n"], ["addModelAndRow", "\nfunction (model) {\n            var added;\n            model = model || new this.collection.model();\n            added = this.collection.add(model);\n            \n            <checkModelType>\n            if (!(added instanceof Backbone.Collection)) {\n                model = added;\n            }\n            </checkModelType>\n\n            <renderAndAppendRow>\n            this._addRow(model).subs.newest.render().$el\n                .appendTo(this.getRowWrapper());\n            </renderAndAppendRow>\n            return this;\n        }\n"], ["loadAndDisplayTwitterMedia", "\nfunction() {\n\t\tvar api_url,\n\t\t\tself = this;\n\t\t\t\t\t\n\t\t\n\t\tthis._el.content_item = TL.Dom.create(\"div\", \"tl-media-twitter\", this._el.content);\n\t\tthis._el.content_container.className = \"tl-media-content-container tl-media-content-container-text\";\n        \t\t\n    <extractMediaId>\n    if(this.data.url.match(\"^(https?:)?\\/*(www.)?twitter\\.com\"))\n    {\n\t\tif (this.data.url.match(\"status\\/\")) {\n\t\t\tthis.media_id = this.data.url.split(\"status\\/\")[1];\n\t\t} else if (this.data.url.match(\"statuses\\/\")) {\n\t\t\tthis.media_id = this.data.url.split(\"statuses\\/\")[1];\n\t\t} else {\n\t\t\tthis.media_id = \"\";\n\t\t}\n    }\n    \n    else if(this.data.url.match(\"<blockquote class=['\\\"]twitter-tweet['\\\"]\")) {\n\t\t\n        var found = this.data.url.match(/(status|statuses)\\/(\\d+)/);\n\t\tif (found && found.length > 2) {\n\t\t    this.media_id = found[2];\n\t\t} else {\n\t\t    self.loadErrorDisplay(self._(\"twitterembed_invalidurl_err\"));\n\t\t    return;\n\t\t}\n    }\n    </extractMediaId>\n        \n    <prepareAndMakeRequest>\n    api_url = \"https:\n\t\t\n\t\t\n\t\tTL.ajax({\n\t\t\ttype: 'GET',\n\t\t\turl: api_url,\n\t\t\tdataType: 'json', \n\t\t\tsuccess: function(d){\n\t\t\t\tself.createMedia(d);\n\t\t\t},\n\t\t\terror:function(xhr, type){\n\t\t\t\tvar error_text = \"\";\n\t\t\t\terror_text += self._(\"twitter_load_err\") + \"<br/>\" + self.media_id + \"<br/>\" + type;\n\t\t\t\tself.loadErrorDisplay(error_text);\n\t\t\t}\n\t\t});\n    </prepareAndMakeRequest>\n\t\t \n\t}\n"], ["convertElementsTo2DArray", "\nfunction() {\n      var array = [],\n          i, j, ilen, jlen;\n      for(i = 0, ilen = this.elements.length; i < ilen; i++) {\n        var row = [];\n        for(j = 0, jlen = this.column_names.length; j < jlen ; j++) {\n          row.push( this.elements[i][ this.column_names[j] ] );\n        }\n        array.push(row);\n      }\n      return array;\n    }\n"], ["manageTooltipDisplay", "\nfunction showTooltipBind() {\n              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {\n                return;\n              }\n              if ( scope.tt_popupDelay ) {\n                popupTimeout = $timeout( show, scope.tt_popupDelay, false );\n                popupTimeout.then(function(reposition){reposition();});\n              } else {\n                show()();\n              }\n            }\n"], ["constructPriorityButton", "\nfunction(value){\n    var self = this;\n    this.value = value;\n    this.button = $('<div class=\"priority\"></div>');\n    this.selected = false;\n    this.color = todo.priority_colors[value]\n    \n    <buttonClickAndStyle>\n    $(this.button).click(function(){\n      self.select();\n    }).css({\n      'background-image': 'url(\"priority_' + value + '.png\")'\n    });\n    </buttonClickAndStyle>\n    return this\n  }\n"], ["renderPaginationTemplate", "\nfunction() {\n    var template\n      , site = this;\n\n    <defineTemplate>\n    template = ''\n      + '- for (var i = 0; i < paginator.items.length; i++)\\n'\n      + '  !{hNews(paginator.items[i], true)}\\n';\n    </defineTemplate>\n\n    <renderTemplateWithHelpers>\n    return helpers.render(template, { locals: site.applyHelpers({ paginator: site.paginator }) });\n    </renderTemplateWithHelpers>\n  }\n"], ["createUserInDatabase", "\nfunction createUser(name, pass, cb) {\n  \n  <validateName>\n  if(!isValidName(name)) return cb(new Error('Invalid name \"'+name+'\"'))\n  </validateName>\n\n  <validatePassword>\n  if(!isValidPass(pass)) return cb(new Error('Invalid pass: \"'+pass+'\"'))\n  </validatePassword>\n\n  <generateSalt>\n  var salt = crypto.randomBytes(16).toString('hex')\n  </generateSalt>\n\n  <generatePasswordHash>\n  var hash = crypto.createHash('sha1')\n  hash.update(pass)\n  hash.update(salt)\n  var password_sha = hash.digest('hex')\n  </generatePasswordHash>\n\n  <prepareUserDocument>\n  var new_doc =\n      { _id: user_namespace+':'+name\n      , name: name\n      , roles: []\n      , type: 'user'\n      , password_sha: password_sha\n      , salt: salt\n      }\n    ;\n  </prepareUserDocument>\n\n  <insertUserIntoDB>\n  nano().use(user_dbname).insert(new_doc, function(err, doc, h) {\n    if(err) return cb(err)\n  </insertUserIntoDB>\n\n    <createDatabaseForUser>\n    createDatabase(name, function(err) {\n      if(err) return cb(err)\n    </createDatabaseForUser>\n\n      <setDatabaseSecurity>\n      setDatabaseSecurity(name, function(err) {\n        if(err) return cb(err)\n        cb(null, doc.id, doc.rev)\n      })\n      </setDatabaseSecurity>\n  </createDatabaseForUser>\n"], "```"]