[["toknam", "\nfunction toknam(code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n}\n"], ["warnIfGridRowColumnExists", "\nfunction warnIfGridRowColumnExists (decl, result) {\n  let rule = decl.parent\n  let decls = []\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (!/-end$/.test(d.prop) && !/^span/.test(d.value)) {\n      decls.push(d)\n    }\n  })\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(result,\n        `You already have a grid-area declaration present in the rule. ` +\n        `You should use either grid-area or ${ d.prop }, not both`)\n    })\n  }\n\n  return undefined\n}\n"], ["getDependency", "\nfunction getDependency(filepath) {\n    var bowerInfoStr = fs.readFileSync(filepath, {encoding: 'utf8'});\n    var bowerInfo = JSON.parse(bowerInfoStr);\n    return mapDependencyData(bowerInfo);\n}\n"], ["pickAttributes", "\nfunction pickAttributes(result, attributes) {\n  if (shouldIncludeAllAttributes(attributes)) {\n    attributes = function() { \n      return(true); \n    };\n  }\n  return(_.pick(result, attributes));\n}\n"], ["multiselectUpdate", "\nfunction() {\n  if (typeof this.options.selectAllValue === 'number') {\n    this.options.selectAllValue = this.options.selectAllValue.toString();\n  }\n\n  var alreadyHasSelectAll = this.hasSelectAll();\n\n  if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\n    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n\n    <insertSelectAllDivider>\n    if (this.options.includeSelectAllDivider) {\n      this.$ul.prepend($(this.options.templates.divider));\n    }\n    </insertSelectAllDivider>    \n\n    <createSelectAllElement>\n    var $li = $(this.options.templates.li);\n    $('label', $li).addClass(\"checkbox\");\n    if (this.options.enableHTML) {\n      $('label', $li).html(\" \" + this.options.selectAllText);\n    }\n    else {\n      $('label', $li).text(\" \" + this.options.selectAllText);\n    }\n    \n    if (this.options.selectAllName) {\n      $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\n    }\n    else {\n      $('label', $li).prepend('<input type=\"checkbox\" />');\n    }\n    </createSelectAllElement>\n\n    <configureAndAppendSelectAll>\n    var $checkbox = $('input', $li);\n    $checkbox.val(this.options.selectAllValue);\n\n    $li.addClass(\"multiselect-item multiselect-all\");\n    $checkbox.parent().parent().addClass('multiselect-all');\n\n    this.$ul.prepend($li);\n\n    $checkbox.prop('checked', false);\n    </configureAndAppendSelectAll>\n  }\n}\n"], ["concatFiles", "\nfunction concatFiles() {\n  return Promise.all(argv._.map(handleGlob)).then(globs => {\n    const files = globs.reduce((acc, cur) => acc.concat(cur), []);\n\n    if (\n      <validation>\n      (files.length < 2 && typeof argv.banner === 'undefined' && !argv.footer) ||\n      (files.length === 0 && (typeof argv.banner === 'undefined' || !argv.footer))\n      ) {\n      throw new Error(\n        chalk.bold.red('Require at least 2 file, banner or footer to concatenate. (\"ncat --help\" for help)\\n')\n      );\n      </validation>\n    });\n    <fileConcatenation>\n    return files.forEach(file => {\n      concat.add(file.file, file.content, file.map);\n    });\n    </fileConcatenation>\n  });\n}\n"], ["getConditions", "\nfunction getConditions (req) {\n  if (req.baucis.conditions === undefined) {\n    req.baucis.conditions = {};\n    if (req.body.name === undefined) {\n      req.baucis.conditions[this.findBy()] = req.body.id || req.body._id;\n    } else {\n      req.baucis.conditions.name = req.body.name;\n    }\n  }\n  return req.baucis.conditions;\n}\n"], ["createBundle", "\nfunction createBundle(skyPagesConfig, webpack) {\n  const webpackConfig = require('../config/webpack/build-public-library.webpack.config');\n  const config = webpackConfig.getWebpackConfig(skyPagesConfig);\n  return runCompiler(webpack, config);\n}\n"], ["fireCallback", "\nfunction fireCallback(callbackName) {\n  var data = [], len = arguments.length - 1;\n  while ( len-- > 0 ) data[ len ] = arguments[ len + 1 ];\n\n  <invokeGlobalCallback>\n  var globalCallbackValue;\n  if (globals[callbackName]) {\n    globalCallbackValue = globals[callbackName].apply(globals, data);\n  }\n  </invokeGlobalCallback>\n  \n  <invokeOptionCallback>\n  var optionCallbackValue;\n  if (options[callbackName]) {\n    optionCallbackValue = options[callbackName].apply(options, data);\n  }\n  </invokeOptionCallback>\n  \n  <determineReturnValue>\n  if (typeof globalCallbackValue !== 'boolean') { globalCallbackValue = true; }\n  if (typeof optionCallbackValue !== 'boolean') { optionCallbackValue = true; }\n  return (globalCallbackValue && optionCallbackValue);\n  </determineReturnValue>\n}\n"], ["createIndexObject", "\nfunction (excludeDisabled, caseSensitive, multiValue, sanitizeKeys) {\n  var obj = {}, \n      key = this._postman_listIndexKey,\n      sanitiseKeys = this._postman_sanitizeKeys || sanitizeKeys,\n      sensitive = !this._postman_listIndexCaseInsensitive || caseSensitive,\n      multivalue = this._postman_listAllowsMultipleValues || multiValue;\n      \n  this.each(function (member) {\n    <memberValidation>\n    if (!member || !member.hasOwnProperty(key) || (excludeDisabled && member.disabled) ||\n      (sanitiseKeys && !member[key])) {\n      return;\n    }\n    </memberValidation>\n\n    <consolidateIndexProperty>\n    var prop = sensitive ? member[key] : String(member[key]).toLowerCase();\n    if (multivalue && obj.hasOwnProperty(prop)) {\n      (!Array.isArray(obj[prop])) && (obj[prop] = [obj[prop]]);\n      obj[prop].push(member.valueOf());\n    }\n    else {\n      obj[prop] = member.valueOf();\n    }\n    </consolidateIndexProperty>\n  });\n\n  return obj;\n}\n"], "```\nWhile multiple steps are present, the function is SRP compliant because each step contributes to the cohesive responsibility of creating an index object from list members."]