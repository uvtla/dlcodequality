[["Controller", "\nfunction Controller (message) {\n  <validateMessage>\n  if (!(message instanceof Message)) throw new Error('message must be an instanceof Message');\n  </validateMessage>\n\n  <ensureInstance>\n  if (!(this instanceof Controller)) return new Controller(message);\n  </ensureInstance>\n\n  <debugActivity>\n  debug('new controller');\n  </debugActivity>\n\n  <initializeEventEmitter>\n  events.EventEmitter.call(this);\n  </initializeEventEmitter>\n\n  <assignMessageAndData>\n  this.message = message;\n  this.data = this.message.data;\n  </assignMessageAndData>\n}\n"], ["createDivWithSettings", "\nfunction (placeholder, _jsPlumb, ipco, ips) {\n  <createElement>\n  var n = jsPlumb.createElement(\"div\", { position : \"absolute\" });\n  </createElement>\n\n  <appendElement>\n  _jsPlumb.appendElement(n);\n  </appendElement>\n\n  <generateId>\n  var id = _jsPlumb.getId(n);\n  </generateId>\n\n  <setPosition>\n  jsPlumb.setPosition(n, ipco);\n  </setPosition>\n\n  <setDimensions>\n  n.style.width = ips[0] + \"px\";\n  n.style.height = ips[1] + \"px\";\n  </setDimensions>\n\n  <manageElement>\n  _jsPlumb.manage(id, n, true);\n  </manageElement>\n  \n  <updatePlaceholder>\n  placeholder.id = id;\n  placeholder.element = n;\n  </updatePlaceholder>\n}\n"], ["camelCase", "\nfunction camelCase(str) {\n  <sanitizeString>\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n  \n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n  \n  str = str.replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '').trim().toLowerCase();\n  </sanitizeString>\n\n  <convertToCamelCase>\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n      return b.trim() + c.toUpperCase();\n  });\n  </convertToCamelCase>\n  \n  return str;\n}\n"], ["WidgetConstructor", "\nfunction (cfg, ctxt) {\n  <constructWidget>\n  this.$Widget.constructor.apply(this, arguments);\n  </constructWidget>\n\n  <configurePrintOptions>\n  this._cssClassNames = ariaCoreTplClassLoader.addPrintOptions(this._cssClassNames, cfg.printOptions);\n  </configurePrintOptions>\n\n  <initializeProperties>\n  this._frame = null;\n  this._sizeConstraints = (!!cfg.minWidth || !!cfg.maxWidth || !!cfg.minHeight || !!cfg.maxHeight);\n  this._directInit = this._directInit || this._sizeConstraints;\n  </initializeProperties>\n}\n"], ["stripAnsi", "\nfunction($str, $checkColors)\n{\n    <checkAndStripPattern>\n    var $regex = new RegExp(REGEXP_PLAIN, 'gm');\n    var $match = $str.match($regex);\n\n    if (!!$match)\n    {\n        $str   = $str.substr($match[0].length);\n        $match = true;\n    }\n    else if ($checkColors !== false)\n    {\n        $regex = new RegExp(REGEXP_ANSI, 'gm');\n        $match = $str.match($regex);\n\n        if (!!$match)\n        {\n            $str   = $str.substr($match[0].length);\n            $match = true;\n        }\n    }\n    </checkAndStripPattern>\n    \n    <stripLeadingSpace>\n    if ($match && $str.substr(0, 1) === ' ')\n    {\n        $str = $str.substr(1);\n    }\n    </stripLeadingSpace>\n\n    return $str;\n}\n"], ["put", "\nfunction put(model, uri, data, locals) {\n  <initializeTiming>\n  const startTime = process.hrtime(),\n    timeoutLimit = TIMEOUT_CONSTANT * TIMEOUT_PUT_COEFFICIENT;\n  </initializeTiming>\n\n  <saveData>\n  return bluebird.try(() => {\n    return bluebird.resolve(model.save(uri, data, locals))\n      .then(resolvedData => {\n        if (!_.isObject(resolvedData)) {\n          throw new Error(`Unable to save ${uri}: Data from model.save must be an object!`);\n        }\n\n        return {\n          key: uri,\n          type: 'put',\n          value: JSON.stringify(resolvedData)\n        };\n      });\n  }).tap(() => {\n    const ms = timer.getMillisecondsSince(startTime);\n\n    if (ms > timeoutLimit * 0.5) {\n      log('warn', `slow put ${uri} ${ms}ms`);\n    }\n  }).timeout(timeoutLimit, `Module PUT exceeded ${timeoutLimit}ms: ${uri}`);\n  </saveData>\n}\n"], ["Fossa", "\nfunction Fossa(options) {\n  <fuseInternalFunctions>\n  this.fuse();\n  </fuseInternalFunctions>\n\n  <initializeWritableProperties>\n  this.writable('queue', []);\n  this.writable('plugins', {});\n  this.writable('connecting', false);\n  </initializeWritableProperties>\n\n  <initializeReadableProperties>\n  this.readable('options', configure(options || {}, this));\n  this.readable('Model', model(this));\n  this.readable('Collection', collection(this));\n  this.readable('mongo', mongo);\n  </initializeReadableProperties>\n\n  <initializeDatabaseConnection>\n  this.init(\n    this.options('hostname', 'localhost'),\n    this.options('port', 27017),\n    this.options\n  );\n  </initializeDatabaseConnection>\n}\n"], ["reg2bin", "\nfunction reg2bin(beg, end)\n{\n  <computeBin>\n  --end;\n  if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);\n  if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);\n  if (beg>>20 == end>>20) return ((1<<9)-1)/7 + (beg>>20);\n  if (beg>>23 == end>>23) return ((1<<6)-1)/7 + (beg>>23);\n  if (beg>>26 == end>>26) return ((1<<3)-1)/7 + (beg>>26);\n  return 0;\n  </computeBin>\n}\n"], ["generateJsonForMustache", "\nfunction generateJsonForMustache(msgObj) {\n  <createJsonMessage>\n  var msgJsonObj = {};\n  if (msgObj.type) {\n      msgJsonObj.type = \"'\" + msgObj.type + \"'\";\n  }\n  msgJsonObj.title = msgObj.title;\n  msgJsonObj.description = msgObj.description;\n  if (msgObj.needButtons) {\n      msgJsonObj.buttons = [{\n          \"id\": \"restart\",\n          \"value\": Strings.RESTART_BUTTON,\n          \"tIndex\": \"'0'\"\n      }, {\n          \"id\": \"later\",\n          \"value\": Strings.LATER_BUTTON,\n          \"tIndex\": \"'0'\"\n      }];\n      msgJsonObj.needButtons = msgObj.needButtons;\n  }\n  </createJsonMessage>\n  return msgJsonObj;\n}\n"], ["setTransform", "\nfunction setTransform() {\n  <assignMatrixValues>\n  var a = this.val;\n\n  if (arguments.length === 9) {\n    a[0] = arguments[0]; \n    a[1] = arguments[1]; \n    a[2] = arguments[2]; \n    a[3] = arguments[3]; \n    a[4] = arguments[4]; \n    a[5] = arguments[5]; \n    a[6] = arguments[6]; \n    a[7] = arguments[7]; \n    a[8] = arguments[8]; \n  } else if (arguments.length === 6) {\n    a[0] = arguments[0]; \n    a[1] = arguments[2]; \n    a[2] = arguments[4]; \n    a[3] = arguments[1]; \n    a[4] = arguments[3]; \n    a[5] = arguments[5]; \n    a[6] = 0; \n    a[7] = 0; \n    a[8] = 1; \n  }\n  </assignMatrixValues>\n\n  return this;\n}\n"], ""]