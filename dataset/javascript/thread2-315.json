[["eventRemoval", "\nfunction(type, listener, useCapture){\n    if (!this._eventTypes) { return; }\n    var state = this._eventTypes[type];\n    if (state) {\n        var listeners = state.listeners;\n        for (var i=0, len=listeners.length; i < len; i++) {\n            var l = listeners[i];\n            if (l && l.listener === listener && l.useCapture === useCapture) {\n                if (state.level !== 0) {\n                    listeners[i] = null;\n                    state.compact = true;\n                } else {\n                    listeners.splice(i, 1);\n                }\n                break;\n            }\n        }\n        if (listeners.length === 0) {\n            delete this._eventTypes[type];\n        }\n    }\n}\n"], ["setValueOrClear", "\nfunction(value) {\n    var data;\n\n    if (arguments.length === 0) {\n        data = this.selection.data(\"select2-data\");\n        if (data == undefined) data = null;\n        return data;\n    } else {\n        if (!value || value === \"\") {\n            this.clear();\n        } else {\n            this.opts.element.val(!value ? \"\" : this.id(value));\n            this.updateSelection(value);\n        }\n    }\n}\n"], ["mapSerialization", "\nfunction mapObject(key, value) {\n    var c = key.charAt(0);\n    if (c === \"_\" || c === \"$\") {\n        return undefined;\n    } else if (isArray(this) && key.match(INTRINSIC)) {\n        return undefined;\n    } else if (isType(value)) {\n        return parse(value);\n    } else if (gui.Type.isComplex(value)) {\n        switch (value.constructor) {\n            case Object:\n            case Array:\n                return value;\n        }\n        return undefined;\n    } else {\n        if (isType(this)) {\n            var base = this.constructor.prototype;\n            var desc = Object.getOwnPropertyDescriptor(base, key);\n            if (desc && (desc.set || desc.get)) {\n                return undefined;\n            }\n        }\n        return value;\n    }\n}\n"], ["addFieldDefinition", "\nfunction addField(fields) {\n    for (const fieldName in fields) {\n        if (reservedFieldNames.indexOf(fieldName) >= 0) {\n            throw new InvalidDefinitionError(this.name, 'field %s is reserved name', fieldName);\n        }\n        const field = Type.createField(this, fieldName, fields[fieldName]);\n        if (field.props.unique && field.props.category === 'entity') {\n            let unique = field.props.unique,\n              message = `${fieldName} is unique`;\n            if (typeof unique === 'string') message = unique;\n            const index = {\n                name: `${this.table}_${field.props.column}`,\n                fields: [fieldName], unique: true, message,\n            };\n            this.indexes.push(index);\n        }\n\n        this.fields[fieldName] = field;\n    }\n}\n"], ["versionManagement", "\nfunction bumpVersion(files, bumpType) {\n    <logging>\n    status('Bump', bumpType, 'version to files:', files.join(' '));\n    </logging>\n    if (config.dryRun) return '[not available in dry run]';\n\n    var newVersion;\n    var originalVersion;\n    files.forEach(function(fileName) {\n        <fileProcessing>\n        var filePath = path.join(projectRoot, fileName);\n\n        var data = JSON.parse(fs.readFileSync(filePath));\n        originalVersion = data.version;\n        var currentVersion = data.version;\n        if (!semver.valid(currentVersion)) {\n            var msg = 'Invalid version ' + currentVersion +\n                ' in file ' + fileName;;\n            var err = new Error(msg);\n            throw err;\n        }\n\n        if (S(currentVersion).endsWith(config.devSuffix)) {\n            currentVersion = S(currentVersion).chompRight(config.devSuffix).s;\n        }\n\n        if (bumpType === 'dev') {\n            newVersion = currentVersion + config.devSuffix;\n        } else {\n            newVersion = semver.inc(currentVersion, bumpType);\n        }\n        data.version = newVersion;\n\n        var content = JSON.stringify(data, null, config.indentation);\n        fs.writeFileSync(filePath, content);\n        </fileProcessing>\n\n        <logging>\n        status('Bump', originalVersion, '->', newVersion, 'in',\n            fileName);\n        </logging>\n    });\n\n    return newVersion;\n}\n"], ["eventModification", "\nfunction encasedCallback( e, namespace, triggeredElement ){\n    var result;\n\n    if( e._namespace && e._namespace !== namespace ) {\n        return;\n    }\n\n    e.data = data;\n    e.namespace = e._namespace;\n\n    <preventDefaultSetup>\n    var returnTrue = function(){\n        return true;\n    };\n\n    e.isDefaultPrevented = function(){\n        return false;\n    };\n\n    var originalPreventDefault = e.preventDefault;\n    var preventDefaultConstructor = function(){\n        if( originalPreventDefault ) {\n            return function(){\n                e.isDefaultPrevented = returnTrue;\n                originalPreventDefault.call(e);\n            };\n        } else {\n            return function(){\n                e.isDefaultPrevented = returnTrue;\n                e.returnValue = false;\n            };\n        }\n    };\n    </preventDefaultSetup>\n\n    e.target = triggeredElement || e.target || e.srcElement;\n    e.preventDefault = preventDefaultConstructor();\n    e.stopPropagation = e.stopPropagation || function () {\n        e.cancelBubble = true;\n    };\n\n    result = originalCallback.apply(this, [ e ].concat( e._args ) );\n\n    if( result === false ){\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    return result;\n}\n"], ["customEventConstructor", "\nfunction ErrorEvent(title, message, data) {\n    this.Event_constructor(\"error\");\n    this.title = title;\n    this.message = message;\n    this.data = data;\n}\n"], ["insertModeInitialization", "\nfunction InsertMode(viMode) {\n    var view = viMode.getView();\n    mKeyMode.KeyMode.call(this, view);\n    this.viMode = viMode;\n    this._createActions(view);\n}\n"], ["propertyProcessing", "\nfunction(value, type, property, fields, object) {\n    if (_.isUndefined(value) || _.isNull(value)) {\n        return value;\n    }\n    var params = {};\n\n    if (_.isArray(type)) {\n        <parameterExtraction>\n        params = type[1] || {};\n        type   = type[0];\n        </parameterExtraction>\n    }\n\n    <typeValidation>\n    if (!(type in this._types)) {\n        throw new Error('Property type \"' + type + '\" does not exist!');\n    }\n    </typeValidation>\n\n    return this._types[type].call(this, value, params, property, fields, object);\n}\n"], ["computeBackOff", "\nfunction computeBackOff(retries) {\n    var t = Math.ceil(minBackOff * Math.pow(backOffMultiplier, retries - 1));\n    if(t > maxBackOff) {\n      t = maxBackOff;\n    }\n    return t;\n}\n"], "```"]