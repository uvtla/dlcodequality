[["isLongValue", "\nfunction isLongValue(obj) {\n    return _.isObject(obj) && obj instanceof Number && 'longValue' in obj && _.keys(obj).length === 1;\n}\n"], ["PeerAvailabilityStatus", "\nfunction PeerAvailabilityStatus (peer) {\n  this.peerIdentifier = peer.peerIdentifier;\n  this.connectionType = peer.connectionType;\n  this.peerAvailable = Boolean(peer.peerAvailable);\n  if (this.peerAvailable) {\n    this.generation = peer.generation;\n    this.newAddressPort = peer.newAddressPort;\n  } else {\n    this.generation = null;\n    this.newAddressPort = null;\n  }\n}\n"], ["isUseStrictPrologueDirective", "\nfunction isUseStrictPrologueDirective(node) {\n  var nodeText = ts.getTextOfNodeFromSourceText(file.text, node.expression);\n  \n  return nodeText === '\"use strict\"' || nodeText === \"'use strict'\";\n}\n"], ["rewriteCookies", "\nfunction rewriteCookies(rawCookie) {\n  var objCookie = (function() {\n      \n      var obj = {};\n      var pairs = rawCookie.split(/; */);\n\n      pairs.forEach(function(pair) {\n          var eqIndex = pair.indexOf(\"=\");\n\n          \n          if (eqIndex < 0) {\n              return;\n          }\n\n          var key = pair.substr(0, eqIndex).trim();\n          obj[key] = pair.substr(eqIndex + 1, pair.length).trim();\n      });\n\n      return obj;\n  })();\n\n  var pairs = Object.keys(objCookie)\n      .filter(function(item) {\n          return item.toLowerCase() !== \"domain\";\n      })\n      .map(function(key) {\n          return key + \"=\" + objCookie[key];\n      });\n\n  if (rawCookie.match(/httponly/i)) {\n      pairs.push(\"HttpOnly\");\n  }\n\n  return pairs.join(\"; \");\n}\n"], ["copyTemplateFiles", "\nfunction copyTemplateFiles (project_path, project_name, project_template_dir, package_name) {\n  <fileOperations>\n  var r = path.join(project_path, project_name);\n\n  shell.rm('-rf', path.join(r + '.xcodeproj'));\n  shell.cp('-rf', path.join(project_template_dir, '__TEMP__.xcodeproj'), project_path);\n  shell.mv('-f', path.join(project_path, '__TEMP__.xcodeproj'), path.join(r + '.xcodeproj'));\n\n  shell.rm('-rf', path.join(project_path, project_name + '.xcworkspace'));\n  shell.cp('-rf', path.join(project_template_dir, '__TEMP__.xcworkspace'), project_path);\n  shell.mv('-f', path.join(project_path, '__TEMP__.xcworkspace'), path.join(r + '.xcworkspace'));\n  shell.mv('-f', path.join(r + '.xcworkspace', 'xcshareddata', 'xcschemes', '__PROJECT_NAME__.xcscheme'), path.join(r + '.xcworkspace', 'xcshareddata', 'xcschemes', project_name + '.xcscheme'));\n\n  shell.rm('-rf', r);\n  shell.cp('-rf', path.join(project_template_dir, '__PROJECT_NAME__'), project_path);\n  shell.mv('-f', path.join(project_path, '__PROJECT_NAME__'), r);\n\n  shell.mv('-f', path.join(r, '__PROJECT_NAME__-Info.plist'), path.join(r, project_name + '-Info.plist'));\n  shell.mv('-f', path.join(r, '__PROJECT_NAME__-Prefix.pch'), path.join(r, project_name + '-Prefix.pch'));\n  shell.mv('-f', path.join(r, 'gitignore'), path.join(r, '.gitignore'));\n\n  </fileOperations>\n\n  <templateStringReplacement>\n  var project_name_xml_esc = xmlescape(project_name);\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_xml_esc, path.join(r + '.xcworkspace', 'contents.xcworkspacedata'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_xml_esc, path.join(r + '.xcworkspace', 'xcshareddata', 'xcschemes', project_name + '.xcscheme'));\n\n  var project_name_esc = project_name.replace(/&/g, '\\\\&');\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r + '.xcodeproj', 'project.pbxproj'));\n  shell.sed('-i', /__PROJECT_ID__/g, package_name, path.join(r + '.xcodeproj', 'project.pbxproj'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, 'Classes', 'AppDelegate.h'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, 'Classes', 'AppDelegate.m'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, 'Classes', 'MainViewController.h'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, 'Classes', 'MainViewController.m'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, 'main.m'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, project_name + '-Info.plist'));\n  shell.sed('-i', /__PROJECT_NAME__/g, project_name_esc, path.join(r, project_name + '-Prefix.pch'));\n  </templateStringReplacement>\n}\n"], ["propertySetting", "\nfunction(property, param, value) {\n    var params = {};\n\n    <parameterHandling>\n    if (!_.isUndefined(value)) {\n        params[param] = value;\n    }\n    else if (_.isObject(param)) {\n        _.extend(params, param);\n    }\n    </parameterHandling>\n\n    <propertyExtension>\n    if (!(property in this.__properties)) {\n        this.__properties[property] = {};\n    }\n\n    _.extend(this.__properties[property], params);\n    </propertyExtension>\n\n    return this;\n}\n"], ["loadLocalFile", "\nasync function loadLocalFile() {\n    \n    <bigQueryClientInitialization>\n    const bigqueryClient = new BigQuery();\n    </bigQueryClientInitialization>\n\n    <bigQueryDataLoading>\n    const [job] = await bigqueryClient\n      .dataset(datasetId)\n      .table(tableId)\n      .load(filename);\n    </bigQueryDataLoading>\n\n    console.log(`Job ${job.id} completed.`);\n\n    <errorHandling>\n    const errors = job.status.errors;\n    if (errors && errors.length > 0) {\n      throw errors;\n    }\n    </errorHandling>\n}\n"], ["htmlGeocode", "\nfunction() {\n  this.writeDebug('htmlGeocode',arguments);\n  var _this = this;\n\n  <sessionStorageCheck>\n  if (_this.settings.sessionStorage === true && window.sessionStorage && window.sessionStorage.getItem('myGeo')){\n      _this.writeDebug('Using Session Saved Values for GEO');\n      _this.autoGeocodeQuery(JSON.parse(window.sessionStorage.getItem('myGeo')));\n      return false;\n  }\n  </sessionStorageCheck>\n  <geolocationCheck>\n  else if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position){\n          _this.writeDebug('Current Position Result');\n          \n          <positionProcessing>\n          var pos = {\n              coords: {\n                  latitude : position.coords.latitude,\n                  longitude: position.coords.longitude,\n                  accuracy : position.coords.accuracy\n              }\n          };\n          </positionProcessing>\n\n          <sessionStorageUpdate>\n          if (_this.settings.sessionStorage === true && window.sessionStorage) {\n              window.sessionStorage.setItem('myGeo',JSON.stringify(pos));\n          }\n          </sessionStorageUpdate>\n\n          <callbackExecution>\n          if (_this.settings.callbackAutoGeoSuccess) {\n              _this.settings.callbackAutoGeoSuccess.call(this, pos);\n          }\n          </callbackExecution>\n\n          _this.autoGeocodeQuery(pos);\n      }, function(error){\n          _this._autoGeocodeError(error);\n      });\n  }\n  </geolocationCheck>\n}\n"], ["requestJson", "\nfunction requestJson(options, callback) {\n  <protocolDetermination>\n  const proto = options.protocol === 'https:' ? https\n    : options.protocol === 'http:' ? http\n      : null;\n  if (!proto) {\n    callback(\n      new Error(`Unsupported protocol \"${options.protocol}\" for validator URL`)\n    );\n    return;\n  }\n  </protocolDetermination>\n\n  <httpRequestCreation>\n  const req = proto.request(options)\n    .once('error', callback)\n    .once('response', (res) => {\n      res.on('error', callback);\n      const bodyData = [];\n      res.on('data', (data) => { bodyData.push(data); });\n      res.on('end', () => {\n        const resBody = Buffer.concat(bodyData);\n        let err, resBodyObj;\n        try {\n          resBodyObj = JSON.parse(resBody.toString());\n        } catch (errJson) {\n          err = new SyntaxError(\n            `Error parsing server response as JSON: ${errJson.message}`\n          );\n        }\n\n        if (res.statusCode >= 300) {\n          let errMessage = `HTTP ${res.statusCode}`;\n          if (res.statusMessage) {\n            errMessage += `: ${res.statusMessage}`;\n          }\n          err = new Error(errMessage);\n        }\n\n        if (err) {\n          err.statusCode = res.statusCode;\n          err.statusMessage = res.statusMessage;\n          err.headers = res.headers;\n          err.trailers = res.trailers;\n          err.body = resBodyObj !== undefined ? resBodyObj : resBody;\n          callback(err);\n        } else {\n          callback(null, resBodyObj);\n        }\n      });\n    });\n  </httpRequestCreation>\n\n  <requestBodyHandling>\n  const {body} = options;\n  if (typeof body === 'string' || Buffer.isBuffer(body)) {\n    req.end(body);\n  } else {\n    body.on('error', (err) => {\n      req.abort();\n      callback(err);\n    });\n    body.pipe(req);\n  }\n  </requestBodyHandling>\n}\n"], ["FacePainter", "\nfunction FacePainter(canvas, settings) {\n\n        \n        this.canvas = new W.Canvas(canvas);\n\n        \n        this.scaleX = canvas.width / ChernoffFaces.width;\n\n        \n        this.scaleY = canvas.height / ChernoffFaces.heigth;\n\n        \n        this.face = null;\n}\n"], "```"]