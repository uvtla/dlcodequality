[["heuristic", "\nfunction heuristic() {\n    if (this.type === typeEnum.unit) {\n      \n      return Math.max(0, this.cache.size - this.capacity)\n    } else if (this.type === typeEnum.heap) {\n      if (getHeapSize() >= this.capacity) {\n        console.log('LRU HEURISTIC heap:', getHeapSize())\n        \n        return this.cache.size >> 1\n      } else {\n        return 0\n      }\n    } else {\n      console.error(`Unknown heuristic '${this.type}' for LRU cache.`)\n      return 1\n    }\n}\n"], ["getSelector", "\nfunction getSelector(node) {\n  var selector = arguments.length <= 1 || arguments[1] === undefined ? [node.name] : arguments[1];\n\n  <constructSelector>\n  var parent = node.parent;\n  if (parent) {\n    var children = parent.children;\n    var matches = children.filter(function (child) {\n      return child.name === node.name;\n    });\n    if (matches.length > 1) {\n      for (var i = 0, l = matches.length; i < l; i++) {\n        if (matches[i] === node) {\n          selector[0] = selector[0] + ':nth-of-type(' + (i + 1) + ')';\n          break;\n        }\n      }\n    }\n    selector.unshift(parent.name);\n  }\n  </constructSelector>\n\n  return parent && parent.parent ? getSelector(parent, selector) : selector.join(' > ');\n}\n"], ["isIgnoredNode", "\nfunction isIgnoredNode(node, options) {\n  <checkForIgnoredConditions>\n  if (node.nodeType == 8) {\n    return true;\n  } else if (node.nodeType == 3) {\n    <examineParentNode>\n    if (node.parentNode && /^(script|style)$/i.test(node.parentNode.tagName)) {\n      return true;\n    }\n    </examineParentNode>\n\n    <checkForWhitespace>\n    if (options.ignoreWhiteSpace && !/[^\\r\\n\\t ]/.test(node.data)\n            && (isUnwrappable(node.previousSibling, options) || isUnwrappable(node.nextSibling, options))) {\n      return true;\n    }\n    </checkForWhitespace>\n  }\n  </checkForIgnoredConditions>\n  \n  return false;\n}\n"], ["positionMatchDeep", "\nfunction (pos) {\n  if (!this.range.inside(pos)) {\n    return null;\n  }\n\n  <matchChildren>\n  for (var i = 0, il = this.children.length, m; i < il; i++) {\n    m = this.children[i].matchDeep(pos);\n    if (m) {\n      return m;\n    }\n  };\n  </matchChildren>\n\n  return this.parent ? this : null;\n}\n"], ["decode", "\nfunction decode (data, start, end, encoding) {\n  <validateData>\n  if (data == null || data.length === 0) {\n    return null\n  }\n  </validateData>\n\n  <inferEncoding>\n  if (typeof start !== 'number' && encoding == null) {\n    encoding = start\n    start = undefined\n  }\n\n  if (typeof end !== 'number' && encoding == null) {\n    encoding = end\n    end = undefined\n  }\n  </inferEncoding>\n\n  <prepareDecoding>\n  decode.position = 0\n  decode.encoding = encoding || null\n\n  decode.data = !(Buffer.isBuffer(data))\n    ? Buffer.from(data)\n    : data.slice(start, end)\n\n  decode.bytes = decode.data.length\n  </prepareDecoding>\n\n  return decode.next()\n}\n"], ["resetElementOnTransitionEnd", "\nfunction resetElementOnTransitionEnd(event) {\n  event.target.style.transition = '';\n  event.target.style.pointerEvents = '';\n  <removeEventListener>\n  event.target.removeEventListener('transitionend', resetElementOnTransitionEnd);\n  </removeEventListener>\n}\n"], ["isolateScope", "\nfunction isolateScope(model, scope, attrs) {\n    model = model || {};\n    var me = this;\n\n    if (!scope) { return; }\n\n    <assignScopeValues>\n    _.each(scope, function (type, name) {\n        var attrName = me.pancakes.utils.splitCamelCase(name).join('-');\n        var value = attrs[attrName];\n\n        if (type === '=') {\n            model[name] = me.pancakes.utils.getNestedValue(model, value);\n        }\n        else if (type === '@') {\n            model[name] = value;\n        }\n    });\n    </assignScopeValues>\n}\n"], ["search", "\nfunction search (){\n    var replaced = 0\n    var scripts = document.querySelectorAll('script')\n    var script\n    \n    <replaceScriptTags>\n    for (var i = 0; i < scripts.length; i++) {\n      script = scripts[i]\n      if (!script.src) continue\n      if (/\\/slackin\\.js(\\?.*)?$/.test(script.src)) {\n        replace(script)\n        return true\n      }\n    }\n    </replaceScriptTags>\n}\n"], ["removeSuffixes", "\nfunction removeSuffixes(){\n  <processSuffixRules>\n  for(var i in suffix_rules$1){\n    resultObj = suffix_rules$1[i](current_word);\n    if(resultObj.removal!=undefined){\n      removals.push(resultObj.removal);\n    }\n    current_word = resultObj.current_word;\n\n    if(find(current_word))\n      return current_word;\n  }\n  </processSuffixRules>\n}\n"], ["getNeedLoad", "\nfunction getNeedLoad (resource) {\n  <checkLoadedResources>\n  if (JSON.stringify(loadedResource) == '{}') {\n    getLoadedScript();\n  }\n  </checkLoadedResources>\n\n  var needLoad = [];\n  \n  <determineResourcesToLoad>\n  if(typeof resource === \"string\") {\n    needLoad = [resource]\n  } else if(Object.prototype.toString.call(resource) === \"[object Array]\") {\n    for (var i = 0; i < resource.length; i++) {\n      if(loadedResource[resource[i]] !== LOADED) {\n        needLoad.push(resource[i]);\n      }\n    };\n  }\n  </determineResourcesToLoad>\n\n  if(needLoad.length === 0) {\n    needLoad = null;\n  }\n\n  return needLoad;\n}\n"], "```"]