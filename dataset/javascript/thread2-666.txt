```javascript
<initializeComponent>
function () {
  <applyBaseInitialization>
  base.init.apply(this, arguments);
  </applyBaseInitialization>

  <setupElementAndBindings>
  var element = this.get_element();

  var amap = AtomUI.attributeMap(element, /^atom\-(name|local\-scope)$/gi);

  var aname = amap["atom-name"];
  if (!aname) {
    var eid = element.id;
    if (!/^\_\_waID/.test(eid)) {
      aname = element.id;
    }
  } else {
    element.removeAttributeNode(aname.node);
    aname = aname.value;
  }
  if (aname) {
    if (/^(app|window|owner|scope|localScope|parent)$/gi.test(aname))
      throw new Error("Invalid Control Name '" + aname + "'");
    var s = this.get_scope();
    AtomBinder.setValue(s, aname, this);
    this._name = aname;
  }

  ls = amap["atom-local-scope"];
  if (ls) {
    this._localScope = new AtomScope(this, this.get_scope(), atomApplication);
    this._scope = this._localScope;
    if (this._name) {
      this._localScope[this._name] = this;
    }
    element.removeAttributeNode(ls.node);
  }

  var st = this._scopeTemplates;
  if (st) {
    var s = this.get_scope();
    for (var i in st) {
      var t = st[i];
      AtomBinder.setValue(s, i, t);
    }
  }
  </setupElementAndBindings>

  <schedulePropertyInitialization>
  var _this = this;
  WebAtoms.dispatcher.callLater(function () {
    _this.initProperties();
  });
  </schedulePropertyInitialization>

  <initChildComponents>
  this.initChildren(this._element);
  </initChildComponents>

  <schedulePostInitialization>
  WebAtoms.dispatcher.callLater(function () {
    _this.onInitialized();
  });
  </schedulePostInitialization>
}
</initializeComponent>

<validateASTStructure>
function validate(ast) {
  if (!ast || !ast.inParams || !ast.tasks || !ast.outTask) return [AST_IS_OBJECT];
  var errors = [];
  <performValidations>
  errors = errors.concat(validateInParams(ast.inParams));
  errors = errors.concat(validateTasks(ast.tasks));
  errors = errors.concat(validateTaskNamesUnique(ast.tasks));
  errors = errors.concat(taskUtil.validateOutTask(ast.outTask));
  errors = errors.concat(validateLocals(ast.locals));
  </performValidations>
  if (errors.length === 0) { 
    <performAdditionalValidations>
    if (ast.outTask.type !== 'finalcbFirst') errors = errors.concat(validateOuputsUnique(ast.tasks));
    errors = errors.concat(taskUtil.validateLocalFunctions(ast.inParams, ast.tasks, ast.locals));
    errors = errors.concat(validateNoMissingNames(ast));
    </performAdditionalValidations>
  }
  return errors;
}
</validateASTStructure>

<queryElement>
function query (el) {
  <selectOrGenerateElement>
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
  </selectOrGenerateElement>
}
</queryElement>

<chunkAndAppendText>
function (clip, sData) {
  var asData = this._fnChunkData(sData, 8192);

  clip.clearText();
  <appendChunks>
  for (var i = 0, iLen = asData.length; i < iLen; i++) {
    clip.appendText(asData[i]);
  }
  </appendChunks>
}
</chunkAndAppendText>

<nameMatchCheck>
function() {
  var name = this.getName();
  <checkNameAgainstArguments>
  for (var i = 0; i < arguments.length; i++) {
    if (arguments[i] == name)
      return true;
  }
  </checkNameAgainstArguments>
  return false;
}
</nameMatchCheck>

<determineMaxHeightByVersion>
function determineMaxHeight(json, version) {
  var maxHeight = 0;

  <checkVersionAndExtractMaxHeight>
  if (version == '1.3.0') {
    if (json.WMS_Capabilities.Service) {
      if (json.WMS_Capabilities.Service[0]) {
        if (json.WMS_Capabilities.Service[0].MaxHeight) {
          if (json.WMS_Capabilities.Service[0].MaxHeight[0]) {
            maxHeight = json.WMS_Capabilities.Service[0].MaxHeight[0];
          }
        }
      }
    }
  }
  </checkVersionAndExtractMaxHeight>

  return maxHeight;
}
</determineMaxHeightByVersion>

<generateLegendItems>
function () {
  var axis = this,
    chart = this.chart,
    legendItems = this.legendItems,
    legendOptions = chart.options.legend,
    valueDecimals = legendOptions.valueDecimals,
    valueSuffix = legendOptions.valueSuffix || '',
    name;

  <buildLegendItems>
  if (!legendItems.length) {
    each(this.dataClasses, function (dataClass, i) {
      var vis = true,
        from = dataClass.from,
        to = dataClass.to;

      
      name = '';
      if (from === UNDEFINED) {
        name = '< ';
      } else if (to === UNDEFINED) {
        name = '> ';
      }
      if (from !== UNDEFINED) {
        name += Highcharts.numberFormat(from, valueDecimals) + valueSuffix;
      }
      if (from !== UNDEFINED && to !== UNDEFINED) {
        name += ' - ';
      }
      if (to !== UNDEFINED) {
        name += Highcharts.numberFormat(to, valueDecimals) + valueSuffix;
      }
      

      
      legendItems.push(extend({
        chart: chart,
        name: name,
        options: {},
        drawLegendSymbol: LegendSymbolMixin.drawRectangle,
        visible: true,
        setState: noop,
        setVisible: function () {
          vis = this.visible = !vis;
          each(axis.series, function (series) {
            each(series.points, function (point) {
              if (point.dataClass === i) {
                point.setVisible(vis);
              }
            });
          });

          chart.legend.colorizeItem(this, vis);
        }
      }, dataClass));
    });
  }
  </buildLegendItems>
  return legendItems;
}
</generateLegendItems>

<constrainWithinBounds>
function constrain(value, max, size) {
  <applyConstraints>
  if (value < 0) {
    return 0;
  }

  if (value + size > max) {
    value = max - size;
    return value < 0 ? 0 : value;
  }
  </applyConstraints>

  return value;
}
</constrainWithinBounds>

<parseFormula>
function _parseFormula(self, currentString, currentPrecedence, currentJSON) {
  <validateInitialCondition>
  if (!currentString.length && !currentJSON) {
    throw new SyntaxError('Invalid formula! Unexpected end of input.');
  }
  </validateInitialCondition>

  <parseInitialSubformula>
  const parsedHead =
    currentJSON ? { json: currentJSON, remainder: currentString } :
      _parseUnarySubformula(self, currentString) ||
      _parseParenthesizedSubformula(self, currentString) ||
      _parseVariable(self, currentString);
  </parseInitialSubformula>

  if (!parsedHead) {
    throw new SyntaxError('Invalid formula! Could not find an initial subformula.');
  }

  <parseBinarySubformulaAndRecurse>
  const parsedBinary = _parseBinarySubformula(self, parsedHead.remainder, currentPrecedence, parsedHead.json);
  if (!parsedBinary) {
    
    return parsedHead;
  }

  
  return _parseFormula(self, parsedBinary.remainder, currentPrecedence, parsedBinary.json);
  </parseBinarySubformulaAndRecurse>
}
</parseFormula>

<splitAndPushLines>
function breaklines() {
  return through2.obj(function(chunk, _, cb) {
    <splitChunkIntoLines>
    String(chunk)
      .split('\n')
      .filter(Boolean)
      .forEach(line => this.push(line));
    </splitChunkIntoLines>
    cb();
  });
}
</splitAndPushLines>
```