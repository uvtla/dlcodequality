[["handleMouseWheelEvent", "\nfunction(e, win) {\n  <extractEventDetails>\n  var event = $.event.get(e, win);\n  var wheel = $.event.getWheel(event);\n  </extractEventDetails>\n  that.handleEvent('MouseWheel', e, win, wheel);\n}\n"], ["validateAndCleanupProperties", "\nfunction(propertyNames) {\n  for (var name in propertyNames) {\n    <checkPropertyNameAgainstBlacklist>\n    if (this.propertyNameBlacklist[name]) {\n      console.warn('Cannot define property \"' + name + '\" for element \"' + \n        this.name + '\" because it has the same name as an HTMLElement ' + \n        'property, and not all browsers support overriding that. ' + \n        'Consider giving it a different name.');\n      \n      delete propertyNames[name];\n    }\n    </checkPropertyNameAgainstBlacklist>\n  }\n}\n"], ["lowerCaseObjectKeys", "\nfunction lowerCaseObjectKeys(obj) {\n  for (const key of Object.getOwnPropertyNames(obj)) {\n    const name = key.toLowerCase();\n    if (name !== key) {\n      obj[name] = obj[key];\n      delete obj[key];\n    }\n  }\n  return obj;\n}\n"], ["generateDivCompliant", "\nfunction generateDiv(classesOrAttrs, content) {\n  return '<div ' + (classesOrAttrs ? type(classesOrAttrs) == TYPES.s ?\n    'class=\"' + classesOrAttrs + '\"' :\n    (function() {\n      var key;\n      var attrs = '';\n      if (FRAMEWORK.isPlainObject(classesOrAttrs)) {\n        for (key in classesOrAttrs)\n          attrs += (key === 'className' ? 'class' : key) + '=\"' + classesOrAttrs[key] + '\" ';\n      }\n      return attrs;\n    })() :\n    _strEmpty) +\n  '>' +\n  (content ? content : _strEmpty) +\n  '</div>';\n}\n"], ["writeFlagFileCompliant", "\nfunction writeFlagFile(packageInstallFolder) {\n  try {\n    const flagFilePath = path.join(packageInstallFolder, INSTALLED_FLAG_FILENAME);\n    fs.writeFileSync(flagFilePath, process.version);\n  }\n  catch (e) {\n    throw new Error(`Unable to create installed.flag file in ${packageInstallFolder}`);\n  }\n}\n"], ["parseArguments", "\nfunction start(inp) {\n  var res = parseArgumentList(inp.skipWs());\n  \n  <checkForRemainingBuffer>\n  if (inp.skipWs().buffer) syntaxError(inp);\n  </checkForRemainingBuffer>\n  return res;\n}\n"], ["lookupEntryCompliant", "\nfunction(that, key) {\n  \n  var index = fastKey(key), entry;                                                        \n  if (index !== 'F') return that._i[index];                                                        \n  \n  for (entry = that._f; entry; entry = entry.n) {                                                      \n    if (entry.k == key) return entry;                                                                  \n  }                                                                                                  \n}\n"], ["syncPeerNonCompliant", "\nfunction syncPeer(node) {\n  \n  const remotePeer = Peer.fromJSON({});\n  let remoteJsonPeer = {};\n\n  return co(function* () {\n    <retrieveAndAssignPeerData>\n    const json = yield node.getPeer();\n    remotePeer.version = json.version\n    remotePeer.currency = json.currency\n    remotePeer.pub = json.pub\n    remotePeer.endpoints = json.endpoints\n    remotePeer.blockstamp = json.block\n    remotePeer.signature = json.signature\n    const entry = remotePeer.getRawUnsigned();\n    const signature = dos2unix(remotePeer.signature);\n    \n    if (!(entry && signature)) {\n      throw 'Requires a peering entry + signature';\n    }\n    </retrieveAndAssignPeerData>\n\n    <updateRemoteJsonPeer>\n    remoteJsonPeer = json;\n    remoteJsonPeer.pubkey = json.pubkey;\n    let signatureOK = PeeringService.checkPeerSignature(remoteJsonPeer);\n    if (!signatureOK) {\n      watcher.writeStatus('Wrong signature for peer #' + remoteJsonPeer.pubkey);\n    }\n    </updateRemoteJsonPeer>\n\n    <submitPeerData>\n    try {\n      yield PeeringService.submitP(remoteJsonPeer);\n    } catch (err) {\n      if (err.indexOf !== undefined && err.indexOf(constants.ERRORS.NEWER_PEER_DOCUMENT_AVAILABLE.uerr.message) !== -1 && err != constants.ERROR.PEER.UNKNOWN_REFERENCE_BLOCK) {\n        throw err;\n      }\n    }\n    </submitPeerData>\n\n  });\n}\n"], ["parseNthDayCompliant", "\nfunction parseNthDay(val) {\n  var atoms = val.split('#');\n  if (atoms.length > 1) {\n    var nthValue = +atoms[atoms.length - 1];\n    if (/,/.test(val)) {\n      throw new Error('Constraint error, invalid dayOfWeek `#` and `,` ' + 'special characters are incompatible');\n    }\n    if (/\\//.test(val)) {\n      throw new Error('Constraint error, invalid dayOfWeek `#` and `/` ' + 'special characters are incompatible');\n    }\n    if (/-/.test(val)) {\n      throw new Error('Constraint error, invalid dayOfWeek `#` and `-` ' + 'special characters are incompatible');\n    }\n    if (atoms.length > 2 || safeIsNaN(nthValue) || (nthValue < 1 || nthValue > 5)) {\n      throw new Error('Constraint error, invalid dayOfWeek occurrence number (#)');\n    }\n    \n    options.nthDayOfWeek = nthValue;\n    return atoms[0];\n  }\n  return val;\n}\n"], ["getMeanCompliant", "\nfunction getMean(sample) {\n  return (_.reduce(sample, function(sum, x) {\n    return sum + x;\n  }) / sample.length) || 0;\n}\n"], ""]