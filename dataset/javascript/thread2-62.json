[["_reduce", "\nfunction _reduce(accumulator, iterable, initializer) {\n  for (let item of iterable) {\n    initializer = accumulator(initializer, item);\n  }\n\n  return initializer;\n}\n"], ["Benchmarked", "\nfunction Benchmarked(options) {\n  if (!(this instanceof Benchmarked)) {\n    return new Benchmarked(options);\n  }\n  Emitter.call(this);\n  this.options = Object.assign({}, options);\n  this.results = [];\n  this.defaults(this);\n}\n"], ["textToMaterialsInfo", "\nfunction ( text ) {\n  var lines = text.split( \"\\n\" );\n  var info = {};\n  var delimiter_pattern = /\\s+/;\n  var materialsInfo = {};\n\n  for ( var i = 0; i < lines.length; i ++ ) {\n    var line = lines[ i ];\n    line = line.trim();\n\n    if ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n      continue;\n    }\n\n    var pos = line.indexOf( ' ' );\n\n    <parseKey>\n    var key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n    key = key.toLowerCase();\n    </parseKey>\n\n    <parseValue>\n    var value = ( pos >= 0 ) ? line.substring( pos + 1 ) : \"\";\n    value = value.trim();\n    </parseValue>\n\n    if ( key === \"newmtl\" ) {\n      info = { name: value };\n      materialsInfo[ value ] = info;\n    } else if ( info ) {\n      if ( key === \"ka\" || key === \"kd\" || key === \"ks\" ) {\n        var ss = value.split( delimiter_pattern, 3 );\n        info[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n      } else {\n        info[ key ] = value;\n      }\n    }\n  }\n\n  var materialCreator = new THREE.MTLLoader.MaterialCreator( this.baseUrl, this.materialOptions );\n  materialCreator.setCrossOrigin( this.crossOrigin );\n  materialCreator.setManager( this.manager );\n  materialCreator.setMaterials( materialsInfo );\n  return materialCreator;\n}\n"], ["loadInfo", "\nfunction loadInfo() {\n  try {\n    <readFile>\n    var data = fs.readFileSync(__rootdir + '/package.json', { encoding: 'utf8' });\n    </readFile>\n    <parseData>\n    var tmp = JSON.parse(data);\n    appPackage = {\n      name: tmp.name || null,\n      version: tmp.version || 1\n    }\n    </parseData>\n  } catch(e) {\n    return;\n  }\n}\n"], ["put_byte", "\nfunction put_byte(c) {\n  outbuf[outoff + outcnt++] = c;\n  if (outoff + outcnt === OUTBUFSIZ) {\n    qoutbuf();\n  }\n}\n"], ["tabbableElementsNodeFilter", "\nfunction tabbableElementsNodeFilter(node) {\n  var nodeStyle = _ElementUtilities._getComputedStyle(node);\n  if (nodeStyle.display === \"none\" || nodeStyle.visibility === \"hidden\") {\n    return _Global.NodeFilter.FILTER_REJECT;\n  }\n  if (node._tabContainer) {\n    return _Global.NodeFilter.FILTER_ACCEPT;\n  }\n  if (node.parentNode && node.parentNode._tabContainer) {\n    var managedTarget = node.parentNode._tabContainer.childFocus;\n    \n    if (managedTarget && node.contains(managedTarget)) {\n      return (getTabIndex(node) >= 0 ? _Global.NodeFilter.FILTER_ACCEPT : _Global.NodeFilter.FILTER_SKIP);\n    }\n    return _Global.NodeFilter.FILTER_REJECT;\n  }\n  var tabIndex = getTabIndex(node);\n  if (tabIndex >= 0) {\n    return _Global.NodeFilter.FILTER_ACCEPT;\n  }\n  return _Global.NodeFilter.FILTER_SKIP;\n}\n"], ["normalizeDefinitions", "\nfunction (definitions) {\n  var result = [],\n      len = definitions.length,\n      idx,\n      definition;\n  for (idx = 0; idx < len; ++idx) {\n    definition = definitions[idx];\n    if (!(definition instanceof gpf.Parameter)) {\n      definition = this._createFromObject(definition);\n    }\n    result.push(definition);\n  }\n  return result;\n}\n"], ["numberFactory", "\nfunction numberFactory (name, value) {\n  const dependencies = ['config', 'BigNumber']\n\n  return factory(name, dependencies, ({ config, BigNumber }) => {\n    return config.number === 'BigNumber'\n      ? new BigNumber(value)\n      : value\n  })\n}\n"], ["RemoteServiceManager", "\nfunction RemoteServiceManager(services) {\n  this.options = services || {};\n  this.services = {};\n\n  <loadSDK>\n  let sdk = require('bi-service-sdk');\n  </loadSDK>\n\n  <setSDKInterface>\n  this.BIServiceSDK = sdk.BIServiceSDKInterface || sdk.BIServiceSDK;\n  </setSDKInterface>\n}\n"], ["extractFileInfo", "\nfunction (file) {\n  var match = pattern.exec(basename(file));\n  return { date: match[1], url: match[2] };\n}\n"], "```"]