[["setRef", "\nfunction setRef (buffer, offset, value) {\n  <logging>\n  debug('Array reference \"type\" setter for buffer at offset', offset)\n  </logging>\n  var ptr\n  <setPointerType>\n  if (value instanceof this) {\n    ptr = value.buffer\n  } else {\n    ptr = new this(value).buffer\n  }\n  </setPointerType>\n  <writePointer>\n  _ref.writePointer(buffer, offset, ptr)\n  </writePointer>\n}\n"], ["anonymous", "\nfunction(binaries, callback) {\n  <createProjectStructure>\n  helper.createProjectStructure(appPath, function(err) {\n      callback && callback(err, binaries);\n  });\n  </createProjectStructure>\n}\n"], ["webpackLoader", "\nfunction(module, exports, __webpack_require__) {\n\n  'use strict';\n  \n  <moduleExportsSetup>\n  Object.defineProperty(exports, \"__esModule\", {\n      value: true\n  });\n  exports.renderWithEntry = undefined;\n  </moduleExportsSetup>\n  \n  <dependenciesLoading>\n  var _react = __webpack_require__(3);\n  \n  var _react2 = _interopRequireDefault(_react);\n  \n  var _reactDom = __webpack_require__(30);\n  \n  var _reactRedux = __webpack_require__(168);\n  \n  var _reactHotLoader = __webpack_require__(198);\n  \n  var _style = __webpack_require__(202);\n  \n  var _style2 = _interopRequireDefault(_style);\n  \n  var _EntryWrapper = __webpack_require__(204);\n  \n  var _EntryWrapper2 = _interopRequireDefault(_EntryWrapper);\n  \n  var _store = __webpack_require__(216);\n  \n  var _store2 = _interopRequireDefault(_store);\n  \n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n  </dependenciesLoading>\n  \n  <defaultExportSetup>\n  var ID_SELECTOR = 'react-pianist'; \n  \n  exports.default = function (Entry) {\n  \n      <applyStyle>\n      (0, _style2.default)();\n      </applyStyle>\n  \n      return renderWithEntry(Entry);\n  };\n  </defaultExportSetup>\n  \n  <renderWithEntry>\n  var renderWithEntry = exports.renderWithEntry = function renderWithEntry(Entry) {\n      return (0, _reactDom.render)(_react2.default.createElement(\n          _reactHotLoader.AppContainer,\n          null,\n          _react2.default.createElement(\n              _reactRedux.Provider,\n              { store: _store2.default },\n              _react2.default.createElement(\n                  _EntryWrapper2.default,\n                  null,\n                  _react2.default.createElement(Entry, null)\n              )\n          )\n      ), document.getElementById(ID_SELECTOR));\n  };\n  </renderWithEntry>\n\n}\n"], ["windowHashHandler", "\nfunction () {\n  var hash = window.location.hash;\n  var filterIndex = hash.indexOf('filter=');\n  if (filterIndex !== -1) {\n    <extractFilterString>\n    var filterString = hash.substr(filterIndex + 7).trim();\n    </extractFilterString>\n    <filterVisibleLayers>\n    var visible = layersControl.filter(filterString);\n    </filterVisibleLayers>\n\n    <setupFirstBaseLayer>\n    var first = Object.keys(visible)[0];\n    if (first in baseLayers) {\n      map.addLayer(baseLayers[first]);\n      map.eachLayer(function (layer) {\n        if (layer._providerName !== first) {\n          map.removeLayer(layer);\n        }\n      });\n      layersControl.filter(filterString);\n    }\n    </setupFirstBaseLayer>\n  }\n}\n"], ["readControls", "\nfunction readControls( controlPath, filingCabinet ) {\n\n  <logReadControlsStart>\n  logger.showInfo( '*** Reading controls...' );\n  </logReadControlsStart>\n  \n  <logEngineControls>\n  logger.showInfo( 'Engine controls:' );\n  </logEngineControls>\n  <getEngineControls>\n  getControls(\n    '/node_modules/md-site-engine/controls',\n    '',\n    filingCabinet.controls\n  );\n  </getEngineControls>\n  \n  <logSiteControls>\n  logger.showInfo( 'Site controls:' );\n  </logSiteControls>\n  <getSiteControls>\n  getControls(\n    controlPath,\n    '',\n    filingCabinet.controls\n  );\n  </getSiteControls>\n}\n"], ["sliceUntil", "\nfunction(str, to) {\n  if (isUndefined(to)) to = str.length;\n  return str.slice(0, numberOrIndex(str, to));\n}\n"], ["loadDataWithOptions", "\nfunction (options) {\n  <validateOptions>\n  if (!isStringValid(options.key)) {\n    throw new TypeError('Unable to load data, a key is not a non-empty string.');\n  }\n  \n  if (!isStringValid(options.urlTemplate) && !angular.isFunction(options.urlTemplate)) {\n    throw new TypeError('Unable to load data, a urlTemplate is not a non-empty string or not a function.');\n  }\n  \n  var errorHandler = options.loadFailureHandler;\n  if (errorHandler !== undefined) {\n    if (!angular.isString(errorHandler)) {\n      throw new Error('Unable to load data, a loadFailureHandler is not a string.');\n    } else {\n      errorHandler = $injector.get(errorHandler);\n    }\n  }\n  </validateOptions>\n\n  <setupLoadersAndParts>\n  var loaders = [],\n    prioritizedParts = getPrioritizedParts();\n  \n  angular.forEach(prioritizedParts, function (part) {\n    loaders.push(\n      part.getTable(options.key, $q, $http, options.$http, options.urlTemplate, errorHandler)\n    );\n    part.urlTemplate = part.urlTemplate || options.urlTemplate;\n  });\n  </setupLoadersAndParts>\n  \n  <handleStructureChangeDuringLoad>\n  var structureHasBeenChangedWhileLoading = false;\n  var dirtyCheckEventCloser = $rootScope.$on('$translatePartialLoaderStructureChanged', function () {\n    structureHasBeenChangedWhileLoading = true;\n  });\n  </handleStructureChangeDuringLoad>\n\n  <loadTranslations>\n  return $q.all(loaders)\n    .then(function () {\n      <closeDirtyCheckEvent>\n      dirtyCheckEventCloser();\n      </closeDirtyCheckEvent>\n      if (structureHasBeenChangedWhileLoading) {\n        <handleRetry>\n        if (!options.__retries) {\n          options.__retries = (options.__retries || 0) + 1;\n          return service(options);\n        } else {\n          $log.warn('The partial loader has detected a multiple structure change (with addPort/removePart) ' +\n            'while loading translations. You should consider using promises of $translate.use(lang) and ' +\n            '$translate.refresh(). Also parts should be added/removed right before an explicit refresh ' +\n            'if possible.');\n        }\n        </handleRetry>\n      }\n      var table = {};\n      prioritizedParts = getPrioritizedParts();\n      angular.forEach(prioritizedParts, function (part) {\n        <mergeTranslationTables>\n        deepExtend(table, part.tables[options.key]);\n        </mergeTranslationTables>\n      });\n      return table;\n    }, function () {\n      <closeDirtyCheckEventOnReject>\n      dirtyCheckEventCloser();\n      </closeDirtyCheckEventOnReject>\n      return $q.reject(options.key);\n    });\n  </loadTranslations>\n}\n"], ["_pickBestAction", "\nfunction _pickBestAction(key, modifiers, action) {\n  <determineActionBasedOnKey>\n  if (!action) {\n      action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n  }\n  </determineActionBasedOnKey>\n  \n  <changeActionIfModifiersExist>\n  if (action == 'keypress' && modifiers.length) {\n      action = 'keydown';\n  }\n  </changeActionIfModifiersExist>\n\n  return action;\n}\n"], ["setSelection", "\nfunction setSelection(from, to, oldFrom, oldTo) {\n  goalColumn = null;\n  if (oldFrom == null) {oldFrom = sel.from.line; oldTo = sel.to.line;}\n  if (posEq(sel.from, from) && posEq(sel.to, to)) return;\n  if (posLess(to, from)) {var tmp = to; to = from; from = tmp;}\n  \n  <updateSelectionLines>\n  if (from.line != oldFrom) {\n    var from1 = skipHidden(from, oldFrom, sel.from.ch);\n    if (!from1) setLineHidden(from.line, false);\n    else from = from1;\n  }\n  if (to.line != oldTo) to = skipHidden(to, oldTo, sel.to.ch);\n  </updateSelectionLines>\n\n  <checkAndUpdateSelectionInversion>\n  if (posEq(from, to)) sel.inverted = false;\n  else if (posEq(from, sel.to)) sel.inverted = false;\n  else if (posEq(to, sel.from)) sel.inverted = true;\n  </checkAndUpdateSelectionInversion>\n\n  <clearEmptyLines>\n  if (options.autoClearEmptyLines && posEq(sel.from, sel.to)) {\n    var head = sel.inverted ? from : to;\n    if (head.line != sel.from.line && sel.from.line < doc.size) {\n      var oldLine = getLine(sel.from.line);\n      if (/^\\s+$/.test(oldLine.text))\n        setTimeout(operation(function() {\n          if (oldLine.parent && /^\\s+$/.test(oldLine.text)) {\n            var no = lineNo(oldLine);\n            replaceRange(\"\", {line: no, ch: 0}, {line: no, ch: oldLine.text.length});\n          }\n        }), 10);\n    }\n  }\n  </clearEmptyLines>\n\n  <finalUpdateOfSelection>\n  sel.from = from; sel.to = to;\n  selectionChanged = true;\n  </finalUpdateOfSelection>\n}\n"], ["binder", "\nfunction binder(taskID) {\n  expected++;\n  <createBindingFunction>\n  return function(ret) {\n    expected--;\n    if(!returned && taskID !== 'false') {\n      if (typeof taskID == 'number') returned=[];\n      else if (typeof taskID == 'string') returned={};\n    };\n    taskID !== false ? returned[taskID]=ret : returned = ret;\n  </createBindingFunction>\n  \n  <runQueuedTasksOnCompletion>\n  setTimeout(function(){if (! expected) runQueue();},1);\n  </runQueuedTasksOnCompletion>\n}\n"], "```"]