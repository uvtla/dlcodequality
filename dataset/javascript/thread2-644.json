[["verifySignature", "\nasync function verify(oid, hash_algo, { R, S }, m, publicKey, hashed) {\n  const signature = util.concatUint8Array([R, S]);\n  return nacl.sign.detached.verify(hashed, signature, publicKey.subarray(1));\n}\n"], ["CordovaAudioSoundInstanceConstructor", "\nfunction CordovaAudioSoundInstance(src, startTime, duration, playbackResource) {\n    this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);\t\n    this.playWhenScreenLocked = null;\t\n    this._playStartTime = null;\t\n    this._audioSpriteTimeout = null;\t\n    this._audioSprite = false;\t\n    this._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteComplete, this);\n    this._mediaPlayFinishedHandler = createjs.proxy(this._handleSoundComplete, this);\n    this._mediaErrorHandler = createjs.proxy(this._handleMediaError, this);\n    this._mediaProgressHandler = createjs.proxy(this._handleMediaProgress, this);\n    this._playbackResource = new Media(src, this._mediaPlayFinishedHandler, this._mediaErrorHandler, this._mediaProgressHandler);\n    if (duration) {\n        this._audioSprite = true;\n    } else {\n        this._setDurationFromSource();\n    }\n}\n"], ["addToAttributeList", "\nfunction addToAttributeList(sAttribute, sValue, bPrepend) {\n    var sAttributes = this.attr(sAttribute);\n    if (!sAttributes) {\n        return this.attr(sAttribute, sValue);\n    }\n    var aAttributes = sAttributes.split(\" \");\n    if (aAttributes.indexOf(sValue) == -1) {\n        bPrepend ? aAttributes.unshift(sValue) : aAttributes.push(sValue);\n        this.attr(sAttribute, aAttributes.join(\" \"));\n    }\n    return this;\n}\n"], ["createElement", "\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (alwaysNormalize) { normalizationType = ALWAYS_NORMALIZE; }\n  return _createElement(context, tag, data, children, normalizationType);\n}\n"], ["instantiateModel", "\nfunction(mod, data) {\n  if (!Model || !Model[mod]) {\n    debug(\"can't find model : \" + mod);\n    return;\n  }\n  return (new Model[mod](data));\n}\n"], ["reverseArrayLike", "\nfunction reverse() {\n    var upperIndex,\n        value,\n        index = -1,\n        object = Object(this),\n        length = object.length >>> 0,\n        middle = floor(length / 2);\n    if (length > 1) {\n      while (++index < middle) {\n        upperIndex = length - index - 1;\n        value = upperIndex in object ? object[upperIndex] : uid;\n        if (index in object) {\n          object[upperIndex] = object[index];\n        } else {\n          delete object[upperIndex];\n        }\n        if (value != uid) {\n          object[index] = value;\n        } else {\n          delete object[index];\n        }\n      }\n    }\n    return object;\n}\n"], ["mainfunction", "\nfunction main(args) {\n    \n    const logger = logger_1.getLogger(args.verbose);\n    \n    const barrelName = barrelName_1.getBarrelName(args.name, logger);\n    \n    const rootPath = rootPath_1.resolveRootPath(args.directory);\n    \n    const baseUrl = baseUrl_1.getCombinedBaseUrl(rootPath, args.baseUrl);\n    \n    const rootTree = fileTree_1.buildTree(rootPath, barrelName, logger);\n    \n    const destinations = destinations_1.getDestinations(rootTree, args.location, barrelName, logger);\n    \n    purge_1.purge(rootTree, args.delete !== undefined && args.delete, barrelName, logger);\n    \n    const quoteCharacter = quoteCharacter_1.getQuoteCharacter(args.singleQuotes);\n    \n    const semicolonCharacter = noSemicolon_1.getSemicolonCharacter(args.noSemicolon);\n    \n    builder_1.buildBarrels(destinations, quoteCharacter, semicolonCharacter, barrelName, logger, baseUrl, args.structure, !!args.local, [].concat(args.include || []), [].concat(args.exclude || []));\n}\n"], ["broadcastToSubscriptions", "\nfunction broadcast (subscriptions, type) {\n  return value => {\n    subscriptions.forEach(s => {\n      if (typeof s.emit[type] === 'function') {\n        s.emit[type](value)\n      }\n    })\n  }\n}\n"], ["removeFilterFromConfig", "\nfunction removeFilter (config, filter) {\n  if (filter) {\n    if (config.filters.ignore[ filter ]) {\n      delete config.filters.ignore[ filter ]\n    } else {\n      delete config.filters.should[ filter ]\n    }\n  }\n}\n"], ["delExpiredKeys", "\nfunction delExpiredKeys(num, threshold) {\n  <removeExpiredKeysFunction>\n  function removeExpiredKeys(count) {\n    if(!this._ekeys.length) return 0;\n    var num = num || 100\n      , threshold = threshold || 25\n      , count = count || 0\n      , i\n      , key\n      , ind;\n    for(i = 0; i < num; i++) {\n      ind = Math.floor(Math.random() * this._ekeys.length);\n      key = this._ekeys[ind];\n      if(this._expires[key] <= Date.now()) {\n        this.emit('expired', key);\n        this.delKey(key);\n        count++;\n      }\n    }\n    if(count >= threshold) {\n      setImmediate(removeExpiredKeys);\n    }\n    return count;\n  }\n  </removeExpiredKeysFunction>\n\n  removeExpiredKeys = removeExpiredKeys.bind(this);\n  return removeExpiredKeys();\n}\n"], "```"]