[["stripPathElements", "\nfunction stripPathElements(filePath, nelements, from) {\n  if (!nelements || nelements <= 0) return filePath;\n  from = from || 'start';\n  filePath = filePath.replace(/\\/+$/, '');\n  let splitPath = split(filePath);\n  if (from === 'start' && path.isAbsolute(filePath) && splitPath[0] === '/') splitPath = splitPath.slice(1);\n  let start = 0;\n  let end = splitPath.length;\n  if (from === 'start') {\n    start = nelements;\n    end = splitPath.length;\n  } else {\n    start = 0;\n    end = splitPath.length - nelements;\n  }\n  return join(splitPath.slice(start, end));\n}\n"], ["calculateOffsetRatio", "\nfunction (offset) {\n      var ratio = offset / this.state.upperBound;\n      return ratio * (this.props.max - this.props.min) + this.props.min;\n}\n"], ["getOutputFile", "\nfunction getOutputFile(file, outputDir) {\n  const fileName = path.basename(file).replace('.scss', '.css');\n  return path.join(outputDir, fileName);\n}\n"], ["SwizInitialization", "\nfunction Swiz(defs, options) {\n  if (! (this instanceof Swiz)) {\n    return new Swiz(defs, options);\n  }\n\n  var defaultOptions = {\n    'stripNulls': true,\n\n    'stripSerializerType': true,\n    'for': null\n  }, i, o;\n\n  this._defs = {};\n  for (i = 0; i < defs.length; i++) {\n    o = defs[i];\n    this._defs[o.name] = o;\n  }\n\n  this._options = merge(defaultOptions, options);\n}\n"], ["oAuthFlowExecution", "\nfunction (auth) {\n        var host = window.location;\n        var pathname = location.pathname.substring(0, location.pathname.lastIndexOf('/'));\n        var defaultRedirectUrl = host.protocol + '\n        var redirectUrl = window.oAuthRedirectUrl || defaultRedirectUrl;\n        var url = null;\n        var scopes = _.map(auth.get('scopes'), function (scope) {\n            if(scope.checked) {\n                return scope.scope;\n            }\n        });\n        var container = window.swaggerUiAuth || (window.swaggerUiAuth = {});\n        var state, dets, ep;\n        container.OAuthSchemeKey = auth.get('title');\n\n        window.enabledScopes = scopes;\n        var flow = auth.get('flow');\n\n        function getTokenName(dets) {\n            return dets.vendorExtensions['x-tokenName'] || dets.tokenName;\n        }\n\n        <handleOAuth>\n        if(auth.get('type') === 'oauth2' && flow && (flow === 'implicit' || flow === 'accessCode')) {\n            dets = auth.attributes;\n            url = dets.authorizationUrl + '?response_type=' + (flow === 'implicit' ? 'token' : 'code');\n            container.tokenName = getTokenName(dets) || 'access_token';\n            container.tokenUrl = (flow === 'accessCode' ? dets.tokenUrl : null);\n            state = container.OAuthSchemeKey;\n        }\n        else if(auth.get('type') === 'oauth2' && flow && (flow === 'application')) {\n            dets = auth.attributes;\n            container.tokenName = getTokenName(dets) || 'access_token';\n            this.clientCredentialsFlow(scopes, dets, container.OAuthSchemeKey);\n            return;\n        }\n        else if(auth.get('type') === 'oauth2' && flow && (flow === 'password')) {\n            dets = auth.attributes;\n            container.tokenName = getTokenName(dets) || 'access_token';\n            this.passwordFlow(scopes, dets, container.OAuthSchemeKey);\n            return;\n        }\n        else if(auth.get('grantTypes')) {\n            \n            var o = auth.get('grantTypes');\n            for(var t in o) {\n                if(o.hasOwnProperty(t) && t === 'implicit') {\n                    dets = o[t];\n                    ep = dets.loginEndpoint.url;\n                    url = dets.loginEndpoint.url + '?response_type=token';\n                    container.tokenName = getTokenName(dets);\n                }\n                else if (o.hasOwnProperty(t) && t === 'accessCode') {\n                    dets = o[t];\n                    ep = dets.tokenRequestEndpoint.url;\n                    url = dets.tokenRequestEndpoint.url + '?response_type=code';\n                    container.tokenName = getTokenName(dets);\n                }\n            }\n        }\n        </handleOAuth>\n\n        <prepareOAuthUrl>\n        redirect_uri = redirectUrl;\n\n        url += '&redirect_uri=' + encodeURIComponent(redirectUrl);\n        url += '&realm=' + encodeURIComponent(realm);\n        url += '&client_id=' + encodeURIComponent(clientId);\n        url += '&scope=' + encodeURIComponent(scopes.join(scopeSeparator));\n        url += '&state=' + encodeURIComponent(state);\n        for (var key in additionalQueryStringParams) {\n            url += '&' + key + '=' + encodeURIComponent(additionalQueryStringParams[key]);\n        }\n\n        window.open(url);\n        </prepareOAuthUrl>\n    }\n"], ["handleLoginEvent", "\nfunction handle(event) {\n    if(event.data.type == 1 || event.data.type == 3 || event.data.type == 7){\n        facade.models.login().findCreateFind({\n            where:{\n                uid: event.user.id,\n                type: event.data.type,\n            },\n            defaults: {\n                uid: event.user.id,\n                type: event.data.type,\n                time: event.data.time\n            },\n        });\n    }\n}\n"], ["common_doc", "\nfunction common_doc(string, status, type){\n    if( ! string ){ string = ''; }\n    if( ! status ){ status = 200; }\n    if( ! type ){ type = 'text/html'; }\n    return {\n\tbody: [string],\n\theaders: {'Content-Type': type},\n\tstatus: status\n    };\n}\n"], ["sendMessage", "\nfunction send(err, reply, cb) {\n  if(this.before) this.before();\n\n  if(this.cb) {\n    return this.cb(err, reply);\n  }\n  this.conn.write(err || reply, cb);\n}\n"], ["queueSection", "\nfunction ( time, callback ) {\n  var _this = this;\n  this.sections.push({\n    condition : function () {\n      return _this.getTime() > time;\n    },\n    callback : callback\n  });\n  return this;\n}\n"], ["handleError", "\nfunction (error) {\n    if (!this.started) {\n        return;\n    }\n\n    var errorHandlers = this.errorHandlers,\n        length = errorHandlers.length,\n        errorHandler,\n        errorHandled = false,\n        errorString,\n        i;\n\n    <checkSystemExit>\n    if (error instanceof SystemExit) {\n        this._exit(error.code);\n        return;\n    }\n    </checkSystemExit>\n\n    <invokeErrorHandlers>\n    try {\n        for (i = 0; i < length; i += 1) {\n            errorHandler = errorHandlers[i];\n            errorHandled = !!errorHandler(error);\n\n            if (errorHandled) {\n                return;\n            }\n        }\n    } catch (e) {\n        this._printError(e);\n        this._exit(1);\n    }\n    </invokeErrorHandlers>\n\n    <printUncaughtError>\n    errorString = '' + (error.stack || error);\n    this._printError(errorString);\n    this._exit(1);\n    </printUncaughtError>\n}\n"], "```"]