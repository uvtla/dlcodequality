[["createMetaRecordStream", "\nfunction createMetaRecordStream(metaFilePaths, types) {\n  <initializeStream>\n  const metaRecordStream = combinedStream.create();\n  </initializeStream>\n\n  <appendFilePathsToStream>\n  metaFilePaths.forEach((metaFilePath) => {\n    metaRecordStream.append( (next) => {\n      <logging>\n      logger.info( `Loading ${path.basename(metaFilePath)} records from ${path.dirname(metaFilePath)}` );\n      </logging>\n      <appendToStreamCallback>\n      next(createOneMetaRecordStream(metaFilePath));\n      </appendToStreamCallback>\n    });\n  });\n  </appendFilePathsToStream>\n\n  return metaRecordStream;\n}\n"], ["setConfig", "\nfunction setConfig(config) {\n  <getConfig>\n  let oldConfig = getConfig();  \n  if (!oldConfig) return false;\n  </getConfig>\n\n  <validateConfig>\n  if (typeof config !== 'object' || !config) return false;\n  </validateConfig>\n\n  <serializeConfig>\n  let configData = '';\n  try {\n    configData = JSON.stringify(config, null, 1);\n  } catch (e) {\n    <serializeConfigException>\n    console.warn(`thorin-env: failed to serialize configuration`, e);\n    return false;\n    </serializeConfigException>\n  }\n  </serializeConfig>\n\n  <writeToDisk>\n  try {\n    fs.writeFileSync(PERSIST_FILE, configData, {encoding: 'utf8'});\n  } catch (e) {\n    <writeToDiskException>\n    console.warn(`thorin-env: failed to persist new config in .thorin file`);\n    console.debug(e);\n    return false;\n    </writeToDiskException>\n  }\n  </writeToDisk>\n\n  return true;\n}\n"], ["extend", "\nfunction extend (base, extension) {\n  <handleUndefinedCases>\n  if (isUndefined(base)) {\n    return copy(extension);\n  }\n  if (isUndefined(extension)) {\n    return copy(base);\n  }\n  </handleUndefinedCases>\n\n  <extendObjects>\n  if (isPureObject(base) && isPureObject(extension)) {\n    return utils.extendDeep(base, extension);\n  }\n  </extendObjects>\n\n  return copy(extension);\n}\n"], ["writeClientConfig", "\nfunction writeClientConfig(client, clientId, configs, callback) {\n  <logDebugInfo>\n  debug('writeClientConfig: \"%s\", %j', clientId, configs);\n  </logDebugInfo>\n\n  <updateEntityConfiguration>\n  updateEntityConfig(client, getClientConfigPath(clientId), configs, callback);\n  </updateEntityConfiguration>\n}\n"], ["tagHandlingFunction", "\nfunction(tagName, isSelfClose ) {\n  <initializeRules>\n  var rules = this._.rules[ tagName ];\n  </initializeRules>\n\n  <handleSelfClosingTag>\n  if ( isSelfClose ) {\n    this._.output.push( this.selfClosingEnd );\n\n    <adjustFormattingAfterClose>\n    if ( rules && rules.breakAfterClose )\n      this._.needsSpace = rules.needsSpace;\n    </adjustFormattingAfterClose>\n  } else {\n    this._.output.push( '>' );\n\n    <handleIndentation>\n    if ( rules && rules.indent )\n      this._.indentation += this.indentationChars;\n    </handleIndentation>\n  }\n  </handleSelfClosingTag>\n\n  <handleBreakAfterOpenAndPreTag>\n  if ( rules && rules.breakAfterOpen )\n    this.lineBreak();\n  tagName == 'pre' && ( this._.inPre = 1 );\n  </handleBreakAfterOpenAndPreTag>\n}\n"], ["midmean", "\nfunction midmean( arr, sorted ) {\n  <validationChecks>\n  if ( !Array.isArray( arr ) ) {\n    throw new TypeError( 'midmean()::invalid input argument. Must provide an array.' );\n  }\n  if ( arguments.length > 1 && typeof sorted !== 'boolean' ) {\n    throw new TypeError( 'midmean()::invalid input argument. Second argument must be a boolean.' );\n  }\n  if ( arr.length < 3 ) {\n    throw new TypeError( 'midmean()::invalid input argument. Midmean not applicable.' );\n  }\n  </validationChecks>\n\n  <sortArrayIfNeeded>\n  if ( !sorted ) {\n    arr = arr.slice();\n    arr.sort( ascending );\n  }\n  </sortArrayIfNeeded>\n\n  <calculateMidmean>\n  var len = arr.length,\n      mean = 0,\n      N = 0,\n      delta,\n      low,\n      high;\n\n  \n  if ( len%4 === 0 ) {\n    low = len*0.25;\n    high = len*0.75 - 1;\n  }\n  else {\n    low = Math.ceil( len*0.25 );\n    high = Math.floor( len*0.75 ) - 1;\n  }\n\n  \n  for ( var i = low; i <= high; i++ ) {\n    N += 1;\n    delta = arr[ i ] - mean;\n    mean += delta / N;\n  }\n  </calculateMidmean>\n  \n  return mean;\n}\n"], ["textAndValueConversion", "\nfunction (displayValue, currentlyOpen) {\n  <dataInitialization>\n  var dataModel = this._dataModel, options = dataModel.listContent, selectedValues = dataModel.selectedValues;\n  dataModel.selectedIdx = -1; \n  </dataInitialization>\n\n  <parseAndSetValues>\n  selectedValues = this._parseInputString(options, displayValue);\n  if (!currentlyOpen) {\n    <updateModel>\n    if (!ariaUtilsJson.equals(selectedValues, dataModel.value)) {\n        ariaUtilsJson.setValue(dataModel, 'selectedValues', selectedValues);\n        dataModel.value = selectedValues;\n        dataModel.text = this._getDisplayValue(selectedValues);\n    }\n    </updateModel>\n  }\n  </parseAndSetValues>\n\n  <prepareReport>\n  var report = new ariaWidgetsControllersReportsDropDownControllerReport();\n  report.displayDropDown = options.length > 0 && !currentlyOpen;\n\n  if (report.displayDropDown) {\n    <setInitialInput>\n    dataModel.initialInput = displayValue;\n    </setInitialInput>\n\n    <setListContent>\n    ariaUtilsJson.setValue(dataModel, 'listContent', options);\n    </setListContent>\n  }\n\n  report.text = dataModel.text;\n  report.value = this._getValue(dataModel.text, dataModel.value);\n  if (!selectedValues.length) {\n    dataModel.selectedIdx = null;\n  }\n  </prepareReport>\n\n  return report;\n}\n"], ["insertLineBreakBeforeToken", "\nfunction (node) {\n  <insertBreakCondition>\n  if (node.startToken.prev && node.startToken.prev.type !== 'LineBreak') {\n    <performInsert>\n    insertBefore(node.startToken, nextLineFactory());\n    </performInsert>\n  }\n  </insertBreakCondition>\n}\n"], ["checkEnvironmentAndCreateFolders", "\nfunction() {\n  <pathRetrieval>\n  var path = $options.path;\n  </pathRetrieval>\n\n  <checkForConfigFile>\n  $fs.exists(\"fis-conf.js\", function(res) {\n    if (res == true) {\n      <checkTargetPathExists>\n      $fs.exists(path, function(res) {\n        if (res == true) {\n          <handleExistingPathError>\n          console.log(\"[Error-1001] This path:\" + path + \" exists\");\n          </handleExistingPathError>\n        } else {\n          <createAppFolder>\n          snippets.fn.appFolder(path);\n          </createAppFolder>\n        }\n      });\n      </checkTargetPathExists>\n    } else {\n      <handleNoConfigFileError>\n      console.log(\"[Error-1002] In this folder that can't build widget or page folders\");\n      </handleNoConfigFileError>\n    }\n  });\n  </checkForConfigFile>\n}\n"], ["imageGalleryInteractions", "\nfunction() {\n  <galleryInitialization>\n  var self = this;\n  </galleryInitialization>\n\n  <addEventListenersToElements>\n  document.addEventListener(enterEventName, function(event) {\n    <checkViewerAndTargetImage>\n    if (!self.viewer) return;\n    var target = event.target;\n    if (!self.checkImage(target)) return;\n    </checkViewerAndTargetImage>\n\n    <displayViewer>\n    self.viewer.style.display = 'block';\n    setTimeout(function() {\n      self.viewer.style.opacity = 1;\n    }, 0);\n    self.index = self.images.indexOf(target);\n    self.currentItem = self.createImage(self.index);\n    </displayViewer>\n  }, false);\n\n  <closeViewerEvent>\n  self.closeButton.addEventListener(tapEventName, function(event) {\n    self.viewer.style.opacity = 0;\n    setTimeout(function() {\n      self.viewer.style.display = 'none';\n      <disposeCurrentImage>\n      self.disposeImage(true);\n      </disposeCurrentImage>\n    }, 600);\n    event.preventDefault();\n    event.cancelBubble = true;\n  }, false);\n  </closeViewerEvent>\n\n  <navigationButtonsEvents>\n  self.leftButton.addEventListener(tapEventName, function() {\n    self.prev();\n  }, false);\n  self.rightButton.addEventListener(tapEventName, function() {\n    self.next();\n  }, false);\n  </navigationButtonsEvents>\n\n  <preventDefaultImageMove>\n  self.mask.addEventListener($.EVENT_MOVE, function(event) {\n    event.preventDefault();\n    event.cancelBubble = true;\n  }, false);\n  </preventDefaultImageMove>\n\n  <swipeEvents>\n  self.viewer.addEventListener('swipeleft', function(event) {\n    if (self.scaleValue == 1) self.next();\n    event.preventDefault();\n    event.cancelBubble = true;\n  }, false);\n  self.viewer.addEventListener('swiperight', function(event) {\n    if (self.scaleValue == 1) self.prev();\n    event.preventDefault();\n    event.cancelBubble = true;\n  }, false);\n  </swipeEvents>\n\n  <touchEvents>\n  self.viewer.addEventListener($.EVENT_START, function(event) {\n    <initializeMultiTouch>\n    var touches = event.touches;\n    if (touches.length == 2) {\n      var p1 = touches[0];\n      var p2 = touches[1];\n      var x = p1.pageX - p2.pageX; \n      var y = p1.pageY - p2.pageY; \n      self.scaleStart = Math.sqrt(x * x + y * y);\n      self.isMultiTouch = true;\n    </initializeMultiTouch>\n    <initializeSingleTouch>\n    else if (touches.length = 1) {\n      self.dragStart = touches[0];\n    }\n    </initializeSingleTouch>\n  }, false);\n  self.viewer.addEventListener($.EVENT_MOVE, function(event) {\n    var img = self.currentItem.querySelector('img');\n    var touches = event.changedTouches;\n    if (touches.length == 2) {\n      <pinchZoom>\n      event.preventDefault();\n      event.cancelBubble = true;\n      var p1 = touches[0];\n      var p2 = touches[1];\n      var x = p1.pageX - p2.pageX;\n      var y = p1.pageY - p2.pageY;\n      self.scaleEnd = Math.sqrt(x * x + y * y);\n      self._scaleValue = (self.scaleValue * (self.scaleEnd / self.scaleStart));\n      \n      img.style.webkitTransform = \"scale(\" + self._scaleValue + \",\" + self._scaleValue + \") \"; \n      </pinchZoom>\n    } else if (!self.isMultiTouch && touches.length == 1 && self.scaleValue != 1) {\n      <dragImage>\n      event.preventDefault();\n      event.cancelBubble = true;\n      self.dragEnd = touches[0];\n      self._dragX = self.dragX + (self.dragEnd.pageX - self.dragStart.pageX);\n      self._dragY = self.dragY + (self.dragEnd.pageY - self.dragStart.pageY);\n      img.style.marginLeft = self._dragX + 'px';\n      img.style.marginTop = self._dragY + 'px';\n      </dragImage>\n    }\n  }, false);\n  self.viewer.addEventListener($.EVENT_END, function() {\n    <finalizeScaleAndDrag>\n    self.scaleValue = self._scaleValue || self.scaleValue;\n    self._scaleValue = null;\n    self.dragX = self._dragX;\n    self.dragY = self._dragY;\n    self._dragX = null;\n    self._dragY = null;\n    var touches = event.touches;\n    self.isMultiTouch = (touches.length != 0);\n    </finalizeScaleAndDrag>\n  });\n  </touchEvents>\n\n  <doubletapEvent>\n  self.viewer.addEventListener('doubletap', function() {\n    var img = self.currentItem.querySelector('img');\n    if (self.scaleValue === 1) {\n      self.scaleValue = 2;\n    } else {\n      self.scaleValue = 1;\n    }\n    self.dragX = 0;\n    self.dragY = 0;\n    img.style.marginLeft = self.dragX + 'px';\n    img.style.marginTop = self.dragY + 'px';\n    img.style.webkitTransform = \"scale(\" + self.scaleValue + \",\" + self.scaleValue + \") \"; \n    self.viewer.__tap_num = 0;\n  }, false);\n  </doubletapEvent>\n"], "```\n\nAnnotations for the given functions identify sections within the code where distinct responsibilities are highlighted. These sections are indicated with corresponding tags for each function, clearly outlining parts where SRP adherence and violations can be observed."]