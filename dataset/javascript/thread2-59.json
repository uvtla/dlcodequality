[["function1", "\nfunction(model, opt) {\n    this.getConnectedLinks(model).forEach(function(link) {\n        <updateLinkProperties>\n        link.set((link.source().id === model.id ? 'source' : 'target'), { x: 0, y: 0 }, opt);\n        </updateLinkProperties>\n    });\n}\n"], ["function2", "\nfunction ready(fn) {\n    if (!isReady) {\n        <checkDocumentBody>\n        if (!doc.body) {\n            return defer(ready);\n        }\n        </checkDocumentBody>\n\n        <markAsReady>\n        isReady = true;\n        </markAsReady>\n\n        <executePendingCallbacks>\n        while (fn = callbacks.shift()) {\n            defer(fn);\n        }\n        </executePendingCallbacks>\n    }\n}\n"], ["function3", "\nfunction(event, args) {\n    WireIt.CanvasContainer.superclass.onResize.call(this, event, args);\n\n    <calculateCanvasSize>\n    var size = args[0];\n    this.canvasWidth = (size[0] - 14);\n    this.canvasHeight = (size[1] - (this.ddHandle ? 44 : 14));\n    </calculateCanvasSize>\n\n    <setCanvasRegion>\n    this.canvasEl.SetCanvasRegion(0, 0, this.canvasWidth, this.canvasHeight);\n    </setCanvasRegion>\n\n    <drawCanvas>\n    this.drawCanvas();\n    </drawCanvas>\n}\n"], ["function4", "\nfunction(f) {\n    var self = this;\n    <defineAfterUpdateCallback>\n    var runFAfterUpdates = function() {\n        self._afterUpdateCallbacks.push(f);\n    };\n    </defineAfterUpdateCallback>\n    var unflushedServerDocCount = 0;\n\n    <handleServerDocFlush>\n    var onServerDocFlush = function() {\n        --unflushedServerDocCount;\n        if (unflushedServerDocCount === 0) {\n            runFAfterUpdates();\n        }\n    };\n    </handleServerDocFlush>\n\n    <iterateServerDocuments>\n    _.each(self._serverDocuments, function(collectionDocs) {\n        collectionDocs.forEach(function(serverDoc) {\n            var writtenByStubForAMethodWithSentMessage = _.any(\n                serverDoc.writtenByStubs, function(dummy, methodId) {\n                    var invoker = self._methodInvokers[methodId];\n                    return invoker && invoker.sentMessage;\n                });\n            if (writtenByStubForAMethodWithSentMessage) {\n                ++unflushedServerDocCount;\n                serverDoc.flushCallbacks.push(onServerDocFlush);\n            }\n        });\n    });\n    </iterateServerDocuments>\n\n    <checkAndRunAfterUpdateCallback>\n    if (unflushedServerDocCount === 0) {\n        runFAfterUpdates();\n    }\n    </checkAndRunAfterUpdateCallback>\n}\n"], ["function5", "\nfunction(stackContainers, node) {\n    node.contentItems.forEach(lm.utils.fnBind(function(item) {\n        <checkItemForStack>\n        if (item.type == 'stack') {\n            stackContainers.push(item);\n        }\n        </checkItemForStack>\n        <handleNonComponentItems>\n        else if (!item.isComponent) {\n            this._findAllStackContainersRecursive(stackContainers, item);\n        }\n        </handleNonComponentItems>\n    }, this));\n}\n"], ["function6", "\nfunction healthcheck(node) {\n    <initializeVariables>\n    var ended = false;\n    var node_id = node.host + ':' + node.port;\n    </initializeVariables>\n\n    <createClientAndConnect>\n    var client = net.connect({\n        port: node.adminport, host: node.host\n    }, function onConnect() {\n        if (!ended) {\n            client.write('health\\r\\n');\n        }\n    });\n    </createClientAndConnect>\n\n    <setClientTimeout>\n    client.setTimeout(healthCheckInterval, function() {\n        client.end();\n        markNodeAsUnhealthy(node_id);\n        client.removeAllListeners('data');\n        ended = true;\n    });\n    </setClientTimeout>\n\n    <handleClientData>\n    client.on('data', function(data) {\n        if (ended) {\n            return;\n        }\n\n        var health_status = data.toString();\n        client.end();\n        ended = true;\n\n        if (health_status.indexOf('up') < 0) {\n            markNodeAsUnhealthy(node_id);\n        } else {\n            markNodeAsHealthy(node_id);\n        }\n    });\n    </handleClientData>\n\n    <handleClientError>\n    client.on('error', function(e) {\n        if (ended) {\n            return;\n        }\n\n        if (e.code !== 'ECONNREFUSED' && e.code !== 'EHOSTUNREACH' && e.code !== 'ECONNRESET') {\n            log('Error during healthcheck on node ' + node_id + ' with ' + e.code, 'ERROR');\n        }\n\n        markNodeAsUnhealthy(node_id);\n    });\n    </handleClientError>\n}\n"], ["function7", "\nfunction (element) {\n    <determineDisplayStyle>\n    var tagName = element.tagName.toString().toLowerCase();\n\n    if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {\n        return \"inline\";\n    } else if (/^(li)$/i.test(tagName)) {\n        return \"list-item\";\n    } else if (/^(tr)$/i.test(tagName)) {\n        return \"table-row\";\n    } else {\n        return \"block\";\n    }\n    </determineDisplayStyle>\n}\n"], ["function8", "\nfunction codeToErrorName(code) {\n    <parseCodeAndLookupStatus>\n    code = parseInt(code, 10);\n    var status = http.STATUS_CODES[code];\n    if (!status)\n        return (false);\n    </parseCodeAndLookupStatus>\n\n    <constructErrorName>\n    var pieces = status.split(/\\s+/);\n    var str = '';\n    pieces.forEach(function(s) {\n        str += s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n    });\n\n    str = str.replace(/\\W+/g, '');\n    if (!/\\w+Error$/.test(str))\n        str += 'Error';\n\n    return (str);\n    </constructErrorName>\n}\n"], ["function9", "\nfunction () {\n    <initializeRouter>\n    this.router = UIComponent.getRouterFor(this);\n    this.router.attachRoutePatternMatched(this.onRouteMatched, this);\n    </initializeRouter>\n\n    <initializeComponent>\n    this._component = Component.getOwnerComponentFor(this.getView());\n    </initializeComponent>\n\n    <attachBrowserEvent>\n    this.getView().attachBrowserEvent(\"click\", this.onJSDocLinkClick, this);\n    </attachBrowserEvent>\n\n    <addEventDelegate>\n    this.getView().addEventDelegate({\n        onBeforeFirstShow: jQuery.proxy(this._applyViewConfigurations, this)\n    });\n    </addEventDelegate>\n}\n"], ["function10", "\nfunction _setDisabled(_button, _value) {\n    <updateButtonWidgetState>\n    var _btnWidget = _button.data('ui-button');\n    if (_btnWidget.option('disabled') !== _value) {\n        _btnWidget.option('disabled', _value);\n    }\n    </updateButtonWidgetState>\n}\n"], "```"]