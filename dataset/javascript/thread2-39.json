[["setTabId", "\nfunction setTabId (sections) {\n    sections.forEach(function (section, sectionIndex) {\n        if (!Array.isArray(section)) {\n            return;\n        }\n        section.forEach(function (tab, tabIndex) {\n            tab.tabId = (tab.label).replace(/\\s+/g, '-').toLowerCase() + '-' + sectionIndex + '-' + tabIndex;\n        });\n    });\n}\n"], ["getLinearizedBaseContracts", "\nfunction getLinearizedBaseContracts (id, contractsById) {\n  <mapLinearizedBaseContracts>\n  return contractsById[id].attributes.linearizedBaseContracts.map(function (id) { return contractsById[id] })\n  </mapLinearizedBaseContracts>\n}\n"], ["stripComments", "\nfunction stripComments(content) {\n\tconst regexp = /(\"(?:[^\\\\\"]*(?:\\\\.)?)*\")|('(?:[^\\\\']*(?:\\\\.)?)*')|(\\/\\*(?:\\r?\\n|.)*?\\*\\/)|(\\/{2,}.(?:(?:\\r?\\n)|$))/g;\n\treturn content.replace(regexp, function (match, m1, m2, m3, m4) {\n\t\tif (m3) {\n\t\t\treturn '';\n\t\t} else if (m4) {\n\t\t\tconst length_1 = m4.length;\n\t\t\t<handleNewLineComments>\n\t\t\tif (length_1 > 2 && m4[length_1 - 1] === '\\n') {\n\t\t\t\treturn m4[length_1 - 2] === '\\r' ? '\\r\\n' : '\\n';\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t</handleNewLineComments>\n\t\t} else {\n\t\t\treturn match;\n\t\t}\n\t});\n}\n"], ["getElementMetrics", "\nfunction (elm) {\n    var self = this, pos, size;\n    elm = self.get(elm);\n    pos = self.getPos(elm);\n    size = self.getSize(elm);\n    return {\n      x: pos.x, y: pos.y,\n      w: size.w, h: size.h\n    };\n}\n"], ["bindAutoBindMethods", "\nfunction bindAutoBindMethods(component) {\n  for (var autoBindKey in component.__reactAutoBindMap) {\n    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n      var method = component.__reactAutoBindMap[autoBindKey];\n      <createBoundMethods>\n      component[autoBindKey] = bindAutoBindMethod(\n        component, ReactErrorUtils.guard( method, component.constructor.displayName + '.' + autoBindKey )\n      );\n      </createBoundMethods>\n    }\n  }\n}\n"], ["addType", "\nfunction addType(typeName, type) {\n\tif (types[typeName]) {\n\t\tthrow new Error(\"Type already registered '\" + typeName + \"'\");\n\t}\n\ttypes[typeName] = type;\n}\n"], ["raiseEventOnConnection", "\nfunction (connection) {\n    if (connection) {\n        <startEvent>\n        ariaCoreIO.$raiseEvent({\n            name : \"startEvent\",\n            o : connection\n        });\n        </startEvent>\n        <customStartEvent>\n        if (connection.startEvent) {\n            ariaCoreIO.$raiseEvent({\n                name : connection.startEvent,\n                o : connection\n            });\n        }\n        </customStartEvent>\n    }\n}\n"], ["drillRec", "\nfunction drillRec(v){\n    const next = v.get(0);\n    if(v.length > 1 || !isAVector(next)) return v;\n    return drillRec(next);\n}\n"], ["clearAndRemoveDisplayDiv", "\nfunction () {\n    this._displayDiv.innerHTML = '';\n    if (this._displayDiv != null) {\n        <removeDisplayElement>\n        aria.utils.Dom.removeElement(this._displayDiv);\n        </removeDisplayElement>\n    }\n    this._displayDiv = null;\n}\n"], ["bufferSubData", "\nfunction( array, offset ){\n    var gl = this.gl;\n    gl.bindBuffer(    TGT, this.buffer );\n    gl.bufferSubData( TGT, offset, array );\n    gl.bindBuffer(    TGT, null );\n}\n"], "```"]