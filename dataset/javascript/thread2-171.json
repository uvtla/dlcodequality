[["processMatch", "\nfunction (match) {\n  var nv = \"v\" + (path.length + 1);\n  if (match.indexOf(\"$owner.\") == 0) {\n      match = match.substr(7);\n  } else\n  {\n      if (match.indexOf(\"owner.\") == 0) {\n          match = match.substr(6);\n      } else {\n          match = match.substr(1);\n      }\n  }\n\n  match = match.split(\".\");\n\n  var trail = \"\";\n\n  match = match.filter(function(m) {\n      if(!m.endsWith(\"(\")){\n          return true;\n      }\n      trail = \".\" + m;\n      return false;\n  });\n\n  path.push(match);\n  vars.push(nv);\n  return \"(\" + nv + \")\" + trail;\n}\n"], ["processValueWithMetaData", "\nfunction(value, metaData, name, object) {\n  name = name || 'unknown';\n  object = object || this;\n\n  var that = this;\n  var processors = this.getProcessor();\n\n  _.each(metaData, function(data, option) {\n      if (!(option in processors)) {\n          return;\n      }\n      value = processors[option].call(that, value, data, name, object);\n  });\n\n  return value;\n}\n"], ["TranslateJSONObject", "\nfunction TranslateJSONObject() {\n  var translateSrv;\n  var setting;\n  var promises = [];\n  var destObj = {};\n  var serviceType;\n\n  <initSettings>\n  function init(options) {\n    setting = options || {};\n    if (!setting.googleApiKey && !setting.yandexApiKey) {\n      console.warn(constant.ERROR.MISSING_TOKEN);\n      return false;\n    } else if (setting.yandexApiKey) {\n      serviceType = constant.YANDEX_NAME;\n      translateSrv = require('./service/yandex.js');\n    } else {\n      serviceType = constant.GOOGLE_NAME;\n      translateSrv = require('./service/google.js');\n    }\n    translateSrv.init(setting);\n    return true;\n  }\n  </initSettings>\n\n  <translate>\n  function translate(srcObj, language) {\n    if (!setting.googleApiKey && !setting.yandexApiKey) {\n      return Promise.reject(constant.ERROR.MISSING_TOKEN);\n    }\n    //... rest of the translate function\n  }\n  </translate>\n\n  return {\n    init: init,\n    translate: translate\n  };\n}\n"], ["updateHtml", "\nfunction(html) {\n  var changed = this._html !== html;\n  var focused = this._focusedfield();\n  if (changed) {\n    this._html = html;\n    this._updater.update(html);\n    if(focused) {\n      this._restorefocus(focused);\n    }\n  }\n  this._status(this.spirit);\n  this.ran = true;\n}\n"], ["grabTheRightIcon", "\nfunction grabTheRightIcon(icon, variant) {\n  return toCodePoint(\n    variant === '\\uFE0F' ?\n    icon.slice(0, -1) :\n    (icon.length === 3 && icon.charAt(1) === '\\uFE0F' ?\n    icon.charAt(0) + icon.charAt(2) : icon)\n  );\n}\n"], ["hasRest", "\nfunction hasRest (node) {\n  for (var i = 0, child; (child = node.children[i]); i++) {\n    if (child.type === \"rest\") return true;\n  }\n  return false;\n}\n"], ["ServerReadableStream", "\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  <setUpReadableStream>\n  setUpReadable(this, deserialize);\n  </setUpReadableStream>\n\n  this.cancelled = false;\n\n  this.metadata = metadata;\n}\n"], ["dataResponseHandler", "\nfunction (callback) {\n  return function (res) {\n    var resData = \"\";\n    res.setEncoding('utf8');\n    res.on('data',function(chunk) { resData+=chunk; });\n    res.on('end', function() { callback(res, resData); });\n  };\n}\n"], ["lowerScriptsInfo", "\nfunction lowerScriptsInfo(docDom) {\n  var $scripts = $(docDom).find('script[src]');\n  $scripts.each(function () {\n    $(this).attr('src', function (idx, path) {\n      return path.toLowerCase();\n    });\n  });\n}\n"], ["parseContentType", "\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n  //... rest of the parse function\n}\n"], "```"]