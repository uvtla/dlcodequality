[["conditionalEscapeAndProcess", "\nfunction (txt, tag) {\n  return (typeof txt === 'string' || typeof txt === 'number') ?\n    string.esc(txt) :\n    contentText(txt, tag);\n}\n"], ["errorHandlingAndResultProcessingCallback", "\nfunction callback(req, res, resolve, reject, error, result, permissions, action) {\n  <handleError>\n  if (error) {\n    reqlog.error('internal server error', error);\n    if (exports.handleErrors) {\n      responseBuilder.error(req, res, 'INTERNAL_SERVER_ERROR');\n    } else {\n      reject(error);\n    }\n  } \n  </handleError>\n  else {\n    <processResult>\n    if (Array.isArray(result)) {\n      for (var i = 0, length = result.length; i < length; i++) {\n        result[i] = filterAttributes(result[i], permissions);\n      }\n    } else {\n      result = filterAttributes(result, permissions);\n    }\n    reqlog.info(action + '.success', result);\n    resolve(result);\n    </processResult>\n  }\n  \n  <filterAttributes>\n  function filterAttributes(object, permissions) {\n    if (object) {\n      var userType = req.activeUser && req.activeUser.type || 'null';\n      for (var attribute in object._doc) {\n        if (object._doc.hasOwnProperty(attribute)) {\n          if (!permissions[attribute] || \n            permissions[attribute][0] !== 'null' && \n            permissions[attribute].indexOf(userType) === -1 && \n            userType !== 'admin' \n          ) {\n            delete object._doc[attribute];\n          }\n        }\n      }\n    }\n    return object;\n  }\n  </filterAttributes>\n}\n"], ["parseSelector", "\nfunction parseSelector(rawSelector) {\n  const parsedSelector = tryParseSelector(rawSelector)\n\n  return {\n    rawSelector,\n    isExit: rawSelector.endsWith(\":exit\"),\n    parsedSelector,\n  }\n}\n"], ["replaceArgsExpr", "\nfunction replaceArgsExpr(ctx, forms, expansioncode, replacements, isrestarg) {\n  // SRP Annotation is not provided for this function as it seems to involve a complex macro expansion operation that likely has single responsibility within its context. Additional context is needed for accurate SRP assessment.\n}\n"], ["mouseEventHandlersRemoval", "\nfunction(element) {\n  <removeEventHandlers>\n  if (!(element && element.nodeType === 1)) {\n    return;\n  }\n  var mouseHandlers = _mouseHandlers[element.zcClippingId];\n  if (!(typeof mouseHandlers === \"object\" && mouseHandlers)) {\n    return;\n  }\n  var key, val, mouseEvents = [ \"move\", \"leave\", \"enter\", \"out\", \"over\" ];\n  for (var i = 0, len = mouseEvents.length; i < len; i++) {\n    key = \"mouse\" + mouseEvents[i];\n    val = mouseHandlers[key];\n    if (typeof val === \"function\") {\n      element.removeEventListener(key, val, false);\n    }\n  }\n  delete _mouseHandlers[element.zcClippingId];\n  </removeEventHandlers>\n}\n"], ["resolveBlob", "\nasync function resolveBlob(dir, ref, pathName, includeUncommitted) {\n  <resolveCommitSha>\n  const commitSha = await resolveCommit(dir, ref);\n  </resolveCommitSha>\n\n  <readCommittedObject>\n  if (!includeUncommitted) {\n    return (await git.readObject({ dir, oid: commitSha, filepath: pathName })).oid;\n  }\n  </readCommittedObject>\n\n  <handleUncommittedChanges>\n  const status = await git.status({ dir, filepath: pathName });\n  if (status.endsWith('unmodified')) {\n    return (await git.readObject({ dir, oid: commitSha, filepath: pathName })).oid;\n  }\n  if (status.endsWith('absent') || status.endsWith('deleted')) {\n    const err = new Error(`Not found: ${pathName}`);\n    err.code = git.E.TreeOrBlobNotFoundError;\n    throw err;\n  }\n  </handleUncommittedChanges>\n\n  <writeUncommittedObject>\n  const content = await fse.readFile(resolvePath(dir, pathName));\n  return git.writeObject({\n    dir,\n    object: content,\n    type: 'blob',\n    format: 'content',\n  });\n  </writeUncommittedObject>\n}\n"], ["elementErrorHandling", "\nfunction(reason, element) {\n    <popElementHandleError>\n\tif (elements.length > 0) {\n\t\tvar obj = elements.pop();\n\t\telement = element || obj.element;\n\n\t\tobj.error.call(element, reason);\n\t\tbigscreen.onerror(element, reason);\n\t}\n\t</popElementHandleError>\n}\n"], ["finalizeMeasurement", "\nfunction finalizeMeasurement(id) {\n    <deleteActiveTest>\n    if (activeTests[id.id]) {\n        delete activeTests[id.id];\n    }\n    </deleteActiveTest>\n\n    <deleteUpdatableTest>\n    if (updatableTests[id.id]) {\n        delete updatableTests[id.id];\n    }\n    </deleteUpdatableTest>\n}\n"], ["fitPositionIntoSafeArea", "\nfunction fitPositionIntoSafeArea(position, layouts) {\n    <fitIntoSafeArea>\n    var windowLayout = layouts.windowLayout,\n        safeAreaLayout = layouts.safeAreaLayout,\n        optionsLayout = layouts.optionsLayout;\n\n    if (!safeAreaLayout) {\n      return position;\n    }\n\n    var saX = safeAreaLayout.x,\n        saY = safeAreaLayout.y,\n        saHeight = safeAreaLayout.height,\n        saWidth = safeAreaLayout.width;\n    var oHeight = optionsLayout.height,\n        oWidth = optionsLayout.width;\n    var wWidth = windowLayout.width;\n    var top = position.top,\n        left = position.left,\n        right = position.right;\n    top = fit(top, oHeight, saY, saY + saHeight);\n    left = fit(left, oWidth, saX, saX + saWidth);\n    right = fit(right, oWidth, wWidth - saX - saWidth, saX);\n    </fitIntoSafeArea>\n    return {\n      top: top,\n      left: left,\n      right: right\n    };\n  }\n"], ["getBaseModel", "\nfunction getBaseModel(tooltipOpts) {\n\t\tvar globalDefaults = Chart.defaults.global;\n\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\n\t\treturn {\n\t\t\t<buildBaseModelProps>\n\t\t\txPadding: tooltipOpts.xPadding,\n\t\t\tyPadding: tooltipOpts.yPadding,\n\t\t\txAlign: tooltipOpts.xAlign,\n\t\t\tyAlign: tooltipOpts.yAlign,\n\n\t\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t\t_bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t_bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\t\tbodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\t\tbodySpacing: tooltipOpts.bodySpacing,\n\n\t\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t\t_titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t_titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\t\ttitleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\n\t\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t\t_footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t\t_footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\t\tfooterFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\n\t\t\tcaretSize: tooltipOpts.caretSize,\n\t\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\t\topacity: 0,\n\t\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\t\tdisplayColors: tooltipOpts.displayColors\n\t\t\t</buildBaseModelProps>\n\t\t};\n\t}\n"], "```\nThis function is SRP compliant, having the single responsibility of constructing the base model for a tooltip's configuration.\n"]