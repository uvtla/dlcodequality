[["setLocationHash", "\nfunction setLocationHash(location, fragment, replace) {\n  if (replace) {\n    var href = location.href.replace(/(javascript:|#).*$/, '');\n    location.replace(href + '#' + fragment);\n  } else {\n    location.hash = '#' + fragment;\n  }\n}\n"], ["logRouteAndSetCurrentPage", "\nfunction routeInit(req) {\n  console.log('route matched: ('+req.route.method.toUpperCase()+') ' + req.route.path);  \n  var chunks = req.route.path.split(\"/\");\n  req.session.currentPage = chunks[1];\n}\n"], ["getContainerTypes", "\nfunction getContainerTypes() {\n  var _this4 = this;\n  var containerDebugAdapter = this.get('containerDebugAdapter');\n  var types;\n\n  if (containerDebugAdapter.canCatalogEntriesByType('model')) {\n    types = containerDebugAdapter.catalogEntriesByType('model');\n  } else {\n    types = this._getObjectsOnNamespaces();\n  }\n\n  \n  types = _emberRuntimeSystemNative_array.A(types).map(function (name) {\n    return {\n      klass: _this4._nameToClass(name),\n      name: name\n    };\n  });\n  types = _emberRuntimeSystemNative_array.A(types).filter(function (type) {\n    return _this4.detect(type.klass);\n  });\n\n  return _emberRuntimeSystemNative_array.A(types);\n}\n"], ["toCORMOType", "\nfunction toCORMOType(type) {\n  if (typeof type === 'string') { ... }\n  else if (type === String) { ... }\n  else if (type === Number) { ... }\n  else if (type === Boolean) { ... }\n  else if (type === Date) { ... }\n  else if (type === Object) { ... }\n  if (typeof type === 'function') { ... }\n  return type;\n}\n"], ["calculateAABB", "\nfunction calculateAABB() {\n  var aabb = { min: new Vector(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE) };\n  aabb.max = aabb.min.negative();\n  for (var i = 0; i < this.vertices.length; i++) {\n    var v = Vector.fromArray(this.vertices[i]);\n    aabb.min = Vector.min(aabb.min, v);\n    aabb.max = Vector.max(aabb.max, v);\n  }\n  return aabb;\n}\n"], ["triggerEventListeners", "\nfunction triggerListeners(listeners, event, args) {\n  if (listeners && event in listeners) {\n    var eventListeners = listeners[event];\n    var triggerGroup = ++triggerId;\n    var next, node = eventListeners.next;\n\n    while (node !== eventListeners) {\n      next = node.next;\n      node.trigger(triggerGroup, args, false);\n      node = next;\n    }\n\n    node = eventListeners.next;\n\n    while (node !== eventListeners) {\n      next = node.next;\n      node.trigger(triggerGroup, args, true);\n      node = next;\n    }\n  }\n}\n"], ["performLintReport", "\nfunction reportReducer(linter, summary, filePath) {\n  const fileContents = fs.readFileSync(filePath, {encoding: 'utf8'})\n  const file = linter.process(fileContents)\n\n  if (file.messages.length !== 0) {\n    this.printFilePath(filePath)\n\n    file.messages.forEach((message) => {\n      const severity = message.fatal ? 'error' : 'warning'\n      this.printLintItem(message.line, message.column, severity, message.message, message.ruleId)\n\n      if (message.fatal) {\n        summary.errors += 1\n      } else {\n        summary.warnings += 1\n      }\n    })\n\n    console.log('') \n  }\n\n  return summary\n}\n"], ["setGetClearOptions", "\nfunction setGetClearOptions(config) {\n  this.setOption = config.setOption.bind(config);\n  this.isOption = function (name) { return name in config.options; };\n  this.clear();\n}\n"], ["checkSymbolAccessibility", "\nfunction isSymbolAccessible(symbol, enclosingDeclaration, meaning, shouldComputeAliasesToMakeVisible) {\n  if (symbol && enclosingDeclaration && !(symbol.flags & 262144 )) {\n    var initialSymbol = symbol;\n    var meaningToLook = meaning;\n    while (symbol) {\n      var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaningToLook, false);\n      if (accessibleSymbolChain) { ... }\n      meaningToLook = getQualifiedLeftMeaning(meaning);\n      symbol = getParentOfSymbol(symbol);\n    }\n    var symbolExternalModule = ts.forEach(initialSymbol.declarations, getExternalModuleContainer);\n    if (symbolExternalModule) {\n      var enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);\n      if (symbolExternalModule !== enclosingExternalModule) { ... }\n    }\n    return { accessibility: 0 };\n  }\n  function getExternalModuleContainer(declaration) { ... }\n}\n"], ["performDivision", "\nfunction divide() {\n  var set;\n  var scale = -1;\n  if (divide.arguments.length == 2) { ... } \n  else if (divide.arguments.length == 3) { ... }\n  else if (divide.arguments.length == 1) { ... }\n  else { ... }\n  var rhs = divide.arguments[0];\n  return this.dodivide('D',rhs,set,scale);\n}\n"], "```"]