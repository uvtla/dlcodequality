[["addGlobalHandler", "\nfunction addGlobalHandler(eventType, handler, thisObject){\n    var handlers = globalHandlers[eventType];\n    if (handlers)\n    {\n      \n      for (var i = 0, item; item = handlers[i]; i++)\n        if (item.handler === handler && item.thisObject === thisObject)\n          return;\n    }\n    else\n    {\n      if (noCaptureScheme)\n        \n        addHandler(document, eventType, $null);\n      else\n        document.addEventListener(eventType, observeGlobalEvents, true);\n\n      handlers = globalHandlers[eventType] = [];\n    }\n\n    \n    handlers.push({\n      handler: handler,\n      thisObject: thisObject\n    });\n  }\n"], ["PreparedStatementError", "\nfunction PreparedStatementError(error, ps) {\n    const temp = Error.apply(this, arguments);\n    temp.name = this.name = 'PreparedStatementError';\n    this.stack = temp.stack;\n    if (error instanceof npm.QueryFileError) {\n        this.error = error;\n        <setMessage>\n        this.message = 'Failed to initialize \\'text\\' from a QueryFile.';\n        </setMessage>\n    } else {\n        <setMessage>\n        this.message = error;\n        </setMessage>\n    }\n    this.result = ps;\n}\n"], ["anonymous", "\nfunction(node, propertyType) {\n\t\t\tvar context = this,\n\t\t\t\tchildren = [],\n\t\t\t\tout = [],\n\t\t\t\tchild,\n\t\t\t\tx,\n\t\t\t\ti;\n  \n\t\t\t<getChildren>\n\t\t\tchildren = modules.domUtils.getChildren( node );\n\t\t\t</getChildren>\n\n\t\t\t<processingLoop>\n\t\t\tx = 0;\n\t\t\ti = children.length;\n\t\t\twhile(x < i) { \n\t\t\t\tchild = children[x];\n\t\t\t\tvar value = null;\n\t\t\t\tif(modules.domUtils.hasAttributeValue(child, 'class', 'value')) {\n\t\t\t\t\tswitch(propertyType) { \n\t\t\t\t\tcase 'p': \n\t\t\t\t\t\tvalue = context.getPValue(child, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'u':\n\t\t\t\t\t\tvalue = context.getUValue(child, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'dt':\n\t\t\t\t\t\tvalue = context.getDTValue(child, '', null, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} \n\t\t\t\t\tif(value) {\n\t\t\t\t\t\tout.push(modules.utils.trim(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\t</processingLoop>\n\t\t\t\n\t\t\t<handleOutput>\n\t\t\tif(out.length > 0) {\n\t\t\t\tif(propertyType === 'p') {\n\t\t\t\t\treturn modules.text.parseText( this.document, out.join(''), this.options.textFormat);\n\t\t\t\t}\n\t\t\t\tif(propertyType === 'u') {\n\t\t\t\t\treturn out.join('');\n\t\t\t\t}\n\t\t\t\tif(propertyType === 'dt') {\n\t\t\t\t\tvar format = 'microformat2';\n\t\t\t\t\treturn modules.dates.concatFragments(out,format).toString(format);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t</handleOutput>\n\t\t}\n"], ["anonymous", "\nfunction() {\n        if (!this.type) {\n            <setDefaultType>\n            this.type = google.maps.MapTypeId.ROADMAP;\n            </setDefaultType>\n        }\n        var mapObject;\n        var cache = OpenLayers.Layer.Google.cache[this.map.id];\n        if (cache) {\n            \n            <useCache>\n            mapObject = cache.mapObject;\n            \n            ++cache.count;\n            </useCache>\n        } else {\n            \n            \n            <createMapObject>\n            var center = this.map.getCenter();\n            var container = document.createElement('div');\n            container.className = \"olForeignContainer\";\n            container.style.width = '100%';\n            container.style.height = '100%';\n            mapObject = new google.maps.Map(container, {\n                center: center ?\n                    new google.maps.LatLng(center.lat, center.lon) :\n                    new google.maps.LatLng(0, 0),\n                zoom: this.map.getZoom() || 0,\n                mapTypeId: this.type,\n                disableDefaultUI: true,\n                keyboardShortcuts: false,\n                draggable: false,\n                disableDoubleClickZoom: true,\n                scrollwheel: false,\n                streetViewControl: false\n            });\n            var googleControl = document.createElement('div');\n            googleControl.style.width = '100%';\n            googleControl.style.height = '100%';\n            mapObject.controls[google.maps.ControlPosition.TOP_LEFT].push(googleControl);\n            \n            \n            \n            cache = {\n                googleControl: googleControl,\n                mapObject: mapObject,\n                count: 1\n            };\n            OpenLayers.Layer.Google.cache[this.map.id] = cache;\n            </createMapObject>\n        }\n        <setVisibility>\n        this.mapObject = mapObject;\n        this.setGMapVisibility(this.visibility);\n        </setVisibility>\n    }\n"], ["resolverMiddleware", "\nfunction resolverMiddleware (resolver) {\n  return function (req, res, next) {\n    try {\n      const { source, args, context, info } = req\n      const nonCircularReq = _.omit(req, [ 'context' ])\n      <constructContext>\n      const ctx = _.assign({}, context, { req: nonCircularReq, res, next })\n      </constructContext>\n      <resolveValue>\n      const value = resolver(source, args, ctx, info)\n      </resolveValue>\n\n      \n      <handlePromise>\n      return Promise.resolve(value)\n        .then(result => {\n          req.result = result\n          return next()\n        })\n        .catch(next)\n      </handlePromise>\n    } catch (err) {\n      <handleError>\n      return next(err)\n      </handleError>\n    }\n  }\n}\n"], ["logOutput", "\nfunction(lvl, clientId, options) {\n  if (npmlog.levels[npmlog.level] <= npmlog.levels[lvl]) {\n    <logHeader>\n    npmlog.log(lvl, clientId, HEADER_BANNER);\n    npmlog.log(lvl, clientId, '| IBM MQ Light Node.js Client Module -',\n               options.title);\n    npmlog.log(lvl, clientId, HEADER_BANNER);\n    </logHeader>\n    <logDetails>\n    npmlog.log(lvl, clientId, '| Date/Time         :-',\n               moment().format('ddd MMMM DD YYYY HH:mm:ss.SSS Z'));\n    npmlog.log(lvl, clientId, '| Host Name         :-', os.hostname());\n    npmlog.log(lvl, clientId, '| Operating System  :-',\n               os.type(), os.release());\n    npmlog.log(lvl, clientId, '| Architecture      :-',\n               os.platform(), os.arch());\n    npmlog.log(lvl, clientId, '| Node Version      :-', process.version);\n    npmlog.log(lvl, clientId, '| Node Path         :-', process.execPath);\n    npmlog.log(lvl, clientId, '| Node Arguments    :-', process.execArgs);\n    if (!isWin) {\n      npmlog.log(lvl, clientId, '| User Id           :-', process.getuid());\n      npmlog.log(lvl, clientId, '| Group Id          :-', process.getgid());\n    }\n    npmlog.log(lvl, clientId, '| Name              :-', pkg.name);\n    npmlog.log(lvl, clientId, '| Version           :-', pkg.version);\n    npmlog.log(lvl, clientId, '| Description       :-', pkg.description);\n    npmlog.log(lvl, clientId, '| Installation Path :-', __dirname);\n    npmlog.log(lvl, clientId, '| Uptime            :-', process.uptime());\n    npmlog.log(lvl, clientId, '| Log Level         :-', npmlog.level);\n    npmlog.log(lvl, clientId, '| Data Size         :-', dataSize);\n    if ('fnc' in options) {\n      npmlog.log(lvl, clientId, '| Function          :-', options.fnc);\n    }\n    if ('probeId' in options) {\n      npmlog.log(lvl, clientId, '| Probe Id          :-', options.probeId);\n    }\n    if ('ffdcSequence' in options) {\n      npmlog.log(lvl, clientId, '| FFDCSequenceNumber:-',\n                 options.ffdcSequence++);\n    }\n    if (potentialUnwinds !== 0) {\n      npmlog.log(lvl, clientId, '| potentialUnwinds  :-', potentialUnwinds);\n    }\n    </logDetails>\n    <logFooter>\n    npmlog.log(lvl, clientId, HEADER_BANNER);\n    if ('fnc' in options && options.fnc.indexOf('SIG') == 0) {\n      npmlog.log(lvl, clientId, '(Set MQLIGHT_NODE_NO_HANDLER to ' +\n                 'disable user requested FFDCs)');\n    }\n    npmlog.log(lvl, clientId, '');\n    </logFooter>\n  }\n}\n"], ["RuleConfig", "\nfunction (rules, options) {\n    <initializeRules>\n    this.rules = new Config(rules, options);\n    </initializeRules>\n    <initializeParser>\n    this.parser = new Parser();\n    </initializeParser>\n    <initializeInlineConfig>\n    this.inlineConfig = new InlineConfig(this.rules);\n    </initializeInlineConfig>\n}\n"], ["bindAll", "\nfunction bindAll(object) {\n      <collectFunctions>\n      var funcs = arguments.length > 1 ? concat.apply(arrayRef, nativeSlice.call(arguments, 1)) : functions(object),\n          index = -1,\n          length = funcs.length;\n      </collectFunctions>\n\n      <bindFunctions>\n      while (++index < length) {\n        var key = funcs[index];\n        object[key] = bind(object[key], object);\n      }\n      </bindFunctions>\n      return object;\n    }\n"], ["actPolyfill", "\nfunction actPolyfill(cb) {\n  <batchedUpdates>\n  ReactDOM.unstable_batchedUpdates(cb)\n  </batchedUpdates>\n  <forceUpdate>\n  ReactDOM.render(<div />, document.createElement('div'))\n  </forceUpdate>\n}\n"], ["urlJoin", "\nfunction urlJoin() {\n    var args = Array.prototype.slice.call(arguments),\n        prefixDoubleSlash = false,\n        url;\n\n    <handleEmptyArgument>\n    if (args[0] === '') {\n        args.shift();\n    }\n    </handleEmptyArgument>\n\n    <handleDoubleSlash>\n    if (args[0].indexOf('//') === 0) {\n        prefixDoubleSlash = true;\n    }\n    </handleDoubleSlash>\n\n    <joinArguments>\n    url = args.join('/');\n    </joinArguments>\n\n    <replaceAllDoubleSlashes>\n    url = url.replace(/(^|[^:])\\/\\/+/g, '$1/');\n    </replaceAllDoubleSlashes>\n\n    <prependDoubleSlashIfNecessary>\n    if (prefixDoubleSlash) {\n        url = '//'+ url.replace(/^\\/+/, '');\n    }\n    </prependDoubleSlashIfNecessary>\n\n    <deduplicateSubDir>\n    url = deduplicateSubDir(url);\n    </deduplicateSubDir>\n    return url;\n}\n"], ""]