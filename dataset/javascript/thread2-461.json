[["deactivateControls", "\nfunction() {\n        <deactivateIndividualControls>\n        if (this.pinchZoom) {\n            this.pinchZoom.deactivate();\n        }\n        this.zoomBox.deactivate();\n        this.dragPan.deactivate();\n        this.handlers.click.deactivate();\n        this.handlers.wheel.deactivate();\n        </deactivateIndividualControls>\n        return OpenLayers.Control.prototype.deactivate.apply(this, arguments);\n    }\n"], ["buildPath", "\nfunction buildPath(lines, jumpSize, jumpType) {\n\n        var path = new g.Path();\n        var segment;\n        \n        <initializePath>\n        segment = g.Path.createSegment('M', lines[0].start);\n        path.appendSegment(segment);\n        </initializePath>\n\n        <appendToPath>\n        joint.util.toArray(lines).forEach(function(line, index) {\n            if (line.isJump) {\n                var angle, diff;\n                var control1, control2;\n                <handleJumpTypes>\n                if (jumpType === 'arc') { \n                    // ... implementation for 'arc' jump type\n                } else if (jumpType === 'gap') {\n                    // ... implementation for 'gap' jump type\n                } else if (jumpType === 'cubic') { \n                    // ... implementation for 'cubic' jump type\n                }\n                </handleJumpTypes>\n            } else {\n                <handleLineSegment>\n                segment = g.Path.createSegment('L', line.end);\n                path.appendSegment(segment);\n                </handleLineSegment>\n            }\n        });\n        </appendToPath>\n\n        return path;\n    }\n"], ["equals", "\nfunction equals(obj) {\n  <initialChecks>\n  if (obj == null) return false;\n  if (!(obj instanceof BigDecimal)) return false;\n  </initialChecks>\n  \n  var rhs = obj; \n  \n  <simpleEqualityCheck>\n  if (this.ind != rhs.ind) return false;\n  if (this.mant.length == rhs.mant.length && this.exp == rhs.exp && this.form == rhs.form) {\n    for (var i = 0; i < this.mant.length; i++) {\n      if (this.mant[i] != rhs.mant[i]) return false;\n    }\n  }\n  </simpleEqualityCheck>\n  else {\n    <complexEqualityCheck>\n    var lca = this.layout(); \n    var rca = rhs.layout();\n    if (lca.length != rca.length) return false;\n    for (var i = 0; i < lca.length; i++) {\n      if (lca[i] != rca[i]) return false;\n    }\n    </complexEqualityCheck>\n  }\n  return true;\n}\n"], ["initFromScratch", "\nfunction initFromScratch(cbsConfigFromFile) {\n    <initializeState>\n    cbsConfigFromFile.initialState.forEach(function (item) {\n        return saveItemToBrowserStorage(item);\n    });\n    </initializeState>\n    \n    <returnNewState>\n    return {\n        [browser_storage_config_1.browserStorageConfig.DB_INITIAL_KEY]: cbsConfigFromFile.initialState\n    };\n    </returnNewState>\n}\n"], ["getSinglePath", "\nfunction getSinglePath(points, smooth, isInCircle, cfg) {\n  <pathCreation>\n  var path = void 0;\n  if (!smooth) {\n    path = PathUtil.getLinePath(points, false);\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  } else {\n    var constraint = cfg.constraint;\n    if (isInCircle && points.length) {\n      points.push({ x: points[0].x, y: points[0].y });\n    }\n    path = PathUtil.getSplinePath(points, false, constraint);\n  }\n  </pathCreation>\n\n  return path;\n}\n"], ["generateDefaultName", "\nfunction(name) {\n    <defaultNamingConvention>\n    if (/[A-Z]/.test(name.charAt(0)))\n        return \"default\" + name;\n    var firstLetter = name.charAt(0);\n    return \"default\" + firstLetter.toUpperCase() + name.substring(1);\n    </defaultNamingConvention>\n}\n"], ["defaultWorkerPolicies", "\nfunction defaultWorkerPolicies(version, workspaceSid, workerSid) {\n  <createPolicies>\n  var activities = new Policy({\n      // ... policy details for activities\n  });\n  var tasks = new Policy({\n      // ... policy details for tasks\n  });\n  var reservations = new Policy({\n      // ... policy details for reservations\n  });\n  var workerFetch = new Policy({\n      // ... policy details for worker fetch\n  });\n  </createPolicies>\n  \n  return [activities, tasks, reservations, workerFetch];\n}\n"], ["dive", "\nfunction dive(name) {\n    <recursionHandling>\n    if (dive[name]) {\n        return;\n    }\n    dive[name] = true;\n    dive.required.push(name);\n\n    var deps = allModules[name] || [];\n    deps.forEach(function (item) {\n        dive(item);\n    });\n    </recursionHandling>\n}\n"], ["map", "\nfunction map(str, props, fn) {\n  <replaceMatching>\n  var re = /\\.\\w+|\\w+ *\\(|\"[^\"]*\"|'[^']*'|\\/([^/]+)\\/|[a-zA-Z_]\\w*/g;\n  return str.replace(re, function (_) {\n    if ('(' == _[_.length - 1]) return fn(_);\n    if (!~props.indexOf(_)) return _;\n    return fn(_);\n  });\n  </replaceMatching>\n}\n"], ["dispatchMessages", "\nfunction (data) {\n    <prepareDataAndDispatch>\n    var self = this;\n\n    if (typeof data === 'object') {\n      data = EJSON.stringify(data);\n    }\n\n    _.each(self.callbacks['message'], function (cb) {\n      cb(data);\n    });\n    </prepareDataAndDispatch>\n}\n"], "```"]