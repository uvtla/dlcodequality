[["parse", "\nfunction parse(path) {\n  <handleArrayInput>\n  if (t.Array.is(path)) {\n    return path.map(parse).filter(Boolean);\n  }\n  </handleArrayInput>\n  var component = getComponent(require(path));\n  if (component) {\n    var comments = getComments(path);\n    var descriptions = getDescriptions(comments);\n    var type = toObject(getPropsType(component));\n    <extractProps>\n    var props = type.kind === 'refinement' ? type.type.props : type.props;\n    </extractProps>\n    var defaultProps = getDefaultProps(component);\n    var name = getComponentName(component);\n    <assignDefaultValuesAndDescriptions>\n    for (var prop in props) {\n      if (props.hasOwnProperty(prop)) {\n        if (defaultProps.hasOwnProperty(prop)) {\n          props[prop].defaultValue = defaultProps[prop];\n        }\n        if (descriptions.props.hasOwnProperty(prop)) {\n          props[prop].description = descriptions.props[prop];\n        }\n      }\n    }\n    </assignDefaultValuesAndDescriptions>\n    return {\n      name: name,\n      description: descriptions.component,\n      props: props\n    };\n  }\n}\n"], ["UrlHelper", "\nfunction (rule) {\n  var exports = {};\n\n  if (!(this instanceof UrlHelper)) {\n    return new UrlHelper(rule);\n  }\n\n  this._originalURI = this._extractURI(rule);\n\n  if (!this._originalURI && this._originalURI !== '') {\n    return false;\n  }\n\n  this._originalRule = rule;\n\n  this.URI = URI(this._originalURI);\n\n  <exportFunctions>\n  exports.URI = this.URI;\n  exports.getOriginalURI = this.getOriginalURI.bind(this);\n  exports.getModifiedRule = this.getModifiedRule.bind(this);\n  exports.getOriginalRule = this.getOriginalRule.bind(this);\n  </exportFunctions>\n\n  return exports;\n}\n"], ["shivCssText", "\nfunction shivCssText(cssText) {\n  var pair,\n    parts = cssText.split('{'),\n    index = parts.length,\n    reElements = RegExp('(^|[\\\\s,>+~])(' + getElements().join('|') + ')(?=[[\\\\s,>+~#.:]|$)', 'gi'),\n    replacement = '$1' + shivNamespace + '\\\\:$2';\n\n  while (index--) {\n    pair = parts[index] = parts[index].split('}');\n    pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);\n    parts[index] = pair.join('}');\n  }\n  return parts.join('{');\n}\n"], ["convertDegreesToDMS", "\nfunction (degrees) {\n  var sign,\n    temp,\n    d,\n    m,\n    s;\n\n  sign = degrees < 0 ? -1 : 1;\n  temp = sign * degrees;\n  d = Math.floor(temp);\n  temp = (temp - d) * 60;\n  m = Math.floor(temp);\n  temp = (temp - m) * 60;\n  s = Math.round(temp);\n\n  if (s == 60) {\n    m++;\n    s = 0;\n  }\n  if (m == 60) {\n    d++;\n    m = 0;\n  }\n\n  return (sign == -1 ? \"-\" : \"\") + d + \"\\u00B0\" + \" \" + m + \"\\u2019\" + \" \" + s + \"\\u201D\";\n}\n"], ["crawlLinks", "\nfunction crawlLinks(result, $, endCallback) {\n\n  if (!result.links) {\n    return endCallback();\n  }\n\n  log.debug({ \"url\": result.url, \"step\": \"analyzeHTML\", \"message\": \"CrawlLinks\" });\n\n  async.each($('link'), function (linkTag, callback) {\n    crawLink($, result, linkTag, callback);\n  }, endCallback);\n}\n"], ["SVGObj", "\nfunction SVGObj(file, svg, config) {\n  this.file = file;\n  this.id = path.basename(this.file, '.svg');\n\n  this.svg = new XMLObject(svg);\n\n  <configureSVG>\n  this._config = _.extend({\n    maxwidth: 1000,\n    maxheight: 1000,\n    padding: 0\n  }, config);\n  this._config.maxwidth = Math.abs(parseInt(this._config.maxwidth || 0, 10));\n  this._config.maxheight = Math.abs(parseInt(this._config.maxheight || 0, 10));\n  this._config.padding = Math.abs(parseInt(this._config.padding, 10));\n\n  var width = this.svg.root().attr('width'),\n    height = this.svg.root().attr('height');\n\n  this.width = width ? parseFloat(width, 10) : false;\n  this.height = height ? parseFloat(height, 10) : false;\n  </configureSVG>\n}\n"], ["onArg", "\nfunction onArg(argName, index) {\n  <handleArgumentMatchCases>\n  var idxMatch = argName.match(/^\\$(\\d+)$/);\n  var paramMatch = argName.match(/^\\$\\$([A-Za-z0-9_-]+)$/);\n  var flagMatch = argName.match(/^\\$([A-Za-z0-9_-]+)$/);\n  var paramName, idx;\n\n  if (index === 0) {\n    if (secondPass)\n      argValues[index] = shell;\n  }\n  \n  else if (argName === \"$args\") {\n    if (secondPass)\n      argValues[index] = varArgs;\n  }\n  \n  else if (idxMatch) {\n    if (secondPass)\n      argValues[index] = varArgs[idxMatch[1]];\n    else\n      argsRequired = Math.max(argsRequired, idxMatch[1]);\n  }\n  \n  else if (paramMatch) {\n    <ExtractParametersAndValidate>\n    if (!secondPass) {\n      paramName = utils.hyphenate(paramMatch[1]);\n      validOptions.push(\"[\" + paramName + \" <value>]\");\n      idx = varArgs.indexOf(paramName);\n      if (idx != -1) {\n        if (idx >= varArgs.length - 1)\n          throw \"Missing a value for option \" + paramName;\n        argValues[index] = varArgs[idx + 1];\n        varArgs.splice(idx, 2);\n      }\n    }\n    </ExtractParametersAndValidate>\n  }\n  \n  else if (flagMatch) {\n    <ExtractFlagsAndValidate>\n    if (!secondPass) {\n      paramName = utils.hyphenate(flagMatch[1]);\n      validOptions.push(\"[\" + paramName + \"]\");\n      idx = varArgs.indexOf(paramName);\n      argValues[index] = idx != -1;\n      if (idx != -1)\n        varArgs.splice(idx, 1);\n    }\n    </ExtractFlagsAndValidate>\n  }\n  else if (argName.indexOf('$') === 0)\n    throw new Error(\"Invalid parametername in nscript function: '\" + argName + \"', please check the nscript docs for valid parameter names\");\n  else if (secondPass)\n    argValues[index] = shell.alias(argName);\n  </handleArgumentMatchCases>\n}\n"], ["Class", "\nfunction Class(name, options) {\n\n  this.name = name || \"\";\n  this.mixins = [];\n  this.methods = {};\n  this.properties = {};\n\n  if (lib.type.isObject(options)) {\n    <applyOptionsToClass>\n    var keys = Object.keys(options);\n    var length = keys.length;\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      var value = options[key];\n      if (key === \"constructor\") {\n        this.addConstructor(value);\n      } else if (key === \"inherits\") {\n        this.inherit(value);\n      } else if (key === \"mixins\") {\n        this.mixin(value);\n      } else if (lib.type.isFunction(value) && lib.inherits.superOf(value, Property)) {\n        this.addProperty(key, value);\n      } else {\n        this.addMethod(key, value);\n      }\n    }\n    </applyOptionsToClass>\n  }\n\n}\n"], ["finishCallback", "\nfunction finishCallback(callback, f, res) {\n  return function callbackWithArgs() {\n    const response = f.apply(this, arguments);\n    if (res && !isEmptyObject(res.headers)) {\n      response.headers = res.headers;\n    }\n    callback(response);\n  };\n}\n"], ["normalizeProperty", "\nfunction normalizeProperty(name, value, isStyle) {\n  var temp = new CKEDITOR.dom.element('span');\n  temp[isStyle ? 'setStyle' : 'setAttribute'](name, value);\n  return temp[isStyle ? 'getStyle' : 'getAttribute'](name);\n}\n"], "```"]