[["callbackDefinition", "\nfunction (callbackDefinition) {\n  callbackDefinition = this.$normCallback(callbackDefinition);\n  var valid = ariaUtilsType.isFunction(callbackDefinition.fn);\n  this._scope = valid ? callbackDefinition.scope : this;\n  this._function = valid ? callbackDefinition.fn : this._warnDisposed;\n  this._args = callbackDefinition.args;\n  this._resIndex = callbackDefinition.resIndex;\n  this._apply = callbackDefinition.apply;\n}\n"], ["handleDom", "\nfunction() {\n  var doc = this._doc;\n  this._removeNodes(doc.getElementsByTagName(\"style\"));\n  if (doc.body) {\n    this._replaceBrs(doc.body);\n  }\n  this._replaceNodeTags(doc.getElementsByTagName(\"font\"), \"SPAN\");\n}\n"], ["addDropdownToMenu", "\nfunction addDropdownToMenu(dropdownName, routerName, glyphiconName, enableTranslation, clientFramework) {\n  let navbarPath;\n  <exceptionHandling>\n  try {\n  </exceptionHandling>\n    <editFileStructure>\n    if (clientFramework === 'angular1') {\n      navbarPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.html`;\n      jhipsterUtils.rewriteFile({\n        file: navbarPath,\n        needle: 'jhipster-needle-add-element-to-menu',\n        splicable: [ `<li ng-class=\"{active: vm.$state.includes('${dropdownName}')}\" ng-switch-when=\"true\" uib-dropdown class=\"dropdown pointer\">...</li>` ]\n      }, this);\n    } else {\n      navbarPath = `${CLIENT_MAIN_SRC_DIR}app/layouts/navbar/navbar.component.html`;\n      jhipsterUtils.rewriteFile({\n        file: navbarPath,\n        needle: 'jhipster-needle-add-element-to-menu',\n        splicable: [`<li *ngSwitchCase=\"true\" ngbDropdown class=\"nav-item dropdown pointer\">...</li>` ]\n      }, this);\n    }\n    </editFileStructure>\n  <exceptionHandling>\n  } catch (e) {\n    this.log(`${chalk.yellow('\\nUnable to find ') + navbarPath + chalk.yellow(' or missing required jhipster-needle. Reference to ') + dropdownName} ${chalk.yellow('not added to menu.\\n')}`);\n    this.debug('Error:', e);\n    this.log('Error:', e);\n  }\n  </exceptionHandling>\n}\n"], ["navigate", "\nfunction(){\n  var startDir = this.currentDirection,\n      currentDir = this.currentDirection;\n  var i = 0;\n  while(i < 6){\n    i++;\n    var currentDirAdjustCoords = this.directionToAdjustCoord(currentDir),\n        targetX = this.x + currentDirAdjustCoords.x,\n        targetY = this.y + currentDirAdjustCoords.y;\n    if(this.canMoveTo(targetX, targetY)){\n      this.currentDirection = currentDir;\n      this.moveTo(targetX, targetY);\n      return;\n    }\n    currentDir = this.getNextDirection(currentDir);\n    if(currentDir === startDir){\n      return false;\n    }\n  }\n}\n"], ["getProperty3", "\nfunction getProperty3() {\n  const type = NodeType.PropertyType;\n  const token = tokens[pos];\n  const line = token.ln;\n  const column = token.col;\n  const content = [getVariable()];\n  return newNode(type, content, line, column);\n}\n"], ["isClassConstructor", "\nfunction isClassConstructor(node) {\n  return node.type === \"FunctionExpression\" &&\n      node.parent &&\n      node.parent.type === \"MethodDefinition\" &&\n      node.parent.kind === \"constructor\";\n}\n"], ["copyFromDir", "\nfunction copyFromDir(starter, root) {\n  if (!fs.existsSync(starter)) {\n    throw new Error(`starter ${starter} doesn't exist`);\n  }\n  return fs.mkdirp(root, {mode: 493}).then(() => {\n    console.log(`Creating new theme from local starter: ${chalk.green(starter)}`);\n    return fs.copy(starter, root, {\n      filter: (file) =>\n        !/^\\.(git|hg)$/.test(path.basename(file)) && !/node_modules/.test(file),\n    });\n  });\n}\n"], ["timestamp", "\nfunction timestamp() {\n  var d = new Date();\n  return d.getHours() + ':' + pad2(d.getMinutes()) + ':' + pad2(d.getSeconds());\n}\n"], ["collapseControl", "\nfunction () {\n  var includeShowLess = true;\n  if(this.isExplicitlyCollapsed) {\n    this.isExplicitlyCollapsed = false;\n    includeShowLess = false;\n  }\n  if (!this.isCollapsed) {\n    return;\n  }\n  this.isCollapsed = false;\n  this.element.innerHTML = this.isTruncated ? this.original + (includeShowLess ? this.options.showLess : \"\") : this.original;\n}\n"], ["Reader", "\nfunction Reader(data, ctors) {\n  if (!_.isObject(data)) {\n    console.error(\"Reader constructor: 'data' parameter should be JSON object\");\n    return;\n  }\n  this.data = data;\n  this.ctors = ctors;\n  this.current = this.data;\n  this.idMap = {};\n}\n"], ""]