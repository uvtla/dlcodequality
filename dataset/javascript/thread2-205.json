[["anonymousRejectFunction", "\nfunction() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  deferredObject.reject.apply(null, ctxArgs.concat(args));\n}\n"], ["ignoreMatch", "\nfunction ignoreMatch(ignores, pathName) {\n  let result = false;\n\n  <forEachIgnore>\n  ignores.forEach(ignore => {\n    if (minimatch(pathName, ignore)) {\n      result = true;\n    }\n  });\n  </forEachIgnore>\n\n  return result;\n}\n"], ["show", "\nfunction show() {\n\n  <clearPopupTimeout>\n  popupTimeout = null;\n  </clearPopupTimeout>\n\n  <cancelTransitionTimeout>\n  if ( transitionTimeout ) {\n    $timeout.cancel( transitionTimeout );\n    transitionTimeout = null;\n  }\n  </cancelTransitionTimeout>\n\n  <checkTooltipContent>\n  if ( !(options.useContentExp ? ttScope.contentExp() : ttScope.content) ) {\n    return angular.noop;\n  }\n  </checkTooltipContent>\n\n  <creationOfTooltip>\n  createTooltip();\n  </creationOfTooltip>\n\n  <setInitialTooltipStylesAndDigest>\n  tooltip.css({ top: 0, left: 0, display: 'block' });\n  ttScope.$digest();\n  </setInitialTooltipStylesAndDigest>\n\n  <positionAndOpenTooltip>\n  positionTooltip();\n\n  ttScope.isOpen = true;\n  ttScope.$apply(); \n  </positionAndOpenTooltip>\n\n  return positionTooltip;\n}\n"], ["serve", "\nfunction serve(root, route, opts) {\n  opts = opts || {};\n  route = route || '/';\n  <assertRoot>\n  assert(root, 'root directory is required to serve files');\n  </assertRoot>\n\n  <configureAndLogStatic>\n  debug('static \"%s\" \"%s\" %j', route, root, opts);\n  opts.root = resolve(root);\n  opts.index = opts.index || 'index.html';\n\n  routes[route] = opts;\n  </configureAndLogStatic>\n\n  return function *serve(next) {\n    yield* next;\n    debug('path: \"%s\"', this.path);\n\n    <extractRoute>\n    var route = this.path.split('/')[1] || '/';\n    </extractRoute>\n\n    <checkRequestMethodAndBody>\n    if (this.method != 'HEAD' && this.method != 'GET') return;\n    if (this.body != null || this.status != 404) return;\n    </checkRequestMethodAndBody>\n\n    <sendStaticFile>\n    yield send(this, this.path.slice(1 + route.length) || '/', routes[route]);\n    </sendStaticFile>\n  };\n}\n"], ["formatSpecDescription", "\nfunction formatSpecDescription(spec) {\n  const egText = spec.example ? ` (eg. \"${spec.example}\")` : ''\n  const docsText = spec.docs ? `. See ${spec.docs}` : ''\n  return `${spec.desc}${egText}${docsText}` || ''\n}\n"], ["isPre", "\nfunction isPre(p1, p2) {\n  \n  <stripVersion>\n  const stripped = semver.coerce(p2).raw;\n  </stripVersion>\n  \n  <calculateDiff>\n  const diff = semver.diff(p1, stripped);\n  </calculateDiff>\n  \n  <checkPreRelease>\n  return ['premajor', 'preminor', 'prepatch', 'prerelease'].indexOf(diff) >= 0 ? true : false;\n  </checkPreRelease>\n}\n"], ["downloadCodeModule", "\nfunction downloadCodeModule(db, module, codePath) {\n  <assembleFilePath>\n  const moduleName = module.replace(/^\\/code\\\n  const fileName = `${moduleName}.js`;\n  const filePath = path.join(codePath, fileName);\n  </assembleFilePath>\n\n  <loadAndWriteModule>\n  return db.code.loadCode(moduleName, 'module', false)\n    .then((file) => writeFile(filePath, file))\n    </loadAndWriteModule>\n    \n    <logDownload>\n    .then(() => console.log(`Module ${moduleName} downloaded.`));\n    </logDownload>\n}\n"], ["createComponent", "\nfunction createComponent(loader, obj) {\n\n  <resolveReferencesAndModify>\n  obj = resolveMarkReferences(loader, obj);\n\n  if (obj[CMD_COMPONENT_URI]) {\n      obj[CMD_COMPONENT] = obj[CMD_COMPONENT_URI];\n      delete obj[CMD_COMPONENT_URI];\n  }\n  </resolveReferencesAndModify>\n\n  <throwIfInvalidComponent>\n  if( obj[CMD_COMPONENT] === undefined ){\n      throw new Error('invalid create component command');\n  }\n  </throwIfInvalidComponent>\n\n  <componentCreationAndAddition>\n  const component = loader.registry.createComponent(obj);\n\n  return Promise.resolve(component)\n      .then(component => {\n          if (!loader.entity) {\n              return _createEntity(loader, null, { shadow: true });\n          }\n          \n          return component;\n      })\n      .then(() => loader.entity.addComponent(component))\n      .then(() => component);\n  </componentCreationAndAddition>\n}\n"], ["anonymousEventFunction", "\nfunction (ev) {\n    var target = Event.getTarget(ev); \n\n    <findTargetCell>\n    while (target && !(target.tagName.toUpperCase() == 'TD' && Dom.hasClass(target.parentNode,'ygtvrow'))) { \n        target = Dom.getAncestorByTagName(target,'td'); \n    }\n    </findTargetCell>\n\n    <nullChecks>\n    if (Lang.isNull(target)) { return null; }\n    if (/\\bygtv(blank)?depthcell/.test(target.className)) { return null;}\n    </nullChecks>\n\n    <validateAndRetrieveTarget>\n    if (target.id) {\n        var m = target.id.match(/\\bygtv([^\\d]*)(.*)/);\n        if (m && m[2] && this._nodes[m[2]]) {\n            return target;\n        }\n    }\n    </validateAndRetrieveTarget>\n\n    return null;\n}\n"], ["serializeInstruction", "\nfunction serializeInstruction(instruction) {\n  return JSON.stringify({\n    <transformInstruction>\n    path: instruction.path,\n    component: instruction.component,\n    params: Object.keys(instruction.params).reduce(function (acc, key) {\n      return (key !== 'childRoute' && (acc[key] = instruction.params[key])), acc;\n    }, {})\n    </transformInstruction>\n  });\n}\n"], "```"]