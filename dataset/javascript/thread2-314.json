[["jsonToQueryString", "\nfunction jsonToQueryString(json) {\n    return '?' +\n        Object\n        .keys(json)\n        .map(function (key) {\n            if (json[key] !== null) {\n                return encodeURIComponent(key) + '=' +\n                    encodeURIComponent(json[key]);\n            }\n        })\n        .join('&');\n}\n"], ["anonymousFunction-1", "\nfunction (value) {\n    if (!findFilterRes && value.filterClasspath === findFilterSearch.classpath && value.hasOwnProperty(\"initArgs\")\n            && value.initArgs === findFilterSearch.initArgs) {\n        findFilterRes = value;\n        return false;\n    }\n    return true;\n}\n"], ["readJson", "\nfunction readJson(filePath) {\n  try {\n    \n    const content = require(filePath)\n    delete require.cache[require.resolve(filePath)]\n    return content\n  } catch (err) {\n    return null\n  }\n}\n"], ["copyFont", "\nfunction copyFont(dir) {\n  gulp.src(src.font)\n    .pipe(gulp.dest(dir));\n}\n"], ["setSingleSchedule", "\nfunction setSingleSchedule (date) {\n  if (typeof date !== 'string') {\n    throw new JError.InvalidArgumentError('date must be set to the string.')\n  }\n  var single = {\n    'time': date\n  }\n  this.trigger = JUtil.extend(this.trigger, {\n    'single': single\n  })\n  return this\n}\n"], ["retrieveCategoriesFromDB", "\nfunction(db, callback) {\n\n  <cacheRetrieval>\n  let cacheKey = db.id + \"-\" + 'categories';\n  let cache = cache_linkCategories.get(cacheKey);\n  if ( cache !== null ) {\n    return callback(null, cache);\n  }\n  </cacheRetrieval>\n\n  <queryExecution>\n  let select = \"SELECT DISTINCT link_category_title FROM rt_links\";\n\n  db.select(select, function(err, results) {\n    if ( err ) {\n      return callback(err);\n    }\n\n    <resultsProcessing>\n    let rtn = [];\n    for ( let i = 0; i < results.length; i++ ) {\n      let row = results[i];\n      rtn.push(row.link_category_title);\n    }\n    cache_linkCategories.put(cacheKey, rtn);\n    </resultsProcessing>\n\n    return callback(null, rtn);\n\n  });\n  </queryExecution>\n\n}\n"], ["useLocale", "\nfunction useLocale( languageTag, locale = 'default') {\n  testEventBus.publish( `didChangeLocale.${locale}`, {\n     locale,\n     languageTag\n  } );\n  testEventBus.flush();\n}\n"], ["EMOGenInitializer", "\nfunction(grunt, gruntFilesArray, gruntOptions) {\n    \n    this.grunt = grunt;\n    \n    this.gruntFilesArray = gruntFilesArray;\n    \n    this.gruntOptions = objectAssign(StyleGuideGenerator.OPTIONS, gruntOptions);\n    \n    this.generator = new EMOGen(\n        this.gruntOptions,\n        this.gruntOptions.nunjucksOptions\n    );\n}\n"], ["removeNotNeededNodes", "\nfunction removeNotNeededNodes(parentElements, newChildren, oldChildren) {\n  let remaining = parentElements.childNodes.length;\n  if (oldChildren.length !== remaining) {\n    console.warn(\n      \"ZLIQ: Something other then ZLIQ has manipulated the children of the element\",\n      parentElements,\n      \". This can lead to sideffects. Consider using the 'isolated' attribute for this element to prevent updates.\"\n    );\n  }\n\n  for (; remaining > newChildren.length; remaining--) {\n    let childToRemove = parentElements.childNodes[remaining - 1];\n    parentElements.removeChild(childToRemove);\n\n    if (oldChildren.length < remaining) {\n      continue;\n    } else {\n      let { cycle } = oldChildren[remaining - 1];\n\n      triggerLifecycle(childToRemove, { cycle }, \"removed\");\n    }\n  }\n}\n"], ["isStorableFunction", "\nfunction isStorableFunction(funcNode, rhsNode) {\n  var node = funcNode;\n  var prnt = funcNode.parent;\n  while (prnt && isInside(prnt, rhsNode)) {\n    switch (prnt.type) {\n      case \"SequenceExpression\":\n        if (prnt.expressions[prnt.expressions.length - 1] !== node) {\n          return false;\n        }\n        break;\n      case \"CallExpression\":\n      case \"NewExpression\":\n        return prnt.callee !== node;\n      case \"AssignmentExpression\":\n      case \"TaggedTemplateExpression\":\n      case \"YieldExpression\":\n        return true;\n      default:\n        if (STATEMENT_TYPE.test(prnt.type)) {\n          return true;\n        }\n    }\n    node = prnt;\n    prnt = prnt.parent;\n  }\n  return false;\n}\n"], "```"]