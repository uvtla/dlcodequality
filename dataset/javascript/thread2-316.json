[["insertBefore", "\nfunction(node) {\n\n  if( node instanceof NWTNodeInstance ) {\n    node = node._node;\n  }\n\n  var child = this.one('*');\n\n  this._node.insertBefore(node, (child._node? child._node : null));\n  \n  return this;\n}\n"], ["gzip", "\nfunction gzip(data) {\n  var unit8Array = new Uint8Array(toBuffer(data));\n  return new Buffer(pako.gzip(unit8Array));\n}\n"], ["submitForm", "\nfunction (request) {\n            var form;\n\n            <resolveForm>\n            if (ariaUtilsType.isHTMLElement(request.form)) {\n                form = request.form;\n            } else if (ariaUtilsType.isString(request.formId)) {\n                form = Aria.$window.document.getElementById(request.formId);\n            }\n            </resolveForm>\n\n            if (!form) {\n                <loggingError>\n                this.$logError(this.MISSING_FORM); \n                </loggingError>\n                return request.callback.onerror.call(request.callback.scope, request);\n            }\n\n            <assignRequestProperties>\n            if (!request.url) {\n                request.url = form.action;\n            }\n\n            if (!request.method) {\n                request.method = form.method;\n            }\n\n            if (form.enctype && !request.headers) {\n                request.headers = {\n                    \"Content-Type\" : form.enctype\n                };\n            } else if (form.enctype && request.headers && !request.headers[\"Content-Type\"]) {\n                request.headers[\"Content-Type\"] = form.enctype;\n            }\n\n            request.form = form;\n            request.formId = form.id;\n            </assignRequestProperties>\n            \n            return this.asyncRequest(request);\n}\n"], ["_buildSound", "\nfunction _buildSound(soundDescriptor) {\n  descriptor = soundDescriptor;\n  this.service = soundDescriptor.service;\n  this.url = soundDescriptor.url;\n  this.title = soundDescriptor.title;\n  this.artist = soundDescriptor.artist;\n  this.cover = soundDescriptor.cover;\n  this.artistCover = soundDescriptor.artistCover;\n  this.soundCover = soundDescriptor.soundCover;\n  this.waveFormImage = soundDescriptor.waveFormImage;\n  this.link = soundDescriptor.link;\n  this.appData = soundDescriptor.appData;\n}\n"], ["addFileOrBrowseDirectory", "\nfunction _addFileOrContinueBrowsing (item, fileList) {\n  !fs.statSync(item).isDirectory() ? fileList.push(item) : _browseDir(item, fileList)\n}\n"], ["createFlashObject", "\nfunction(swfURL, containerID, swfID, version, backgroundColor, expressInstall, wmode, buttonSkin)\n{\n\n  var swfObj = new YAHOO.deconcept.SWFObject(swfURL, swfID, \"100%\", \"100%\", version, backgroundColor);\n\n  if(expressInstall)\n  {\n    <useExpressInstall>\n    swfObj.useExpressInstall(expressInstall);\n    </useExpressInstall>\n  }\n\n  <addFlashParameters>\n  swfObj.addParam(\"allowScriptAccess\", \"always\");\n  if(wmode)\n  {\n    swfObj.addParam(\"wmode\", wmode);\n  }\n  swfObj.addParam(\"menu\", \"false\");\n\n  swfObj.addVariable(\"allowedDomain\", document.location.hostname);\n  swfObj.addVariable(\"YUISwfId\", swfID);\n  swfObj.addVariable(\"YUIBridgeCallback\", \"YAHOO.widget.FlashAdapter.eventHandler\");\n  if (buttonSkin) {\n    swfObj.addVariable(\"buttonSkin\", buttonSkin);\n  }\n  </addFlashParameters>\n\n  var container = YAHOO.util.Dom.get(containerID);\n  <writeFlashObject>\n  var result = swfObj.write(container);\n  if(result)\n  {\n    this._swf = YAHOO.util.Dom.get(swfID);\n    YAHOO.widget.FlashAdapter.owners[swfID] = this;\n  }\n  else\n  {\n  }\n  </writeFlashObject>\n}\n"], ["checkAttributesUndefined", "\nfunction (testIdx, testCount, variationCount) {\n  if (variationCount === undefined) {\n    return typeof this.xml[0].children[testIdx].children[testCount].attrs === 'undefined';\n  }\n\n  return typeof this.xml[0].children[testIdx].children[testCount].children[variationCount].attrs === 'undefined';\n}\n"], ["updateUI", "\nfunction() {\n  <configurePadding>\n  this.padding = this.positionBlocks[this.relativePosition].padding;\n  </configurePadding>\n\n  if (this.closeDiv) {\n    <styleCloseDiv>\n    var contentDivPadding = this.getContentDivPadding();\n    this.closeDiv.style.right = contentDivPadding.right + this.padding.right + \"px\";\n    this.closeDiv.style.top = contentDivPadding.top + this.padding.top + \"px\";\n    </styleCloseDiv>\n  }\n  \n  <updateBlocks>\n  this.updateBlocks();\n  </updateBlocks>\n}\n"], ["printObjectTypeIndexer", "\nfunction ObjectTypeIndexer(node, print) {\n  if (node[\"static\"]) this.push(\"static \");\n  this.push(\"[\");\n  print.plain(node.id);\n  this.push(\":\");\n  this.space();\n  print.plain(node.key);\n  this.push(\"]\");\n  this.push(\":\");\n  this.space();\n  print.plain(node.value);\n}\n"], ["loadImagePattern", "\nfunction(url) {\n  if (!url) return this\n\n  var self = this\n    , img  = document.createElement('img')\n\n  <handleImageLoad>\n  img.onload = function() {\n    var p = self.parent(SVG.Pattern)\n\n    if(p === null) return\n\n    <setPatternSize>\n    if (self.width() == 0 && self.height() == 0)\n      self.size(img.width, img.height)\n    if (p && p.width() == 0 && p.height() == 0)\n      p.size(self.width(), self.height())\n    </setPatternSize>\n\n    <loadedCallback>\n    if (typeof self._loaded === 'function')\n      self._loaded.call(self, {\n        width:  img.width\n      , height: img.height\n      , ratio:  img.width / img.height\n      , url:    url\n      })\n    </loadedCallback>\n  }\n  </handleImageLoad>\n\n  return this.attr('href', (img.src = this.src = url), SVG.xlink)\n}\n"], "\n```"]