[["assertFunctions", "\nfunction assertFunctions(functions) {\n  <inputValidation>\n  if (!Array.isArray(functions)) {\n    throw new TypeError(msg.argFuncArray);\n  }\n  </inputValidation>\n\n  const funcs = [];\n\n  for (let i = 0; i < functions.length; i++) {\n    const item = functions[i];\n  \n    <handleObjectItems>\n    if (typeof item === 'object') {\n      const bind = elv.coalesce(item.bind, null);\n      const { fn } = item;\n      const label = elv.coalesce(item.label, fn.name, `anonymous${i}`);\n      const params = elv.coalesce(item.params, []);\n\n      if (typeof fn !== 'function') {\n        throw new TypeError(msg.argFuncFn);\n      }\n\n      if (typeof label !== 'string') {\n        throw new TypeError(msg.argFuncLabel);\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError(msg.argFuncParams);\n      }\n\n      funcs.push({\n        bind,\n        fn,\n        label,\n        params,\n      });\n\n      continue;\n    }\n    </handleObjectItems>\n\n    <handleFunctionItems>\n    if (typeof item !== 'function') {\n      throw new TypeError(msg.argFuncItem);\n    }\n\n    funcs.push({\n      bind: null,\n      fn: item,\n      label: elv.coalesce(item.name, `anonymous${i}`),\n      params: [],\n    });\n    </handleFunctionItems>\n  }\n\n  return funcs;\n}\n"], ["findDefaultPlugins", "\nfunction findDefaultPlugins() {\n  <checkDirectoryExists>\n  const globPath = path.join(__dirname, BUILT_IN_DEFAULT_PLUGIN_FOLDER_NAME);\n  if (!fs.existsSync(globPath)) {\n    return [];\n  }\n  </checkDirectoryExists>\n  \n  <processFiles>\n  return walkSync(globPath, {\n    directories: false,\n    globs: [`${MARKBIND_PLUGIN_PREFIX}*.js`],\n  }).map(file => path.parse(file).name);\n  </processFiles>\n}\n"], ["buildUrl", "\nfunction buildUrl(file, frontmatter) {\n      \n  <handleSpecificCanocialUrl>\n  var canonicalUrl = get(frontmatter, urlProperty);\n  if (is.string(canonicalUrl)) {\n    return canonicalUrl;\n  }\n  </handleSpecificCanocialUrl>\n\n  <omitIndexCheck>\n  var indexFile = 'index.html';\n  if (omitIndex && path.basename(file) === indexFile) {\n    return replaceBackslash(file.slice(0, 0 - indexFile.length));\n  }\n  </omitIndexCheck>\n\n  <omitExtensionCheck>\n  if (omitExtension) {\n    return replaceBackslash(file.slice(0, 0 - path.extname(file).length));\n  }\n  </omitExtensionCheck>\n\n  <defaultUrlProcessing>\n  return replaceBackslash(file);\n  </defaultUrlProcessing>\n}\n"], ["generateGCMPayload", "\nfunction generateGCMPayload(requestData, pushId, timeStamp, expirationTime) {\n  <initializePayload>\n  let payload = {\n    priority: 'high'\n  };\n  payload.data = {\n    data: requestData.data,\n    push_id: pushId,\n    time: new Date(timeStamp).toISOString()\n  }\n  </initializePayload>\n\n  <handleOptionalKeys>\n  const optionalKeys = ['content_available', 'notification'];\n  optionalKeys.forEach((key, index, array) => {\n    if (requestData.hasOwnProperty(key)) {\n      payload[key] = requestData[key];\n    }\n  });\n  </handleOptionalKeys>\n\n  <handleExpirationTime>\n  if (expirationTime) {\n    let timeToLive = Math.floor((expirationTime - timeStamp) / 1000);\n    if (timeToLive < 0) {\n      timeToLive = 0;\n    }\n    if (timeToLive >= GCMTimeToLiveMax) {\n      timeToLive = GCMTimeToLiveMax;\n    }\n    payload.timeToLive = timeToLive;\n  }\n  </handleExpirationTime>\n\n  return payload;\n}\n"], ["functionWithNoName", "\nfunction(sId) {\n  <deriveNamespacedId>\n  var sNamespace = this.getMetadata().getNamespace();\n  sId = sNamespace + \".\" + sId;\n  </deriveNamespacedId>\n  \n  <fetchComponentById>\n  return this.base ? this.base.byId(sId) : undefined;\n  </fetchComponentById>\n}\n"], ["scanBarcode", "\nfunction scanBarcode() {\n  <initializeResult>\n  barcode_result.textContent = \"\";\n  </initializeResult>\n\n  <initializeDrawingContext>\n  let context = null,\n    width = 0,\n    height = 0,\n    dbrCanvas = null;\n\n  if (isPC) {\n    context = ctx;\n    width = videoWidth;\n    height = videoHeight;\n    dbrCanvas = canvas;\n  } else {\n    context = mobileCtx;\n    width = mobileVideoWidth;\n    height = mobileVideoHeight;\n    dbrCanvas = mobileCanvas;\n  }\n\n  context.drawImage(videoElement, 0, 0, width, height);\n  </initializeDrawingContext>\n\n  <createVideoAnalysisSetup>\n  var vid = document.getElementById(\"video\");\n  console.log(\"video width: \" + vid.videoWidth + \", height: \" + vid.videoHeight);\n  var barcodeCanvas = document.createElement(\"canvas\");\n  barcodeCanvas.width = vid.videoWidth;\n  barcodeCanvas.height = vid.videoHeight;\n  var barcodeContext = barcodeCanvas.getContext('2d');\n  var imageWidth = vid.videoWidth,\n    imageHeight = vid.videoHeight;\n  barcodeContext.drawImage(videoElement, 0, 0, imageWidth, imageHeight);\n  </createVideoAnalysisSetup>\n\n  <analyzeImageData>\n  var imageData = barcodeContext.getImageData(0, 0, imageWidth, imageHeight);\n  var idd = imageData.data;\n  </analyzeImageData>\n\n  <performDecoding>\n  let results;\n  try {\n    results = reader.DecodeBuffer(idd.buffer, imageWidth, imageHeight, imageWidth * 4, 7, \"\");\n  } catch (e) {\n    console.log(e);\n  }\n  </performDecoding>\n\n  <handleDecodingResults>\n  if (!results) {\n    setTimeout(scanBarcode, 30);\n  } else {\n    <processDecodedResults>\n    let json = JSON.parse(results);\n    let barcodeResults = json['textResult'];\n    if (barcodeResults.length == 0) {\n      setTimeout(scanBarcode, 30);\n    } else {\n      buttonVideo.disabled = false;\n      let txts = [];\n      for (let i = 0; i < barcodeResults.length; ++i) {\n        if (barcodeResults[i].LocalizationResult.ExtendedResultArray[0].Confidence >= 30) {\n          txts.push(b64DecodeUnicode(barcodeResults[i].BarcodeText));\n        }\n      }\n      if (txts.length == 0) {\n        setTimeout(scanBarcode, 30);\n        console.log(\"No confident results\");\n      } else {\n        barcode_result.textContent = txts.join(\", \");\n        buttonVideo.disabled = false;\n        if (isPC) {\n          canvas.style.display = 'block';\n        } else {\n          mobileCanvas.style.display = 'block';\n        }\n      }\n    }\n    </processDecodedResults>\n  }\n  </handleDecodingResults>\n}\n"], ["getChildResources", "\nfunction getChildResources(resource){\n  <aggregateChildResources>\n        var result = [], children = _resources[resource].children;\n        children.forEach(function (child) {\n            var childReturn = getChildResources(child);\n            childReturn.push(child);\n            result = result.concat(childReturn);\n        });\n  </aggregateChildResources>\n\n        return result;\n    }\n"], ["access", "\nfunction access(options) {\n  <initializeDefaultOptions>\n  options = options || {};\n\n  \n  options.origins = 'origins' in options\n    ? options.origins\n    : '*';\n\n  \n  options.methods = 'methods' in options\n    ? options.methods\n    : ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS'];\n\n  \n  options.credentials = 'credentials' in options\n    ? options.credentials\n    : true;\n\n  \n  options.maxAge = 'maxAge' in options\n    ? options.maxAge\n    : '30 days';\n\n  \n  options.headers = 'headers' in options\n    ? options.headers\n    : '';\n\n  \n  options.exposed = 'exposed' in options\n    ? options.exposed\n    : '';\n  </initializeDefaultOptions>\n\n  <applyHeaderFormatting>\n  \n  \n  \n  \n  ['methods', 'headers', 'exposed', 'origins'].forEach(function cleanup(key) {\n    if (Array.isArray(options[key])) options[key] = options[key].join(', ');\n  });\n\n  \n  \n  \n  \n  if ('string' === typeof options.maxAge) {\n    options.maxAge = ms(options.maxAge) / 1000;\n  }\n  </applyHeaderFormatting>\n\n  <deriveAccessControlData>\n  var separator = /[, ]+/\n    , methods = options.methods.toUpperCase().split(separator).filter(Boolean)\n    , headers = options.headers.toLowerCase().split(separator).filter(Boolean)\n    , origins = options.origins.toLowerCase().split(separator).filter(Boolean);\n  </deriveAccessControlData>\n\n  <control>\n  return function control(req, res, next) {\n    <checkHeadersPresence>\n    var origin = (req.headers.origin || '').toLowerCase().trim()\n      , credentials = options.credentials;\n\n    \n    \n    \n    \n    \n    \n    \n    if (!('origin' in req.headers)) {\n      if ('function' === typeof next) next();\n      return false;\n    }\n    </checkHeadersPresence>\n\n\t  \n    <validateCorsRequest>\n    \n    \n    \n    \n    \n    if (\n         ~origin.indexOf('%')\n      || (origin !== 'null' && !parse(origin).protocol)\n      || options.origins !== '*' && !~origins.indexOf(origin)\n      || (methods.length && !~methods.indexOf(req.method))\n      \n    ) {\n      res.statusCode = 403;\n      res.setHeader('Content-Type', 'text/plain');\n      res.end([\n        'Invalid HTTP Access Control (CORS) request:',\n        '  Origin: '+ req.headers.origin,\n        '  Method: '+ req.method\n      ].join('\\n'));\n\n      return true;\n    }\n    </validateCorsRequest>\n\n\t  <setCorsHeaders>\n    \n    \n    \n    \n    \n    if (options.origins !== '*' || credentials) {\n      setHeader(res, 'Access-Control-Allow-Origin', req.headers.origin);\n      vary(res, 'Origin');\n    } else {\n      setHeader(res, 'Access-Control-Allow-Origin', '*');\n    }\n\n    if (credentials) {\n      setHeader(res, 'Access-Control-Allow-Credentials', 'true');\n    }\n    </setCorsHeaders>\n\n\t  <handlePreflight>\n    \n    \n    \n    \n    \n    \n    \n    if (\n         'OPTIONS' === req.method\n      && req.headers['access-control-request-method']\n    ) {\n      if (options.maxAge) {\n        setHeader(res, 'Access-Control-Max-Age', options.maxAge);\n      }\n\n      if (options.methods) {\n        setHeader(res, 'Access-Control-Allow-Methods', methods.join(', '));\n      }\n\n      if (options.headers) {\n        setHeader(res, 'Access-Control-Allow-Headers', options.headers);\n      } else if (req.headers['access-control-request-headers']) {\n        setHeader(res, 'Access-Control-Allow-Headers', req.headers['access-control-request-headers']);\n      }\n\n      \n      \n      \n      \n      \n      \n      res.statusCode = 200;\n      res.setHeader('Content-Length', 0);\n      res.end('');\n\n      return true;\n    }\n    </handlePreflight>\n\n\t  <exposeCorsHeaders>\n    if (options.exposed) {\n      setHeader(res, 'Access-Control-Expose-Headers', options.exposed);\n    }\n    </exposeCorsHeaders>\n\n    <callNext>\n    if ('function' === typeof next) next();\n    </callNext>\n    return false;\n  };\n  </control>\n}\n"], ["getConfig", "\nfunction getConfig(api )  {\n  <configureCache>\n  api.cache.never();\n  </configureCache>\n\n  <createBabelConfig>\n  return {\n    babelrc: false,\n    presets: presets.map(preset => require.resolve(preset)),\n    plugins: plugins.map(plugin => require.resolve(plugin)),\n  };\n  </createBabelConfig>\n}\n"], ["functionWithNoNameAndMarkerParameter", "\nfunction(marker) {\n    <removeMarker>\n    if (this.markers && this.markers.length) {\n        OpenLayers.Util.removeItem(this.markers, marker);\n        marker.erase();\n    }\n    </removeMarker>\n}\n"], "```"]