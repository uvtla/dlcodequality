[["parseResourceId", "\nfunction(id_string) {\n    id_string = id_string.trim();\n    <regexMatch>\n    var match = this._locator_regex.exec(id_string),\n        result;\n    </regexMatch>\n\n    <validateMatch>\n    if (!match || match[2].indexOf('$') != -1) Lava.t(\"Malformed resource id: \" + id_string);\n    </validateMatch>\n\n    <buildResult>\n    result = {\n        locator_type: this.locator_types[id_string[0]],\n        locator: match[1],\n        name: match[2]\n    };\n    </buildResult>\n\n    return result;\n}\n"], ["addEventCrossBrowser", "\nfunction(element, type, handler) {\n    <determineEventCompatibility>\n    if(element.addEventListener) {\n      addEvent = function(element, type, handler) {\n        element.addEventListener(type, handler, false);\n      };\n    } else if(element.attachEvent) {\n      addEvent = function(element, type, handler) {\n        element.attachEvent('on' + type, handler);\n      };\n    } else {\n      addEvent = function(element, type, handler) {\n        element['on' + type] = handler;\n      };\n    }\n    </determineEventCompatibility>\n    <attachEvent>\n    addEvent(element, type, handler);\n    </attachEvent>\n}\n"], ["initializePanel", "\nfunction Panel(options) {\n  <createPanelLayout>\n  var panelLayout = options.layoutConfig;\n  var viewLayouts = createLayout(panelLayout.view.views);\n  </createPanelLayout>\n  \n  <assignPanelMethods>\n  this.getPosition = panelLayout.getPosition;\n  this.views = _.map(viewLayouts, function (viewLayout) {\n    viewLayout.getPosition = wrapGetPosition(viewLayout.getPosition, panelLayout.getPosition);\n    return options.creator(viewLayout);\n  });\n  </assignPanelMethods>\n}\n"], ["handleRequestStateChange", "\nfunction () {\n    <checkReadyState>\n    if (req.readyState !== 4) return;\n    </checkReadyState>\n    \n    <processResponse>\n    if (req.status === 200) successCb(null, JSON.parse(req.responseText));\n    else {\n      <buildErrorResponse>\n      var err = { error: 'Sorry, an error ocurred on the server' };\n      </buildErrorResponse>\n\n      <handleError>\n      if (errorCb && typeof errorCb === 'function') return errorCb(err);\n      successCb(err, null);\n      </handleError>\n    }\n    </processResponse>\n}\n"], ["setupTestEnvironment", "\nfunction runMain () {\n    <setTitle>\n    setTitle('Apache Cordova Plugin Tests');\n    </setTitle>\n\n    <createActionButtons>\n    createActionButton('Auto Tests', setMode.bind(null, 'auto'));\n    createActionButton('Manual Tests', setMode.bind(null, 'manual'));\n    createActionButton('Reset App', location.reload.bind(location));\n    if (/showBack/.exec(location.hash)) {\n        createActionButton('Back', function () {\n            history.go(-1);\n        });\n    }\n    </createActionButtons>\n\n    <setupWinJSErrorHandler>\n    if (isWin && typeof WinJS !== 'undefined') {\n        var app = WinJS.Application;\n        app.addEventListener('error', function (err) { \n            return true;\n        });\n    }\n    </setupWinJSErrorHandler>\n}\n"], ["checkPaddedArgument", "\nfunction isPaddedArgument (node) {\n    <determineParentArray>\n    var parentArray = node.parent().arguments ? node.parent().arguments : node.parent().elements;\n    var idx = parentArray.indexOf(node);\n    </determineParentArray>\n\n    <checkArgumentPadding>\n    if (idx === 0) { \n      if (prePreChar === '(' && preChar === '(' && postChar === ')') { \n        return true;\n      }\n    } else if (idx === parentArray.length - 1) { \n      if (preChar === '(' && postChar === ')' && postPostChar === ')') { \n        return true;\n      }\n    } else { \n      if (preChar === '(' && postChar === ')') { \n        return true;\n      }\n    }\n    </checkArgumentPadding>\n    return false;\n}\n"], ["parseBasicAuth", "\nfunction parseAuthorization(header) {\n  <extractAndDecodeToken>\n  var token = header.split(/\\s/).pop();\n  var decoded = new Buffer(token, 'base64').toString();\n  </extractAndDecodeToken>\n\n  <splitCredentials>\n  var components = decoded.split(':');\n  if (components.length !== 2) {\n    return false;\n  } else {\n    return {\n      user: components[0],\n      password: components[1]\n    };\n  }\n  </splitCredentials>\n}\n"], ["replaceQuoteCharacters", "\nfunction all(node) {\n  <normalizeBackticks>\n  backticks(node);\n  </normalizeBackticks>\n\n  <convertQuotes>\n  if (node.value === backtick) {\n    node.value = openingSingleQuote;\n  } else if (node.value === singleQuote) {\n    node.value = closingSingleQuote;\n  }\n  </convertQuotes>\n}\n"], ["appendAngularAttributes", "\nfunction applyAngularAttributesToParentElement(html, demo) {\n  var tmp;\n  \n  <filterAndSelectElement>\n  angular.forEach(angular.element(html), function(it,key){\n    if ((it.nodeName != \"SCRIPT\") && (it.nodeName != \"#text\")) {\n      tmp = angular.element(it);\n    }\n  });\n  </filterAndSelectElement>\n\n  <applyAttributes>\n  tmp.addClass(demo.id);\n  tmp.attr('ng-app', 'MyApp');\n  </applyAttributes>\n  return tmp[0].outerHTML;\n}\n"], ["executeShellCatCommand", "\nfunction bin(argv) {\n  <checkArguments>\n  if (!argv[2]) {\n    console.error(\"url is required\");\n    console.error(\"Usage : cat <url>\");\n    process.exit(-1);\n  }\n  </checkArguments>\n  \n  <performCatOperation>\n  shell.cat(argv[2], function(err, res, uri) {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(res);\n    }\n  });\n  </performCatOperation>\n}\n"], "```"]