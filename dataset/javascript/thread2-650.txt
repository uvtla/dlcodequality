```javascript
<createMiddlewareArray>
function(connect, options) {
  return [
    require('connect-livereload')(),
    connect.static(options.base),
    connect.directory(options.base)
  ];
}
</createMiddlewareArray>

<removeTabAndUpdateIndex>
function(tab) {
  var tabCount = this.get('tabs').length,
      index = this.getTabIndex(tab);

  if (tab === this.get(ACTIVE_TAB)) { 
    if (tabCount > 1) { 
      if (index + 1 === tabCount) { 
        this.set(ACTIVE_INDEX, index - 1);
      } else { 
        this.set(ACTIVE_INDEX, index + 1);
      }
    } else { 
      this.set(ACTIVE_TAB, null);
    }
  }

  this._removeTabEvents(tab);
  this._tabParent.removeChild(tab.get(ELEMENT));
  this._contentParent.removeChild(tab.get(CONTENT_EL));
  this._configs.tabs.value.splice(index, 1);

  tab.fireEvent('remove', { type: 'remove', tabview: this });
}
</removeTabAndUpdateIndex>

<drawLobbyAndPollGames>
function drawLobby(games) {
  $(LOBBYCHAT).append($(CHATPNL)[0]);
  $(CHATPNL).addClass('lobby_chat_panel');
  drawGameList(games);

  function pollGames() {
    $.getJSON("/games", drawGameList);
    GETGAMESTID = setTimeout(pollGames, 2000);
  }
  GETGAMESTID = setTimeout(pollGames, 2000);
}
</drawLobbyAndPollGames>

<initializeTextFinder>
function TextFinder(wordList) {
  this.wordlist = wordList;
  this.searchstring = new RegExp(wordList.join(" |").replace(/[^\w\s^|]/gi, ''), 'i');
  this.globalsearchstring = new RegExp(wordList.join(" |").replace(/[^\w\s^|]/gi, ''), 'gi');
}
</initializeTextFinder>

<outputValue>
function (isJson, transformer) {
  printHelpOnExit = false;
  return function (value) {
    if (isJson) {
      console.log(JSON.stringify(value, null, 2));
    } else if (typeof transformer === 'function') {
      console.log(transformer(value));
    } else {
      console.log(value);
    }
    if (theUfo) theUfo.disconnect();
  };
}
</outputValue>

<checkOriginValidity>
async function isValidOrigin(origin, sourceOrigin) {
  const officialCacheList = await caches.list();

  const cacheSubdomain = `https:`

  for (const cache of officialCacheList) {
    const cachedOrigin = cacheSubdomain + cache.cacheDomain;
    if (origin === cachedOrigin) {
      return true;
    }
  }
  return false;
}
</checkOriginValidity>

<initializePullDownBehaviour>
function _initPullDown() {
  var _this3 = this;

  this.scroll.on('pullingDown', function () {
    _this3.pullDownBefore = false;
    _this3.pullDownNow = true;

    _this3.$emit('pullingDown');

    _this3.scroll.closePullDown();
  });
  
  this.scroll.on('scroll', function (pos) {
    if (!_this3.pullDown || pos.y < 0) return;
    var posY = Math.floor(pos.y);

    if (_this3.pullDownBefore) {
      _this3.bubbleY = Math.max(0, posY + _this3.pullDownInitTop);
      _this3.pullDownStyle = "transform: translateY(".concat(Math.min(posY, -_this3.pullDownInitTop), "px)");
    } else {
      _this3.bubbleY = 0;
    }

    if (_this3.isRebounding) {
      _this3.pullDownStyle = "transform: translateY(".concat(Math.min(posY, _this3.pullDownConfig.stop), "px)");
    }
  });
}
</initializePullDownBehaviour>

<getOrderedPlayersList>
function getOrderedPlayers(tnmt) {
  var res = [];
  for (var i = 0; i < tnmt.players.length; i++) {
    res[tnmt.players[i].positionInSWT] = tnmt.players[i]['2020'];
  }
  return res;
}
</getOrderedPlayersList>

<addAutomaticSortListeners>
function _addListeners() {
  if (_automaticSort && _currentSort && _currentSort.getEvents()) {
    MainViewManager
      .on(_currentSort.getEvents(), function () {
        _currentSort.sort();
      })
      .on("_workingSetDisableAutoSort.sort", function () {
        setAutomatic(false);
      });
  }
}
</addAutomaticSortListeners>

<encryptOrDecryptData>
function crypt(type, method, key, iv, data, clearEncoding, cipherEncoding) {
  if (type == 'en') {
    var cipher = crypto.createCipheriv(method, key, iv);
    cipher.setAutoPadding(true);

    var chunks = [];
    chunks.push(cipher.update(data, clearEncoding, cipherEncoding));
    chunks.push(cipher.final(cipherEncoding));

    return chunks.join('');
  } else {
    var decipher = crypto.createDecipheriv(method, key, iv);
    decipher.setAutoPadding(true);

    var chunks = [];
    chunks.push(decipher.update(data, cipherEncoding, clearEncoding));
    chunks.push(decipher.final(clearEncoding));

    return chunks.join('');
  }
}
</encryptOrDecryptData>
```