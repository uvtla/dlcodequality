[["setupConnection", "\nfunction setupConnection( options ) {\n  var db\n\n  \n  if ( !options.connect.useMongoClient ) {\n    options.connect.useMongoClient = true\n  }\n\n  \n  mongoose.Promise = global.Promise\n  mongoose.set( 'debug', options.debug === true )\n\n  db = mongoose.connection\n\n  if ( options.debug === true ) {\n    db.on( 'connected', eventLogger( 'connected', db ) )\n    db.on( 'connecting', eventLogger( 'connecting', db ) )\n    db.on( 'disconnected', eventLogger( 'disconnected', db ) )\n    db.on( 'open', eventLogger( 'open', db ) )\n    db.on( 'reconnected', eventLogger( 'reconnected', db ) )\n  }\n\n  db.on( 'error', eventLogger( 'error', db ) )\n  db.on( 'error', attachErrorToDb( db ) )\n\n  db.uri = getUri( options.uri )\n\n  <handleProcessTermination>\n  process.on( 'SIGINT',\n    function () {\n      mongoose.connection.close(\n        function () {\n          console.log( 'mongoose default connection disconnected through app termination' )\n          process.exit( 0 )\n        }\n      );\n    }\n  </handleProcessTermination>\n\n  return db\n}\n"], ["publicToAddress", "\nfunction publicToAddress(publicKey) {\n  if (!Buffer.isBuffer(publicKey)) { throw new Error('[ethjs-account] public key must be a buffer object in order to get public key address'); }\n\n  return getAddress(sha3(publicKey, true).slice(12).toString('hex'));\n}\n"], ["typeVarNames", "\nfunction typeVarNames(t) {\n  return Z.concat (\n    t.type === VARIABLE ? [t.name] : [],\n    Z.chain (function(k) { return typeVarNames (t.types[k]); }, t.keys)\n  );\n}\n"], ["loadTranslation", "\nfunction loadTranslation(localeFilePath) {\n  if(typeof localeFilePath == \"undefined\"){\n    messages = defaultMessages;\n    return null;\n  }\n  let fp = path.join(__dirname, localeFilePath);\n  messages = require('jsonfile').readFileSync(\".\" + fp);\n  return messages;\n}\n"], ["anonymousCommandExecution", "\nfunction(){\n  var args = Array.prototype.slice.apply(arguments);\n  this.commands.execute.apply(this.commands, args);\n}\n"], ["addRelationshipsToJDL", "\nfunction addRelationshipsToJDL() {\n  for (let i = 0, entityNames = Object.keys(configuration.entities); i < entityNames.length; i++) {\n    dealWithRelationships(configuration.entities[entityNames[i]].relationships, entityNames[i]);\n  }\n}\n"], ["parseCacheEntryFlags", "\nfunction parseCacheEntryFlags (bits) {\n  return {\n    assumeValid: Boolean(bits & 0b1000000000000000),\n    extended: Boolean(bits & 0b0100000000000000),\n    stage: (bits & 0b0011000000000000) >> 12,\n    nameLength: bits & 0b0000111111111111\n  }\n}\n"], ["resolveForFallbackLanguage", "\nfunction (translationId, interpolateParams, Interpolator, sanitizeStrategy) {\n      \n  return resolveForFallbackLanguageInstant((startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator, sanitizeStrategy);\n}\n"], ["emberComponentSendAction", "\nfunction () {\n  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  <determineActionAndTarget>\n  var action = opts.action || _emberMetalProperty_get.get(this, 'action');\n  var target = opts.target || _emberMetalProperty_get.get(this, 'targetObject');\n  </determineActionAndTarget>\n  \n  <establishActionContext>\n  var actionContext = opts.actionContext;\n  if (typeof actionContext === 'undefined') {\n    actionContext = _emberMetalProperty_get.get(this, 'actionContextObject') || this;\n  }\n  </establishActionContext>\n  \n  <executeAction>\n  if (target && action) {\n    var ret;\n\n    if (target.send) {\n      ret = target.send.apply(target, args(actionContext, action));\n    } else {\n      _emberMetalDebug.assert('The action \\'' + action + '\\' did not exist on ' + target, typeof target[action] === 'function');\n      ret = target[action].apply(target, args(actionContext));\n    }\n\n    if (ret !== false) {\n      ret = true;\n    }\n\n    return ret;\n  } else {\n    return false;\n  }\n  </executeAction>\n}\n"], ["enhanceLoggingCapabilities", "\nfunction (obj, tag) {\n  tag = _.isArray(tag) ? tag.join(',') : tag;\n  tag = !_.isEmpty(tag) ? tag.toLowerCase() : 'default';\n\n  obj.trace = function (message, data) {\n    _logEvent(\"trace\", message, tag, data);\n  };\n\n  obj.debug = function (message, data) {\n    _logEvent(\"debug\", message, tag, data);\n  };\n\n  obj.info = function (message, data) {\n    _logEvent(\"info\", message, tag, data);\n  };\n\n  obj.warn = function (message, data) {\n    _logEvent(\"warn\", message, tag, data);\n  };\n\n  obj.error = function (message, data) {\n    _logEvent(\"error\", message, tag, data);\n  };\n\n  obj.fatal = function (message, data) {\n    _logEvent(\"fatal\", message, tag, data);\n  };\n\n  return obj;\n}\n"], ""]