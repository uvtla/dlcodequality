[["manageDragEvent", "\nfunction( event ){\n                \n    var dd = event.data;\n    \n    switch ( event.type ){\n        \n        case !dd.dragging && 'touchmove':\n            event.preventDefault();\n\n        case !dd.dragging && 'mousemove':\n            \n            if ( Math.pow(  event.pageX-dd.pageX, 2 ) + Math.pow( event.pageY-dd.pageY, 2 ) < Math.pow( dd.distance, 2 ) )\n                break; \n            event.target = dd.target; \n            drag.hijack( event, \"dragstart\", dd ); \n            if ( dd.propagates ) \n                dd.dragging = true; \n            \n        case 'touchmove':\n            event.preventDefault();\n\n        case 'mousemove':\n            if ( dd.dragging ){\n                \n                drag.hijack( event, \"drag\", dd );\n                if ( dd.propagates ){\n                    \n                    if ( dd.drop !== false && $special.drop )\n                        $special.drop.handler( event, dd ); \n                    break; \n                }\n                event.type = \"mouseup\"; \n            }\n            \n        case 'touchend':\n        case 'mouseup':\n        default:\n            if ( drag.touched )\n                $event.remove( drag.touched, \"touchmove touchend\", drag.handler ); \n            else\n                $event.remove( document, \"mousemove mouseup\", drag.handler ); \n            if ( dd.dragging ){\n                if ( dd.drop !== false && $special.drop )\n                    $special.drop.handler( event, dd ); \n                drag.hijack( event, \"dragend\", dd ); \n            }\n            drag.textselect( true ); \n            \n            if ( dd.click === false && dd.dragging )\n                $.data( dd.mousedown, \"suppress.click\", new Date().getTime() + 5 );\n            dd.dragging = drag.touched = false; \n            break;\n    }\n}\n"], ["login", "\nfunction login(username, password) {\n<checkAPIAccess>\n    if (!cocoonSDK.CocoonAPI.checkAPIAccess()) {\n</checkAPIAccess>\n    <performTokenExchange>\n        return oAuth.tokenExchangePassword(username, password)\n        .then((result) => {\n            cocoonSDK.CocoonAPI.setupAPIAccess(result.access_token, result.refresh_token, result.expires_in);\n            return undefined;\n        })\n        .catch((error) => {\n            console.error(\"Login not successful.\");\n            console.trace(error);\n            throw error;\n        });\n    } else {\n</performTokenExchange>\n    <alreadyHasAPIAccess>\n        return Promise.resolve();\n    }\n</alreadyHasAPIAccess>\n}\n"], ["registerCallback", "\nfunction( id, callback ){\n<defaultID>\n        var ID = id;\n        \n        if( typeof id == 'function' ){\n            ID = 'ID_' + this._ID;\n            callback = id;\n        }\n</defaultID>\n<maintainCallbackRegistry>\n        this._callbacks[ID] = callback;\n        this._ID++;\n</maintainCallbackRegistry>\n<returnID>\n        return ID;\n</returnID>\n}\n"], ["getCss", "\nfunction getCss(el, prop) {\n<cssRetrievalByProp>\n    var styles = parse(el.attribs.style);\n    if (typeof prop === 'string') {\n        return styles[prop];\n    } else if (Array.isArray(prop)) {\n        return _.pick(styles, prop);\n    } else {\n        return styles;\n    }\n</cssRetrievalByProp>\n}\n"], ["mesh1D", "\nfunction mesh1D(array, level) {\n<generateMeshData>\n    var zc = zeroCrossings(array, level)\n    var n = zc.length\n    var npos = new Array(n)\n    var ncel = new Array(n)\n    for(var i=0; i<n; ++i) {\n        npos[i] = [ zc[i] ]\n        ncel[i] = [ i ]\n    }\n</generateMeshData>\n<returnMesh>\n    return {\n        positions: npos,\n        cells: ncel\n    }\n</returnMesh>\n}\n"], ["printTheme", "\nfunction print( theme ) {\n<chooseGridPrintPath>\n    if ( theme === 'grid' || ( !theme && isGrid() ) ) {\n        let swapped = false;\n        dialog.prompt( 'Enter valid paper format', 'A4' )\n            .then( format => {\n                if ( !format ) {\n                    throw new Error( 'Print cancelled by user.' );\n                }\n                swapped = styleToAll();\n                return fixGrid( {\n                    format\n                } );\n            } )\n            .then( window.print )\n            .catch( console.error )\n            .then( () => {\n                if ( swapped ) {\n                    setTimeout( styleReset, 500 );\n                }\n            } );\n    } else {\n</chooseGridPrintPath>\n<defaultPrint>\n        window.print();\n    }\n</defaultPrint>\n}\n"], ["touchAction", "\nfunction (input) {\n<handleTouchInput>\n    \n    if (NATIVE_TOUCH_ACTION) {\n      return;\n    }\n\n    var srcEvent = input.srcEvent;\n    var direction = input.offsetDirection;\n\n    \n    if (this.manager.session.prevented) {\n      srcEvent.preventDefault();\n      return;\n    }\n\n    var actions = this.actions;\n    var hasNone = inStr(actions, TOUCH_ACTION_NONE);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\n    if (hasNone ||\n      (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n      (hasPanX && direction & DIRECTION_VERTICAL)) {\n      return this.preventSrc(srcEvent);\n    }\n</handleTouchInput>\n  }\n"], ["_buildDirsFirstComparator", "\nfunction _buildDirsFirstComparator(contents) {\n<compareWithDirsFirst>\n        function _dirsFirstCompare(a, b) {\n            var aIsFile = FileTreeViewModel.isFile(contents.get(a)),\n                bIsFile = FileTreeViewModel.isFile(contents.get(b));\n\n            if (!aIsFile && bIsFile) {\n                return -1;\n            } else if (aIsFile && !bIsFile) {\n                return 1;\n            } else {\n                return FileUtils.compareFilenames(a, b);\n            }\n        }\n</compareWithDirsFirst>\n<returnComparator>\n        return _dirsFirstCompare;\n</returnComparator>\n    }\n"], ["deepCleaner", "\nfunction deepCleaner(obj, target = null) {\n<executeCleaningStrategies>\n  if (utils.isArray(target)) {\n    removeKeyLoop(obj, target);\n  } else {\n    cleanCyclicObject(obj, target);\n  }\n</executeCleaningStrategies>\n<returnCleanedObject>\n  return obj;\n</returnCleanedObject>\n}\n"], ["processDataPagination", "\nfunction(args, connectionInfo, processPagedResults) {\n<initializePaging>\n  args.page = {value: 1};\n  args.pageSize = {value: 200};\n  args.consignmentIdIndex = {value: 0};\n  args.consignmentId = {value: args.consignmentIds.value[args.consignmentIdIndex.value]};\n</initializePaging>\n<setupArrayAccessors>\n  args.getArray = function(){\n    return this.consignmentIds.value;\n  };\n  args.getArrayIndex = function(){\n    return this.consignmentIdIndex.value;\n  };\n</setupArrayAccessors>\n  \n<retrievePaginatedResults>\n  return utils.processPromisesSerially(\n    args.consignmentIds.value,\n    args.consignmentIdIndex.value,\n    args,\n    function mergeStrategy(newData, previousData){\n      log.debug('inside mergeStrategy()');\n      \n      \n      if (previousData && previousData.length>0) {\n        if (newData.length>0) {\n          log.debug('previousData.length: ', previousData.length);\n          newData = newData.concat(previousData);\n          log.debug('combinedData.length: ', newData.length);\n        }\n        else {\n          newData = previousData;\n        }\n      }\n      \n      log.debug('finalData.length ', newData.length);\n      return Promise.resolve(newData); \n    },\n    function setupNext(updateArgs){\n      updateArgs.consignmentIdIndex.value = updateArgs.consignmentIdIndex.value + 1;\n      if (updateArgs.consignmentIdIndex.value < updateArgs.consignmentIds.value.length) {\n        updateArgs.consignmentId.value = updateArgs.consignmentIds.value[updateArgs.consignmentIdIndex.value];\n        log.debug('next is consignmentId: ' + updateArgs.consignmentId.value);\n      }\n      else {\n        updateArgs.consignmentId.value = null;\n        log.debug('finished iterating through all the consignmentIds');\n      }\n      return updateArgs;\n    },\n    function executeNext(updatedArgs){\n      log.debug('executing for consignmentId: ' + updatedArgs.consignmentId.value);\n      \n      return fetchAllProductsByConsignment(updatedArgs, connectionInfo, processPagedResults);\n    }\n  );\n</retrievePaginatedResults>\n}\n"], "```"]