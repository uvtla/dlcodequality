[["getAllOpenFiles", "\nfunction getAllOpenFiles() {\n    var result = getWorkingSet(ALL_PANES);\n    _.forEach(_panes, function (pane) {\n        var file = pane.getCurrentlyViewedFile();\n        if (file) {\n            result = _.union(result, [file]);\n        }\n    });\n    return result;\n}\n"], ["LinkReference", "\nfunction LinkReference(properties) {\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            if (properties[keys[i]] != null)\n                this[keys[i]] = properties[keys[i]];\n}\n"], ["add", "\nfunction add (action, meta) {\n    <validateAction>\n    if (typeof action.type === 'undefined') {\n        throw new Error('Expected \"type\" in action')\n    }\n    </validateAction>\n\n    <setupMeta>\n    if (!meta) meta = { }\n\n    var newId = false\n    if (typeof meta.id === 'undefined') {\n        newId = true\n        meta.id = this.generateId()\n    }\n\n    if (typeof meta.time === 'undefined') {\n        meta.time = parseInt(meta.id)\n    }\n\n    if (typeof meta.reasons === 'undefined') {\n        meta.reasons = []\n    } else if (!Array.isArray(meta.reasons)) {\n        meta.reasons = [meta.reasons]\n    }\n    </setupMeta>\n\n    <validateReasons>\n    meta.reasons.forEach(function (reason) {\n        if (typeof reason !== 'string') {\n            throw new Error('Expected \"reasons\" to be strings')\n        }\n    })\n    </validateReasons>\n\n    <processAddition>\n    var log = this\n    this.emitter.emit('preadd', action, meta)\n\n    if (meta.keepLast) {\n        this.removeReason(meta.keepLast, { olderThan: meta })\n        meta.reasons.push(meta.keepLast)\n    }\n    </processAddition>\n\n    <handleNewId>\n    if (meta.reasons.length === 0 && newId) {\n        this.emitter.emit('add', action, meta)\n        this.emitter.emit('clean', action, meta)\n        return Promise.resolve(meta)\n    } else if (meta.reasons.length === 0) {\n        return this.store.byId(meta.id).then(function (result) {\n            if (result[0]) {\n                return false\n            } else {\n                log.emitter.emit('add', action, meta)\n                log.emitter.emit('clean', action, meta)\n                return meta\n            }\n        })\n    } else {\n        return this.store.add(action, meta).then(function (addedMeta) {\n            if (addedMeta === false) {\n                return false\n            } else {\n                log.emitter.emit('add', action, addedMeta)\n                return addedMeta\n            }\n        })\n    }\n    </handleNewId>\n}\n"], ["exclude", "\nfunction exclude(object, props) {\n    const newObject = {};\n\n    Object.keys(object).forEach(function(prop) {\n        if (props.indexOf(prop) === -1) {\n            newObject[prop] = object[prop];\n        }\n    });\n\n    return newObject;\n}\n"], ["onDialogDelete", "\nfunction onDialogDelete() {\n    <confirmDeletion>\n    if (confirm('Are you sure you want remove the dialog?')) {\n    </confirmDeletion>\n        <deleteDialog>\n        QB.chat.dialog.delete(currentDialog._id, function(err, res) {\n            if (err) {\n                console.error(err);\n            } else {\n                console.info('Dialog removed');\n            \n                $('#'+currentDialog._id).remove();\n                delete dialogs[currentDialog._id];\n\n                if(Object.keys(dialogs).length > 0){\n                    triggerDialog(dialogs[Object.keys(dialogs)[0]]._id);\n                } else {\n                    $('#messages-list').empty();\n                }\n            }\n        });\n        </deleteDialog>\n\n        <hideModal>\n        $(\"#update_dialog\").modal(\"hide\");\n        $('#update_dialog .progress').show();\n        </hideModal>\n    }\n}\n"], ["getPeriodo", "\nfunction getPeriodo (periodo) {\n    <validatePeriodo>\n    assert.ok(typeof periodo === 'number' || periodo instanceof Date, '[senadores-viajes]: El periodo ingresado debe ser un n\u00famero o una fecha.')\n\n    if (typeof periodo === 'number') {\n        assert.ok(periodo <= new Date().getFullYear(), '[senadores-viajes]: No se puede consultar por un periodo en el futuro')\n        \n        if (periodo < 2009) {\n            console.warn('[senadores-viajes]: S\u00f3lo se tiene informaci\u00f3n de viajes nacionales posteriores al a\u00f1o 2008, y para viajes internacionales posteriores al 2005')\n        }\n        return periodo\n    }\n    if (periodo instanceof Date) {\n        assert.ok(periodo.getFullYear() <= new Date().getFullYear(), '[senadores-viajes]: No se puede consultar por un periodo en el futuro')\n        return periodo.getFullYear()\n    }\n    </validatePeriodo>\n}\n"], ["registerReactor", "\nfunction registerReactor(forms) {\n    <validateFormsLength>\n    if (forms.length != 5)  {\n        forms.error('#react expects: before/after, fnname, (observed cells), reactorcode');\n    }\n    </validateFormsLength>\n\n    <parseForms>\n    var when = sl.valueOf(forms[1]);\n    var cmds = forms[2];\n    var observed = forms[3];\n    var reactorcode = this.transpileExpression(forms[4]);\n    debug('registering code to be run ' + when + ' one of \"' + cmds + ' invoked on \"' + observed + '\"');\n    </parseForms>\n\n    <checkObservedCells>\n    var source = sl.lexerOf(forms);\n    observed.forEach(function(cell) {\n        var arg = sl.valueOf(cell);\n        if(source.cells.indexOf(arg) === -1) {\n            console.log('warning: reactor function observes \"' + arg +\n                            '\" but \"' + arg + '\" is not a cell');\n        }\n    });\n    </checkObservedCells>\n\n    <setupReactorBinding>\n    cmds.forEach(function(cmdAtom) {\n        var cmdName = sl.valueOf(cmdAtom);\n        if(!source.bindingCode[when][cmdName]) {\n            source.bindingCode[when][cmdName] = [];\n        }\n        source.bindingCode[when][cmdName].push({of: observed, insert: reactorcode});\n    });\n    </setupReactorBinding>\n\n    <finalizeReactor>\n    this.noSemiColon = true;\n    return sl.generated();\n    </finalizeReactor>\n}\n"], ["formatTime", "\nfunction formatTime(lang, input) {\n    <format>\n    var result = input;\n    var matches;\n    var localeTimeString;\n\n    while ((matches = TIME_REGEX.exec(input)) != null) {\n\n        var date = new Date(Date.parse(matches[1]));\n        localeTimeString = date.toLocaleTimeString(lang,\n            {\n                hour: 'numeric',\n                minute: '2-digit'\n            });\n\n        result = result.replace(matches[0], localeTimeString);\n    };\n    return result;\n    </format>\n}\n"], ["loadData", "\nfunction loadData (settings = {}, json = data) {\n    <initializeDataSet>\n    const dataSet = new DataSet(json, settings)\n    dataSet.processData()\n    return dataSet\n    </initializeDataSet>\n}\n"], ["expandOrCollapsePlugins", "\nfunction (selector) {\n    return function () {\n        return this.then(function () {\n            <handleVisibility>\n            \n            if (this.visible(selector + ' .cms-dragbar-expand-all')) {\n                this.click(selector + ' .cms-dragbar-expand-all');\n            } else if (this.visible(selector + ' .cms-dragbar-collapse-all')) {\n                \n                this.click(selector + ' .cms-dragbar-collapse-all');\n                this.wait(100);\n                this.click(selector + ' .cms-dragbar-expand-all');\n            } else {\n                throw new Error('Given placeholder has no plugins');\n            }\n            </handleVisibility>\n        });\n    };\n}\n"], "```\n\nThese annotations identify separate responsibilities in the functions provided. If one function carries out multiple distinctive tasks, they are enclosed in separate tags within the main function's tag to indicate non-compliance with SRP."]