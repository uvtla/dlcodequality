[["checkVar", "\nfunction checkVar(node) {\n  <parseNode>\n  const leftNode = (node.id.typeAnnotation) ? node.id.typeAnnotation : node.id;\n  const rightNode = node.init;\n  </parseNode>\n\n  <checkEqualitySpacing>\n  if (rightNode) {\n    const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, \"=\");\n\n    if (nonSpacedNode) {\n      report(node, nonSpacedNode);\n    }\n  }\n  </checkEqualitySpacing>\n}\n"], ["initializePopup", "\nfunction(id, lonlat, contentSize, contentHTML, anchor, closeBox, closeBoxCallback) {\n\n  this.imageSrc = OpenLayers.Util.getImageLocation('cloud-popup-relative.png');\n  OpenLayers.Popup.Framed.prototype.initialize.apply(this, arguments);\n  this.contentDiv.className = this.contentDisplayClass;\n}\n"], ["createDirectory", "\nfunction mkdir(dir) {\n  return new Promise((resolve, reject) => {\n    <checkDirectoryExistence>\n    fs.lstat(dir, (err, stats) => {\n      \n      if (!err) return stats.isDirectory() ? resolve() : reject(new Error(`${dir} is not a direcotry.`));\n    </checkDirectoryExistence>\n      \n    <createNewDirectory>\n    fs.mkdir(dir, (err) => {\n      err ? reject(err) : resolve();\n    });\n    </createNewDirectory>\n  })\n}\n"], ["Event", "\nfunction Event (type, cancelable) {\n  <setCancelable>\n  if (cancelable) {\n      Object.defineProperty(this, 'cancelable', { value: true, writable: false })\n  }\n  </setCancelable>\n  this.type = type\n}\n"], ["splitOnQuotes", "\nfunction splitOnQuotes (block: string): Array<string> {\n  return splitOnSingleQuotes(block).reduce((blocks, block) => {\n    return blocks.concat(splitOnDoubleQuotes(block))\n  }, [])\n}\n"], ["mergeChannels", "\nfunction merge() {\n  <gatherArguments>\n  for (var _len2 = arguments.length, channels = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    channels[_key2] = arguments[_key2];\n  }\n  </gatherArguments>\n\n  <mergeIntoChannel>\n  return Channel.merge.apply(Channel, [this].concat(channels));\n  </mergeIntoChannel>\n}\n"], ["CruxWatcherInitialization", "\nfunction CruxWatcher(url, options) {\n  <extendEventEmitter>\n  EventEmitter.call(this);\n  </extendEventEmitter>\n  this.url = url;\n  this.started = false;\n  this.fails = null;\n  this.failed = false;\n  if (typeof options !== 'object' || !options) options = {};\n  this.stats = {\n    total: 0,\n    success: 0,\n    failed: 0\n  };\n  this.options = {\n    timeout: options.timeout || 2,\n    timer: options.timer || 10,\n    fails: options.fails || 4,\n    auto_start: options.auto_start || true\n  };\n  <autoStart>\n  if (this.options.auto_start) {\n    this.start();\n  }\n  </autoStart>\n}\n"], ["unsubscribe", "\nfunction unsubscribe(f) {\n  return function () {\n\n    <filterFitties>\n    fitties = fitties.filter(function (_) {\n      return _.element !== f.element;\n    });\n    </filterFitties>\n    \n    <disconnectObserver>\n    if (f.observeMutations) {\n      f.observer.disconnect();\n    }\n    </disconnectObserver>\n    \n    <resetStyle>\n    f.element.style.cssText = f.originalStyle;\n    </resetStyle>\n  };\n}\n"], ["CommandBase", "\nfunction CommandBase(pbRequestName, pbResponseName, callback) {\n  <getProtoBufCodes>\n  var requestCode = ProtoBufFactory.getCodeFor(pbRequestName);\n  this.expectedCode = ProtoBufFactory.getCodeFor(pbResponseName);\n  this.pbBuilder = ProtoBufFactory.getProtoFor(pbRequestName);\n  </getProtoBufCodes>\n\n  <validateCallback>\n  var schema = Joi.func().required();\n  var self = this;\n  Joi.validate(callback, schema, function(err, option) {\n    if (err) {\n        throw new Error('callback is required and must be a function');\n    }\n    self.callback = callback;\n  });\n  </validateCallback>\n \n  <setHeader>\n  this.header = new Buffer(5);\n  this.header.writeUInt8(requestCode, 4);\n  </setHeader>\n  \n  this.remainingTries = 1;\n  \n  <setName>\n  this.name = util.format('%s-%d', pbRequestName, cid);\n  cid++;\n  </setName>\n\n  <validateOptionsMethod>\n  this.validateOptions = function (arg_options, arg_schema, arg_joi_opts) {\n      var self = this;\n      Joi.validate(arg_options, arg_schema, arg_joi_opts, function(err, opts) {\n          if (err) {\n              throw err;\n          }\n          self.options = opts;\n      });\n  };\n  </validateOptionsMethod>\n}\n"], ["validate", "\nfunction(a,b,c){\n  <validateInputType>\n  if(\"string\"!=typeof a&&\"object\"!=typeof a)throw new Error(\"You must validate an object or a string\");\n  </validateInputType>\n\n  <performValidation>\n  return\"string\"==typeof a||g(a)?this._validateString(a,b,c):this.isBinded(a)?this._validateBindedObject(a,b):this._validateObject(a,b,c)}\n  </performValidation>\n}\n"], "```"]