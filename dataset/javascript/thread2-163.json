[["function_markStart", "\nfunction _markStart(id, time) {\n    <validateTest>\n    if (activeTests[id.id]) {\n        console.error(\"Recursive tests with the same id are not supported. Timer id: \" + id.id);\n    }\n    </validateTest>\n\n    <recordStartTime>\n    activeTests[id.id] = { startTime: time };\n    </recordStartTime>\n}\n"], ["function_resolve", "\nfunction _resolve(from, to) {\n    <handleUndefinedParameters>\n    if (typeof to === 'undefined') {\n        to = from;\n        from = void(0);\n    }\n    </handleUndefinedParameters>\n\n    <handleDefaultExtension>\n    if (!path.extname(to)) {\n        to += '.js';\n    }\n    </handleDefaultExtension>\n\n    <returnResolvedPath>\n    return (typeof from === 'undefined') ? path.resolve(to) : path.resolve(from, to);\n    </returnResolvedPath>\n}\n"], ["function_anonymous", "\nfunction (contentType, contentDisposition) {\n    <detectMime>\n    var detected = fileType(this.stream || this.body), \n        source = 'forced',\n        mime;\n    </detectMime>\n    \n    <handleContentDisposition>\n    !contentDisposition && (contentDisposition = this.headers.one('content-disposition'));\n    </handleContentDisposition>\n    <inferContentType>\n    if (!contentType) {\n        contentType = this.headers.one('content-type') && this.headers.one('content-type').value;\n        source = HEADER;\n    }\n    </inferContentType>\n\n    <assignDetectedMimeType>\n    if (!contentType && detected) {\n        contentType = detected.mime;\n        source = BODY;\n    }\n    </assignDetectedMimeType>\n\n    <setDefaultMimeType>\n    if (!contentType) {\n        contentType = 'text/plain';\n        source = 'default';\n    }\n    </setDefaultMimeType>\n\n    <initializeMimeInfo>\n    mime = Response.mimeInfo(contentType, contentDisposition);\n    mime.source = source;\n    mime.detected = detected && Response.mimeInfo(detected.mime, contentDisposition);\n    </initializeMimeInfo>\n\n    <returnMime>\n    return mime;\n    </returnMime>\n}\n"], ["function_core_sha256", "\nfunction core_sha256(m, l)\n{\n    <initializeVariables>\n    var HASH = new Array(1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225);\n    var W = new Array(64);\n    var a, b, c, d, e, f, g, h;\n    var i, j, T1, T2;\n    </initializeVariables>\n\n    \n    <prepareMessageSchedule>\n    m[l >> 5] |= 0x80 << (24 - l % 32);\n    m[((l + 64 >> 9) << 4) + 15] = l;\n    </prepareMessageSchedule>\n\n    <mainHashComputation>\n    for(i = 0; i < m.length; i += 16) {\n      a = HASH[0];\n      b = HASH[1];\n      c = HASH[2];\n      d = HASH[3];\n      e = HASH[4];\n      f = HASH[5];\n      g = HASH[6];\n      h = HASH[7];\n\n      for(j = 0; j < 64; j++)  {\n        if (j < 16) W[j] = m[j + i]; else W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]), sha256_Gamma0256(W[j - 15])), W[j - 16]);\n        T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)), sha256_K[j]), W[j]);\n        T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = safe_add(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = safe_add(T1, T2);\n      }\n\n      HASH[0] = safe_add(a, HASH[0]);\n      HASH[1] = safe_add(b, HASH[1]);\n      HASH[2] = safe_add(c, HASH[2]);\n      HASH[3] = safe_add(d, HASH[3]);\n      HASH[4] = safe_add(e, HASH[4]);\n      HASH[5] = safe_add(f, HASH[5]);\n      HASH[6] = safe_add(g, HASH[6]);\n      HASH[7] = safe_add(h, HASH[7]);\n    }\n    </mainHashComputation>\n\n    <returnFinalHash>\n    return HASH;\n    </returnFinalHash>\n}\n"], ["function_createModalOverlay", "\nfunction createModalOverlay() {\n  <createOverlayStructure>\n  const containerElement = _createModalContainer();\n  const defsElement = document.createElementNS(svgNS, 'defs');\n  const maskContainer = _createMaskContainer();\n  const maskRect = _createMaskRect();\n  const maskOpening = _createMaskOpening();\n  const maskConsumer = _createMaskConsumer();\n\n  maskContainer.appendChild(maskRect);\n  maskContainer.appendChild(maskOpening);\n  defsElement.appendChild(maskContainer);\n  containerElement.appendChild(defsElement);\n  containerElement.appendChild(maskConsumer);\n  </createOverlayStructure>\n\n  <returnOverlay>\n  return containerElement;\n  </returnOverlay>\n}\n"], ["function_processScalarParam", "\nfunction processScalarParam(existedParam: Object, value: Object): Object {\n  <handleArrayParam>\n  if (Array.isArray(existedParam)) {\n    existedParam.push(value);\n    return existedParam;\n  }\n  </handleArrayParam>\n  <handleExistingParam>\n  if (existedParam !== undefined) {\n    return [existedParam, value];\n  }\n  </handleExistingParam>\n  \n  <returnNewValue>\n  return value;\n  </returnNewValue>\n}\n"], ["function_anonymous_2", "\nfunction(value)\n{\n\t<parseReference>\n\tif ( '*' == (value+'').charAt(0) )\n\t{\n\t\tvalue = (value+'').substr(1);\n\t\tif (value.charAt(0) == '#')\n\t\t{\n\t\t\tvalue = value.substr(1, value.indexOf('#') - 1);\n\t\t}\n\n\t\tif (this.refs[value] == undefined)\n\t\t{\n\t\t\tthrow new YamlParseException('Reference \"'+value+'\" does not exist', this.getRealCurrentLineNb() + 1, this.currentLine);\n\t\t}\n\t\treturn this.refs[value];\n\t}\n\t</parseReference>\n\n\t<parseFoldedScalar>\n\tvar matches = null;\n\tif (matches = /^(\\||>)(\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?( +#.*)?$/.exec(value))\n\t{\n\t\tmatches = { separator: matches[1], modifiers: matches[2], comments: matches[3] };\n\t\tvar modifiers = matches.modifiers ? matches.modifiers : '';\n\n\t\treturn this.parseFoldedScalar(matches.separator, modifiers.replace(/\\d+/g, ''), Math.abs(parseInt(modifiers)));\n\t}\n\t</parseFoldedScalar>\n\n\t<parseYamlInline>\n\ttry {\n\t\treturn new YamlInline().parse(value);\n\t} catch (e) {\n\t\tif (e instanceof YamlParseException) {\n\t\t\te.setParsedLine(this.getRealCurrentLineNb() + 1);\n\t\t\te.setSnippet(this.currentLine);\n\t\t}\n\t\tthrow e;\n\t}\n\t</parseYamlInline>\n}\n"], ["function_getPt", "\nfunction getPt(n1, n2, perc)\n{\n    <calculateInterpolatedValue>\n    const diff = n2 - n1;\n    return n1 + (diff * perc);\n    </calculateInterpolatedValue>\n}\n"], ["function_getFunctionName", "\nfunction getFunctionName(aFunction) {\n    <matchFunctionName>\n    var regexpResult = aFunction.toString().match(/function (\\w*)/);\n    if (regexpResult && regexpResult[1]) {\n        return regexpResult[1];\n    }\n    </matchFunctionName>\n\n    <handleAnonymousFunction>\n    return 'anonymous';\n    </handleAnonymousFunction>\n}\n"], ["function_buildButtonDef", "\nfunction buildButtonDef(trumbowyg) {\n    <defineButton>\n    return {\n        fn: function () {\n            var $modal = trumbowyg.openModal('Code', [\n                <modalContentSetup>\n                '<div class=\"' + trumbowyg.o.prefix + 'highlight-form-group\">',\n                '   <select class=\"' + trumbowyg.o.prefix + 'highlight-form-control language\">',\n                (function () {\n                    var options = '';\n\n                    for (var lang in Prism.languages) {\n                        if (Prism.languages.hasOwnProperty(lang)) {\n                            options += '<option value=\"' + lang + '\">' + lang + '</option>';\n                        }\n                    }\n\n                    return options;\n                })(),\n                '   </select>',\n                '</div>',\n                '<div class=\"' + trumbowyg.o.prefix + 'highlight-form-group\">',\n                '   <textarea class=\"' + trumbowyg.o.prefix + 'highlight-form-control code\"></textarea>',\n                '</div>',\n                '</modalContentSetup>'\n            ].join('\\n')),\n            $language = $modal.find('.language'),\n            $code = $modal.find('.code');\n\n            \n            <eventConfirm>\n            $modal.on('tbwconfirm', function () {\n                trumbowyg.restoreRange();\n                trumbowyg.execCmd('insertHTML', highlightIt($code.val(), $language.val()));\n                trumbowyg.execCmd('insertHTML', '<p><br></p>');\n\n                trumbowyg.closeModal();\n            });\n            </eventConfirm>\n\n            <eventCancel>\n            $modal.on('tbwcancel', function () {\n                trumbowyg.closeModal();\n            });\n            </eventCancel>\n        }\n    };\n    </defineButton>\n}\n"], ""]