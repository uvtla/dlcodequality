```javascript
<setRaspberryVersion>
function setRaspberryVersion() {
    if (currentPins) {
        return Promise.resolve();
    }

    return new Promise(function(resolve, reject) {
        <readFile>
        fs.readFile('/proc/cpuinfo', 'utf8', function(err, data) {
            if (err) {
                return reject(err);
            }
        </readFile>

        <parseRevisionNumber>
        var match = data.match(/Revision\s*:\s*[0-9a-f]*([0-9a-f]{4})/);

        if (!match) {
            var errorMessage = 'Unable to match Revision in /proc/cpuinfo: ' + data;
            return reject(new Error(errorMessage));
        }

        var revisionNumber = parseInt(match[1], 16);
        </parseRevisionNumber>

        <determinePinVersion>
        var pinVersion = (revisionNumber < 4) ? 'v1' : 'v2';
        </determinePinVersion>

        <debugInfo>
        debug(
            'seen hardware revision %d; using pin mode %s',
            revisionNumber,
            pinVersion
        );
        </debugInfo>

        <updateCurrentPins>
        currentValidBcmPins = []
        Object.keys(PINS[pinVersion]).forEach(
            function(pin) {
                
                currentValidBcmPins.push(PINS[pinVersion][pin]);
            }
        );

        currentPins = PINS[pinVersion];
        </updateCurrentPins>

        return resolve();
    });
});
</setRaspberryVersion>

<hashingProcess>
function (doFlush) {
    
    var data = this._data;
    var dataWords = data.words;
    var dataSigBytes = data.sigBytes;
    var blockSize = this.blockSize;
    var blockSizeBytes = blockSize * 4;

    
    <calculateBlocksReady>
    var nBlocksReady = dataSigBytes / blockSizeBytes;
    if (doFlush) {
        nBlocksReady = Math.ceil(nBlocksReady);
    } else {
        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
    }
    </calculateBlocksReady>

    <prepareForProcessing>
    var nWordsReady = nBlocksReady * blockSize;
    var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
    </prepareForProcessing>

    <processData>
    if (nWordsReady) {
        for (var offset = 0; offset < nWordsReady; offset += blockSize) {
            this._doProcessBlock(dataWords, offset);
        }

        var processedWords = dataWords.splice(0, nWordsReady);
        data.sigBytes -= nBytesReady;
    }
    </processData>

    <outputResult>
    return new WordArray.init(processedWords, nBytesReady);
    </outputResult>
</hashingProcess>

<onFrameNavigated>
function _onFrameNavigated(event, res) {
    
    if (!res.frame.parentId) {
        exports.url = _cleanURL(res.frame.url);
    }
}
</onFrameNavigated>

<printStack>
function printStack(err) {
    if (err && err.stack) {
        console.error(err.stack);
    }
    else {
        console.log(err);
    }
}
</printStack>

<handleMouseEvent>
function (evt) {
    if (this.mouseDown && (!this.lastUp || !this.lastUp.equals(evt.xy))) {
        if(this.stoppedDown && this.freehandMode(evt)) {
            if (this.persist) {
                this.destroyPersistedFeature();
            }
            this.removePoint();
            this.finalize();
        } else {
            if (this.passesTolerance(this.lastDown, evt.xy,
                                        this.pixelTolerance)) {
                if (this.touch) {
                    this.modifyFeature(evt.xy);
                }
                if(this.lastUp == null && this.persist) {
                    this.destroyPersistedFeature();
                }
                this.addPoint(evt.xy);
                this.lastUp = evt.xy;
                if(this.line.geometry.components.length === this.maxVertices + 1) {
                    this.finishGeometry();
                }
            }
        }
    }
    this.stoppedDown = this.stopDown;
    this.mouseDown = false;
    return !this.stopUp;
}
</handleMouseEvent>

<limitLetterbox>
function() {
    return function limitLetterbox(params) {
      if(params.width <= 0 || params.height <= 0) {
        return params;
      }
      var viewportAspectRatio = params.width / params.height;

      <calculateFullWidthHeightZoom>
      var fullWidthZoom = 1.0;
      var fullHeightZoom = viewportAspectRatio / params.mediaAspectRatio;
      </calculateFullWidthHeightZoom>

      <adjustZoomBasedOnAspectRatio>
      
      if (params.mediaAspectRatio >= viewportAspectRatio) {
        params.zoom = Math.min(params.zoom, fullWidthZoom);
      }

      if (params.mediaAspectRatio <= viewportAspectRatio) {
        params.zoom = Math.min(params.zoom, fullHeightZoom);
      }
      </adjustZoomBasedOnAspectRatio>

      
      
      var minX, maxX;
      if (params.zoom > fullWidthZoom) {
        minX = maxX = 0.5;
      } else {
        <calculateMinMaxX>
        minX = 0.0 + 0.5 * params.zoom / fullWidthZoom;
        maxX = 1.0 - 0.5 * params.zoom / fullWidthZoom;
        </calculateMinMaxX>
      }

      
      
      var minY, maxY;
      if (params.zoom > fullHeightZoom) {
        minY = maxY = 0.5;
      } else {
        <calculateMinMaxY>
        minY = 0.0 + 0.5 * params.zoom / fullHeightZoom;
        maxY = 1.0 - 0.5 * params.zoom / fullHeightZoom;
        </calculateMinMaxY>
      }

      <clampParameters>
      params.x = clamp(params.x, minX, maxX);
      params.y = clamp(params.y, minY, maxY);
      </clampParameters>

      return params;
    };
  }
</limitLetterbox>

<setPermissions>
function(permissions, negative) {
            if (!negative) {
                negative = false;
            }
            if (permissions !== null && Array.isArray(permissions)) {
                if (negative) {
                    this.permissions.exclude = permissions;
                } else {
                    this.permissions.include = permissions;
                }
            }
        }
</setPermissions>

<initializeComponent>
function(layer, lonlat, data) {
    this.layer = layer;
    this.lonlat = lonlat;
    this.data = (data != null) ? data : {};
    this.id = OpenLayers.Util.createUniqueID(this.CLASS_NAME + "_"); 
}
</initializeComponent>

<configureBuilder>
function (flagOrBuilder) {
        if (_.isFunction(flagOrBuilder)) {
            this.object(flagOrBuilder);
        }

        if (flagOrBuilder == null || flagOrBuilder) {
            this.isArray = true;
        } else {
            delete this.isArray;
        }

        return this;
    }
</configureBuilder>

<serverConfiguration>
function(options, section, option, value) {
    var req = {url: this.urlPrefix + "/_config/"};
    if (section) {
        req.url += encodeURIComponent(section) + "/";
        if (option) {
            req.url += encodeURIComponent(option);
        }
    }
    if (value === null) {
        req.type = "DELETE";        
    } else if (value !== undefined) {
        <prepareRequest>
        req.type = "PUT";
        req.data = toJSON(value);
        req.contentType = "application/json";
        req.processData = false
        </prepareRequest>
    }

    <sendAjaxRequest>
    ajax(req, options,
        "An error occurred retrieving/updating the server configuration"
    );
    </sendAjaxRequest>
}
</serverConfiguration>
```