<addGlobalHandler>
function addGlobalHandler(eventType, handler, thisObject){
    var handlers = globalHandlers[eventType];
    if (handlers)
    {
      
      for (var i = 0, item; item = handlers[i]; i++)
        if (item.handler === handler && item.thisObject === thisObject)
          return;
    }
    else
    {
      if (noCaptureScheme)
        
        addHandler(document, eventType, $null);
      else
        document.addEventListener(eventType, observeGlobalEvents, true);

      handlers = globalHandlers[eventType] = [];
    }

    
    handlers.push({
      handler: handler,
      thisObject: thisObject
    });
  }
</addGlobalHandler>

<PreparedStatementError>
function PreparedStatementError(error, ps) {
    const temp = Error.apply(this, arguments);
    temp.name = this.name = 'PreparedStatementError';
    this.stack = temp.stack;
    if (error instanceof npm.QueryFileError) {
        this.error = error;
        <setMessage>
        this.message = 'Failed to initialize \'text\' from a QueryFile.';
        </setMessage>
    } else {
        <setMessage>
        this.message = error;
        </setMessage>
    }
    this.result = ps;
}
</PreparedStatementError>

<anonymous>
function(node, propertyType) {
			var context = this,
				children = [],
				out = [],
				child,
				x,
				i;
  
			<getChildren>
			children = modules.domUtils.getChildren( node );
			</getChildren>

			<processingLoop>
			x = 0;
			i = children.length;
			while(x < i) { 
				child = children[x];
				var value = null;
				if(modules.domUtils.hasAttributeValue(child, 'class', 'value')) {
					switch(propertyType) { 
					case 'p': 
						value = context.getPValue(child, false);
						break;
					case 'u':
						value = context.getUValue(child, false);
						break;
					case 'dt':
						value = context.getDTValue(child, '', null, false);
						break;
					} 
					if(value) {
						out.push(modules.utils.trim(value));
					}
				}
				x++;
			}
			</processingLoop>
			
			<handleOutput>
			if(out.length > 0) {
				if(propertyType === 'p') {
					return modules.text.parseText( this.document, out.join(''), this.options.textFormat);
				}
				if(propertyType === 'u') {
					return out.join('');
				}
				if(propertyType === 'dt') {
					var format = 'microformat2';
					return modules.dates.concatFragments(out,format).toString(format);
				}
			} else {
				return null;
			}
			</handleOutput>
		}
</anonymous>

<anonymous>
function() {
        if (!this.type) {
            <setDefaultType>
            this.type = google.maps.MapTypeId.ROADMAP;
            </setDefaultType>
        }
        var mapObject;
        var cache = OpenLayers.Layer.Google.cache[this.map.id];
        if (cache) {
            
            <useCache>
            mapObject = cache.mapObject;
            
            ++cache.count;
            </useCache>
        } else {
            
            
            <createMapObject>
            var center = this.map.getCenter();
            var container = document.createElement('div');
            container.className = "olForeignContainer";
            container.style.width = '100%';
            container.style.height = '100%';
            mapObject = new google.maps.Map(container, {
                center: center ?
                    new google.maps.LatLng(center.lat, center.lon) :
                    new google.maps.LatLng(0, 0),
                zoom: this.map.getZoom() || 0,
                mapTypeId: this.type,
                disableDefaultUI: true,
                keyboardShortcuts: false,
                draggable: false,
                disableDoubleClickZoom: true,
                scrollwheel: false,
                streetViewControl: false
            });
            var googleControl = document.createElement('div');
            googleControl.style.width = '100%';
            googleControl.style.height = '100%';
            mapObject.controls[google.maps.ControlPosition.TOP_LEFT].push(googleControl);
            
            
            
            cache = {
                googleControl: googleControl,
                mapObject: mapObject,
                count: 1
            };
            OpenLayers.Layer.Google.cache[this.map.id] = cache;
            </createMapObject>
        }
        <setVisibility>
        this.mapObject = mapObject;
        this.setGMapVisibility(this.visibility);
        </setVisibility>
    }
</anonymous>

<resolverMiddleware>
function resolverMiddleware (resolver) {
  return function (req, res, next) {
    try {
      const { source, args, context, info } = req
      const nonCircularReq = _.omit(req, [ 'context' ])
      <constructContext>
      const ctx = _.assign({}, context, { req: nonCircularReq, res, next })
      </constructContext>
      <resolveValue>
      const value = resolver(source, args, ctx, info)
      </resolveValue>

      
      <handlePromise>
      return Promise.resolve(value)
        .then(result => {
          req.result = result
          return next()
        })
        .catch(next)
      </handlePromise>
    } catch (err) {
      <handleError>
      return next(err)
      </handleError>
    }
  }
}
</resolverMiddleware>

<logOutput>
function(lvl, clientId, options) {
  if (npmlog.levels[npmlog.level] <= npmlog.levels[lvl]) {
    <logHeader>
    npmlog.log(lvl, clientId, HEADER_BANNER);
    npmlog.log(lvl, clientId, '| IBM MQ Light Node.js Client Module -',
               options.title);
    npmlog.log(lvl, clientId, HEADER_BANNER);
    </logHeader>
    <logDetails>
    npmlog.log(lvl, clientId, '| Date/Time         :-',
               moment().format('ddd MMMM DD YYYY HH:mm:ss.SSS Z'));
    npmlog.log(lvl, clientId, '| Host Name         :-', os.hostname());
    npmlog.log(lvl, clientId, '| Operating System  :-',
               os.type(), os.release());
    npmlog.log(lvl, clientId, '| Architecture      :-',
               os.platform(), os.arch());
    npmlog.log(lvl, clientId, '| Node Version      :-', process.version);
    npmlog.log(lvl, clientId, '| Node Path         :-', process.execPath);
    npmlog.log(lvl, clientId, '| Node Arguments    :-', process.execArgs);
    if (!isWin) {
      npmlog.log(lvl, clientId, '| User Id           :-', process.getuid());
      npmlog.log(lvl, clientId, '| Group Id          :-', process.getgid());
    }
    npmlog.log(lvl, clientId, '| Name              :-', pkg.name);
    npmlog.log(lvl, clientId, '| Version           :-', pkg.version);
    npmlog.log(lvl, clientId, '| Description       :-', pkg.description);
    npmlog.log(lvl, clientId, '| Installation Path :-', __dirname);
    npmlog.log(lvl, clientId, '| Uptime            :-', process.uptime());
    npmlog.log(lvl, clientId, '| Log Level         :-', npmlog.level);
    npmlog.log(lvl, clientId, '| Data Size         :-', dataSize);
    if ('fnc' in options) {
      npmlog.log(lvl, clientId, '| Function          :-', options.fnc);
    }
    if ('probeId' in options) {
      npmlog.log(lvl, clientId, '| Probe Id          :-', options.probeId);
    }
    if ('ffdcSequence' in options) {
      npmlog.log(lvl, clientId, '| FFDCSequenceNumber:-',
                 options.ffdcSequence++);
    }
    if (potentialUnwinds !== 0) {
      npmlog.log(lvl, clientId, '| potentialUnwinds  :-', potentialUnwinds);
    }
    </logDetails>
    <logFooter>
    npmlog.log(lvl, clientId, HEADER_BANNER);
    if ('fnc' in options && options.fnc.indexOf('SIG') == 0) {
      npmlog.log(lvl, clientId, '(Set MQLIGHT_NODE_NO_HANDLER to ' +
                 'disable user requested FFDCs)');
    }
    npmlog.log(lvl, clientId, '');
    </logFooter>
  }
}
</logOutput>

<RuleConfig>
function (rules, options) {
    <initializeRules>
    this.rules = new Config(rules, options);
    </initializeRules>
    <initializeParser>
    this.parser = new Parser();
    </initializeParser>
    <initializeInlineConfig>
    this.inlineConfig = new InlineConfig(this.rules);
    </initializeInlineConfig>
}
</RuleConfig>

<bindAll>
function bindAll(object) {
      <collectFunctions>
      var funcs = arguments.length > 1 ? concat.apply(arrayRef, nativeSlice.call(arguments, 1)) : functions(object),
          index = -1,
          length = funcs.length;
      </collectFunctions>

      <bindFunctions>
      while (++index < length) {
        var key = funcs[index];
        object[key] = bind(object[key], object);
      }
      </bindFunctions>
      return object;
    }
</bindAll>

<actPolyfill>
function actPolyfill(cb) {
  <batchedUpdates>
  ReactDOM.unstable_batchedUpdates(cb)
  </batchedUpdates>
  <forceUpdate>
  ReactDOM.render(<div />, document.createElement('div'))
  </forceUpdate>
}
</actPolyfill>

<urlJoin>
function urlJoin() {
    var args = Array.prototype.slice.call(arguments),
        prefixDoubleSlash = false,
        url;

    <handleEmptyArgument>
    if (args[0] === '') {
        args.shift();
    }
    </handleEmptyArgument>

    <handleDoubleSlash>
    if (args[0].indexOf('//') === 0) {
        prefixDoubleSlash = true;
    }
    </handleDoubleSlash>

    <joinArguments>
    url = args.join('/');
    </joinArguments>

    <replaceAllDoubleSlashes>
    url = url.replace(/(^|[^:])\/\/+/g, '$1/');
    </replaceAllDoubleSlashes>

    <prependDoubleSlashIfNecessary>
    if (prefixDoubleSlash) {
        url = '//'+ url.replace(/^\/+/, '');
    }
    </prependDoubleSlashIfNecessary>

    <deduplicateSubDir>
    url = deduplicateSubDir(url);
    </deduplicateSubDir>
    return url;
}
</urlJoin>